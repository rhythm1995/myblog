{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/materialized/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/materialized/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1},{"_id":"themes/materialized/source/images/favicon.png","path":"images/favicon.png","modified":1,"renderable":1},{"_id":"themes/materialized/source/images/grey.png","path":"images/grey.png","modified":1,"renderable":1},{"_id":"themes/materialized/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/materialized/source/images/banner.png","path":"images/banner.png","modified":1,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/LICENSE.txt","path":"fonts/roboto/LICENSE.txt","modified":1,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Black.woff2","path":"fonts/roboto/Roboto-Black.woff2","modified":1,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Bold.woff2","path":"fonts/roboto/Roboto-Bold.woff2","modified":1,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Light.woff2","path":"fonts/roboto/Roboto-Light.woff2","modified":1,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Medium.woff2","path":"fonts/roboto/Roboto-Medium.woff2","modified":1,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Regular.woff2","path":"fonts/roboto/Roboto-Regular.woff2","modified":1,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Thin.woff2","path":"fonts/roboto/Roboto-Thin.woff2","modified":1,"renderable":1},{"_id":"themes/materialized/source/icons/custom-icons/iconfont.ttf","path":"icons/custom-icons/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/materialized/source/icons/custom-icons/iconfont.eot","path":"icons/custom-icons/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/materialized/source/icons/custom-icons/iconfont.woff","path":"icons/custom-icons/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/materialized/source/icons/custom-icons/iconfont.svg","path":"icons/custom-icons/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/materialized/source/icons/custom-icons/iconfont.woff2","path":"icons/custom-icons/iconfont.woff2","modified":1,"renderable":1},{"_id":"themes/materialized/source/icons/material-icons/LICENSE.txt","path":"icons/material-icons/LICENSE.txt","modified":1,"renderable":1},{"_id":"themes/materialized/source/icons/material-icons/MaterialIcons-Regular.ijmap","path":"icons/material-icons/MaterialIcons-Regular.ijmap","modified":1,"renderable":1},{"_id":"themes/materialized/source/icons/material-icons/MaterialIcons-Regular.woff","path":"icons/material-icons/MaterialIcons-Regular.woff","modified":1,"renderable":1},{"_id":"themes/materialized/source/images/random/material-10.png","path":"images/random/material-10.png","modified":1,"renderable":1},{"_id":"themes/materialized/source/icons/material-icons/MaterialIcons-Regular.woff2","path":"icons/material-icons/MaterialIcons-Regular.woff2","modified":1,"renderable":1},{"_id":"themes/materialized/source/images/random/material-12.png","path":"images/random/material-12.png","modified":1,"renderable":1},{"_id":"themes/materialized/source/images/random/material-17.png","path":"images/random/material-17.png","modified":1,"renderable":1},{"_id":"themes/materialized/source/images/random/material-19.png","path":"images/random/material-19.png","modified":1,"renderable":1},{"_id":"themes/materialized/source/images/random/material-3.png","path":"images/random/material-3.png","modified":1,"renderable":1},{"_id":"themes/materialized/source/images/random/material-4.png","path":"images/random/material-4.png","modified":1,"renderable":1},{"_id":"themes/materialized/source/images/random/material-6.png","path":"images/random/material-6.png","modified":1,"renderable":1},{"_id":"themes/materialized/source/images/random/material-8.png","path":"images/random/material-8.png","modified":1,"renderable":1},{"_id":"themes/materialized/source/images/random/material-9.png","path":"images/random/material-9.png","modified":1,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Black.woff","path":"fonts/roboto/Roboto-Black.woff","modified":1,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-BlackItalic.woff","path":"fonts/roboto/Roboto-BlackItalic.woff","modified":1,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-BlackItalic.woff2","path":"fonts/roboto/Roboto-BlackItalic.woff2","modified":1,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Bold.woff","path":"fonts/roboto/Roboto-Bold.woff","modified":1,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-BoldItalic.woff2","path":"fonts/roboto/Roboto-BoldItalic.woff2","modified":1,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Light.woff","path":"fonts/roboto/Roboto-Light.woff","modified":1,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-BoldItalic.woff","path":"fonts/roboto/Roboto-BoldItalic.woff","modified":1,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-LightItalic.woff","path":"fonts/roboto/Roboto-LightItalic.woff","modified":1,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Medium.woff","path":"fonts/roboto/Roboto-Medium.woff","modified":1,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-LightItalic.woff2","path":"fonts/roboto/Roboto-LightItalic.woff2","modified":1,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-MediumItalic.woff","path":"fonts/roboto/Roboto-MediumItalic.woff","modified":1,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-MediumItalic.woff2","path":"fonts/roboto/Roboto-MediumItalic.woff2","modified":1,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-RegularItalic.woff","path":"fonts/roboto/Roboto-RegularItalic.woff","modified":1,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Regular.woff","path":"fonts/roboto/Roboto-Regular.woff","modified":1,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-RegularItalic.woff2","path":"fonts/roboto/Roboto-RegularItalic.woff2","modified":1,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-ThinItalic.woff","path":"fonts/roboto/Roboto-ThinItalic.woff","modified":1,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-ThinItalic.woff2","path":"fonts/roboto/Roboto-ThinItalic.woff2","modified":1,"renderable":1},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Thin.woff","path":"fonts/roboto/Roboto-Thin.woff","modified":1,"renderable":1},{"_id":"themes/materialized/source/images/random/material-1.png","path":"images/random/material-1.png","modified":1,"renderable":1},{"_id":"themes/materialized/source/images/random/material-11.png","path":"images/random/material-11.png","modified":1,"renderable":1},{"_id":"themes/materialized/source/images/random/material-13.png","path":"images/random/material-13.png","modified":1,"renderable":1},{"_id":"themes/materialized/source/images/random/material-15.png","path":"images/random/material-15.png","modified":1,"renderable":1},{"_id":"themes/materialized/source/images/random/material-14.png","path":"images/random/material-14.png","modified":1,"renderable":1},{"_id":"themes/materialized/source/images/random/material-16.png","path":"images/random/material-16.png","modified":1,"renderable":1},{"_id":"themes/materialized/source/images/random/material-2.png","path":"images/random/material-2.png","modified":1,"renderable":1},{"_id":"themes/materialized/source/images/random/material-18.png","path":"images/random/material-18.png","modified":1,"renderable":1},{"_id":"themes/materialized/source/images/random/material-5.png","path":"images/random/material-5.png","modified":1,"renderable":1},{"_id":"themes/materialized/source/js/mdui.js","path":"js/mdui.js","modified":1,"renderable":1},{"_id":"themes/materialized/source/images/random/material-7.png","path":"images/random/material-7.png","modified":1,"renderable":1},{"_id":"themes/materialized/source/css/mdui.css","path":"css/mdui.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"source/plugs/hexo-prettify-highlight/js/prettify.js","path":"plugs/hexo-prettify-highlight/js/prettify.js","modified":0,"renderable":0},{"_id":"source/plugs/hexo-prettify-highlight/js/jquery-2.2.4.min.js","path":"plugs/hexo-prettify-highlight/js/jquery-2.2.4.min.js","modified":0,"renderable":0}],"Cache":[{"_id":"themes/material/.eslintrc.json","hash":"83ddc0cdc18f28b967795b8dac0421a52cdf7ece","modified":1590120402841},{"_id":"themes/material/.gitignore","hash":"0478a2db8436d9ac2558042b75d03962d5db057a","modified":1590130159069},{"_id":"themes/material/.travis.yml","hash":"10a09fe2b341ccad5b97d4bd9cc2c1c03e1863a3","modified":1590109770878},{"_id":"themes/material/CONTRIBUTING.md","hash":"148f555e47d4725fe1faac775107a4d7b03f7136","modified":1590109770878},{"_id":"themes/material/CONTRIBUTING.zh-cn.md","hash":"ef3ccef0451d6ac616b3a35fbfedb6abd35e6b41","modified":1590109770878},{"_id":"themes/material/LICENSE","hash":"12d81f50767d4e09aa7877da077ad9d1b915d75b","modified":1590109770879},{"_id":"themes/material/README.md","hash":"830b2e0b40d92015821bb189cfe3e4f3b1ac1e2a","modified":1590119112349},{"_id":"themes/material/_config.template.yml","hash":"ead5c39f50731b5a6a8035b12b9cdf2c7a4e9dfb","modified":1590119045853},{"_id":"themes/material/_config.yml","hash":"c67f5f52cd083f3ca0c597aa0d8719b9da3502de","modified":1590129123143},{"_id":"themes/material/contributing.json","hash":"1bc0871b1c7822b82533b614090ac0ab7c55282c","modified":1590109770880},{"_id":"themes/material/lint.sh","hash":"49c3a65f8ca65754ec7fefcd2dcb6adc187f3856","modified":1590109770929},{"_id":"themes/material/package.json","hash":"7b298b920dad2d1c3bbb697ac7b05fb685ddc4ab","modified":1590124814067},{"_id":"source/_drafts/e4-bb-8e-e9-9b-b6-e5-bc-80-e5-a7-8b-e5-89-8d-e7-ab-af-e6-9e-b6-e6-9e-841-ef-bc-9a-e7-8e-b0-e4-bb-a3-e5-89-8d-e7-ab-af-e5-b7-a5-e4-bd-9c-e6-b5-81.md","hash":"1778a4de256d0f5d754bebd3ee70a9695fcda5aa","modified":1589877235939},{"_id":"source/_drafts/为什么事业单位和当公务员毫无吸引力.md","hash":"17e6afd3d52723b4078274e284e7187743d56de5","modified":1589877235939},{"_id":"source/_drafts/使用javascript描述数据结构——树.md","hash":"9181b2be18a7e27e8e64b48d26ab0bca3cd21b0f","modified":1589878288566},{"_id":"source/_posts/2016-11-2-e8-ae-b0-e4-b8-80-e6-ac-a1-e9-bb-91-e5-ae-a2-e6-9d-be.md","hash":"339d5402c83f2a92771386b210f6ac6dcf27510b","modified":1589878288570},{"_id":"source/_posts/243.md","hash":"c05dce12521fb66b95969d5151e42d666fca013c","modified":1589877235927},{"_id":"source/_posts/360-e6-a0-a1-e6-8b-9b-e9-9d-a2-e8-af-95.md","hash":"5b8fd96a4ff8b5a656562c1636b983522c3e1a03","modified":1589879532014},{"_id":"source/_posts/ajax-e5-85-a8-e6-8f-ad-e7-a7-98.md","hash":"3e5f71bfe90a5718caa640860dde52364327d57f","modified":1590129475280},{"_id":"source/_posts/e4-b8-80-e4-b8-aa-e7-ae-80-e6-98-93-e7-95-99-e8-a8-80-e6-9d-bf.md","hash":"3d00c0ee0fde697850ba86d1e809d6ef3623c4c4","modified":1589877235925},{"_id":"source/_posts/e4-b8-80-e4-ba-9b-e9-93-be-e6-8e-a5.md","hash":"92d018d76e1fb81ff3a8bc1b10b1530526994e90","modified":1589878288807},{"_id":"source/_posts/e4-ba-94-e7-a7-8djavascript-e4-bb-a3-e7-a0-81-e7-9a-84-e4-bc-98-e5-8c-96-e6-96-b9-e5-bc-8f.md","hash":"380f3a9af939d1dc949ddbfa351068c97ddf777c","modified":1589880268402},{"_id":"source/_posts/e4-bd-bf-e7-94-a8gulp-e5-87-8f-e5-b0-91http-e8-af-b7-e6-b1-82.md","hash":"a99cdc6dd4212572161c94472d5ee33ff64d932e","modified":1589878288571},{"_id":"source/_posts/e4-bd-bf-e7-94-a8javascript-e6-8f-8f-e8-bf-b0-e6-95-b0-e6-8d-ae-e7-bb-93-e6-9e-84-e6-a0-88-e5-92-8c-e9-98-9f-e5-88-97.md","hash":"0748940865c1299515f9c73252d789ec6bd7d773","modified":1589880325758},{"_id":"source/_posts/e4-bd-bf-e7-94-a8web-worker.md","hash":"0168fd4953ec61a6a4a95fa5055573714615f1e3","modified":1589880300877},{"_id":"source/_posts/e5-85-b3-e4-ba-8e-e6-88-91.md","hash":"336e3cceb7d574c77c83165984b02905d2da567a","modified":1589877235925},{"_id":"source/_posts/e5-89-8d-e7-ab-af-e4-bb-a3-e7-a0-81-e9-a3-8e-e6-a0-bc-e6-8c-87-e5-8d-97-css-e7-af-87.md","hash":"3d34da0e64d708ad9b095825476fed5f8148ea74","modified":1589877235927},{"_id":"source/_posts/e5-89-8d-e7-ab-af-e4-bb-a3-e7-a0-81-e9-a3-8e-e6-a0-bc-e6-8c-87-e5-8d-97-javascript-e7-af-87.md","hash":"fcedba8c38ecef53a3aeab2d92af2bd8e20bb43d","modified":1589877235929},{"_id":"source/_posts/e5-89-8d-e7-ab-af-e4-bb-a3-e7-a0-81-e9-a3-8e-e6-a0-bc-e6-8c-87-e5-8d-97-vue-e7-af-87.md","hash":"008b4421a5d4e3ddad887765e32b0a958b88ab81","modified":1589877235927},{"_id":"source/_posts/e5-89-8d-e7-ab-af-e5-ae-89-e5-85-a8-e5-b0-8f-e7-bb-93.md","hash":"1fcd2b9b6928f4e95ef2e6a45748fb4b86004167","modified":1589877235926},{"_id":"source/_posts/e5-89-8d-e7-ab-af-e6-97-a5-e5-bf-97-e5-b7-a5-e5-85-b7logrocket-e5-85-a5-e9-97-a8-e7-ae-80-e4-bb-8b.md","hash":"1189171d3ee6c6c5ecd1af247ccfcbf696dfd264","modified":1589877235926},{"_id":"source/_posts/e5-8d-8f-e5-90-8c-e8-bf-87-e6-bb-a4-e7-ae-97-e6-b3-95.md","hash":"1c81649c497a800cc3667959979ac7fc4f40ea8a","modified":1589878288572},{"_id":"source/_posts/e5-93-88-e5-a4-ab-e6-9b-bc-e6-a0-91-e4-b8-8e-e5-93-88-e5-a4-ab-e6-9b-bc-e7-bc-96-e7-a0-81-e5-99-a8-ef-bc-88python-e5-ae-9e-e7-8e-b0-ef-bc-89.md","hash":"b28282ef8d76507882ed8c84dbb5b58b61a35fa5","modified":1589878288807},{"_id":"source/_posts/e5-9f-ba-e4-ba-8e-e5-be-ae-e6-9c-8d-e5-8a-a1-e7-9a-84-e4-b8-80-e6-ac-be-e5-af-b9-e7-9b-91-e6-8e-a7-e5-b9-b3-e5-8f-b0-e7-9a-84-e6-bc-94-e8-bf-9b-trashed.md","hash":"432e287256bd112060d130a49058dea1ed0981a6","modified":1590050231019},{"_id":"source/_posts/e5-a4-a7-e4-ba-8c-e5-b0-8f-e7-bb-93.md","hash":"460348424407c60258f862ce3624bbc6388dc9c4","modified":1589878288807},{"_id":"source/_posts/e5-b0-86-e9-a1-b9-e7-9b-ae-e4-bb-8e-github-e9-83-a8-e7-bd-b2-e5-88-b0-e6-9c-8d-e5-8a-a1-e5-99-a8.md","hash":"c18e10281eb2d52f216d3a962f4d8ec75355e6d6","modified":1589877235922},{"_id":"source/_posts/e6-90-9c-e7-8b-90-e5-a4-a7-e6-95-b0-e6-8d-ae-e4-b8-ad-e5-bf-83-e5-89-8d-e7-ab-af-e9-9d-a2-e8-af-95.md","hash":"42150b583f52e3a0c74bf99fa2c2dfc23bf7dc60","modified":1589877235929},{"_id":"source/_posts/e6-93-8d-e4-bd-9c-e6-97-a5-e5-bf-97-e7-9a-84-e6-84-8f-e4-b9-89.md","hash":"f777eb708fe179bd8616d5821b9364d4acf27f79","modified":1589878288807},{"_id":"source/_posts/e6-93-8d-e4-bd-9c-e7-b3-bb-e7-bb-9f-e5-a4-84-e7-90-86-e5-99-a8-e8-b0-83-e5-ba-a6-e7-ac-94-e8-ae-b0.md","hash":"0ea156f8e129b1d5a7e08f5f910fdddda456e6e2","modified":1589878288569},{"_id":"source/_posts/e6-95-b0-e6-8d-ae-e5-ba-93-e8-8c-83-e5-bc-8f.md","hash":"1b4fbc3bd5b35897f6d91fc2841fbd19b2343b03","modified":1589877235926},{"_id":"source/_posts/e6-95-b0-e6-8d-ae-e6-8c-96-e6-8e-98-e5-86-85-e5-ae-b9-e8-bf-87-e6-bb-a4.md","hash":"6eb9e49b2ccfe0356e0e3c4d5126056650ce62d2","modified":1589878214391},{"_id":"source/_posts/e6-97-b6-e5-ba-8f-e6-95-b0-e6-8d-ae-e5-ba-93influxdb-e5-85-a5-e9-97-a8.md","hash":"5874d5f571e156dfbb3ef720ecf9cfc480fec3d2","modified":1590048988570},{"_id":"source/_posts/e6-a8-a1-e6-9d-bf-e5-bc-95-e6-93-8e-e5-8e-9f-e7-90-86-e5-8f-8a-e9-83-a8-e5-88-86-e5-ae-9e-e7-8e-b0.md","hash":"05e64c76adb4ebf389dad7615ce042159ef8326d","modified":1589878288570},{"_id":"source/_posts/e6-ad-a3-e5-88-99-e8-a1-a8-e8-be-be-e5-bc-8f-e6-80-bb-e7-bb-93.md","hash":"69019a62e659bc238927cfc8be27bd63d00ad3a2","modified":1589878214391},{"_id":"source/_posts/e6-b7-b1-e4-bf-a1-e6-9c-8d-e5-ae-9e-e4-b9-a0-e9-9d-a2-e8-af-95.md","hash":"1b1e8668486a56286b9e81d4e805cd682a01dc2b","modified":1589878288572},{"_id":"source/_posts/e6-b7-b1-e5-85-a5-e7-90-86-e8-a7-a3vitual-dom.md","hash":"cfb44a2709188d0aa5407915b6586686ef055f0d","modified":1589878288570},{"_id":"source/_posts/e6-b8-b8-e8-a7-88-e5-99-a8-e5-b7-a5-e4-bd-9c-e5-8e-9f-e7-90-86-ef-bc-9acss-e7-9a-84-e6-b8-b2-e6-9f-93.md","hash":"d3e5173061fcce3a1f91dcce96d87e1f5f2912ab","modified":1590049748273},{"_id":"source/_posts/e6-b8-b8-e8-a7-88-e5-99-a8-e5-b7-a5-e4-bd-9c-e5-8e-9f-e7-90-86-ef-bc-9ahtml-e7-9a-84-e6-b8-b2-e6-9f-93.md","hash":"e93f93e46c502457893608e489710a9a63ff074e","modified":1589878288571},{"_id":"source/_posts/e7-95-99-e8-a8-80-e6-9d-bf.md","hash":"fab4a9ef3a2e3f2e90f3cf6ff3e24b96be12d2a9","modified":1589877235922},{"_id":"source/_posts/e7-bd-91-e6-98-93-e9-9d-a2-e8-af-95.md","hash":"1f95f676d46759baee98452f2d0cee5fb5bfbaeb","modified":1589878288569},{"_id":"source/_posts/e7-be-8e-e5-9b-a2-e6-a0-a1-e6-8b-9b-e9-9d-a2-e8-af-95.md","hash":"b43d714fad8c1c8961f0996d2372aced1efcb404","modified":1589877235926},{"_id":"source/_posts/e8-bf-85-e9-9b-b7-e9-9d-a2-e8-af-95.md","hash":"5f48e728c8321f303130c4b59f899f25a4af4154","modified":1589879269410},{"_id":"source/_posts/e9-87-8d-e7-bb-98-e5-92-8c-e5-9b-9e-e6-b5-81.md","hash":"ece44875d37159d24f985bd137784ab13cbf5287","modified":1589878288807},{"_id":"source/_posts/egg-js-e5-8e-9f-e7-90-86-e5-89-96-e6-9e-90-ef-bc-9aegg-cluster.md","hash":"e572b31cb39dc7f9417428afb8aad4587df58550","modified":1589878877092},{"_id":"source/_posts/hello-world-1.md","hash":"6c310941c22ecf6047c6c600cc24ea141c8d9e56","modified":1589877235922},{"_id":"source/_posts/http-e8-ae-a4-e8-af-81-e6-9c-ba-e5-88-b6.md","hash":"28d8b61f62dbf5d9dc85aa0344f9beb279b4ef74","modified":1589877235927},{"_id":"source/_posts/javascript-e4-b8-ad-e7-9a-84-e7-9b-b8-e7-ad-89-e4-b8-8e-e8-af-a6-e8-a7-a3.md","hash":"023294d7d3091ec0ac7ec98ae6ff2e12f8e5301a","modified":1590048753644},{"_id":"source/_posts/javascript-e4-b8-adoloo-e9-a3-8e-e6-a0-bc-ef-bc-88-e5-af-b9-e8-b1-a1-e5-a7-94-e6-89-98-ef-bc-89-e7-bc-96-e7-a8-8b.md","hash":"3696fb50a46735f9de2b57f1a0fd079c4152f96f","modified":1589877235927},{"_id":"source/_posts/javascript-e5-9e-83-e5-9c-be-e5-9b-9e-e6-94-b6-e6-9c-ba-e5-88-b6.md","hash":"9b23c91386d634907ebb8d811c598f50cb589a82","modified":1589878288807},{"_id":"source/_posts/javascript-e5-b7-a5-e4-bd-9c-e5-8e-9f-e7-90-86-ef-bc-9a-e4-ba-8b-e4-bb-b6-e5-be-aa-e7-8e-af.md","hash":"b3f62c254d8e63ce1d63bb7b32f32a06e356c3ec","modified":1589878799189},{"_id":"source/_posts/javascript-e6-a8-a1-e5-9d-97-e5-8c-96.md","hash":"d557682a6725614b278f731728cef7c9b1a9ef6c","modified":1589878642868},{"_id":"source/_posts/javascript-v8-e5-bc-95-e6-93-8e-e4-b8-8ejava-jvm-e5-af-b9-e6-af-94.md","hash":"c26ca296af55adf671743344cd8bec7f2aaa8d89","modified":1589878444638},{"_id":"source/_posts/js-e5-86-85-e5-ad-98-e7-ae-a1-e7-90-86-e6-9c-ba-e5-88-b6.md","hash":"b026ce89596cff63646a4b14422d5ab07fcebbec","modified":1589878288571},{"_id":"source/_posts/koa-e6-ba-90-e7-a0-81-e5-88-86-e6-9e-90-ef-bc-88-e4-b8-80-ef-bc-89.md","hash":"a44fe874f4ff8b0167ea8f80186c6a2071285063","modified":1589878403113},{"_id":"source/_posts/web-e6-80-a7-e8-83-bd-e4-bc-98-e5-8c-96-e5-88-86-e7-b1-bb-e6-80-bb-e7-bb-93.md","hash":"b84b8f0fbb757f0af43f6a347961af0a2fc0fe00","modified":1589877235924},{"_id":"source/_posts/webpack-e6-9e-84-e5-bb-ba-e5-8e-9f-e7-90-86.md","hash":"7cf0f49183de41b2c255b33f5c7b880e4c1579e4","modified":1589878288565},{"_id":"source/_posts/zepto-e6-ba-90-e7-a0-81-e5-88-86-e6-9e-90-e4-ba-8b-e4-bb-b6-e6-a8-a1-e5-9d-97.md","hash":"6ecd9ba49cc5e2bcf94311d1fc38220e63a01021","modified":1589878288569},{"_id":"source/_posts/zepto-e6-ba-90-e7-a0-81-e5-88-86-e6-9e-90-zepto-e6-a0-b8-e5-bf-83.md","hash":"f8fe0a520401f793f6b874ac76e8eab5c873c75f","modified":1589878035216},{"_id":"source/_posts/zepto-e6-ba-90-e7-a0-81-e5-88-86-e6-9e-90-zepto-e9-80-89-e6-8b-a9-e5-99-a8.md","hash":"8e5287708562fc28f98e8c3e6ee2a3e8235a74c1","modified":1589878085556},{"_id":"source/sample-page/index.md","hash":"2461f37ee80b985e6d17c39991603232ebdabf1c","modified":1589877235937},{"_id":"themes/material/.github/ISSUE_TEMPLATE.md","hash":"52a733a4d2e21a9c4d719495a0353c6719484f9f","modified":1590109770877},{"_id":"themes/material/.github/PULL_REQUEST_TEMPLATE.md","hash":"f2a3a0b929c0909ab99c96fb82853c2c2d67961a","modified":1590109770877},{"_id":"themes/material/languages/ar.yml","hash":"472d71f052e08f3c03b15dd67d11ad41f2eee7bf","modified":1590109770880},{"_id":"themes/material/languages/de.yml","hash":"bce37d066ffa82f3e249d41d0ee883c913cc2c5f","modified":1590109770881},{"_id":"themes/material/languages/en.yml","hash":"b59136a1b4d0a77e550b0e7e2e430cac44230dd3","modified":1590109770881},{"_id":"themes/material/languages/es.yml","hash":"d35f5411bc87277cc2d3a58d9499ddb9cfd46f1b","modified":1590109770881},{"_id":"themes/material/languages/fr.yml","hash":"f456cf31a72d97f2f18e3bb6cf735285d2b9d2c5","modified":1590109770881},{"_id":"themes/material/languages/ja.yml","hash":"768b8330c9c73287efd475e68741ce4ebad29fd1","modified":1590109770882},{"_id":"themes/material/languages/ms.yml","hash":"237a39bbfcce33e7b918f6c5dc0f01bc79900262","modified":1590109770882},{"_id":"themes/material/languages/pt-BR.yml","hash":"a070c2c4d0d3d54f8ca70513cff73c3f7c306db1","modified":1590109770883},{"_id":"themes/material/languages/zh-CN.yml","hash":"c188cad1a16ab0651e2d2d03cb3fa79962cf65ff","modified":1590109770883},{"_id":"themes/material/languages/zh-TW.yml","hash":"ec55953f0330f81bf1ffb37ff34de258dfda642a","modified":1590109770884},{"_id":"themes/material/layout/index.ejs","hash":"bfdf0dd1cfb1c6694435d4afa9d76b2706acbe2d","modified":1590125591541},{"_id":"themes/material/layout/layout.ejs","hash":"94f66850b815a262c0f8ff112a32a0a6f43066e3","modified":1590110658153},{"_id":"themes/material/layout/post.ejs","hash":"17bf2e8e65b2d1bdfc85857a25755add8a875b16","modified":1590110759820},{"_id":"themes/material/package-lock.json","hash":"7a96b229685eca313d0ca2e646392b7e4863a015","modified":1590124814474},{"_id":"themes/material/scripts/helper.js","hash":"e7111a8b1f0ab5bf3466378c48c260a4f6e527d6","modified":1590109770930},{"_id":"themes/material/layout/_partial/Isolation-post-info.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1590109770884},{"_id":"themes/material/scripts/lib/font_lsload.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1590109770931},{"_id":"themes/material/layout/_partial/Isolation-post_entry.ejs","hash":"134dc82320b7aed7d4d78960be63e16c5c4a30fb","modified":1590109770884},{"_id":"themes/material/layout/_partial/Paradox-post-info.ejs","hash":"e1d9c58890b92083021c7774ccc815fd59b83081","modified":1590110759814},{"_id":"themes/material/layout/_partial/Paradox-post-thumbnail.ejs","hash":"6f1e9a85c089ce98a36a2954839fb9ce3e53739e","modified":1590109770885},{"_id":"themes/material/layout/_partial/Paradox-post_entry-thumbnail.ejs","hash":"4d740eba338517d4e10d011a157cdefad45a8e1f","modified":1590109770886},{"_id":"themes/material/layout/_partial/Paradox-post_entry.ejs","hash":"5f4d67e5bd70f635203706cf344b036d891073e6","modified":1590109770886},{"_id":"themes/material/layout/_partial/Paradox-search.ejs","hash":"18a6971b04feccd124a096b8c7cecf1fd4bb914e","modified":1590109770886},{"_id":"themes/material/layout/_partial/blog_info.ejs","hash":"5e95796e6f9a81163554ca4198573860f7328d4e","modified":1590109770886},{"_id":"themes/material/layout/_partial/comment.ejs","hash":"c9fb1f98a18ca484cb52d60e2ad2bad25b56dfb2","modified":1590109770887},{"_id":"themes/material/layout/_partial/config_css.ejs","hash":"2b1e27faa0446a5e756e61ddf3e969e50948f1ce","modified":1590109770887},{"_id":"themes/material/layout/_partial/config_font.ejs","hash":"4dd5e0658a3e75d29c9abbde83a0ba075e53a322","modified":1590110759815},{"_id":"themes/material/layout/_partial/daily_pic.ejs","hash":"e780fbdb79b5e27091c408545cfd5b64892c9b01","modified":1590109770888},{"_id":"themes/material/layout/_partial/footer-left.ejs","hash":"372cdf718e01fea2736b8e427e57bfcfaa8a557f","modified":1590110658143},{"_id":"themes/material/layout/_partial/footer-option.ejs","hash":"be20394eaeaf2d20db28946b948962c839da6ea9","modified":1590109770888},{"_id":"themes/material/layout/_partial/footer.ejs","hash":"530626c347882579d09d71df68993e25076ca8e2","modified":1590110658145},{"_id":"themes/material/layout/_partial/footer_top.ejs","hash":"9eaace4feb951c96c0033e7271497f3f300d2476","modified":1590109770889},{"_id":"themes/material/layout/_partial/head.ejs","hash":"f80b542f397dc0d9b690abce2eda81cbd4b5def8","modified":1590110759815},{"_id":"themes/material/layout/_partial/import_js.ejs","hash":"21d81212fe0e5b82e737fdc1f47bf434b4cebb4b","modified":1590110759816},{"_id":"themes/material/layout/_partial/isolate-sns_list.ejs","hash":"fc5f03ebb847f85975676a9dfee8870e7c908008","modified":1590109770892},{"_id":"themes/material/layout/_partial/isolate_info.ejs","hash":"b8ec76716bfa2e6513b4df6814fe8676536a94c1","modified":1590109770893},{"_id":"themes/material/layout/_partial/post-content.ejs","hash":"fe15fd0b2afc672cae2bb964518a46939b7f49d1","modified":1590110759816},{"_id":"themes/material/layout/_partial/post-header.ejs","hash":"b0b8973c48db6376a24d4b4b1d2eb15d18d6508c","modified":1590109770893},{"_id":"themes/material/layout/_partial/post-info-share.ejs","hash":"9f28d62bf728c2bd89411688426a65d7ee55400c","modified":1590109770894},{"_id":"themes/material/layout/_partial/post-nav.ejs","hash":"3b6d4568cc46f60c697ad9ec85a4aa5971f3eecc","modified":1590109770894},{"_id":"themes/material/layout/_partial/sidebar-footer.ejs","hash":"6c3486b846473e0d58666f7a8720f5bf4a14e030","modified":1590109770894},{"_id":"themes/material/layout/_partial/sidebar-footer_image.ejs","hash":"b9157d2072028a1db3c3419f76bde6637e85cf0e","modified":1590109770895},{"_id":"themes/material/layout/_partial/sidebar-header.ejs","hash":"06295e01092f55504d30a343c3fdc5091280e495","modified":1590109770895},{"_id":"themes/material/layout/_partial/sidebar-navigation.ejs","hash":"ff44901fdfdd952174b0d22e86df7163d7fba9ba","modified":1590109770895},{"_id":"themes/material/layout/_partial/sidebar.ejs","hash":"c5ce6136e82895cb80dab8a918a7cdf2fe820fea","modified":1590109770896},{"_id":"themes/material/layout/_partial/structured-data.ejs","hash":"e845df290185dc300cc4edcc08b50fddc5b6909b","modified":1590109770896},{"_id":"themes/material/layout/_partial/toc_button.ejs","hash":"a0fa1adec86a6fdd8e5b17b1d289ddf83959ee7f","modified":1590125101800},{"_id":"themes/material/layout/_widget/dnsprefetch.ejs","hash":"5e4c5359d69a64042183db13f6dd771b1f7f6b31","modified":1590110658152},{"_id":"themes/material/layout/_widget/leancloud-like.ejs","hash":"e4780fe3bbb049db38d694fc18dee13d799bd51d","modified":1590109770924},{"_id":"themes/material/layout/_widget/leancloud-views.ejs","hash":"211dc183b8e84f71b2c25b3ac6659d162d81662b","modified":1590109770925},{"_id":"themes/material/layout/_widget/leancloud-views_num.ejs","hash":"e27baba6a2de406463735d276606b15fb40f5eba","modified":1590109770925},{"_id":"themes/material/layout/_widget/mathjax.ejs","hash":"b68befe1fea84739c8429c344e570a8bc0357401","modified":1590109770926},{"_id":"themes/material/layout/_widget/nprogress.ejs","hash":"901a64600854b312209287c702278183600e06b9","modified":1590109770926},{"_id":"themes/material/layout/_widget/page-gallery.ejs","hash":"4e8ac43adea1833407d06e1aa3ca340f91c065e0","modified":1590110759819},{"_id":"themes/material/layout/_widget/page-links.ejs","hash":"ed636c70c24a9265f386102d8735dead797d94c2","modified":1590110759820},{"_id":"themes/material/layout/_widget/page-tagcloud.ejs","hash":"e71de74e4067cc4e6aef1e09ac429c92bcd178b3","modified":1590109770927},{"_id":"themes/material/layout/_widget/page-timeline.ejs","hash":"9fa0195e08d9fd40aa0333e9279c98bc65acf604","modified":1590109770928},{"_id":"themes/material/layout/_widget/qrcode.ejs","hash":"3212e5d29fe8490c5d9a844ec9c2ce9925532de8","modified":1590109770928},{"_id":"themes/material/layout/_widget/search-local-js.ejs","hash":"146bfb6952f17c0afbd26ac16a15c4d0d73c83d9","modified":1590110759820},{"_id":"themes/material/layout/_widget/search-swiftype-js.ejs","hash":"7ad1e843e620ccd9b3c041dccfdcee97921247a1","modified":1590109770928},{"_id":"themes/material/scripts/lib/css_lsload.js","hash":"179f5f5e3297a7fb7d90545ddd94eb468a11046e","modified":1590109770931},{"_id":"themes/material/scripts/lib/get_file_hex.js","hash":"eb3b9a45f8ca45ef40d5421baef7d4484023982c","modified":1590109770931},{"_id":"themes/material/scripts/lib/js_hex.js","hash":"2704583aa036d538544ce31c2e924c0c125309dd","modified":1590109770932},{"_id":"themes/material/scripts/lib/js_lsload.js","hash":"72f885b13fe0028a0e2acb7168dcc66e39ea1592","modified":1590109770932},{"_id":"themes/material/scripts/lib/path_for.js","hash":"f944e3b53a468962121aa3357cc0bc18ac27a34c","modified":1590109770932},{"_id":"themes/material/source/css/disqus-proxy.css","hash":"770776d8cec27cd5661bdfd59eff9af263439989","modified":1590109770933},{"_id":"themes/material/source/css/disqus-proxy.min.css","hash":"3f8f99f71d361302288b0ba11fd36072564b08c2","modified":1590109770934},{"_id":"themes/material/source/css/duoshuo.css","hash":"32a02eaa01ff7b66fd9df307b0d33d52810096be","modified":1590109770934},{"_id":"themes/material/source/css/duoshuo.min.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1590109770934},{"_id":"themes/material/source/css/fontawesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1590109770935},{"_id":"themes/material/source/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1590109770936},{"_id":"themes/material/source/css/ie-blocker.css","hash":"dddce7e6250a449291888ae7865697282a213b14","modified":1590109770936},{"_id":"themes/material/source/css/prettify.css","hash":"c395f20ee64e80c2b6b15c7dade02f9aaaeab2c8","modified":1590109770940},{"_id":"themes/material/source/css/prettify.min.css","hash":"62edd8f08656463b0e077dcf893faa3cc8eb5fe4","modified":1590109770940},{"_id":"themes/material/source/css/uc.css","hash":"1e0977a2c9bdf721cc05654dfc025dd250655852","modified":1590109770951},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1590109770958},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1590109770958},{"_id":"themes/material/source/img/avatar.png","hash":"bf483b0d495dbbcfb308348a945818e1c1cc9696","modified":1590109771086},{"_id":"themes/material/source/img/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1590109771087},{"_id":"themes/material/source/img/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1590109771088},{"_id":"themes/material/source/img/favicon.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1590109771090},{"_id":"themes/material/source/img/logo.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1590109771096},{"_id":"themes/material/source/img/sidebar_header.png","hash":"c47f4d39f421c0a950279d050ae82f9ae6dd19ff","modified":1590109771124},{"_id":"themes/material/source/img/upyun_logo.svg","hash":"1f118b2b9c54f431d5e731ccf316ceefe605ba67","modified":1590109771124},{"_id":"themes/material/source/js/MathJax.js","hash":"a21703b5848325a902c9b39bbf3ca6490d3e1b1b","modified":1590109771125},{"_id":"themes/material/source/js/Valine.min.js","hash":"6a287a99a772a0ea8f98b133523429c9250cc67f","modified":1590109771125},{"_id":"themes/material/source/js/hanabi-browser-bundle.js","hash":"d646647bda386140c8315d60e3ff4ddbdb15c1ea","modified":1590109771130},{"_id":"themes/material/source/js/ie-blocker.en.js","hash":"96ca8e677a12048d099319ebdf01983ddc6ca80c","modified":1590109771130},{"_id":"themes/material/source/js/ie-blocker.zhCN.js","hash":"0ed49b0ec1d1924b128fbd97fca2cf7af7856fdf","modified":1590109771131},{"_id":"themes/material/source/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1590109771135},{"_id":"themes/material/source/js/lsloader.js","hash":"2b14e57784fb6b5f58d71584189c61af45f393e8","modified":1590109771136},{"_id":"themes/material/source/js/lsloader.min.js","hash":"1a68a8d267948ea8475245b7d365a1a1bd8f732e","modified":1590109771137},{"_id":"themes/material/source/js/nprogress.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1590109771139},{"_id":"themes/material/source/js/prettify.min.js","hash":"69908fe0a09cee107c25cb5d769b861723e7b7bb","modified":1590109771140},{"_id":"themes/material/source/js/queue.js","hash":"dd252616b568b71c222d9cfc859bfe52738e576a","modified":1590109771140},{"_id":"themes/material/source/js/queue.min.js","hash":"21aab782ca33efbb1386cc960b6be0a02106760d","modified":1590109771140},{"_id":"themes/material/source/js/smoothscroll.js","hash":"df56a1c84191a62750ae820943377b6775fca0e2","modified":1590109771141},{"_id":"themes/material/source/css/material.css","hash":"068e2b00f686157b6e8b78b9b808112adbedf4de","modified":1590109770939},{"_id":"themes/material/source/css/material.min.css","hash":"1a19febb9214ab689b02f5bb8ccb23579e6c1181","modified":1590109770940},{"_id":"themes/material/source/css/style.css","hash":"a2f27c40f412dc24e1ed5f62a4117523a226eed0","modified":1590110658155},{"_id":"themes/material/source/css/style.min.css","hash":"a9e9b33e1fcf818f08a04b909c86f2460a05f060","modified":1590110658156},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1590109770957},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1590109771084},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1590109771085},{"_id":"themes/material/source/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1590109771089},{"_id":"themes/material/source/js/jquery.min.js","hash":"00073d6597d2760b81387274a9ec56b9d5cb1552","modified":1590109771132},{"_id":"themes/material/source/js/js.js","hash":"64b3f20e7138674ecf21e6e3982565ea63feae26","modified":1590110658157},{"_id":"themes/material/source/js/js.min.js","hash":"709d347d3be033b841de0493b7cf532b594bb1f6","modified":1590110658158},{"_id":"themes/material/layout/_widget/analytics/baidu-analytics.ejs","hash":"3866a7fead3c1f94a517f1f9d629f092670b1520","modified":1590109770898},{"_id":"themes/material/layout/_widget/analytics/cnzz-analytics.ejs","hash":"1765e3dcd92961292f40d1812e593186c77b17ef","modified":1590109770900},{"_id":"themes/material/layout/_widget/analytics/google-analytics.ejs","hash":"3b10ebf524baf0c24b22dcd110b39d15c5acb9b5","modified":1590109770902},{"_id":"themes/material/source/css/prettify/atelier-cave-dark.min.css","hash":"cb0156cdc36500a26b232ae1c81fdc880eba85e7","modified":1590109770941},{"_id":"themes/material/source/css/prettify/atelier-cave-light.min.css","hash":"4b62dc45aa351b071d6a434dc54fe8c2e15c85cc","modified":1590109770941},{"_id":"themes/material/source/css/prettify/atelier-dune-dark.min.css","hash":"c5094d99ca0e619d97860c88211bf908fdf830b1","modified":1590109770941},{"_id":"themes/material/source/css/prettify/atelier-dune-light.min.css","hash":"b3ad98483e4d5bde72d52a15423d98e0d086db09","modified":1590109770942},{"_id":"themes/material/source/css/prettify/atelier-estuary-dark.min.css","hash":"7e3a065cafeb3acc1d7178f64ef4265f5d5ad2b9","modified":1590109770942},{"_id":"themes/material/source/css/prettify/atelier-estuary-light.min.css","hash":"1d12d8f7fa9c122a186ee76fdf681c191a68f104","modified":1590109770942},{"_id":"themes/material/source/css/prettify/atelier-forest-dark.min.css","hash":"9296b851a5b66785a60afa5da5fe9080bda96bf5","modified":1590109770942},{"_id":"themes/material/source/css/prettify/atelier-forest-light.min.css","hash":"3532f6e86bf4afbba05f7a074b791b73174f9622","modified":1590109770943},{"_id":"themes/material/source/css/prettify/atelier-heath-dark.min.css","hash":"954309acd7918422382a3ff2f9c2988aec0ff956","modified":1590109770943},{"_id":"themes/material/source/css/prettify/atelier-heath-light.min.css","hash":"a67199fa580b3aa2df031e5d2028929d29ca3b45","modified":1590109770943},{"_id":"themes/material/source/css/prettify/atelier-lakeside-dark.min.css","hash":"18575fc6dff855e395a39d0383d2f18807091f0d","modified":1590109770943},{"_id":"themes/material/source/css/prettify/atelier-lakeside-light.min.css","hash":"e20e8ac64432fa1aa6f74792b58196af7cf79c12","modified":1590109770944},{"_id":"themes/material/source/css/prettify/atelier-plateau-dark.min.css","hash":"137e3c499a720da3c1d57b4dc53264b1d623e1c5","modified":1590109770944},{"_id":"themes/material/source/css/prettify/atelier-plateau-light.min.css","hash":"153801640fdcbb74c0de3f15345110f2210eb991","modified":1590109770944},{"_id":"themes/material/source/css/prettify/atelier-savanna-dark.min.css","hash":"fba92c652fd6704422b8f2bbc11706805a6faed0","modified":1590109770944},{"_id":"themes/material/source/css/prettify/atelier-savanna-light.min.css","hash":"d9425ffb7c60d646190c22b9a5f72091ee5f9ace","modified":1590109770945},{"_id":"themes/material/source/css/prettify/atelier-seaside-dark.min.css","hash":"e0e6bbacc75a349b1e49c236d374b0e42f1fd485","modified":1590109770945},{"_id":"themes/material/source/css/prettify/atelier-seaside-light.min.css","hash":"732750b75389c1c49204f37705e6abeee40ce64f","modified":1590109770945},{"_id":"themes/material/source/css/prettify/atelier-sulphurpool-dark.min.css","hash":"015a35dddaee153fa8bb71d7f3818a6ba4d120d8","modified":1590109770945},{"_id":"themes/material/source/css/prettify/atelier-sulphurpool-light.min.css","hash":"ab1a6200eab648cab443c3df77fde9b237ef27b6","modified":1590109770946},{"_id":"themes/material/source/css/prettify/github-v2.min.css","hash":"57630621d20842a529bdea7b17fc90f520e562ef","modified":1590109770946},{"_id":"themes/material/source/css/prettify/github.min.css","hash":"19cf828225288fa5c006f1d8f66c39d11f4ef7f2","modified":1590109770946},{"_id":"themes/material/source/css/prettify/hemisu-dark.min.css","hash":"a671248cfd573292026d2174817e82e593691052","modified":1590109770946},{"_id":"themes/material/source/css/prettify/hemisu-light.min.css","hash":"b2556ff41e513fd13d032ec84a37ee260a905815","modified":1590109770947},{"_id":"themes/material/source/css/prettify/tomorrow-night-blue.min.css","hash":"c442728d96485bcf816151fe6bd96993aae09852","modified":1590109770947},{"_id":"themes/material/source/css/prettify/tomorrow-night-bright.min.css","hash":"cf251fd3edfd736695272a0f1b41d509b7bb1fb9","modified":1590109770947},{"_id":"themes/material/source/css/prettify/tomorrow-night-eighties.min.css","hash":"6ce259d674bb4edda23eea32b2379be17d0e0e6e","modified":1590109770947},{"_id":"themes/material/source/css/prettify/tomorrow-night.min.css","hash":"d989206d124035494acb4b0cdc7fbc89f3b7d108","modified":1590109770948},{"_id":"themes/material/source/css/prettify/tomorrow.min.css","hash":"b2c6d610b77f0273fefab5aa4ad26a7f58956f87","modified":1590109770948},{"_id":"themes/material/source/css/prettify/tranquil-heart.min.css","hash":"0f6eefbdda8e410832e9c516a5dd19899217ef06","modified":1590109770948},{"_id":"themes/material/source/css/prettify/vibrant-ink.min.css","hash":"c265bac6c31cf622b536b29c8a6bc46955d6fe63","modified":1590109770948},{"_id":"themes/material/source/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1590109770954},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1590109770955},{"_id":"themes/material/source/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1590109770996},{"_id":"themes/material/source/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1590109771002},{"_id":"themes/material/source/img/footer/footer_ico-bilibili.svg","hash":"1a007ae30d69aa597f589edb4ee0638a9814c988","modified":1590109771091},{"_id":"themes/material/source/img/footer/footer_ico-facebook.svg","hash":"74b3b3c6bd1d76b7eaaf75d36ac929b11a5a3e82","modified":1590109771092},{"_id":"themes/material/source/img/footer/footer_ico-github.svg","hash":"5f1f9f53e6a87ad674108c6bd16e424a1e888c61","modified":1590109771092},{"_id":"themes/material/source/img/footer/footer_ico-gplus.svg","hash":"b50274133ab263bcacdf729871d0446b615ac984","modified":1590109771092},{"_id":"themes/material/source/img/footer/footer_ico-instagram.svg","hash":"294c511e62063ea49f61e23958ab27d643ba0228","modified":1590109771092},{"_id":"themes/material/source/img/footer/footer_ico-linkedin.svg","hash":"9831c86352ec5ff283a3277d033120f86388c277","modified":1590109771093},{"_id":"themes/material/source/img/footer/footer_ico-telegram.svg","hash":"413d66e40ca476deeb49364935d49d2f7839cdfd","modified":1590109771093},{"_id":"themes/material/source/img/footer/footer_ico-tumblr.svg","hash":"11daf4fa4220787306fc21a879429e98b7db8d03","modified":1590109771093},{"_id":"themes/material/source/img/footer/footer_ico-twitter.svg","hash":"58df7777d6fcee8fa3c42453c091714bb3f97c95","modified":1590109771094},{"_id":"themes/material/source/img/footer/footer_ico-v2ex.svg","hash":"c5ffaf67a97e534c266d1585a9a3b56f1bfe3052","modified":1590109771094},{"_id":"themes/material/source/img/footer/footer_ico-weibo.svg","hash":"26d0cdb77f0c4afd60111176167eacfa222bc4c1","modified":1590109771095},{"_id":"themes/material/source/img/footer/footer_ico-zhihu.svg","hash":"d3f8da320fffefc5144822665dfe17d25af4061c","modified":1590109771095},{"_id":"themes/material/source/img/gallery/arrow.svg","hash":"144d73877e52acc5068bc0c9d1e69ef450e69f26","modified":1590109771095},{"_id":"themes/material/source/img/gallery/close.svg","hash":"2690088060811f01c9360df75be80070156ff176","modified":1590109771096},{"_id":"themes/material/source/img/gallery/spinner.svg","hash":"fc9d1cd1118ac896d4f5326e110a653f3ea32b11","modified":1590109771096},{"_id":"themes/material/source/img/random/material-10.png","hash":"363466a376e4df9e61acc904cd25f3c7ae1a7280","modified":1590109771102},{"_id":"themes/material/source/img/random/material-12.png","hash":"d020b3d42542715c7ae95b3d8603fe3180bfe8f3","modified":1590109771104},{"_id":"themes/material/source/img/random/material-17.png","hash":"ece82810e31f711576db598c845c3d97bd49fe67","modified":1590109771115},{"_id":"themes/material/source/img/random/material-19.png","hash":"768ed1a4966e2e418cb00f6b36d2fc9058328eb3","modified":1590109771116},{"_id":"themes/material/source/img/random/material-3.png","hash":"848eaa70b9b0cd7a2204c78e8aa324d8f96bb097","modified":1590109771118},{"_id":"themes/material/source/img/random/material-4.png","hash":"b475dfbf67a076a4e17a5527fd1973b1d4adac07","modified":1590109771118},{"_id":"themes/material/source/img/random/material-6.png","hash":"2f841e0c064fecb607ad1e149662a0c96d9e725d","modified":1590109771120},{"_id":"themes/material/source/img/random/material-8.png","hash":"57db542d526ef6866cb34e261096e93a0e6f3a82","modified":1590109771122},{"_id":"themes/material/source/img/random/material-9.png","hash":"840319c4d1f38fb8df79eb4669ed2e14d89fd680","modified":1590109771123},{"_id":"themes/material/source/js/gallery/gallery.js","hash":"8ee48312a183b42a9886211a0ec825ea0d041301","modified":1590109771126},{"_id":"themes/material/layout/_widget/comment/livere/common.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1590109770915},{"_id":"themes/material/source/img/random/material-1.png","hash":"4839299eaa4db7272befa7b824e54b647fbbfc44","modified":1590109771101},{"_id":"themes/material/source/img/random/material-11.png","hash":"ce20b0ad08a248c036115374f2edb7301ff60b72","modified":1590109771103},{"_id":"themes/material/source/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1590109771112},{"_id":"themes/material/source/img/random/material-14.png","hash":"b4f65b601960138c69f57171b0ddd55895483f45","modified":1590109771112},{"_id":"themes/material/source/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1590109771113},{"_id":"themes/material/source/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1590109771114},{"_id":"themes/material/source/img/random/material-18.png","hash":"4b98204abe36ecd3f30678d2c22059130e0db328","modified":1590109771116},{"_id":"themes/material/source/img/random/material-2.png","hash":"faba2ce69c19d6c1dac392dd10b054e0061f6fb7","modified":1590109771117},{"_id":"themes/material/source/img/random/material-5.png","hash":"5041ebd073a139c67f8ed271e74c967c7eb9c5be","modified":1590109771119},{"_id":"themes/material/source/img/random/material-7.png","hash":"5c49ff3c064aaeb21227c2bd98b5ae422ddca84c","modified":1590109771121},{"_id":"themes/material/layout/_widget/comment/changyan/common.ejs","hash":"40e1fc76d6b7f64e226693fb2fe1a6bb17bae245","modified":1590109770906},{"_id":"themes/material/layout/_widget/comment/changyan/enter.ejs","hash":"e3cfb4f37ea35457f112f3e822e130c930086497","modified":1590109770907},{"_id":"themes/material/layout/_widget/comment/changyan/main.ejs","hash":"77539ff32cc9d1204b848e01b5277fff5cbd61e0","modified":1590109770907},{"_id":"themes/material/layout/_widget/comment/disqus/common.ejs","hash":"c11cfceb0906a96399dede5da01ff7fe4787f8a5","modified":1590109770908},{"_id":"themes/material/layout/_widget/comment/disqus/enter.ejs","hash":"39192034766349e47967da63184f9104fdded2ab","modified":1590109770908},{"_id":"themes/material/layout/_widget/comment/disqus/main.ejs","hash":"21e0eeff664191b818d7a0071ae7edcdfc270442","modified":1590109770908},{"_id":"themes/material/layout/_widget/comment/disqus_click/common.ejs","hash":"d243f576b366a62191066459efcc6fd0ab79d00a","modified":1590109770909},{"_id":"themes/material/layout/_widget/comment/disqus_click/enter.ejs","hash":"d82f0296f8bae25223ec44e6e05b817d3a234884","modified":1590109770910},{"_id":"themes/material/layout/_widget/comment/gitment/common.ejs","hash":"9c6c8d1b448c32afb01c2d0351e87f4d4a17ec3c","modified":1590109770914},{"_id":"themes/material/layout/_widget/comment/gitment/enter.ejs","hash":"46d904fde9233694b95c6a3d91b9a2b7a6805850","modified":1590110658151},{"_id":"themes/material/layout/_widget/comment/gitment/main.ejs","hash":"e622660eda38cda05847aadc2a3e31a228fc519b","modified":1590109770914},{"_id":"themes/material/layout/_widget/comment/livere/enter.ejs","hash":"194b7bb581a3b8608a7ab135b6953d7908f51cc8","modified":1590109770915},{"_id":"themes/material/layout/_widget/comment/livere/main.ejs","hash":"9faea95d6509415223d450032352d55d022733a1","modified":1590110759817},{"_id":"themes/material/layout/_widget/comment/valine/common.ejs","hash":"94e2e6062df9b74e9fcee816fa019776b06712c2","modified":1590110759818},{"_id":"themes/material/layout/_widget/comment/valine/enter.ejs","hash":"338b60e1f5542d2e8d7ba999c2fa58ab4bc066dd","modified":1590110759818},{"_id":"themes/material/layout/_widget/comment/valine/main.ejs","hash":"2ae3985f13173acccb4020d14bab0d70d6da12d5","modified":1590110759818},{"_id":"themes/material/layout/_widget/comment/disqus_click/main.ejs","hash":"083154d9c280898c00fe7521e9848018f86ec7c5","modified":1590110759817},{"_id":"themes/material/source/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1590109770976},{"_id":"themes/material/source/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1590109770970},{"_id":"themes/material/source/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1590109770988},{"_id":"themes/material/source/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1590109770994},{"_id":"themes/material/source/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1590109770963},{"_id":"themes/material/source/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1590109770983},{"_id":"themes/material/source/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1590109771000},{"_id":"public/sample-page/index.html","hash":"eff96136b35deedc4d0a8fdf0622bffd075a871c","modified":1590129699912},{"_id":"public/2019/11/01/e5-9f-ba-e4-ba-8e-e5-be-ae-e6-9c-8d-e5-8a-a1-e7-9a-84-e4-b8-80-e6-ac-be-e5-af-b9-e7-9b-91-e6-8e-a7-e5-b9-b3-e5-8f-b0-e7-9a-84-e6-bc-94-e8-bf-9b-trashed/index.html","hash":"ce1ae6a46e08603b7d4d08bbd46be13049bb516f","modified":1590129699912},{"_id":"public/2019/10/19/egg-js-e5-8e-9f-e7-90-86-e5-89-96-e6-9e-90-ef-bc-9aegg-cluster/index.html","hash":"2cc2de64831b062338aeb24f9dc9ad9f8e5a9ef1","modified":1590129699912},{"_id":"public/2019/09/12/e6-97-b6-e5-ba-8f-e6-95-b0-e6-8d-ae-e5-ba-93influxdb-e5-85-a5-e9-97-a8/index.html","hash":"45e55fc67a26e86aa5969d512cf553b919fe72cb","modified":1590129699912},{"_id":"public/2019/09/09/e6-b8-b8-e8-a7-88-e5-99-a8-e5-b7-a5-e4-bd-9c-e5-8e-9f-e7-90-86-ef-bc-9acss-e7-9a-84-e6-b8-b2-e6-9f-93/index.html","hash":"c53d319877ae32cd18c36f10841656fc4c707a63","modified":1590129699912},{"_id":"public/2019/08/14/e6-b8-b8-e8-a7-88-e5-99-a8-e5-b7-a5-e4-bd-9c-e5-8e-9f-e7-90-86-ef-bc-9ahtml-e7-9a-84-e6-b8-b2-e6-9f-93/index.html","hash":"7a3f890fcb9dd496b8ae6f52e5c98789b9fb1852","modified":1590129699912},{"_id":"public/2019/06/24/javascript-e5-b7-a5-e4-bd-9c-e5-8e-9f-e7-90-86-ef-bc-9a-e4-ba-8b-e4-bb-b6-e5-be-aa-e7-8e-af/index.html","hash":"25848a777c2a8e5c65959fb0aef6786394e830bd","modified":1590129699912},{"_id":"public/2019/06/12/e4-ba-94-e7-a7-8djavascript-e4-bb-a3-e7-a0-81-e7-9a-84-e4-bc-98-e5-8c-96-e6-96-b9-e5-bc-8f/index.html","hash":"b3ab38c1a3cfd3295c287bb15d0a3977cc17a3ab","modified":1590129699912},{"_id":"public/2019/05/26/javascript-v8-e5-bc-95-e6-93-8e-e4-b8-8ejava-jvm-e5-af-b9-e6-af-94/index.html","hash":"b933ad1ed80ee53a348f9a412a460b159465a8a5","modified":1590129699912},{"_id":"public/2019/05/23/js-e5-86-85-e5-ad-98-e7-ae-a1-e7-90-86-e6-9c-ba-e5-88-b6/index.html","hash":"ea7aa3ac95493ee609f6b168fcae0bfd91f0eb69","modified":1590129699912},{"_id":"public/2019/04/20/ajax-e5-85-a8-e6-8f-ad-e7-a7-98/index.html","hash":"588e0471373e4febabb014ac405247cde4accc95","modified":1590129699912},{"_id":"public/2019/04/15/243/index.html","hash":"39fc5c4079c541155844dd7ad604589018e75a4c","modified":1590129699912},{"_id":"public/2019/02/03/koa-e6-ba-90-e7-a0-81-e5-88-86-e6-9e-90-ef-bc-88-e4-b8-80-ef-bc-89/index.html","hash":"59a1a9fd13ea6877b81fc05eef9f7c5b5cf67045","modified":1590129699912},{"_id":"public/2018/12/03/e6-93-8d-e4-bd-9c-e6-97-a5-e5-bf-97-e7-9a-84-e6-84-8f-e4-b9-89/index.html","hash":"2e51e597855b9e71e2d8d7ac9a47b3b03d640e52","modified":1590129699912},{"_id":"public/2018/11/20/e5-89-8d-e7-ab-af-e4-bb-a3-e7-a0-81-e9-a3-8e-e6-a0-bc-e6-8c-87-e5-8d-97-javascript-e7-af-87/index.html","hash":"4d051d92d32a0099c7ba13a89abec5e279df6b72","modified":1590129699912},{"_id":"public/2018/11/09/e5-89-8d-e7-ab-af-e4-bb-a3-e7-a0-81-e9-a3-8e-e6-a0-bc-e6-8c-87-e5-8d-97-vue-e7-af-87/index.html","hash":"0ce997c16e9bc29b1b75625bbe22f042adb9f0c3","modified":1590129699912},{"_id":"public/2018/11/07/e5-89-8d-e7-ab-af-e4-bb-a3-e7-a0-81-e9-a3-8e-e6-a0-bc-e6-8c-87-e5-8d-97-css-e7-af-87/index.html","hash":"7d0050374e39018cc158049d77fc65c908b2ad04","modified":1590129699912},{"_id":"public/2018/06/28/e4-bd-bf-e7-94-a8javascript-e6-8f-8f-e8-bf-b0-e6-95-b0-e6-8d-ae-e7-bb-93-e6-9e-84-e6-a0-88-e5-92-8c-e9-98-9f-e5-88-97/index.html","hash":"55eaebaa41ed83bf3276db8ab65089440828ca30","modified":1590129699912},{"_id":"public/2018/04/24/javascript-e4-b8-adoloo-e9-a3-8e-e6-a0-bc-ef-bc-88-e5-af-b9-e8-b1-a1-e5-a7-94-e6-89-98-ef-bc-89-e7-bc-96-e7-a8-8b/index.html","hash":"a215937cd1716c85ab7c0fe84cd59a13566b17c4","modified":1590129699912},{"_id":"public/2018/03/21/e6-90-9c-e7-8b-90-e5-a4-a7-e6-95-b0-e6-8d-ae-e4-b8-ad-e5-bf-83-e5-89-8d-e7-ab-af-e9-9d-a2-e8-af-95/index.html","hash":"0d24c4aa5a26c153474d0dd8438cf5dea1f2cced","modified":1590129699912},{"_id":"public/2018/02/25/javascript-e4-b8-ad-e7-9a-84-e7-9b-b8-e7-ad-89-e4-b8-8e-e8-af-a6-e8-a7-a3/index.html","hash":"b34dcaa994dfe5960e0c087ff49410d75dfe49a1","modified":1590129699912},{"_id":"public/2018/02/16/e6-95-b0-e6-8d-ae-e5-ba-93-e8-8c-83-e5-bc-8f/index.html","hash":"4a905abd4aa924f20f32d88d9d278af633958783","modified":1590129699912},{"_id":"public/2018/01/30/e5-89-8d-e7-ab-af-e6-97-a5-e5-bf-97-e5-b7-a5-e5-85-b7logrocket-e5-85-a5-e9-97-a8-e7-ae-80-e4-bb-8b/index.html","hash":"687ac8c9b88b5f99e7d67d10a0122eb92b8a1963","modified":1590129699912},{"_id":"public/2018/01/23/e6-95-b0-e6-8d-ae-e6-8c-96-e6-8e-98-e5-86-85-e5-ae-b9-e8-bf-87-e6-bb-a4/index.html","hash":"34d9fac240d8b0f7fd657b947f121a2e1291322e","modified":1590129699912},{"_id":"public/2017/12/24/e5-8d-8f-e5-90-8c-e8-bf-87-e6-bb-a4-e7-ae-97-e6-b3-95/index.html","hash":"181c770a4558617a6a03b1864a14b052e9b1061d","modified":1590129699912},{"_id":"public/2017/12/10/http-e8-ae-a4-e8-af-81-e6-9c-ba-e5-88-b6/index.html","hash":"e50794959d4a33dbc8d2e6220ea7ae3648c4b977","modified":1590129699912},{"_id":"public/2017/10/15/e7-be-8e-e5-9b-a2-e6-a0-a1-e6-8b-9b-e9-9d-a2-e8-af-95/index.html","hash":"ff5d97463c2249ce5fb60088481485b1b3e7bcc1","modified":1590129699912},{"_id":"public/2017/10/15/e8-bf-85-e9-9b-b7-e9-9d-a2-e8-af-95/index.html","hash":"51d4125911e38716d95d952ebc5b01f6cb044d88","modified":1590129699912},{"_id":"public/2017/09/29/360-e6-a0-a1-e6-8b-9b-e9-9d-a2-e8-af-95/index.html","hash":"a62b930cb3f63224ca3e9222797ec936c8970fc2","modified":1590129699912},{"_id":"public/2017/09/25/javascript-e5-9e-83-e5-9c-be-e5-9b-9e-e6-94-b6-e6-9c-ba-e5-88-b6/index.html","hash":"6d450753a9f94eefc865525c45b5004475b75de0","modified":1590129699912},{"_id":"public/2017/09/23/e7-bd-91-e6-98-93-e9-9d-a2-e8-af-95/index.html","hash":"0e561ec07b390cc7e19315db7993008b75ed75cb","modified":1590129699912},{"_id":"public/2017/09/22/e5-89-8d-e7-ab-af-e5-ae-89-e5-85-a8-e5-b0-8f-e7-bb-93/index.html","hash":"86b82d1167f5d87ead4f7268a0856478acc3d979","modified":1590129699912},{"_id":"public/2017/09/19/zepto-e6-ba-90-e7-a0-81-e5-88-86-e6-9e-90-e4-ba-8b-e4-bb-b6-e6-a8-a1-e5-9d-97/index.html","hash":"8b161a26258c205f088187369269e2024e8de616","modified":1590129699912},{"_id":"public/2017/09/14/e6-a8-a1-e6-9d-bf-e5-bc-95-e6-93-8e-e5-8e-9f-e7-90-86-e5-8f-8a-e9-83-a8-e5-88-86-e5-ae-9e-e7-8e-b0/index.html","hash":"206e61b239ef3e34d200f4132387625ff3f80827","modified":1590129699912},{"_id":"public/2017/09/13/zepto-e6-ba-90-e7-a0-81-e5-88-86-e6-9e-90-zepto-e9-80-89-e6-8b-a9-e5-99-a8/index.html","hash":"029fa8b1ae74d027e105fbe968fbdcd372a09e9d","modified":1590129699912},{"_id":"public/2017/09/11/zepto-e6-ba-90-e7-a0-81-e5-88-86-e6-9e-90-zepto-e6-a0-b8-e5-bf-83/index.html","hash":"9164b976fdca327f32ee451d7251a2c189114aef","modified":1590129699912},{"_id":"public/2017/08/29/e6-b7-b1-e5-85-a5-e7-90-86-e8-a7-a3vitual-dom/index.html","hash":"2c3024591119d5aea19ca2dcdc7527e5ec7cff47","modified":1590129699912},{"_id":"public/2017/08/19/webpack-e6-9e-84-e5-bb-ba-e5-8e-9f-e7-90-86/index.html","hash":"4ba2bd9856a8daefae93fab6d6c1c2d4c82e8891","modified":1590129699912},{"_id":"public/2017/08/16/e6-ad-a3-e5-88-99-e8-a1-a8-e8-be-be-e5-bc-8f-e6-80-bb-e7-bb-93/index.html","hash":"21dcccdcfcbd2da136952397d9b615ae1e83e45d","modified":1590129699912},{"_id":"public/2017/08/14/javascript-e6-a8-a1-e5-9d-97-e5-8c-96/index.html","hash":"e7a91e9ee7d64aecd1172098979e7b67ebf15e99","modified":1590129699912},{"_id":"public/2017/06/28/e4-bd-bf-e7-94-a8web-worker/index.html","hash":"176673e5acfae2fa50781bbffcf5eab66bd392fe","modified":1590129699912},{"_id":"public/2017/06/23/web-e6-80-a7-e8-83-bd-e4-bc-98-e5-8c-96-e5-88-86-e7-b1-bb-e6-80-bb-e7-bb-93/index.html","hash":"866aa234151bb7c85070cfb3de3f8b86767d6aa6","modified":1590129699912},{"_id":"public/2017/06/18/e4-bd-bf-e7-94-a8gulp-e5-87-8f-e5-b0-91http-e8-af-b7-e6-b1-82/index.html","hash":"0985950ff2ce7f8af58e3cd8a6f81870a33c99fd","modified":1590129699912},{"_id":"public/2017/05/11/e9-87-8d-e7-bb-98-e5-92-8c-e5-9b-9e-e6-b5-81/index.html","hash":"277c0e695b508794e7279855d1774997f6774a0a","modified":1590129699912},{"_id":"public/2017/04/05/e6-b7-b1-e4-bf-a1-e6-9c-8d-e5-ae-9e-e4-b9-a0-e9-9d-a2-e8-af-95/index.html","hash":"f7992685bcac00e6cea9e19cc6633cd9322fa1ad","modified":1590129699912},{"_id":"public/2016/12/23/hello-world-1/index.html","hash":"45fd067cf84f49949b9ae1eea209f7f08d36bf30","modified":1590129699912},{"_id":"public/2016/11/02/2016-11-2-e8-ae-b0-e4-b8-80-e6-ac-a1-e9-bb-91-e5-ae-a2-e6-9d-be/index.html","hash":"59c2ed1315609cb189e470345a65d12eedfe51b9","modified":1590129699912},{"_id":"public/2016/08/23/e5-93-88-e5-a4-ab-e6-9b-bc-e6-a0-91-e4-b8-8e-e5-93-88-e5-a4-ab-e6-9b-bc-e7-bc-96-e7-a0-81-e5-99-a8-ef-bc-88python-e5-ae-9e-e7-8e-b0-ef-bc-89/index.html","hash":"c8be23c074770bfeadba7272d198e4cecf7620ce","modified":1590129699912},{"_id":"public/2016/07/10/e5-a4-a7-e4-ba-8c-e5-b0-8f-e7-bb-93/index.html","hash":"f24e0468349b2c3b38317887775c274f4c9e976a","modified":1590129699912},{"_id":"public/2016/01/23/e5-b0-86-e9-a1-b9-e7-9b-ae-e4-bb-8e-github-e9-83-a8-e7-bd-b2-e5-88-b0-e6-9c-8d-e5-8a-a1-e5-99-a8/index.html","hash":"c5606b30e8878595fd6c2354d8d2d560d1eee53d","modified":1590129699912},{"_id":"public/2016/01/13/e6-93-8d-e4-bd-9c-e7-b3-bb-e7-bb-9f-e5-a4-84-e7-90-86-e5-99-a8-e8-b0-83-e5-ba-a6-e7-ac-94-e8-ae-b0/index.html","hash":"356d69b5b18b946f6ddf9468c3ca670d711901c7","modified":1590129699912},{"_id":"public/2015/12/23/e4-b8-80-e4-ba-9b-e9-93-be-e6-8e-a5/index.html","hash":"25c7182c100d72d67e8fe9cabb7fdca4f4927a9a","modified":1590129699912},{"_id":"public/2015/12/23/e5-85-b3-e4-ba-8e-e6-88-91/index.html","hash":"5e5b616bb1de1a0303b9123f3bc58c00051618c6","modified":1590129699912},{"_id":"public/2014/02/18/e7-95-99-e8-a8-80-e6-9d-bf/index.html","hash":"1e66cc6c2ef9de9a5add55d6186dea5226f6ce93","modified":1590129699912},{"_id":"public/2011/08/01/e4-b8-80-e4-b8-aa-e7-ae-80-e6-98-93-e7-95-99-e8-a8-80-e6-9d-bf/index.html","hash":"f62f3417d716e9a7472c4a8b14e2c07a2a79c9d1","modified":1590129699912},{"_id":"public/archives/index.html","hash":"66b4645dce0c061faf97be76eac08900387b055e","modified":1590129699912},{"_id":"public/archives/page/2/index.html","hash":"44e013535698c113f334584101d38165305b5a58","modified":1590129699912},{"_id":"public/archives/page/3/index.html","hash":"5891f419e7865cf486a352b03a92460aec204a00","modified":1590129699912},{"_id":"public/archives/page/4/index.html","hash":"fd5d018a3608dee701ce314acf3257826df30d5a","modified":1590129699912},{"_id":"public/archives/page/5/index.html","hash":"8d3fe736c4f377c5aa5bc5d41137732a277b0920","modified":1590129699912},{"_id":"public/archives/page/6/index.html","hash":"2d1bb50b52d4c0a6aee645dd0024f4692ca1c496","modified":1590129699912},{"_id":"public/archives/2011/index.html","hash":"1c3aa444444b93dba3ab1f5e4445d97663170d62","modified":1590129699912},{"_id":"public/archives/2011/08/index.html","hash":"1dd408b99065b6ae4a0e2af8fae2053574bce917","modified":1590129699912},{"_id":"public/archives/2014/index.html","hash":"51fdc9814da9b06984595e970a9e64f4ebc6152a","modified":1590129699912},{"_id":"public/archives/2014/02/index.html","hash":"5a167938d78fc26c1a90b6a529ead1ad7e62e983","modified":1590129699912},{"_id":"public/archives/2015/index.html","hash":"892b6cd1a72858fff0bb31e3740fe6052fd4f3dc","modified":1590129699912},{"_id":"public/archives/2015/12/index.html","hash":"d763f6adcefd4f64e5c3f0ccf7a03438c65e15c5","modified":1590129699912},{"_id":"public/archives/2016/index.html","hash":"833afbb3113bb6a6b801982d81c5410948f153af","modified":1590129699912},{"_id":"public/archives/2016/01/index.html","hash":"1b71357fcbe6864ce519b2ddc28cc06ca56d3986","modified":1590129699912},{"_id":"public/archives/2016/07/index.html","hash":"c6c9ebe374108d78a91999bebba30435a1542751","modified":1590129699912},{"_id":"public/archives/2016/08/index.html","hash":"09a1a8ed6174b4df0e16351caf9e36bacbc8f522","modified":1590129699912},{"_id":"public/archives/2016/11/index.html","hash":"ed640477f21575ecf6d4bc3f98c048454be744ce","modified":1590129699912},{"_id":"public/archives/2016/12/index.html","hash":"f00c3138b6b6c7d90c49dc2e58b3f4aeb943d622","modified":1590129699912},{"_id":"public/archives/2017/index.html","hash":"3467746ced27e05f33f373f4a49b501a40677411","modified":1590129699912},{"_id":"public/archives/2017/page/2/index.html","hash":"752fd2e5aa0b8457c82dd2e3ec55a92db6ce6947","modified":1590129699912},{"_id":"public/archives/2017/page/3/index.html","hash":"66203d80a36b995adf25e8ba6bbefae4c1df9557","modified":1590129699912},{"_id":"public/archives/2017/04/index.html","hash":"d51506561b62f31e549b423c4bd6201122b5ef9c","modified":1590129699912},{"_id":"public/archives/2017/05/index.html","hash":"5fe4bcc485ffd744051bb149a81054759e5bc97a","modified":1590129699912},{"_id":"public/archives/2017/06/index.html","hash":"f097c1c9ef91a5260d8c76ff6d1a32f50973348b","modified":1590129699912},{"_id":"public/archives/2017/08/index.html","hash":"d211c0ea71b70c365dcc86fd81c21e301df89447","modified":1590129699912},{"_id":"public/archives/2017/09/index.html","hash":"de0416cd581e5c44a5a9a939b1a778ccc3be81e0","modified":1590129699912},{"_id":"public/archives/2017/10/index.html","hash":"82b3b0b86137cd934114c633b5e40ce9fd15fcb6","modified":1590129699912},{"_id":"public/archives/2017/12/index.html","hash":"eec3a1ddd880b1d756dffef8e5f53153fdbd521d","modified":1590129699912},{"_id":"public/archives/2018/index.html","hash":"57c489872b8f2944990a254faf2d80c229bb0f1d","modified":1590129699912},{"_id":"public/archives/2018/page/2/index.html","hash":"baacfd34a2b7905536d5f00aa8176495a4c3de4b","modified":1590129699912},{"_id":"public/archives/2018/01/index.html","hash":"2b8ba820a77bd1be7bddd97c62404996a39d84d0","modified":1590129699912},{"_id":"public/archives/2018/02/index.html","hash":"78225a7ea34d76f2423e5c84214a59bec9903705","modified":1590129699912},{"_id":"public/archives/2018/03/index.html","hash":"919b502e447e161449e041659c07eda78c279608","modified":1590129699912},{"_id":"public/archives/2018/04/index.html","hash":"e23c3b4c7d336334b1e274ffa9328230146f74c8","modified":1590129699912},{"_id":"public/archives/2018/06/index.html","hash":"9827f55c9842ae8473c3812f37367ae2b3189663","modified":1590129699912},{"_id":"public/archives/2018/11/index.html","hash":"74be1473140729e69fc4c9f47536f3b1e97c23bd","modified":1590129699912},{"_id":"public/archives/2018/12/index.html","hash":"fc104eb786af21fab220da8a797e782e8a2162af","modified":1590129699912},{"_id":"public/archives/2019/index.html","hash":"0dbfc3350cb7ad7fef1d8fc3d433de27642be22d","modified":1590129699912},{"_id":"public/archives/2019/page/2/index.html","hash":"d12a7f954ce0fac5d48a41a249cf1122a3a27eef","modified":1590129699912},{"_id":"public/archives/2019/02/index.html","hash":"4bce6b9b0b118a7d4dac2382064403f3f877dfff","modified":1590129699912},{"_id":"public/archives/2019/04/index.html","hash":"c2cccedc71d25eaf2e683d0adb48027348e2fd34","modified":1590129699912},{"_id":"public/archives/2019/05/index.html","hash":"b32321cc559f65119ec7a72426b585357c148b04","modified":1590129699912},{"_id":"public/archives/2019/06/index.html","hash":"34be215d97c3062b98985f1806d2bfe490e57b76","modified":1590129699912},{"_id":"public/archives/2019/08/index.html","hash":"64ae0a0eef8676d887f7ff9bd33126c96ea5dee7","modified":1590129699912},{"_id":"public/archives/2019/09/index.html","hash":"082dc684a0ee68dd5366e5e261c04557b87f93f8","modified":1590129699912},{"_id":"public/archives/2019/10/index.html","hash":"255506869e483bbb13da59e818807acad3cd3344","modified":1590129699912},{"_id":"public/archives/2019/11/index.html","hash":"af230b54e6855c9d8417d3ba51fa91bff6e0cc68","modified":1590129699912},{"_id":"public/categories/未分类/index.html","hash":"69f9d766dd261b8b1ecc82c935f58062ccab331f","modified":1590129699912},{"_id":"public/categories/算法/index.html","hash":"6d43395e309a7f11e93c10fedd66c20fcea501f3","modified":1590129699912},{"_id":"public/categories/node-js/index.html","hash":"7e80366b06ebf87a3551566fef9bd639fca82a7e","modified":1590129699912},{"_id":"public/categories/前端/index.html","hash":"12f54a1cc9421671efa95af288927a62c40dc6c3","modified":1590129699912},{"_id":"public/categories/前端/page/2/index.html","hash":"d5400b1727a09477bbbcb51a6ff2670a9b03d2d1","modified":1590129699912},{"_id":"public/categories/前端/page/3/index.html","hash":"f40a7966e746e9226834f31d2a4560cce042cc78","modified":1590129699912},{"_id":"public/categories/HTTP/index.html","hash":"721c8f7f2c82f0d25530c0304f0fc85a48e94cc7","modified":1590129699912},{"_id":"public/categories/node-js/前端/index.html","hash":"a97d685472384ebd60370caea9e90b9d2db52ca6","modified":1590129699912},{"_id":"public/categories/node-js/后端/index.html","hash":"2b61d851db8364939a4669228015f806b62b3868","modified":1590129699912},{"_id":"public/categories/HTTP/前端/index.html","hash":"266aa362a752a4680e2cdfe0bbb996698946b19a","modified":1590129699912},{"_id":"public/categories/node-js/后端/数据库/index.html","hash":"a21a8a93a8619324048ff8e752077da91e3298ec","modified":1590129699912},{"_id":"public/categories/数据挖掘/index.html","hash":"c82cff40d9bce71d5cc2a1460db682074107a544","modified":1590129699912},{"_id":"public/categories/扯淡集/index.html","hash":"dbd50b171c16c66ea594d888caecf1fc03909704","modified":1590129699912},{"_id":"public/categories/前端/面试/index.html","hash":"fdcc73856b9dab74a90b72ab976ed707e0a4ae6c","modified":1590129699912},{"_id":"public/categories/操作系统/index.html","hash":"50ebfcf1f6c14fb19d956d1ad842d14db784a3a1","modified":1590129699912},{"_id":"public/categories/数据库/index.html","hash":"a7dfaed74952c3127c1b9b089f599339cd295ca2","modified":1590129699912},{"_id":"public/categories/数据挖掘/算法/index.html","hash":"9adc8086e196e7a3dd94e3efb2377fac517f12bf","modified":1590129699912},{"_id":"public/categories/面试/index.html","hash":"373bd7155ca2118a5f3f2261fc040defdbc83305","modified":1590129699912},{"_id":"public/categories/HTTP/前端/后端/index.html","hash":"cefe61d6928ce93c36541e7dc08fe8a9151d622a","modified":1590129699912},{"_id":"public/index.html","hash":"e413781a145a738b909b5d94f712acdcd2f3a656","modified":1590129699912},{"_id":"public/page/2/index.html","hash":"11318e894dda2460fbc8d6434df1b02720b10dea","modified":1590129699912},{"_id":"public/page/3/index.html","hash":"d674bed195f273a7f4d5d1ef1259ddb50d17eb85","modified":1590129699912},{"_id":"public/page/4/index.html","hash":"eaf0c9933f4e7876263d4b1a93e8c0c5169d929c","modified":1590129699912},{"_id":"public/page/5/index.html","hash":"f8a69135191abf5eed4942e1bd5cbe72d55cf83b","modified":1590129699912},{"_id":"public/page/6/index.html","hash":"96e1b294bd5f065afa6e0f8c7d1cf6180bedc5e1","modified":1590129699912},{"_id":"public/tags/扯淡/index.html","hash":"67f10f6a93984cbbcb6e91b041de723d9250f243","modified":1590129699912},{"_id":"public/tags/mysql/index.html","hash":"a7ba48672c05895c712ce181a4ca670ee9c8a30b","modified":1590129699912},{"_id":"public/tags/node-js/index.html","hash":"72bf1b113796d25be7a8eeb6e0120998fcecdea1","modified":1590129699912},{"_id":"public/tags/性能优化/index.html","hash":"fffbaa9e211b05e017e0daf0aaf7cef28831c4f9","modified":1590129699912},{"_id":"public/tags/面试/index.html","hash":"a69dd638070ad2df5f55ffe8974a637a2ab9f395","modified":1590129699912},{"_id":"public/tags/JavaScript/index.html","hash":"3d497c7ca4b7b3092ee0de24bc138e2d0fdd902f","modified":1590129699912},{"_id":"public/tags/前端/index.html","hash":"def5912ab28b86b6c0bf43adfd9b53b0dd76789c","modified":1590129699912},{"_id":"public/tags/前端工程化/index.html","hash":"6445d615d8838e5d435d0fd81ed8eb31d6b1c124","modified":1590129699912},{"_id":"public/tags/数据结构/index.html","hash":"e5e4627eb9e72ae2a21664a5ea0943ded8ac0c1c","modified":1590129699912},{"_id":"public/tags/前端优化/index.html","hash":"22a684b1515d5c6b234d3729f3ba3cb8c8092370","modified":1590129699912},{"_id":"public/tags/安全/index.html","hash":"d209bb39093d50c960d0ff1d42cb5e8ac6c66b37","modified":1590129699912},{"_id":"public/tags/调试/index.html","hash":"1ffe6f2a2522f30258071d7cc055c0e146017b8a","modified":1590129699912},{"_id":"public/tags/数据挖掘/index.html","hash":"53ac30ceb4fd0feee7f031d6b1cf8d5b5758c868","modified":1590129699912},{"_id":"public/tags/算法/index.html","hash":"c8c4ea65683257e7bde9759ce100bd2f8d8dcb56","modified":1590129699912},{"_id":"public/tags/架构/index.html","hash":"46365eff636e99d2f3a4cbd99dbed9a1ae59c20a","modified":1590129699912},{"_id":"public/tags/egg-js/index.html","hash":"bb5d2c0385eac375492f29cbf8a259752893148f","modified":1590129699912},{"_id":"public/tags/操作系统/index.html","hash":"b414ca44c24cb6f9b3b8f9b760e389531e29dbc4","modified":1590129699912},{"_id":"public/tags/后端/index.html","hash":"2fd5b97f3b1872593d2325d17fb3ec84bb718133","modified":1590129699912},{"_id":"public/tags/数据库/index.html","hash":"c900bc3f31ae74012af13d9974b6a8fb39275310","modified":1590129699912},{"_id":"public/tags/推荐系统/index.html","hash":"546fc628a98e0c5d1ee84308d4cdd32d2e16e757","modified":1590129699912},{"_id":"public/tags/前端底层/index.html","hash":"421a039a6fffafadbbb935e9a02a394a9f1355f0","modified":1590129699912},{"_id":"public/tags/游览器/index.html","hash":"272ef697c7c6b4e2c58749d461b16edaf74e381c","modified":1590129699912},{"_id":"public/tags/webkit/index.html","hash":"560a039e387f3a6ef8157e818c4ad380fa3db847","modified":1590129699912},{"_id":"public/tags/CSS/index.html","hash":"05db93a6570a72ff18bfdfce4458cf7882f55711","modified":1590129699912},{"_id":"public/tags/HTTP/index.html","hash":"a51cdd2227be4996d842b5b0dcd4e44a891139f2","modified":1590129699912},{"_id":"public/tags/zepto-js/index.html","hash":"dcd48cc46d15a3df9453a339c82988bba9ba4a2c","modified":1590129699912},{"_id":"public/tags/源码分析/index.html","hash":"013b113ae4a398dab5ee47e9628e2750865ea47a","modified":1590129699912},{"_id":"public/tags/linux/index.html","hash":"59d5bcbf3490f660e1a2ffb01bb416bce6338162","modified":1590129699912},{"_id":"public/tags/运维/index.html","hash":"ff937240ed485f8e33a447e91a2601f38fdb9ae7","modified":1590129699912},{"_id":"public/img/avatar.png","hash":"bf483b0d495dbbcfb308348a945818e1c1cc9696","modified":1590129053697},{"_id":"public/img/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1590129053697},{"_id":"public/img/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1590129053697},{"_id":"public/img/favicon.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1590129053697},{"_id":"public/img/logo.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1590129053697},{"_id":"public/img/upyun_logo.svg","hash":"1f118b2b9c54f431d5e731ccf316ceefe605ba67","modified":1590129053697},{"_id":"public/img/sidebar_header.png","hash":"c47f4d39f421c0a950279d050ae82f9ae6dd19ff","modified":1590129053697},{"_id":"public/img/footer/footer_ico-bilibili.svg","hash":"1a007ae30d69aa597f589edb4ee0638a9814c988","modified":1590129053697},{"_id":"public/img/footer/footer_ico-facebook.svg","hash":"74b3b3c6bd1d76b7eaaf75d36ac929b11a5a3e82","modified":1590129053697},{"_id":"public/img/footer/footer_ico-github.svg","hash":"5f1f9f53e6a87ad674108c6bd16e424a1e888c61","modified":1590129053697},{"_id":"public/img/footer/footer_ico-gplus.svg","hash":"b50274133ab263bcacdf729871d0446b615ac984","modified":1590129053697},{"_id":"public/img/footer/footer_ico-instagram.svg","hash":"294c511e62063ea49f61e23958ab27d643ba0228","modified":1590129053697},{"_id":"public/img/footer/footer_ico-linkedin.svg","hash":"9831c86352ec5ff283a3277d033120f86388c277","modified":1590129053697},{"_id":"public/img/footer/footer_ico-telegram.svg","hash":"413d66e40ca476deeb49364935d49d2f7839cdfd","modified":1590129053697},{"_id":"public/img/footer/footer_ico-tumblr.svg","hash":"11daf4fa4220787306fc21a879429e98b7db8d03","modified":1590129053697},{"_id":"public/img/footer/footer_ico-twitter.svg","hash":"58df7777d6fcee8fa3c42453c091714bb3f97c95","modified":1590129053697},{"_id":"public/img/footer/footer_ico-v2ex.svg","hash":"c5ffaf67a97e534c266d1585a9a3b56f1bfe3052","modified":1590129053697},{"_id":"public/img/footer/footer_ico-weibo.svg","hash":"26d0cdb77f0c4afd60111176167eacfa222bc4c1","modified":1590129053697},{"_id":"public/img/footer/footer_ico-zhihu.svg","hash":"d3f8da320fffefc5144822665dfe17d25af4061c","modified":1590129053697},{"_id":"public/img/gallery/arrow.svg","hash":"144d73877e52acc5068bc0c9d1e69ef450e69f26","modified":1590129053697},{"_id":"public/img/gallery/close.svg","hash":"2690088060811f01c9360df75be80070156ff176","modified":1590129053697},{"_id":"public/img/gallery/spinner.svg","hash":"fc9d1cd1118ac896d4f5326e110a653f3ea32b11","modified":1590129053697},{"_id":"public/img/random/material-10.png","hash":"363466a376e4df9e61acc904cd25f3c7ae1a7280","modified":1590129053697},{"_id":"public/img/random/material-12.png","hash":"d020b3d42542715c7ae95b3d8603fe3180bfe8f3","modified":1590129053697},{"_id":"public/img/random/material-17.png","hash":"ece82810e31f711576db598c845c3d97bd49fe67","modified":1590129053697},{"_id":"public/img/random/material-4.png","hash":"b475dfbf67a076a4e17a5527fd1973b1d4adac07","modified":1590129053697},{"_id":"public/img/random/material-6.png","hash":"2f841e0c064fecb607ad1e149662a0c96d9e725d","modified":1590129053697},{"_id":"public/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1590129053697},{"_id":"public/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1590129053697},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1590129053697},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1590129053697},{"_id":"public/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1590129053697},{"_id":"public/img/random/material-19.png","hash":"768ed1a4966e2e418cb00f6b36d2fc9058328eb3","modified":1590129053697},{"_id":"public/img/random/material-3.png","hash":"848eaa70b9b0cd7a2204c78e8aa324d8f96bb097","modified":1590129053697},{"_id":"public/img/random/material-8.png","hash":"57db542d526ef6866cb34e261096e93a0e6f3a82","modified":1590129053697},{"_id":"public/img/random/material-9.png","hash":"840319c4d1f38fb8df79eb4669ed2e14d89fd680","modified":1590129053697},{"_id":"public/img/random/material-1.png","hash":"4839299eaa4db7272befa7b824e54b647fbbfc44","modified":1590129053697},{"_id":"public/img/random/material-11.png","hash":"ce20b0ad08a248c036115374f2edb7301ff60b72","modified":1590129053697},{"_id":"public/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1590129053697},{"_id":"public/img/random/material-14.png","hash":"b4f65b601960138c69f57171b0ddd55895483f45","modified":1590129053697},{"_id":"public/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1590129053697},{"_id":"public/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1590129053697},{"_id":"public/img/random/material-18.png","hash":"4b98204abe36ecd3f30678d2c22059130e0db328","modified":1590129053697},{"_id":"public/img/random/material-2.png","hash":"faba2ce69c19d6c1dac392dd10b054e0061f6fb7","modified":1590129053697},{"_id":"public/img/random/material-5.png","hash":"5041ebd073a139c67f8ed271e74c967c7eb9c5be","modified":1590129053697},{"_id":"public/img/random/material-7.png","hash":"5c49ff3c064aaeb21227c2bd98b5ae422ddca84c","modified":1590129053697},{"_id":"public/css/ie-blocker.css","hash":"dddce7e6250a449291888ae7865697282a213b14","modified":1590129053697},{"_id":"public/css/prettify.css","hash":"c395f20ee64e80c2b6b15c7dade02f9aaaeab2c8","modified":1590129053697},{"_id":"public/css/prettify.min.css","hash":"62edd8f08656463b0e077dcf893faa3cc8eb5fe4","modified":1590129053697},{"_id":"public/css/uc.css","hash":"1e0977a2c9bdf721cc05654dfc025dd250655852","modified":1590129053697},{"_id":"public/js/hanabi-browser-bundle.js","hash":"d646647bda386140c8315d60e3ff4ddbdb15c1ea","modified":1590129053697},{"_id":"public/js/ie-blocker.zhCN.js","hash":"0ed49b0ec1d1924b128fbd97fca2cf7af7856fdf","modified":1590129053697},{"_id":"public/js/ie-blocker.en.js","hash":"96ca8e677a12048d099319ebdf01983ddc6ca80c","modified":1590129053697},{"_id":"public/js/lsloader.min.js","hash":"1a68a8d267948ea8475245b7d365a1a1bd8f732e","modified":1590129053697},{"_id":"public/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1590129053697},{"_id":"public/js/queue.js","hash":"dd252616b568b71c222d9cfc859bfe52738e576a","modified":1590129053697},{"_id":"public/js/queue.min.js","hash":"21aab782ca33efbb1386cc960b6be0a02106760d","modified":1590129053697},{"_id":"public/js/nprogress.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1590129053697},{"_id":"public/js/smoothscroll.js","hash":"df56a1c84191a62750ae820943377b6775fca0e2","modified":1590129053697},{"_id":"public/css/prettify/atelier-cave-dark.min.css","hash":"cb0156cdc36500a26b232ae1c81fdc880eba85e7","modified":1590129053697},{"_id":"public/css/prettify/atelier-cave-light.min.css","hash":"4b62dc45aa351b071d6a434dc54fe8c2e15c85cc","modified":1590129053697},{"_id":"public/css/prettify/atelier-estuary-dark.min.css","hash":"7e3a065cafeb3acc1d7178f64ef4265f5d5ad2b9","modified":1590129053697},{"_id":"public/css/prettify/atelier-dune-dark.min.css","hash":"c5094d99ca0e619d97860c88211bf908fdf830b1","modified":1590129053697},{"_id":"public/css/prettify/atelier-dune-light.min.css","hash":"b3ad98483e4d5bde72d52a15423d98e0d086db09","modified":1590129053697},{"_id":"public/css/prettify/atelier-forest-dark.min.css","hash":"9296b851a5b66785a60afa5da5fe9080bda96bf5","modified":1590129053697},{"_id":"public/css/prettify/atelier-forest-light.min.css","hash":"3532f6e86bf4afbba05f7a074b791b73174f9622","modified":1590129053697},{"_id":"public/css/prettify/atelier-estuary-light.min.css","hash":"1d12d8f7fa9c122a186ee76fdf681c191a68f104","modified":1590129053697},{"_id":"public/css/prettify/atelier-heath-light.min.css","hash":"a67199fa580b3aa2df031e5d2028929d29ca3b45","modified":1590129053697},{"_id":"public/css/prettify/atelier-lakeside-light.min.css","hash":"e20e8ac64432fa1aa6f74792b58196af7cf79c12","modified":1590129053697},{"_id":"public/css/prettify/atelier-lakeside-dark.min.css","hash":"18575fc6dff855e395a39d0383d2f18807091f0d","modified":1590129053697},{"_id":"public/css/prettify/atelier-heath-dark.min.css","hash":"954309acd7918422382a3ff2f9c2988aec0ff956","modified":1590129053697},{"_id":"public/css/prettify/atelier-plateau-dark.min.css","hash":"137e3c499a720da3c1d57b4dc53264b1d623e1c5","modified":1590129053697},{"_id":"public/css/prettify/atelier-plateau-light.min.css","hash":"153801640fdcbb74c0de3f15345110f2210eb991","modified":1590129053697},{"_id":"public/css/prettify/atelier-seaside-light.min.css","hash":"732750b75389c1c49204f37705e6abeee40ce64f","modified":1590129053697},{"_id":"public/css/prettify/atelier-sulphurpool-dark.min.css","hash":"015a35dddaee153fa8bb71d7f3818a6ba4d120d8","modified":1590129053697},{"_id":"public/css/prettify/atelier-savanna-dark.min.css","hash":"fba92c652fd6704422b8f2bbc11706805a6faed0","modified":1590129053697},{"_id":"public/css/prettify/atelier-savanna-light.min.css","hash":"d9425ffb7c60d646190c22b9a5f72091ee5f9ace","modified":1590129053697},{"_id":"public/css/prettify/atelier-seaside-dark.min.css","hash":"e0e6bbacc75a349b1e49c236d374b0e42f1fd485","modified":1590129053697},{"_id":"public/css/prettify/github.min.css","hash":"19cf828225288fa5c006f1d8f66c39d11f4ef7f2","modified":1590129053697},{"_id":"public/css/prettify/hemisu-light.min.css","hash":"b2556ff41e513fd13d032ec84a37ee260a905815","modified":1590129053697},{"_id":"public/css/prettify/github-v2.min.css","hash":"57630621d20842a529bdea7b17fc90f520e562ef","modified":1590129053697},{"_id":"public/css/prettify/hemisu-dark.min.css","hash":"a671248cfd573292026d2174817e82e593691052","modified":1590129053697},{"_id":"public/css/prettify/tomorrow-night-blue.min.css","hash":"c442728d96485bcf816151fe6bd96993aae09852","modified":1590129053697},{"_id":"public/css/prettify/tomorrow-night-eighties.min.css","hash":"6ce259d674bb4edda23eea32b2379be17d0e0e6e","modified":1590129053697},{"_id":"public/css/prettify/tomorrow-night-bright.min.css","hash":"cf251fd3edfd736695272a0f1b41d509b7bb1fb9","modified":1590129053697},{"_id":"public/css/prettify/tomorrow-night.min.css","hash":"d989206d124035494acb4b0cdc7fbc89f3b7d108","modified":1590129053697},{"_id":"public/css/prettify/tomorrow.min.css","hash":"b2c6d610b77f0273fefab5aa4ad26a7f58956f87","modified":1590129053697},{"_id":"public/css/prettify/tranquil-heart.min.css","hash":"0f6eefbdda8e410832e9c516a5dd19899217ef06","modified":1590129053697},{"_id":"public/css/prettify/vibrant-ink.min.css","hash":"c265bac6c31cf622b536b29c8a6bc46955d6fe63","modified":1590129053697},{"_id":"public/css/prettify/atelier-sulphurpool-light.min.css","hash":"ab1a6200eab648cab443c3df77fde9b237ef27b6","modified":1590129053697},{"_id":"public/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1590129053697},{"_id":"public/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1590129053697},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1590129053697},{"_id":"public/css/disqus-proxy.min.css","hash":"3f8f99f71d361302288b0ba11fd36072564b08c2","modified":1590129053697},{"_id":"public/css/duoshuo.css","hash":"32a02eaa01ff7b66fd9df307b0d33d52810096be","modified":1590129053697},{"_id":"public/css/duoshuo.min.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1590129053697},{"_id":"public/js/lsloader.js","hash":"2b14e57784fb6b5f58d71584189c61af45f393e8","modified":1590129053697},{"_id":"public/js/prettify.min.js","hash":"69908fe0a09cee107c25cb5d769b861723e7b7bb","modified":1590129053697},{"_id":"public/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1590129053697},{"_id":"public/css/disqus-proxy.css","hash":"d5086cda8aaae20b8d3f9dd50f0be5ccb717e42a","modified":1590129053697},{"_id":"public/js/Valine.min.js","hash":"6a287a99a772a0ea8f98b133523429c9250cc67f","modified":1590129053697},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1590129053697},{"_id":"public/css/fontawesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1590129053697},{"_id":"public/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1590129053697},{"_id":"public/js/gallery/gallery.js","hash":"8ee48312a183b42a9886211a0ec825ea0d041301","modified":1590129053697},{"_id":"public/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1590129053697},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1590129053697},{"_id":"public/js/MathJax.js","hash":"a21703b5848325a902c9b39bbf3ca6490d3e1b1b","modified":1590129053697},{"_id":"public/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1590129053697},{"_id":"public/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1590129053697},{"_id":"public/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1590129053697},{"_id":"public/css/style.min.css","hash":"a9e9b33e1fcf818f08a04b909c86f2460a05f060","modified":1590129053697},{"_id":"public/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1590129053697},{"_id":"public/css/material.min.css","hash":"1a19febb9214ab689b02f5bb8ccb23579e6c1181","modified":1590129053697},{"_id":"public/css/style.css","hash":"a2f27c40f412dc24e1ed5f62a4117523a226eed0","modified":1590129053697},{"_id":"public/js/jquery.min.js","hash":"00073d6597d2760b81387274a9ec56b9d5cb1552","modified":1590129053697},{"_id":"public/css/material.css","hash":"068e2b00f686157b6e8b78b9b808112adbedf4de","modified":1590129053697},{"_id":"public/js/js.min.js","hash":"709d347d3be033b841de0493b7cf532b594bb1f6","modified":1590129053697},{"_id":"public/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1590129053697},{"_id":"public/js/js.js","hash":"64b3f20e7138674ecf21e6e3982565ea63feae26","modified":1590129053697},{"_id":"public/css/prism-tomorrow.css","hash":"3b99487dfc9b4e51e9105a93743b92a761840e34","modified":1590129699912},{"_id":"themes/materialized/.gitignore","hash":"10a056ff135445236571951759679a6d5fa85ff8","modified":1590634648310},{"_id":"themes/materialized/README.md","hash":"fdd9b3ae0cd9abe69fe1e30feab931a248dcec42","modified":1590634648311},{"_id":"themes/materialized/_config.yml","hash":"07d5610f2d2c781a19fd04f190fccfa95ada73cb","modified":1590634648311},{"_id":"themes/materialized/layout/archive.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1590634648316},{"_id":"themes/materialized/languages/zh-CN.yml","hash":"323058de2eb1ce085a22f2add0609688984910d1","modified":1590634648311},{"_id":"themes/materialized/layout/category.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1590634648316},{"_id":"themes/materialized/languages/en.yml","hash":"6ee2569619ec1547d79aeb0e8b98ec053de4ce45","modified":1590634648311},{"_id":"themes/materialized/layout/index.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1590634648316},{"_id":"themes/materialized/layout/layout.ejs","hash":"6123a13dde29a366e44dc918406acb47ec7338d4","modified":1590634648317},{"_id":"themes/materialized/layout/page.ejs","hash":"9f916bc8338279f5f845d942fc14b480482e6e16","modified":1590634648317},{"_id":"themes/materialized/layout/post.ejs","hash":"9f916bc8338279f5f845d942fc14b480482e6e16","modified":1590634648317},{"_id":"themes/materialized/scripts/index.js","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1590634648318},{"_id":"themes/materialized/layout/tag.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1590634648317},{"_id":"themes/materialized/layout/_partial/archive.ejs","hash":"1d29db62f3ae8b431949b1a513c41a3bfd209c05","modified":1590634648312},{"_id":"themes/materialized/layout/_partial/head.ejs","hash":"e1e8134d44558e095f73584dddebd4f51e473955","modified":1590634648313},{"_id":"themes/materialized/layout/_partial/header.ejs","hash":"e49cb5a810c7ae5760fea63f42babb6445f3f25c","modified":1590634648313},{"_id":"themes/materialized/layout/_partial/footer.ejs","hash":"88fbc34070fadfa5c2fb2fa0cfba0833fca61b01","modified":1590634648313},{"_id":"themes/materialized/layout/_partial/article.ejs","hash":"e06cda91e58bf7726325b7651bd845232fc6d662","modified":1590634648312},{"_id":"themes/materialized/layout/_partial/sidebar.ejs","hash":"c9fc59b64464203b5700686ea82e16cca041a531","modified":1590634648313},{"_id":"themes/materialized/source/css/style.css","hash":"b57fd777fc8a48bc416fbc37f42796403ad19cd2","modified":1590634648321},{"_id":"themes/materialized/source/images/avatar.png","hash":"bf483b0d495dbbcfb308348a945818e1c1cc9696","modified":1590634648356},{"_id":"themes/materialized/source/images/favicon.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1590634648358},{"_id":"themes/materialized/source/images/grey.png","hash":"4562825d902a6cdb6414c75bfad492d98584c63a","modified":1590634648358},{"_id":"themes/materialized/source/js/script.js","hash":"d17a7fd70cf423a52dd1a405ca5009e004dd074e","modified":1590634648376},{"_id":"themes/materialized/source/images/banner.png","hash":"09dc164e22c87a9d736d625f0887b4bc33e7477e","modified":1590634648358},{"_id":"themes/materialized/layout/_widget/analytics/baidu-analytics.ejs","hash":"eb3b16d53b191c724853a76a671f001bf2146b44","modified":1590634648314},{"_id":"themes/materialized/layout/_widget/analytics/cnzz-analytics.ejs","hash":"3c94798a0031383fabefbf847be5cb42f2ff5573","modified":1590634648314},{"_id":"themes/materialized/layout/_widget/analytics/google-analytics.ejs","hash":"bf07a1101417a00b47dc7784407d8bd3b4fef710","modified":1590634648314},{"_id":"themes/materialized/layout/_widget/comment/changyan.ejs","hash":"3a954d86a2a0ea96621e183cf89f16c99c387a3b","modified":1590634648315},{"_id":"themes/materialized/layout/_widget/comment/gitalk.ejs","hash":"0d95b1213e9234e1aaa7d275b6b5b7b27bd1d2c7","modified":1590634648315},{"_id":"themes/materialized/layout/_widget/comment/disqus.ejs","hash":"a8422c9bd22c24e8c09c1c188f71c46687b14211","modified":1590634648315},{"_id":"themes/materialized/layout/_widget/comment/livere.ejs","hash":"abeada8bef10dd50134e7319271f3e942acf9cbb","modified":1590634648315},{"_id":"themes/materialized/layout/_widget/comment/valine.ejs","hash":"f7f13b65862af3936fcfe3b7a50ad971e606c4e2","modified":1590634648316},{"_id":"themes/materialized/source/fonts/roboto/LICENSE.txt","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1590634648321},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Black.woff2","hash":"36dd174e41242ff6318083409f7e6c700b25eba2","modified":1590634648326},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Bold.woff2","hash":"9074123ec9d4d6a7e21c2bee3f0110ca9a73733d","modified":1590634648333},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Light.woff2","hash":"df835660087fc7421a7667d8b68d759e0e1dbbf8","modified":1590634648338},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Medium.woff2","hash":"9f358fd5f441565282b54e8dc072a7d68f71a2fc","modified":1590634648342},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Regular.woff2","hash":"a18bcf95ada923da31f176137b8add02b0ba60f3","modified":1590634648346},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Thin.woff2","hash":"0592332e221316fd8331110568df461e87689cca","modified":1590634648350},{"_id":"themes/materialized/source/icons/custom-icons/iconfont.ttf","hash":"888487c710f152616af17d7d5bbcd74a2953a391","modified":1590634648353},{"_id":"themes/materialized/source/icons/custom-icons/iconfont.eot","hash":"88cae9d47326f77e37a521e08f4445526eb1a4c9","modified":1590634648352},{"_id":"themes/materialized/source/icons/custom-icons/iconfont.woff","hash":"adfa5ab1a81df7c353613492f54e125244b22da2","modified":1590634648353},{"_id":"themes/materialized/source/icons/custom-icons/iconfont.svg","hash":"21aec1663a5b5b311e094735da407018ac2f97cc","modified":1590634648353},{"_id":"themes/materialized/source/icons/custom-icons/iconfont.woff2","hash":"bba0df4d71619c06cb34700c2a8eaa72ddd87a2b","modified":1590634648354},{"_id":"themes/materialized/source/icons/material-icons/LICENSE.txt","hash":"e9101bd4e253c0f7da54e8f581cf72322df10162","modified":1590634648354},{"_id":"themes/materialized/source/icons/material-icons/MaterialIcons-Regular.ijmap","hash":"df468e87685c24b2a5d431036d4d5a434efdc28e","modified":1590634648355},{"_id":"themes/materialized/source/icons/material-icons/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1590634648355},{"_id":"themes/materialized/source/images/random/material-10.png","hash":"363466a376e4df9e61acc904cd25f3c7ae1a7280","modified":1590634648360},{"_id":"themes/materialized/source/icons/material-icons/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1590634648356},{"_id":"themes/materialized/source/images/random/material-12.png","hash":"d020b3d42542715c7ae95b3d8603fe3180bfe8f3","modified":1590634648362},{"_id":"themes/materialized/source/images/random/material-17.png","hash":"ece82810e31f711576db598c845c3d97bd49fe67","modified":1590634648367},{"_id":"themes/materialized/source/images/random/material-19.png","hash":"768ed1a4966e2e418cb00f6b36d2fc9058328eb3","modified":1590634648368},{"_id":"themes/materialized/source/images/random/material-3.png","hash":"848eaa70b9b0cd7a2204c78e8aa324d8f96bb097","modified":1590634648370},{"_id":"themes/materialized/source/images/random/material-4.png","hash":"b475dfbf67a076a4e17a5527fd1973b1d4adac07","modified":1590634648370},{"_id":"themes/materialized/source/images/random/material-6.png","hash":"2f841e0c064fecb607ad1e149662a0c96d9e725d","modified":1590634648371},{"_id":"themes/materialized/source/images/random/material-8.png","hash":"57db542d526ef6866cb34e261096e93a0e6f3a82","modified":1590634648373},{"_id":"themes/materialized/source/images/random/material-9.png","hash":"840319c4d1f38fb8df79eb4669ed2e14d89fd680","modified":1590634648374},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Black.woff","hash":"100a2d03d89a0e3e027a1500e4f4d715d1ed52a0","modified":1590634648324},{"_id":"themes/materialized/source/fonts/roboto/Roboto-BlackItalic.woff","hash":"d2f8acc7e66ff51cc180bd998056e68dec30b8c6","modified":1590634648327},{"_id":"themes/materialized/source/fonts/roboto/Roboto-BlackItalic.woff2","hash":"45dc6a6ae29b2522ac98fc130d300d1c3ceee9b4","modified":1590634648329},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Bold.woff","hash":"274d0176d3b2e324111d0f836625960bdf24a29a","modified":1590634648331},{"_id":"themes/materialized/source/fonts/roboto/Roboto-BoldItalic.woff2","hash":"99eaed1b19b50aeb3866d9ce568c290d15c965fb","modified":1590634648336},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Light.woff","hash":"d6d654d36c6cf9053675860d00125d6c543560d8","modified":1590634648336},{"_id":"themes/materialized/source/fonts/roboto/Roboto-BoldItalic.woff","hash":"83739a927323a1c00a5e61ef6da84fff9e15fbc8","modified":1590634648334},{"_id":"themes/materialized/source/fonts/roboto/Roboto-LightItalic.woff","hash":"184f1fc46df99866d5dbe03b57f3f6d9b9981ea0","modified":1590634648339},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Medium.woff","hash":"d3564215ac8f29bbf8c3d0602e1299ebcbe26ea9","modified":1590634648341},{"_id":"themes/materialized/source/fonts/roboto/Roboto-LightItalic.woff2","hash":"d72aa4d470b5923b3f614dd8ca25fd230dda8206","modified":1590634648340},{"_id":"themes/materialized/source/fonts/roboto/Roboto-MediumItalic.woff","hash":"b1afeefecbee33ad50452ce3f728dfcf781c9d49","modified":1590634648344},{"_id":"themes/materialized/source/fonts/roboto/Roboto-MediumItalic.woff2","hash":"2fbd77f1d63c3d339167aa754e716451d129e23f","modified":1590634648345},{"_id":"themes/materialized/source/fonts/roboto/Roboto-RegularItalic.woff","hash":"f3c32fd38c2f5fe34e54bdab2f238e469f48501a","modified":1590634648347},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Regular.woff","hash":"db6450746e5df1eb0636bc84f21aae94e1cafea4","modified":1590634648346},{"_id":"themes/materialized/source/fonts/roboto/Roboto-RegularItalic.woff2","hash":"bd9360a27d99a093c2f06857c21fd6e98b57a8c0","modified":1590634648348},{"_id":"themes/materialized/source/fonts/roboto/Roboto-ThinItalic.woff","hash":"ea71e1a7f20df5de8048e06c70d0b756b83f867e","modified":1590634648351},{"_id":"themes/materialized/source/fonts/roboto/Roboto-ThinItalic.woff2","hash":"cf2e6e6e462a4ff1c980d2c0fdc7b9675a30c82b","modified":1590634648352},{"_id":"themes/materialized/source/fonts/roboto/Roboto-Thin.woff","hash":"2d1c0c4d3ff8f91941499790d4fd63866e7c4852","modified":1590634648349},{"_id":"themes/materialized/source/images/random/material-1.png","hash":"4839299eaa4db7272befa7b824e54b647fbbfc44","modified":1590634648360},{"_id":"themes/materialized/source/images/random/material-11.png","hash":"ce20b0ad08a248c036115374f2edb7301ff60b72","modified":1590634648361},{"_id":"themes/materialized/source/images/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1590634648363},{"_id":"themes/materialized/source/images/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1590634648365},{"_id":"themes/materialized/source/images/random/material-14.png","hash":"b4f65b601960138c69f57171b0ddd55895483f45","modified":1590634648364},{"_id":"themes/materialized/source/images/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1590634648366},{"_id":"themes/materialized/source/images/random/material-2.png","hash":"faba2ce69c19d6c1dac392dd10b054e0061f6fb7","modified":1590634648369},{"_id":"themes/materialized/source/images/random/material-18.png","hash":"4b98204abe36ecd3f30678d2c22059130e0db328","modified":1590634648368},{"_id":"themes/materialized/source/images/random/material-5.png","hash":"5041ebd073a139c67f8ed271e74c967c7eb9c5be","modified":1590634648371},{"_id":"themes/materialized/source/js/mdui.js","hash":"f85c02f85d45257a1a283c066878c6bccbe7927c","modified":1590634648375},{"_id":"themes/materialized/source/images/random/material-7.png","hash":"5c49ff3c064aaeb21227c2bd98b5ae422ddca84c","modified":1590634648372},{"_id":"themes/materialized/source/css/mdui.css","hash":"11491e5bece560ec714802ba921a17cb3eb6ace7","modified":1590634648320},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1589876772205},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1589876772205},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1589876772206},{"_id":"themes/landscape/README.md","hash":"f385137806a70cce88b3888b00f9d9850a0c7586","modified":1589878288570},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1589876772206},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1589876772218},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1589876772206},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1589876772207},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1589876772207},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1589876772207},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1589876772207},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1589876772207},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1589876772208},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1589876772208},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1589876772208},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1589876772209},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1589876772209},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1589876772209},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1589876772216},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1589876772216},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1589876772216},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1589876772217},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1589876772217},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1589876772217},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1589876772218},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1589876772217},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1589876772210},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1589876772210},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1589876772210},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1589876772211},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"47bb1c18915ba64e22756079d58527cf5bc9e4f1","modified":1590639095818},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1589876772211},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1589876772211},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"fbc4684d50f60b745162c4cc1aa540db338f8e5e","modified":1590639103669},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1589876772212},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1589876772212},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1589876772214},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1589876772214},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1589876772215},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1589876772215},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1589876772215},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1589876772216},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1589876772218},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1589876772222},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1589876772232},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1589876772232},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1589876772233},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1589876772233},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1589876772233},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1589876772233},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1589876772234},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1589876772236},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1589876772237},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1589876772236},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1589876772238},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1589876772212},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1589876772213},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1589876772213},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1589876772213},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1589876772213},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1589876772214},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1589876772219},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1589876772219},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1589876772219},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1589876772220},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1589876772220},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1589876772220},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1589876772220},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1589876772221},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1589876772221},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1589876772221},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1589876772222},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1589876772222},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1589876772224},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1589876772225},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1589876772229},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1589876772234},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1589876772234},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1589876772235},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1589876772235},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1589876772235},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1589876772235},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1589876772228},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1589876772227},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1589876772231},{"_id":"themes/landscape/.DS_Store","hash":"25c4e2ffc5668671734009b11eefc214e875858e","modified":1590637189150},{"_id":"themes/landscape/source/.DS_Store","hash":"d4399d6047bd3c2d150f5bfb5a8c32628e762f81","modified":1590637236131},{"_id":"source/plugs/hexo-prettify-highlight/readme.md","hash":"7be9447177b3e24dfc74629e8bfa9cde5d2fd010","modified":1590638638954},{"_id":"themes/landscape/source/css/.DS_Store","hash":"9ab33ffcded6a06e5dd2b7980d1b96bd007b784c","modified":1590637241288},{"_id":"source/plugs/hexo-prettify-highlight/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1590638638931},{"_id":"source/plugs/hexo-prettify-highlight/.git/config","hash":"71ea026256de176ae5a49ec8934ca2d1f130e7e8","modified":1590638638940},{"_id":"source/plugs/hexo-prettify-highlight/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1590638634313},{"_id":"source/plugs/hexo-prettify-highlight/.git/index","hash":"f574b78a94aaa3c4fd4a6f47fcaefecd91882c44","modified":1590638639022},{"_id":"source/plugs/hexo-prettify-highlight/.git/packed-refs","hash":"79a576e9dae0f51e01a2ac25e50578233c964eab","modified":1590638638926},{"_id":"source/plugs/hexo-prettify-highlight/js/prettify.js","hash":"eec92d79f0678b390289981b01866ea5dd36c090","modified":1590638638953},{"_id":"source/plugs/hexo-prettify-highlight/themes/_base-hemisu.scss","hash":"52d1752286b31e89cd28308e17d7ae84a4476b2b","modified":1590638638956},{"_id":"source/plugs/hexo-prettify-highlight/themes/_base-tomorrow.scss","hash":"f11bc802d442c4d00bf6d32b1dc40d092b531c48","modified":1590638638957},{"_id":"source/plugs/hexo-prettify-highlight/themes/_base.scss","hash":"abc9c78733fcd69b7dc6e753db0fdfa93b75ad8c","modified":1590638638958},{"_id":"source/plugs/hexo-prettify-highlight/themes/atelier-cave-dark.scss","hash":"07c20f68b6c36cc61a6f06238339bf7960a3b166","modified":1590638638959},{"_id":"source/plugs/hexo-prettify-highlight/themes/atelier-cave-light.scss","hash":"56affd64a5aba4e3d65546028a6621a5f38f0573","modified":1590638638963},{"_id":"source/plugs/hexo-prettify-highlight/themes/atelier-dune-dark.scss","hash":"010fe8c1dad77ee54f980dc867bce6215c0e3d52","modified":1590638638964},{"_id":"source/plugs/hexo-prettify-highlight/themes/atelier-dune-light.scss","hash":"3a0ed7d2aa81f913cf77c7d586a90ca1c68deef3","modified":1590638638964},{"_id":"source/plugs/hexo-prettify-highlight/themes/atelier-estuary-dark.scss","hash":"fbebe3d683d40ea83046d1795ccf3c71bc6b107d","modified":1590638638965},{"_id":"source/plugs/hexo-prettify-highlight/themes/atelier-estuary-light.scss","hash":"44ca99560192a2148f4be0113631a0d4663eca8b","modified":1590638638967},{"_id":"source/plugs/hexo-prettify-highlight/themes/atelier-forest-dark.scss","hash":"e47b75247c7413b8ffe41a51e64ceb11c81f0286","modified":1590638638968},{"_id":"source/plugs/hexo-prettify-highlight/themes/atelier-forest-light.scss","hash":"e241883ac9f95b7a8317293212bf687d7886c1af","modified":1590638638969},{"_id":"source/plugs/hexo-prettify-highlight/themes/atelier-heath-dark.scss","hash":"1bef2a5809a752188a5e0f5702c5e5f34922fb02","modified":1590638638970},{"_id":"source/plugs/hexo-prettify-highlight/themes/atelier-heath-light.scss","hash":"a82352bdaf98e84eca8436d7fc380aade23dcfc1","modified":1590638638971},{"_id":"source/plugs/hexo-prettify-highlight/themes/atelier-lakeside-dark.scss","hash":"73af5de3564dc993e78069a8c3407c5d9fd7708f","modified":1590638638973},{"_id":"source/plugs/hexo-prettify-highlight/themes/atelier-lakeside-light.scss","hash":"4cb7e8db34770338c0ac4b8da8abf04d8b435427","modified":1590638638975},{"_id":"source/plugs/hexo-prettify-highlight/themes/atelier-plateau-dark.scss","hash":"54eff129fe79938556e70bb130e1078c20e00a79","modified":1590638638978},{"_id":"source/plugs/hexo-prettify-highlight/themes/atelier-plateau-light.scss","hash":"59c96fada6d5e7e5b793097bc26646f88092a9f8","modified":1590638638979},{"_id":"source/plugs/hexo-prettify-highlight/themes/atelier-savanna-dark.scss","hash":"2680dc303f4897fc48619d747db2f0d485e69f13","modified":1590638638979},{"_id":"source/plugs/hexo-prettify-highlight/themes/atelier-savanna-light.scss","hash":"be6ac29ecd974fc6f82ceaad7ca01ecba95b7cbc","modified":1590638638980},{"_id":"source/plugs/hexo-prettify-highlight/themes/atelier-seaside-dark.scss","hash":"12a0aba36e1caedf502cdbafb231632620a00366","modified":1590638638982},{"_id":"source/plugs/hexo-prettify-highlight/themes/atelier-seaside-light.scss","hash":"9ef4e22714e60ad30053aa8bb30d6e02c1856ce5","modified":1590638638983},{"_id":"source/plugs/hexo-prettify-highlight/themes/atelier-sulphurpool-dark.scss","hash":"7714fef9c12c63e049f4af6161f8ec4aae8336a1","modified":1590638638985},{"_id":"source/plugs/hexo-prettify-highlight/themes/atelier-sulphurpool-light.scss","hash":"9655da8e34ec4fc41809d2ce48dfb8ec37a3dcb0","modified":1590638638986},{"_id":"source/plugs/hexo-prettify-highlight/themes/github-v2.scss","hash":"f14a42574d9abebe56d9fe16ec0704d11daff6ab","modified":1590638639013},{"_id":"source/plugs/hexo-prettify-highlight/themes/github.scss","hash":"065cf278ddd4feb895f2f756de94d534125b4852","modified":1590638639013},{"_id":"source/plugs/hexo-prettify-highlight/themes/hemisu-dark.scss","hash":"e709855329b2d4274709d0bd9614746452414a09","modified":1590638639014},{"_id":"source/plugs/hexo-prettify-highlight/themes/hemisu-light.scss","hash":"f1f4cd616f964ea32931d24f85d9e62eb37524ad","modified":1590638639014},{"_id":"source/plugs/hexo-prettify-highlight/themes/tomorrow-night-blue.scss","hash":"7e3f5289f591b15838dfb188751528d761ad14a2","modified":1590638639015},{"_id":"source/plugs/hexo-prettify-highlight/themes/tomorrow-night-bright.scss","hash":"4fd4e90397c1ec47bbffb383882361ec27b587b0","modified":1590638639016},{"_id":"source/plugs/hexo-prettify-highlight/themes/tomorrow-night-eighties.scss","hash":"236e37bb98a906aa656388ca431a43b62911c36b","modified":1590638639017},{"_id":"source/plugs/hexo-prettify-highlight/themes/tomorrow-night.scss","hash":"00e08f783ec09b3b5b4a603e006ebbaedfb2df89","modified":1590638639018},{"_id":"source/plugs/hexo-prettify-highlight/themes/tomorrow.scss","hash":"6ce63186bc62f179454c18354efef4bf08006c5e","modified":1590638639019},{"_id":"source/plugs/hexo-prettify-highlight/themes/tranquil-heart.scss","hash":"a1c203deb42b70c9728efed350b2eb90ba95cfbb","modified":1590638639020},{"_id":"source/plugs/hexo-prettify-highlight/themes/vibrant-ink.scss","hash":"beb8f52080c02b7e1c145dafbbb41ff4461fefb2","modified":1590638639020},{"_id":"source/plugs/hexo-prettify-highlight/js/jquery-2.2.4.min.js","hash":"69bb69e25ca7d5ef0935317584e6153f3fd9a88c","modified":1590638638951},{"_id":"source/plugs/hexo-prettify-highlight/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1590638634321},{"_id":"source/plugs/hexo-prettify-highlight/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1590638634316},{"_id":"source/plugs/hexo-prettify-highlight/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1590638634325},{"_id":"source/plugs/hexo-prettify-highlight/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1590638634328},{"_id":"source/plugs/hexo-prettify-highlight/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1590638634330},{"_id":"source/plugs/hexo-prettify-highlight/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1590638634319},{"_id":"source/plugs/hexo-prettify-highlight/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1590638634329},{"_id":"source/plugs/hexo-prettify-highlight/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1590638634334},{"_id":"source/plugs/hexo-prettify-highlight/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1590638634318},{"_id":"source/plugs/hexo-prettify-highlight/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1590638634326},{"_id":"source/plugs/hexo-prettify-highlight/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1590638634334},{"_id":"source/plugs/hexo-prettify-highlight/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1590638634327},{"_id":"source/plugs/hexo-prettify-highlight/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1590638634312},{"_id":"source/plugs/hexo-prettify-highlight/.git/logs/HEAD","hash":"ea1a9689e32f03fdb0b95e35e124865bb1b0e5c3","modified":1590638638937},{"_id":"source/plugs/hexo-prettify-highlight/themes/colors/_atelier-cave-dark.scss","hash":"6a16cdfd3a3f13ace3056b4fbe602f3ef637638a","modified":1590638638987},{"_id":"source/plugs/hexo-prettify-highlight/themes/colors/_atelier-cave-light.scss","hash":"69d3f30289bea2e099d77232b277e34324e51998","modified":1590638638988},{"_id":"source/plugs/hexo-prettify-highlight/themes/colors/_atelier-dune-dark.scss","hash":"6f69fde80fec2d214d48955e4739df761df56f9f","modified":1590638638988},{"_id":"source/plugs/hexo-prettify-highlight/themes/colors/_atelier-dune-light.scss","hash":"91a14c1e47bff203f590fb99dc5c1d24c5aa4946","modified":1590638638989},{"_id":"source/plugs/hexo-prettify-highlight/themes/colors/_atelier-estuary-dark.scss","hash":"db3eee29b08d7ea0cc563905cd3bb64380add4d9","modified":1590638638989},{"_id":"source/plugs/hexo-prettify-highlight/themes/colors/_atelier-forest-dark.scss","hash":"6d54e02c874d43be5981f7eeba9c09124742b553","modified":1590638638990},{"_id":"source/plugs/hexo-prettify-highlight/themes/colors/_atelier-heath-dark.scss","hash":"01ab2bf888416dcf3f2a3c4c87c5331b9c51699d","modified":1590638638992},{"_id":"source/plugs/hexo-prettify-highlight/themes/colors/_atelier-forest-light.scss","hash":"20a90b5dd0d21fb9903affea77d6a715ce066f7c","modified":1590638638991},{"_id":"source/plugs/hexo-prettify-highlight/themes/colors/_atelier-estuary-light.scss","hash":"13589e9398794e637ec9134d624597cf883a60b9","modified":1590638638990},{"_id":"source/plugs/hexo-prettify-highlight/themes/colors/_atelier-lakeside-dark.scss","hash":"46bdb4434e7a1b0069e8382123fcd93a51ccd917","modified":1590638638993},{"_id":"source/plugs/hexo-prettify-highlight/themes/colors/_atelier-lakeside-light.scss","hash":"474ac7e76b2b11eead7971c093e29996c68a57d1","modified":1590638638994},{"_id":"source/plugs/hexo-prettify-highlight/themes/colors/_atelier-heath-light.scss","hash":"fb575b9590f6835e03172f94958c9991fd2a84cc","modified":1590638638992},{"_id":"source/plugs/hexo-prettify-highlight/themes/colors/_atelier-plateau-dark.scss","hash":"1e0e8e4d882950b37232656369b9e703a49572f1","modified":1590638638994},{"_id":"source/plugs/hexo-prettify-highlight/themes/colors/_atelier-plateau-light.scss","hash":"05a0382300d02c64b1cfeb74d7d774fb4ac417fd","modified":1590638638995},{"_id":"source/plugs/hexo-prettify-highlight/themes/colors/_atelier-savanna-dark.scss","hash":"48f70e697049845f5ea043c658d36f49f7e59021","modified":1590638638996},{"_id":"source/plugs/hexo-prettify-highlight/themes/colors/_atelier-savanna-light.scss","hash":"4cce3fb1557fb14142235b78a6f606e966564a45","modified":1590638638998},{"_id":"source/plugs/hexo-prettify-highlight/themes/colors/_atelier-seaside-dark.scss","hash":"d1f498f4a507737b564488c481498f877a5754af","modified":1590638638999},{"_id":"source/plugs/hexo-prettify-highlight/themes/colors/_atelier-seaside-light.scss","hash":"74d382b56ba8e4451523ddb828d7a402e67837a0","modified":1590638639000},{"_id":"source/plugs/hexo-prettify-highlight/themes/colors/_atelier-sulphurpool-dark.scss","hash":"6f94477b61a74893318b68789be5fb0ab2336233","modified":1590638639002},{"_id":"source/plugs/hexo-prettify-highlight/themes/colors/_atelier-sulphurpool-light.scss","hash":"3b14cceaa66af237f8639f47302aa2a659a5b25c","modified":1590638639005},{"_id":"source/plugs/hexo-prettify-highlight/themes/colors/_github-v2.scss","hash":"d4eff714025f71bfce4cc3a1e1a2ab3300cf42a7","modified":1590638639008},{"_id":"source/plugs/hexo-prettify-highlight/themes/colors/_github.scss","hash":"f20ef6aeab86f77b16327b6873b7b71c329952a7","modified":1590638639008},{"_id":"source/plugs/hexo-prettify-highlight/themes/colors/_hemisu-dark.scss","hash":"4c364bd7c36c9b99d7ef4de78f22e02c252b0257","modified":1590638639009},{"_id":"source/plugs/hexo-prettify-highlight/themes/colors/_hemisu-light.scss","hash":"5cbb60956c092866307bf0fb50692bf247cc238c","modified":1590638639009},{"_id":"source/plugs/hexo-prettify-highlight/themes/colors/_hemisu.scss","hash":"7dc30441a01e36de538bea60984bebdfdf8f2d57","modified":1590638639010},{"_id":"source/plugs/hexo-prettify-highlight/themes/colors/_tomorrow-night-blue.scss","hash":"49238c3098dde1c8c18d4a929c3d2a72e242089b","modified":1590638639010},{"_id":"source/plugs/hexo-prettify-highlight/themes/colors/_tomorrow-night-bright.scss","hash":"892748bd798cfbe073023b46a70c20976b612755","modified":1590638639010},{"_id":"source/plugs/hexo-prettify-highlight/themes/colors/_tomorrow-night-eighties.scss","hash":"6fabaf8bc5177991b133c9e13d35b83d0941146b","modified":1590638639011},{"_id":"source/plugs/hexo-prettify-highlight/themes/colors/_tomorrow-night.scss","hash":"eac90bba92ecacbeb3274bc7dc24a8758469c7aa","modified":1590638639011},{"_id":"source/plugs/hexo-prettify-highlight/themes/colors/_tomorrow.scss","hash":"f5ece41dbb10f8792b8c3cf6e492cc568fd5421a","modified":1590638639011},{"_id":"source/plugs/hexo-prettify-highlight/themes/colors/_tranquil-heart.scss","hash":"a37e5e6e9de8e4afcaa8203cfbb8efd949657b06","modified":1590638639012},{"_id":"source/plugs/hexo-prettify-highlight/themes/colors/_vibrant-ink.scss","hash":"1dc9bfb627b6486bda2fbb85c0134f831319bdfd","modified":1590638639012},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/00/ba67c6157e2f29e7430cf1b945cd9562f6b072","hash":"c0c685eae850e9b8146b28f198996b259183e567","modified":1590638638794},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/00/c367e98a8c4776020a052d861f4d82b7fe1f37","hash":"fb5138541222a947d6b4b0369d808d5803a00a1b","modified":1590638637779},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/01/f11d7a0c49f7e7035a11ddb51b5856797c4b6b","hash":"ab13dd30d88461018c514fac873bcbdbdd867bc2","modified":1590638638751},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/03/fb05a105b2059e5f77e9f79cb43ffef7c20f77","hash":"79efbc2cb2cf32716916ad14c32fdfbf25e8cd58","modified":1590638638591},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/0d/40e9f3ff3c34a8ba2b96dd043706bac39a6e07","hash":"8e7cf6af9f95b2c958a4db65687ebd9f07fbd385","modified":1590638638724},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/0d/5ba738160273292e92c6018c142608e4da3c17","hash":"10ab615e22100eed427b3974505772a8756fc354","modified":1590638638860},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/0e/de2a0984f851ea50824fbce850557788a48275","hash":"8da2539b42150f987e845e16ccbc19ea364e0ce4","modified":1590638638641},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/10/8b78ec387343d44e8ca665ed15a3a049b30e67","hash":"abbee5d8b10517f0463e7bc4aef952217904c5cc","modified":1590638638832},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/10/af9d4abdad8f4784077850c3570c6b6e82f334","hash":"74560919535e7c37066097a75f4c9d69b8cfdb5c","modified":1590638638873},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/1c/2fdc31c7e9a0e8166e145ef6786972f99f2481","hash":"a2964a827655aa6b274f0afe812485e4ceabb4d4","modified":1590638638777},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/1e/c98bae2e7f223608ae450e61e827773925c834","hash":"df59227edc31807de4c64852c22e3269e067c2ae","modified":1590638638653},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/1f/7120df7392d5c435215b0be7e78b043a92a1f2","hash":"9450ba31d1052776f921ab67c420abf0bcf5a96f","modified":1590638638733},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/29/0dd266f900becb9493c9a80ab78438384808ec","hash":"4b76d1661fc2b8b07ff3a165f3508c54a325cd99","modified":1590638638709},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/2a/47d6eb1da3fb65340344aacb51ea092d2cf462","hash":"0ec461a3dd32aac958c917ea95f8d4c8a3626910","modified":1590638638573},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/2c/1a1a4e9f4c0ee422e58f5284e1e547b9c22f82","hash":"b5a6091197d287f85b89d285f97ee802a310f946","modified":1590638638887},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/2d/8290121426823c7dd9f5d436d5b3261533fef4","hash":"cc2c8f91b68b36f440e1a8057983ad75ffe60794","modified":1590638638597},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/30/896da7b9183fe045ba6c41541b1cab567895ab","hash":"291058e5073673a1f2745c35e8f1f8e15e93981a","modified":1590638638640},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/30/fec239b163f62bb18c2e0806867c7ad9967fcd","hash":"90890a72f89681939fbb88435c762bc57597fc4b","modified":1590638638707},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/33/4dc933ba49c1477c35015f70a3221bcf182349","hash":"697bd822fab12dea5e71275e76d25974ca3d5a9d","modified":1590638638817},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/39/301b6b68429fab414a851f91f2dd7bf2034478","hash":"71710faa1334ab6598fa682263a708ffdbdf99cb","modified":1590638638619},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/3b/7c51a0a6fea7f80453a43dcab4bf5733a0f0e7","hash":"c8455164dd76c45249f870a0235d9596817413d9","modified":1590638638731},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/3a/7602c470ef145498a95847c482fbdcbc58164b","hash":"dfc9045b2c8d29ee32b3369542ac292b24382269","modified":1590638638801},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/40/32a20b0af740d5fa05ff9dfeef6a0dab3c3825","hash":"193f17da56dde2e54f60e956d12894517d132cff","modified":1590638638826},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/40/24b6622b889bb65476341a48a4e5b6485b16b9","hash":"f6331b4e38ce6c603dd7650e011a2b964976aa73","modified":1590638638137},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/42/63be3241b447ba64647609a2ee6b1b92ab0eb1","hash":"7cef300416411b1315edf199f5d8051087268175","modified":1590638638643},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/45/8fdb3f0ab57a83c88f72d963809e6fc9b6106a","hash":"307c75f6e38521c3f6ff146f0b174c9ec4bb854a","modified":1590638638622},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/46/1bf2fc0f61de73b9b25c9e2eea1787caec7a84","hash":"d31a31bffdcd57bc1a1de1b7790b2194a27dfeb0","modified":1590638638804},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/4b/df5bf4d4cf568ab7a5b51ab2e88c45bd598cab","hash":"db13abb5ed98e215d03b2a65f7e5febac9cb17de","modified":1590638638575},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/49/41444632498631940a0e6106f454e1e25e6ebc","hash":"b1f401590e8b53d5999e4d5ddfa0f81683310a33","modified":1590638638736},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/4b/2c7a1b37a62dd255bfc19297f2c6d2bb88346a","hash":"dabae0c10e94cc49caa31582723a45a82109cec5","modified":1590638638644},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/4f/8d56be3941572e3fe5421bf33c757468c44c19","hash":"b6ac8132f80fa89b792ec64d30abffc22413f03e","modified":1590638637787},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/56/19c2c7f0282cfa7d4a6cab4777945e6ceb1463","hash":"ea8a6688683cbf62d1920ed9c169da5b0fa2fab1","modified":1590638638769},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/56/f63c69c47ae31639485601a5859297a239cc6f","hash":"8ed65635597dece691df02ebbe2d985528ca66a3","modified":1590638638609},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/5a/6e7c5761a1e24c8896bbed9db175d5979125a9","hash":"1ee6ea502295a18a713ba85d05ec3d87fe9f83c5","modified":1590638638589},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/60/77ab17b1df5c9d914f4745088ae01c2768ea20","hash":"061eff46bd1ba075d66b05f39fd23fa9d1755e16","modified":1590638638706},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/64/08630019fa4b8a6147942be19329d3a024b849","hash":"460510cc23c4b932c39f7b4e990ed03f668730c4","modified":1590638638633},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/6b/73edf6ba6acd075210ab5005d47defc2ac2d14","hash":"33c3e8dbe332c95138b5bcf283ab3df2e8ee03a5","modified":1590638638815},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/6e/a55ee0c25e38e59dd9180ff3ebc93caa10404b","hash":"915dc1e9a40174dd9132cb6ef73db0fc78e8c9b2","modified":1590638638906},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/6f/65f34e7291fb6459ac804b2c7ca0e38fdb3663","hash":"bac219f79416e37aae91c542a773b77551da9d6d","modified":1590638638806},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/74/f0a317225eac03e8fc37dec830f4eb0d3a814b","hash":"fa777f60e4bd262b4a8d50ce888f907a2afd3a6d","modified":1590638638854},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/79/2452b9c4f5ecf26526be3ef8da0c660e502dd5","hash":"7f937f083c7d27ee4fa79cb54985266d97708f99","modified":1590638638719},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/70/80ec7b94b383984e82bfc893d66e09013dd94c","hash":"53c992ab8f40e2b6a54ef419b93a58fbe4cbbbdd","modified":1590638638572},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/7b/0025757e2c89a00284eb8e1cb4148555b4a4df","hash":"d14b5998c6a4d50d1d1c5e10c34bb720248c69ad","modified":1590638637785},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/80/41a2a43c8b7fc007fb55ef3dd6a7c7dbb3ef62","hash":"a8483285d5cef954a7e14c72c3158e2653d7c202","modified":1590638638885},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/89/bac08cdb0767be3cf8215677ec2433e8425827","hash":"44a6eeb03ed71d36f19efec6b40ad6dccd7c9281","modified":1590638638583},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/8a/7cf47817d65714592775c9b1e35af2b8f1e4f9","hash":"df0dff8bdc0555a5d12f5c3fffa7b77db9b62f47","modified":1590638638710},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/90/c7612ab63556379d1741170fc31f3b6e95c519","hash":"86404c3666b06940af108cbbd4b4f6da083ac47e","modified":1590638638754},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/92/75969702da6e2f8ac8b289d13ebcecdf54aca1","hash":"adf07286f57ddef65f9186953e6ecbacae652554","modified":1590638638586},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/93/d947eb840662419d3c62b6f2ac5a4f02035b95","hash":"e8a966be12d37d9528741c6f0851c36f1bb1d2a4","modified":1590638638901},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/96/0cbbff991cc89ba1ee261d59cb9154ad7b76f1","hash":"d17e3769212e465d8b99d96aabe4669c2a60b169","modified":1590638638649},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/a3/2592676df76c13f72949d7d3746c801f46938c","hash":"d7876f7b86933585103071c5ddcd918cf68f7496","modified":1590638638908},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/a3/6976d83aa0487c46381de57c30e8b5943d359b","hash":"899c68004fd7b8164063e931a5b6ee5094830ba6","modified":1590638638711},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/ab/756d8d867b4e0b5da0166e5c1d4dace55f9c53","hash":"27dfb04d5018a6b50370a83a29873aad4683cbb6","modified":1590638637792},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/ae/0411256e428c13706285000adbe22476d0f66d","hash":"b5ff0dfae60b8415cdbbc05dcbb649ce5f749f14","modified":1590638638809},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/b1/9d79e11d24815051366d53ed5358a14bf830d2","hash":"0b4965d4e8318ec591316c6af852f2f15e2b12b8","modified":1590638638821},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/b5/644cf97c72736810ec020c369afdd4263ae01c","hash":"ca9747feef806f925d8b5571de93550323525239","modified":1590638638646},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/ba/d2ba635e0aa4255aca65740201eca0f42fe1cb","hash":"3ad89c9f237c3938ea0af4d6f7da4a49af658263","modified":1590638638714},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/bc/4589570f8ec8ee46860dc2c68065b78789a9c1","hash":"707a1d0e7b78235e46bae873ddb5b5900b530374","modified":1590638638655},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/bd/2bef190fd335e8410ffb2914351b850ee8f1aa","hash":"108b6f7e75fa56f4d75c9981e22847bc06bbb39a","modified":1590638638614},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/c0/10862ad5a0edb0e96ae58ea62bf2d430b22414","hash":"69cfd2be76e0fe96e2c5a4989393a6134cd747e1","modified":1590638638814},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/c3/61dbcbd4773d0c2165eb44238fea5e9413843a","hash":"09f9375ec4002f33b80a6bff4cca4622cf1f32f6","modified":1590638638747},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/c8/24f7d9a0d24d089a3872df9ba175b949579a08","hash":"1b05c4f61e3b1f76580fb2ea497decd5aec35661","modified":1590638637783},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/ca/b5a2aadaaed4f682a9c1da45a278fd7ff7dfe7","hash":"f5a0dda19457dc28cc9db77eb37b3e0900b18423","modified":1590638637780},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/cb/a77ea4a5e96bbf94082123c0e0639b75ae0179","hash":"8252b21c8209694f49429833200e546e957d3ac6","modified":1590638638625},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/d1/1939991c67795da7c817ca44806181c854acf4","hash":"f0b34eebf859902219389a01386aa88a7d9ba808","modified":1590638638808},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/d2/4233567e81491cf27cfc5f2e63fcfe590fdeb2","hash":"7100c4e7d2c9fd0898d3de1e806cb6d34169b603","modified":1590638638740},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/d2/5908f53de205cf1976fbc7e3dd1bd0baefc0d5","hash":"1e8230f3569885c15d717689a51dd077a3285ef1","modified":1590638638628},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/d3/1c1d210b347df308099715f33720c01ecb9945","hash":"eec542e17c1f9d799aae88697b3d596a9d2b8f73","modified":1590638638605},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/d8/0f620680eaa661998f65e6a1929d356bae07cc","hash":"9852dfdf665f6c649979ac64c7d7febdd582673d","modified":1590638638767},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/d8/2722649e61b2e7c21b6ee8fb4174031201b20d","hash":"a3351bb950977b22f57e0c824866295393eb3d7a","modified":1590638638773},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/d9/7b4b7f975f04932c824cf646e95c1fed66664b","hash":"ea17ef8615d25fdb45d8f290e8af2b8212157d06","modified":1590638638712},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/e3/38936c5d923a0d0f60cf4f76374d1ee74022a2","hash":"ed004adfd92be4631fd5cb705af8a42d4fa657ab","modified":1590638638576},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/e5/a3e354c253bdb9dff5fedae7463cc06c0a69ac","hash":"793a2534c4cb340f13b30857b53ce9113a53ce59","modified":1590638638762},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/e6/a0f9c62d1f7866c6a3349e137555d142b50780","hash":"8b3f26b34bd35914849eefd846bfa0b7eb073f69","modified":1590638638811},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/e7/2a5ba9e434c1051c2d10f737d95f541277b49a","hash":"97a85b411dc7e255aaf0c3a265922b3b2d7a53be","modified":1590638638637},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/eb/1d0316f39bac337a4843cc8e597f6c0563806d","hash":"07a1d2d6e398a777479e7efa970d5288beff3c28","modified":1590638638758},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/ec/d6a5d6b7cf3e7ce54ea58260307b30a7a331d9","hash":"b7c7c3da357e574942bd7b7ed842054c37332c4f","modified":1590638638780},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/f2/9261e899a8e571a59b2ee4f59df7b96cd81579","hash":"6dbb8a2ba75b45f62421f47dc6d876a536433f06","modified":1590638638727},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/f6/ed643508f405a6f2a45abd077ac728d3d09494","hash":"aa147c7acb21d26119c6240fb8ac2514fab35671","modified":1590638638893},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/fd/cc461671f184610f82aa961344e24595f25897","hash":"4dbe84294a80225ff13b14164b727f0dcf26b7af","modified":1590638638870},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/fe/a0502bf264614498eac116aaa0b4143fcaccf8","hash":"1ecc5db490450e97dc0ad6de5e43421d57ada2df","modified":1590638638890},{"_id":"source/plugs/hexo-prettify-highlight/.git/objects/ff/bff0c3038cd46d487621ffcd941621b7c4fb47","hash":"04b84172ba24a7a73a1fbd730fc92e59b0a9e630","modified":1590638638577},{"_id":"source/plugs/hexo-prettify-highlight/.git/refs/heads/master","hash":"b6d10a08c79c03a2be1611780f174ebed92528d7","modified":1590638638937},{"_id":"source/plugs/hexo-prettify-highlight/.git/logs/refs/heads/master","hash":"ea1a9689e32f03fdb0b95e35e124865bb1b0e5c3","modified":1590638638938},{"_id":"source/plugs/hexo-prettify-highlight/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1590638638930},{"_id":"source/plugs/hexo-prettify-highlight/.git/logs/refs/remotes/origin/HEAD","hash":"ea1a9689e32f03fdb0b95e35e124865bb1b0e5c3","modified":1590638638929}],"Category":[{"name":"未分类","_id":"ckahts7x30003zmz89sl9d09x"},{"name":"算法","_id":"ckahts7xi000ezmz8g8a30jxa"},{"name":"node.js","_id":"ckahts7xm000lzmz8da61ep7c"},{"name":"前端","_id":"ckahts7xq000qzmz847tfhynn"},{"name":"HTTP","_id":"ckahts7xx000wzmz8hpqc5ox4"},{"name":"前端","parent":"ckahts7xm000lzmz8da61ep7c","_id":"ckahts7y60014zmz89cxrc2jd"},{"name":"后端","parent":"ckahts7xm000lzmz8da61ep7c","_id":"ckahts7ya001czmz85t1x4itj"},{"name":"前端","parent":"ckahts7xx000wzmz8hpqc5ox4","_id":"ckahts7yx001rzmz8geynexlw"},{"name":"数据库","parent":"ckahts7ya001czmz85t1x4itj","_id":"ckahts7z1001yzmz8b8m94bny"},{"name":"数据挖掘","_id":"ckahts7z70027zmz8euu83oy3"},{"name":"扯淡集","_id":"ckahts7za002ezmz88rv1ehh7"},{"name":"面试","parent":"ckahts7xq000qzmz847tfhynn","_id":"ckahts7zd002lzmz8hbou41dt"},{"name":"操作系统","_id":"ckahts7zg002uzmz8che5hqn4"},{"name":"数据库","_id":"ckahts7zl0034zmz8gpyccs97"},{"name":"算法","parent":"ckahts7z70027zmz8euu83oy3","_id":"ckahts7zo003czmz88z4ehxxz"},{"name":"面试","_id":"ckahts7zs003lzmz8detw6ji5"},{"name":"后端","parent":"ckahts7yx001rzmz8geynexlw","_id":"ckahts8040046zmz8e8x8famz"}],"Data":[],"Page":[{"title":"示例页面","url":"2.html","id":2,"comments":0,"date":"2017-12-23T09:19:50.000Z","_content":"\n这是一个范例页面。它和博客文章不同，因为它的页面位置是固定的，同时会显示于您的博客导航栏（大多数主题中）。大多数人会新增一个“关于”页面向访客介绍自己。它可能类似下面这样：\n\n> 我是一个很有趣的人，我创建了工厂和庄园。并且，顺便提一下，我的妻子也很好。\n\n……或下面这样：\n\n> XYZ装置公司成立于1971年，公司成立以来，我们一直向市民提供高品质的装置。我们位于北京市，有超过2,000名员工，对北京市有着相当大的贡献。\n\n作为一个新的WordPress用户，您可以前往[您的仪表盘](http://bugzhang.com/wp-admin/)删除这个页面，并建立属于您的全新内容。祝您使用愉快！","source":"sample-page/index.md","raw":"---\ntitle: 示例页面\nurl: 2.html\nid: 2\ncomments: false\ndate: 2017-12-23 17:19:50\n---\n\n这是一个范例页面。它和博客文章不同，因为它的页面位置是固定的，同时会显示于您的博客导航栏（大多数主题中）。大多数人会新增一个“关于”页面向访客介绍自己。它可能类似下面这样：\n\n> 我是一个很有趣的人，我创建了工厂和庄园。并且，顺便提一下，我的妻子也很好。\n\n……或下面这样：\n\n> XYZ装置公司成立于1971年，公司成立以来，我们一直向市民提供高品质的装置。我们位于北京市，有超过2,000名员工，对北京市有着相当大的贡献。\n\n作为一个新的WordPress用户，您可以前往[您的仪表盘](http://bugzhang.com/wp-admin/)删除这个页面，并建立属于您的全新内容。祝您使用愉快！","updated":"2020-05-19T08:33:55.937Z","path":"sample-page/index.html","layout":"page","_id":"ckahts7wz0001zmz853y13jjg","content":"<p>这是一个范例页面。它和博客文章不同，因为它的页面位置是固定的，同时会显示于您的博客导航栏（大多数主题中）。大多数人会新增一个“关于”页面向访客介绍自己。它可能类似下面这样：</p>\n<blockquote>\n<p>我是一个很有趣的人，我创建了工厂和庄园。并且，顺便提一下，我的妻子也很好。</p>\n</blockquote>\n<p>……或下面这样：</p>\n<blockquote>\n<p>XYZ装置公司成立于1971年，公司成立以来，我们一直向市民提供高品质的装置。我们位于北京市，有超过2,000名员工，对北京市有着相当大的贡献。</p>\n</blockquote>\n<p>作为一个新的WordPress用户，您可以前往<a href=\"http://bugzhang.com/wp-admin/\">您的仪表盘</a>删除这个页面，并建立属于您的全新内容。祝您使用愉快！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这是一个范例页面。它和博客文章不同，因为它的页面位置是固定的，同时会显示于您的博客导航栏（大多数主题中）。大多数人会新增一个“关于”页面向访客介绍自己。它可能类似下面这样：</p>\n<blockquote>\n<p>我是一个很有趣的人，我创建了工厂和庄园。并且，顺便提一下，我的妻子也很好。</p>\n</blockquote>\n<p>……或下面这样：</p>\n<blockquote>\n<p>XYZ装置公司成立于1971年，公司成立以来，我们一直向市民提供高品质的装置。我们位于北京市，有超过2,000名员工，对北京市有着相当大的贡献。</p>\n</blockquote>\n<p>作为一个新的WordPress用户，您可以前往<a href=\"http://bugzhang.com/wp-admin/\">您的仪表盘</a>删除这个页面，并建立属于您的全新内容。祝您使用愉快！</p>\n"},{"_content":"# hexo博客系统 代码高亮插件 #\n\nhexo的默认高亮插件总感觉支持的太少，代码高亮显示的不够细，下面我们来看下怎么把它替换为prettify高亮插件\n\n## hexo-prettify-highlight ##\n\n> 一个为[Hexo](https://hexo.io/)打造的，具有多个可选的代码高亮的主题插件\n\n### 安装 ###\n\n##### 1.下载 #####\n\n```tcl\n$ git clone https://github.com/caitb/hexo-prettify-highlight.git source/plugs/hexo-prettify-highlight\n```\n\n##### 2.修改hexo博客系统根目录的配置文件`_config.yml` #####\n\n（1）将`highlight`插件禁用\n\n```yaml\nhighlight:\n  enable: false        #这里设置为false，禁用highlight\n  line_number: false\n  auto_detect: false\n  tab_replace:\n```\n\n（2）增加如下配置\n\n```yaml\nhighlight_prettify:\n  enable: true\n  skin: tomorrow-night-blue          #这里是主题的文件名\n  prefix_path: '/plugs/hexo-prettify-highlight/'  #插件根目录\n```\n\n(3)接着我们还要对`hexo`的`_config.yml`做如下配置\n\n```yaml\nskip_render:\n  - 'plugs/hexo-prettify-highlight/js/**'\n```\n\n这个配置就是要告诉`hexo`对`plugins`目录下的`js`文件跳过解析渲染，因为测试时发现如果不配置，加载`hexo-prettify-highlight`的相关js会报脚本错误，猜测hexo渲染造成的编码问题\n\n### 2.引用插件 ###\n\n在`xxx `主题展示文章的页面加入样式和脚本，这里以`*.pug`模板为例\n\n```javascript\n  //在head中加入如下代码\n  if config.highlight_prettify && config.highlight_prettify.enable\n      link(rel='stylesheet', href=config.highlight_prettify.prefix_path + 'themes/'+config.highlight_prettify.skin+'.css')\n  \n  \n  //在页面底部(为了页面友好展示)引入如下代码\n  if config.highlight_prettify && config.highlight_prettify.enable\n        script(src=config.highlight_prettify.prefix_path + 'js/jquery-2.2.4.min.js')\n        script(src=config.highlight_prettify.prefix_path + 'js/prettify.js')\n        script.\n            $(window).load(function () {\n                $('pre').addClass('prettyprint linenums').attr('style', 'overflow:auto;');\n                prettyPrint();\n            });\n```\n\n### 3.安装`hexo-renderer-sass`依赖插件 ###\n\n该插件的样式文件是`*.scss`,所以需要安装`hexo-renderer-sass`编译这些文件\n\n```tcl\n$ npm install --save hexo-renderer-sass\n```\n\n","source":"plugs/hexo-prettify-highlight/readme.md","raw":"# hexo博客系统 代码高亮插件 #\n\nhexo的默认高亮插件总感觉支持的太少，代码高亮显示的不够细，下面我们来看下怎么把它替换为prettify高亮插件\n\n## hexo-prettify-highlight ##\n\n> 一个为[Hexo](https://hexo.io/)打造的，具有多个可选的代码高亮的主题插件\n\n### 安装 ###\n\n##### 1.下载 #####\n\n```tcl\n$ git clone https://github.com/caitb/hexo-prettify-highlight.git source/plugs/hexo-prettify-highlight\n```\n\n##### 2.修改hexo博客系统根目录的配置文件`_config.yml` #####\n\n（1）将`highlight`插件禁用\n\n```yaml\nhighlight:\n  enable: false        #这里设置为false，禁用highlight\n  line_number: false\n  auto_detect: false\n  tab_replace:\n```\n\n（2）增加如下配置\n\n```yaml\nhighlight_prettify:\n  enable: true\n  skin: tomorrow-night-blue          #这里是主题的文件名\n  prefix_path: '/plugs/hexo-prettify-highlight/'  #插件根目录\n```\n\n(3)接着我们还要对`hexo`的`_config.yml`做如下配置\n\n```yaml\nskip_render:\n  - 'plugs/hexo-prettify-highlight/js/**'\n```\n\n这个配置就是要告诉`hexo`对`plugins`目录下的`js`文件跳过解析渲染，因为测试时发现如果不配置，加载`hexo-prettify-highlight`的相关js会报脚本错误，猜测hexo渲染造成的编码问题\n\n### 2.引用插件 ###\n\n在`xxx `主题展示文章的页面加入样式和脚本，这里以`*.pug`模板为例\n\n```javascript\n  //在head中加入如下代码\n  if config.highlight_prettify && config.highlight_prettify.enable\n      link(rel='stylesheet', href=config.highlight_prettify.prefix_path + 'themes/'+config.highlight_prettify.skin+'.css')\n  \n  \n  //在页面底部(为了页面友好展示)引入如下代码\n  if config.highlight_prettify && config.highlight_prettify.enable\n        script(src=config.highlight_prettify.prefix_path + 'js/jquery-2.2.4.min.js')\n        script(src=config.highlight_prettify.prefix_path + 'js/prettify.js')\n        script.\n            $(window).load(function () {\n                $('pre').addClass('prettyprint linenums').attr('style', 'overflow:auto;');\n                prettyPrint();\n            });\n```\n\n### 3.安装`hexo-renderer-sass`依赖插件 ###\n\n该插件的样式文件是`*.scss`,所以需要安装`hexo-renderer-sass`编译这些文件\n\n```tcl\n$ npm install --save hexo-renderer-sass\n```\n\n","date":"2020-05-28T04:03:58.954Z","updated":"2020-05-28T04:03:58.954Z","path":"plugs/hexo-prettify-highlight/readme.html","title":"","comments":1,"layout":"page","_id":"ckaq9am6o00006hz40k7v1dfg","content":"<h1 id=\"hexo博客系统-代码高亮插件\"><a href=\"#hexo博客系统-代码高亮插件\" class=\"headerlink\" title=\"hexo博客系统 代码高亮插件\"></a>hexo博客系统 代码高亮插件</h1><p>hexo的默认高亮插件总感觉支持的太少，代码高亮显示的不够细，下面我们来看下怎么把它替换为prettify高亮插件</p>\n<h2 id=\"hexo-prettify-highlight\"><a href=\"#hexo-prettify-highlight\" class=\"headerlink\" title=\"hexo-prettify-highlight\"></a>hexo-prettify-highlight</h2><blockquote>\n<p>一个为<a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>打造的，具有多个可选的代码高亮的主题插件</p>\n</blockquote>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><h5 id=\"1-下载\"><a href=\"#1-下载\" class=\"headerlink\" title=\"1.下载\"></a>1.下载</h5><pre><code class=\"tcl\">$ git clone https://github.com/caitb/hexo-prettify-highlight.git source/plugs/hexo-prettify-highlight</code></pre>\n<h5 id=\"2-修改hexo博客系统根目录的配置文件-config-yml\"><a href=\"#2-修改hexo博客系统根目录的配置文件-config-yml\" class=\"headerlink\" title=\"2.修改hexo博客系统根目录的配置文件_config.yml\"></a>2.修改hexo博客系统根目录的配置文件<code>_config.yml</code></h5><p>（1）将<code>highlight</code>插件禁用</p>\n<pre><code class=\"yaml\">highlight:\n  enable: false        #这里设置为false，禁用highlight\n  line_number: false\n  auto_detect: false\n  tab_replace:</code></pre>\n<p>（2）增加如下配置</p>\n<pre><code class=\"yaml\">highlight_prettify:\n  enable: true\n  skin: tomorrow-night-blue          #这里是主题的文件名\n  prefix_path: &#39;/plugs/hexo-prettify-highlight/&#39;  #插件根目录</code></pre>\n<p>(3)接着我们还要对<code>hexo</code>的<code>_config.yml</code>做如下配置</p>\n<pre><code class=\"yaml\">skip_render:\n  - &#39;plugs/hexo-prettify-highlight/js/**&#39;</code></pre>\n<p>这个配置就是要告诉<code>hexo</code>对<code>plugins</code>目录下的<code>js</code>文件跳过解析渲染，因为测试时发现如果不配置，加载<code>hexo-prettify-highlight</code>的相关js会报脚本错误，猜测hexo渲染造成的编码问题</p>\n<h3 id=\"2-引用插件\"><a href=\"#2-引用插件\" class=\"headerlink\" title=\"2.引用插件\"></a>2.引用插件</h3><p>在<code>xxx</code>主题展示文章的页面加入样式和脚本，这里以<code>*.pug</code>模板为例</p>\n<pre><code class=\"javascript\">  //在head中加入如下代码\n  if config.highlight_prettify &amp;&amp; config.highlight_prettify.enable\n      link(rel=&#39;stylesheet&#39;, href=config.highlight_prettify.prefix_path + &#39;themes/&#39;+config.highlight_prettify.skin+&#39;.css&#39;)\n\n\n  //在页面底部(为了页面友好展示)引入如下代码\n  if config.highlight_prettify &amp;&amp; config.highlight_prettify.enable\n        script(src=config.highlight_prettify.prefix_path + &#39;js/jquery-2.2.4.min.js&#39;)\n        script(src=config.highlight_prettify.prefix_path + &#39;js/prettify.js&#39;)\n        script.\n            $(window).load(function () {\n                $(&#39;pre&#39;).addClass(&#39;prettyprint linenums&#39;).attr(&#39;style&#39;, &#39;overflow:auto;&#39;);\n                prettyPrint();\n            });</code></pre>\n<h3 id=\"3-安装hexo-renderer-sass依赖插件\"><a href=\"#3-安装hexo-renderer-sass依赖插件\" class=\"headerlink\" title=\"3.安装hexo-renderer-sass依赖插件\"></a>3.安装<code>hexo-renderer-sass</code>依赖插件</h3><p>该插件的样式文件是<code>*.scss</code>,所以需要安装<code>hexo-renderer-sass</code>编译这些文件</p>\n<pre><code class=\"tcl\">$ npm install --save hexo-renderer-sass</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"hexo博客系统-代码高亮插件\"><a href=\"#hexo博客系统-代码高亮插件\" class=\"headerlink\" title=\"hexo博客系统 代码高亮插件\"></a>hexo博客系统 代码高亮插件</h1><p>hexo的默认高亮插件总感觉支持的太少，代码高亮显示的不够细，下面我们来看下怎么把它替换为prettify高亮插件</p>\n<h2 id=\"hexo-prettify-highlight\"><a href=\"#hexo-prettify-highlight\" class=\"headerlink\" title=\"hexo-prettify-highlight\"></a>hexo-prettify-highlight</h2><blockquote>\n<p>一个为<a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>打造的，具有多个可选的代码高亮的主题插件</p>\n</blockquote>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><h5 id=\"1-下载\"><a href=\"#1-下载\" class=\"headerlink\" title=\"1.下载\"></a>1.下载</h5><pre><code class=\"tcl\">$ git clone https://github.com/caitb/hexo-prettify-highlight.git source/plugs/hexo-prettify-highlight</code></pre>\n<h5 id=\"2-修改hexo博客系统根目录的配置文件-config-yml\"><a href=\"#2-修改hexo博客系统根目录的配置文件-config-yml\" class=\"headerlink\" title=\"2.修改hexo博客系统根目录的配置文件_config.yml\"></a>2.修改hexo博客系统根目录的配置文件<code>_config.yml</code></h5><p>（1）将<code>highlight</code>插件禁用</p>\n<pre><code class=\"yaml\">highlight:\n  enable: false        #这里设置为false，禁用highlight\n  line_number: false\n  auto_detect: false\n  tab_replace:</code></pre>\n<p>（2）增加如下配置</p>\n<pre><code class=\"yaml\">highlight_prettify:\n  enable: true\n  skin: tomorrow-night-blue          #这里是主题的文件名\n  prefix_path: &#39;/plugs/hexo-prettify-highlight/&#39;  #插件根目录</code></pre>\n<p>(3)接着我们还要对<code>hexo</code>的<code>_config.yml</code>做如下配置</p>\n<pre><code class=\"yaml\">skip_render:\n  - &#39;plugs/hexo-prettify-highlight/js/**&#39;</code></pre>\n<p>这个配置就是要告诉<code>hexo</code>对<code>plugins</code>目录下的<code>js</code>文件跳过解析渲染，因为测试时发现如果不配置，加载<code>hexo-prettify-highlight</code>的相关js会报脚本错误，猜测hexo渲染造成的编码问题</p>\n<h3 id=\"2-引用插件\"><a href=\"#2-引用插件\" class=\"headerlink\" title=\"2.引用插件\"></a>2.引用插件</h3><p>在<code>xxx</code>主题展示文章的页面加入样式和脚本，这里以<code>*.pug</code>模板为例</p>\n<pre><code class=\"javascript\">  //在head中加入如下代码\n  if config.highlight_prettify &amp;&amp; config.highlight_prettify.enable\n      link(rel=&#39;stylesheet&#39;, href=config.highlight_prettify.prefix_path + &#39;themes/&#39;+config.highlight_prettify.skin+&#39;.css&#39;)\n\n\n  //在页面底部(为了页面友好展示)引入如下代码\n  if config.highlight_prettify &amp;&amp; config.highlight_prettify.enable\n        script(src=config.highlight_prettify.prefix_path + &#39;js/jquery-2.2.4.min.js&#39;)\n        script(src=config.highlight_prettify.prefix_path + &#39;js/prettify.js&#39;)\n        script.\n            $(window).load(function () {\n                $(&#39;pre&#39;).addClass(&#39;prettyprint linenums&#39;).attr(&#39;style&#39;, &#39;overflow:auto;&#39;);\n                prettyPrint();\n            });</code></pre>\n<h3 id=\"3-安装hexo-renderer-sass依赖插件\"><a href=\"#3-安装hexo-renderer-sass依赖插件\" class=\"headerlink\" title=\"3.安装hexo-renderer-sass依赖插件\"></a>3.安装<code>hexo-renderer-sass</code>依赖插件</h3><p>该插件的样式文件是<code>*.scss</code>,所以需要安装<code>hexo-renderer-sass</code>编译这些文件</p>\n<pre><code class=\"tcl\">$ npm install --save hexo-renderer-sass</code></pre>\n"},{"_content":"@import \"colors/atelier-cave-dark\";\n@import \"base\";\n@include prettyprint();\n","source":"plugs/hexo-prettify-highlight/themes/atelier-cave-dark.scss","raw":"@import \"colors/atelier-cave-dark\";\n@import \"base\";\n@include prettyprint();\n","date":"2020-05-28T04:03:58.959Z","updated":"2020-05-28T04:03:58.959Z","path":"plugs/hexo-prettify-highlight/themes/atelier-cave-dark.css","layout":"false","title":"","comments":1,"_id":"ckaq9am7u00016hz4eoeaaz25","content":".prettyprint {\n  background: #19171c;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #efecf4; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #2a9292; }\n  /* keyword */\n  .kwd {\n    color: #955ae7; }\n  /* comment */\n  .com {\n    color: #655f6d; }\n  /* type name */\n  .typ {\n    color: #576ddb; }\n  /* literal value */\n  .lit {\n    color: #aa573c; }\n  /* punctuation */\n  .pun {\n    color: #efecf4; }\n  /* lisp open bracket */\n  .opn {\n    color: #efecf4; }\n  /* lisp close bracket */\n  .clo {\n    color: #efecf4; }\n  /* markup tag name */\n  .tag {\n    color: #be4678; }\n  /* markup attribute name */\n  .atn {\n    color: #aa573c; }\n  /* markup attribute value */\n  .atv {\n    color: #398bc6; }\n  /* declaration */\n  .dec {\n    color: #aa573c; }\n  /* variable name */\n  .var {\n    color: #be4678; }\n  /* function name */\n  .fun {\n    color: #576ddb; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #655f6d; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #19171c;\n  list-style-type: decimal; }\n","site":{"data":{}},"excerpt":"","more":".prettyprint {\n  background: #19171c;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #efecf4; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #2a9292; }\n  /* keyword */\n  .kwd {\n    color: #955ae7; }\n  /* comment */\n  .com {\n    color: #655f6d; }\n  /* type name */\n  .typ {\n    color: #576ddb; }\n  /* literal value */\n  .lit {\n    color: #aa573c; }\n  /* punctuation */\n  .pun {\n    color: #efecf4; }\n  /* lisp open bracket */\n  .opn {\n    color: #efecf4; }\n  /* lisp close bracket */\n  .clo {\n    color: #efecf4; }\n  /* markup tag name */\n  .tag {\n    color: #be4678; }\n  /* markup attribute name */\n  .atn {\n    color: #aa573c; }\n  /* markup attribute value */\n  .atv {\n    color: #398bc6; }\n  /* declaration */\n  .dec {\n    color: #aa573c; }\n  /* variable name */\n  .var {\n    color: #be4678; }\n  /* function name */\n  .fun {\n    color: #576ddb; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #655f6d; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #19171c;\n  list-style-type: decimal; }\n"},{"_content":"@import \"colors/atelier-cave-light\";\n@import \"base\";\n@include prettyprint();\n","source":"plugs/hexo-prettify-highlight/themes/atelier-cave-light.scss","raw":"@import \"colors/atelier-cave-light\";\n@import \"base\";\n@include prettyprint();\n","date":"2020-05-28T04:03:58.963Z","updated":"2020-05-28T04:03:58.963Z","path":"plugs/hexo-prettify-highlight/themes/atelier-cave-light.css","layout":"false","title":"","comments":1,"_id":"ckaq9am7v00026hz4fu18dbx0","content":".prettyprint {\n  background: #efecf4;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #19171c; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #2a9292; }\n  /* keyword */\n  .kwd {\n    color: #955ae7; }\n  /* comment */\n  .com {\n    color: #7e7887; }\n  /* type name */\n  .typ {\n    color: #576ddb; }\n  /* literal value */\n  .lit {\n    color: #aa573c; }\n  /* punctuation */\n  .pun {\n    color: #19171c; }\n  /* lisp open bracket */\n  .opn {\n    color: #19171c; }\n  /* lisp close bracket */\n  .clo {\n    color: #19171c; }\n  /* markup tag name */\n  .tag {\n    color: #be4678; }\n  /* markup attribute name */\n  .atn {\n    color: #aa573c; }\n  /* markup attribute value */\n  .atv {\n    color: #398bc6; }\n  /* declaration */\n  .dec {\n    color: #aa573c; }\n  /* variable name */\n  .var {\n    color: #be4678; }\n  /* function name */\n  .fun {\n    color: #576ddb; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #7e7887; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #efecf4;\n  list-style-type: decimal; }\n","site":{"data":{}},"excerpt":"","more":".prettyprint {\n  background: #efecf4;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #19171c; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #2a9292; }\n  /* keyword */\n  .kwd {\n    color: #955ae7; }\n  /* comment */\n  .com {\n    color: #7e7887; }\n  /* type name */\n  .typ {\n    color: #576ddb; }\n  /* literal value */\n  .lit {\n    color: #aa573c; }\n  /* punctuation */\n  .pun {\n    color: #19171c; }\n  /* lisp open bracket */\n  .opn {\n    color: #19171c; }\n  /* lisp close bracket */\n  .clo {\n    color: #19171c; }\n  /* markup tag name */\n  .tag {\n    color: #be4678; }\n  /* markup attribute name */\n  .atn {\n    color: #aa573c; }\n  /* markup attribute value */\n  .atv {\n    color: #398bc6; }\n  /* declaration */\n  .dec {\n    color: #aa573c; }\n  /* variable name */\n  .var {\n    color: #be4678; }\n  /* function name */\n  .fun {\n    color: #576ddb; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #7e7887; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #efecf4;\n  list-style-type: decimal; }\n"},{"_content":"@import \"colors/atelier-dune-dark\";\n@import \"base\";\n@include prettyprint();\n","source":"plugs/hexo-prettify-highlight/themes/atelier-dune-dark.scss","raw":"@import \"colors/atelier-dune-dark\";\n@import \"base\";\n@include prettyprint();\n","date":"2020-05-28T04:03:58.964Z","updated":"2020-05-28T04:03:58.964Z","path":"plugs/hexo-prettify-highlight/themes/atelier-dune-dark.css","layout":"false","title":"","comments":1,"_id":"ckaq9am7w00036hz41mkz2wg4","content":".prettyprint {\n  background: #20201d;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #fefbec; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #60ac39; }\n  /* keyword */\n  .kwd {\n    color: #b854d4; }\n  /* comment */\n  .com {\n    color: #7d7a68; }\n  /* type name */\n  .typ {\n    color: #6684e1; }\n  /* literal value */\n  .lit {\n    color: #b65611; }\n  /* punctuation */\n  .pun {\n    color: #fefbec; }\n  /* lisp open bracket */\n  .opn {\n    color: #fefbec; }\n  /* lisp close bracket */\n  .clo {\n    color: #fefbec; }\n  /* markup tag name */\n  .tag {\n    color: #d73737; }\n  /* markup attribute name */\n  .atn {\n    color: #b65611; }\n  /* markup attribute value */\n  .atv {\n    color: #1fad83; }\n  /* declaration */\n  .dec {\n    color: #b65611; }\n  /* variable name */\n  .var {\n    color: #d73737; }\n  /* function name */\n  .fun {\n    color: #6684e1; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #7d7a68; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #20201d;\n  list-style-type: decimal; }\n","site":{"data":{}},"excerpt":"","more":".prettyprint {\n  background: #20201d;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #fefbec; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #60ac39; }\n  /* keyword */\n  .kwd {\n    color: #b854d4; }\n  /* comment */\n  .com {\n    color: #7d7a68; }\n  /* type name */\n  .typ {\n    color: #6684e1; }\n  /* literal value */\n  .lit {\n    color: #b65611; }\n  /* punctuation */\n  .pun {\n    color: #fefbec; }\n  /* lisp open bracket */\n  .opn {\n    color: #fefbec; }\n  /* lisp close bracket */\n  .clo {\n    color: #fefbec; }\n  /* markup tag name */\n  .tag {\n    color: #d73737; }\n  /* markup attribute name */\n  .atn {\n    color: #b65611; }\n  /* markup attribute value */\n  .atv {\n    color: #1fad83; }\n  /* declaration */\n  .dec {\n    color: #b65611; }\n  /* variable name */\n  .var {\n    color: #d73737; }\n  /* function name */\n  .fun {\n    color: #6684e1; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #7d7a68; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #20201d;\n  list-style-type: decimal; }\n"},{"_content":"@import \"colors/atelier-dune-light\";\n@import \"base\";\n@include prettyprint();\n","source":"plugs/hexo-prettify-highlight/themes/atelier-dune-light.scss","raw":"@import \"colors/atelier-dune-light\";\n@import \"base\";\n@include prettyprint();\n","date":"2020-05-28T04:03:58.964Z","updated":"2020-05-28T04:03:58.964Z","path":"plugs/hexo-prettify-highlight/themes/atelier-dune-light.css","layout":"false","title":"","comments":1,"_id":"ckaq9am7x00046hz4a8nkhz0m","content":".prettyprint {\n  background: #fefbec;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #20201d; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #60ac39; }\n  /* keyword */\n  .kwd {\n    color: #b854d4; }\n  /* comment */\n  .com {\n    color: #999580; }\n  /* type name */\n  .typ {\n    color: #6684e1; }\n  /* literal value */\n  .lit {\n    color: #b65611; }\n  /* punctuation */\n  .pun {\n    color: #20201d; }\n  /* lisp open bracket */\n  .opn {\n    color: #20201d; }\n  /* lisp close bracket */\n  .clo {\n    color: #20201d; }\n  /* markup tag name */\n  .tag {\n    color: #d73737; }\n  /* markup attribute name */\n  .atn {\n    color: #b65611; }\n  /* markup attribute value */\n  .atv {\n    color: #1fad83; }\n  /* declaration */\n  .dec {\n    color: #b65611; }\n  /* variable name */\n  .var {\n    color: #d73737; }\n  /* function name */\n  .fun {\n    color: #6684e1; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #999580; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #fefbec;\n  list-style-type: decimal; }\n","site":{"data":{}},"excerpt":"","more":".prettyprint {\n  background: #fefbec;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #20201d; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #60ac39; }\n  /* keyword */\n  .kwd {\n    color: #b854d4; }\n  /* comment */\n  .com {\n    color: #999580; }\n  /* type name */\n  .typ {\n    color: #6684e1; }\n  /* literal value */\n  .lit {\n    color: #b65611; }\n  /* punctuation */\n  .pun {\n    color: #20201d; }\n  /* lisp open bracket */\n  .opn {\n    color: #20201d; }\n  /* lisp close bracket */\n  .clo {\n    color: #20201d; }\n  /* markup tag name */\n  .tag {\n    color: #d73737; }\n  /* markup attribute name */\n  .atn {\n    color: #b65611; }\n  /* markup attribute value */\n  .atv {\n    color: #1fad83; }\n  /* declaration */\n  .dec {\n    color: #b65611; }\n  /* variable name */\n  .var {\n    color: #d73737; }\n  /* function name */\n  .fun {\n    color: #6684e1; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #999580; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #fefbec;\n  list-style-type: decimal; }\n"},{"_content":"@import \"colors/atelier-estuary-dark\";\n@import \"base\";\n@include prettyprint();\n","source":"plugs/hexo-prettify-highlight/themes/atelier-estuary-dark.scss","raw":"@import \"colors/atelier-estuary-dark\";\n@import \"base\";\n@include prettyprint();\n","date":"2020-05-28T04:03:58.965Z","updated":"2020-05-28T04:03:58.965Z","path":"plugs/hexo-prettify-highlight/themes/atelier-estuary-dark.css","layout":"false","title":"","comments":1,"_id":"ckaq9am7y00056hz4c9y3denc","content":".prettyprint {\n  background: #22221b;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #f4f3ec; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #7d9726; }\n  /* keyword */\n  .kwd {\n    color: #5f9182; }\n  /* comment */\n  .com {\n    color: #6c6b5a; }\n  /* type name */\n  .typ {\n    color: #36a166; }\n  /* literal value */\n  .lit {\n    color: #ae7313; }\n  /* punctuation */\n  .pun {\n    color: #f4f3ec; }\n  /* lisp open bracket */\n  .opn {\n    color: #f4f3ec; }\n  /* lisp close bracket */\n  .clo {\n    color: #f4f3ec; }\n  /* markup tag name */\n  .tag {\n    color: #ba6236; }\n  /* markup attribute name */\n  .atn {\n    color: #ae7313; }\n  /* markup attribute value */\n  .atv {\n    color: #5b9d48; }\n  /* declaration */\n  .dec {\n    color: #ae7313; }\n  /* variable name */\n  .var {\n    color: #ba6236; }\n  /* function name */\n  .fun {\n    color: #36a166; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #6c6b5a; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #22221b;\n  list-style-type: decimal; }\n","site":{"data":{}},"excerpt":"","more":".prettyprint {\n  background: #22221b;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #f4f3ec; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #7d9726; }\n  /* keyword */\n  .kwd {\n    color: #5f9182; }\n  /* comment */\n  .com {\n    color: #6c6b5a; }\n  /* type name */\n  .typ {\n    color: #36a166; }\n  /* literal value */\n  .lit {\n    color: #ae7313; }\n  /* punctuation */\n  .pun {\n    color: #f4f3ec; }\n  /* lisp open bracket */\n  .opn {\n    color: #f4f3ec; }\n  /* lisp close bracket */\n  .clo {\n    color: #f4f3ec; }\n  /* markup tag name */\n  .tag {\n    color: #ba6236; }\n  /* markup attribute name */\n  .atn {\n    color: #ae7313; }\n  /* markup attribute value */\n  .atv {\n    color: #5b9d48; }\n  /* declaration */\n  .dec {\n    color: #ae7313; }\n  /* variable name */\n  .var {\n    color: #ba6236; }\n  /* function name */\n  .fun {\n    color: #36a166; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #6c6b5a; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #22221b;\n  list-style-type: decimal; }\n"},{"_content":"@import \"colors/atelier-estuary-light\";\n@import \"base\";\n@include prettyprint();\n","source":"plugs/hexo-prettify-highlight/themes/atelier-estuary-light.scss","raw":"@import \"colors/atelier-estuary-light\";\n@import \"base\";\n@include prettyprint();\n","date":"2020-05-28T04:03:58.967Z","updated":"2020-05-28T04:03:58.967Z","path":"plugs/hexo-prettify-highlight/themes/atelier-estuary-light.css","layout":"false","title":"","comments":1,"_id":"ckaq9am7z00066hz4algs4qix","content":".prettyprint {\n  background: #f4f3ec;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #22221b; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #7d9726; }\n  /* keyword */\n  .kwd {\n    color: #5f9182; }\n  /* comment */\n  .com {\n    color: #878573; }\n  /* type name */\n  .typ {\n    color: #36a166; }\n  /* literal value */\n  .lit {\n    color: #ae7313; }\n  /* punctuation */\n  .pun {\n    color: #22221b; }\n  /* lisp open bracket */\n  .opn {\n    color: #22221b; }\n  /* lisp close bracket */\n  .clo {\n    color: #22221b; }\n  /* markup tag name */\n  .tag {\n    color: #ba6236; }\n  /* markup attribute name */\n  .atn {\n    color: #ae7313; }\n  /* markup attribute value */\n  .atv {\n    color: #5b9d48; }\n  /* declaration */\n  .dec {\n    color: #ae7313; }\n  /* variable name */\n  .var {\n    color: #ba6236; }\n  /* function name */\n  .fun {\n    color: #36a166; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #878573; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #f4f3ec;\n  list-style-type: decimal; }\n","site":{"data":{}},"excerpt":"","more":".prettyprint {\n  background: #f4f3ec;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #22221b; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #7d9726; }\n  /* keyword */\n  .kwd {\n    color: #5f9182; }\n  /* comment */\n  .com {\n    color: #878573; }\n  /* type name */\n  .typ {\n    color: #36a166; }\n  /* literal value */\n  .lit {\n    color: #ae7313; }\n  /* punctuation */\n  .pun {\n    color: #22221b; }\n  /* lisp open bracket */\n  .opn {\n    color: #22221b; }\n  /* lisp close bracket */\n  .clo {\n    color: #22221b; }\n  /* markup tag name */\n  .tag {\n    color: #ba6236; }\n  /* markup attribute name */\n  .atn {\n    color: #ae7313; }\n  /* markup attribute value */\n  .atv {\n    color: #5b9d48; }\n  /* declaration */\n  .dec {\n    color: #ae7313; }\n  /* variable name */\n  .var {\n    color: #ba6236; }\n  /* function name */\n  .fun {\n    color: #36a166; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #878573; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #f4f3ec;\n  list-style-type: decimal; }\n"},{"_content":"@import \"colors/atelier-forest-dark\";\n@import \"base\";\n@include prettyprint();\n","source":"plugs/hexo-prettify-highlight/themes/atelier-forest-dark.scss","raw":"@import \"colors/atelier-forest-dark\";\n@import \"base\";\n@include prettyprint();\n","date":"2020-05-28T04:03:58.968Z","updated":"2020-05-28T04:03:58.968Z","path":"plugs/hexo-prettify-highlight/themes/atelier-forest-dark.css","layout":"false","title":"","comments":1,"_id":"ckaq9am8000076hz4bpyjfdb6","content":".prettyprint {\n  background: #1b1918;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #f1efee; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #7b9726; }\n  /* keyword */\n  .kwd {\n    color: #6666ea; }\n  /* comment */\n  .com {\n    color: #766e6b; }\n  /* type name */\n  .typ {\n    color: #407ee7; }\n  /* literal value */\n  .lit {\n    color: #df5320; }\n  /* punctuation */\n  .pun {\n    color: #f1efee; }\n  /* lisp open bracket */\n  .opn {\n    color: #f1efee; }\n  /* lisp close bracket */\n  .clo {\n    color: #f1efee; }\n  /* markup tag name */\n  .tag {\n    color: #f22c40; }\n  /* markup attribute name */\n  .atn {\n    color: #df5320; }\n  /* markup attribute value */\n  .atv {\n    color: #3d97b8; }\n  /* declaration */\n  .dec {\n    color: #df5320; }\n  /* variable name */\n  .var {\n    color: #f22c40; }\n  /* function name */\n  .fun {\n    color: #407ee7; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #766e6b; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #1b1918;\n  list-style-type: decimal; }\n","site":{"data":{}},"excerpt":"","more":".prettyprint {\n  background: #1b1918;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #f1efee; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #7b9726; }\n  /* keyword */\n  .kwd {\n    color: #6666ea; }\n  /* comment */\n  .com {\n    color: #766e6b; }\n  /* type name */\n  .typ {\n    color: #407ee7; }\n  /* literal value */\n  .lit {\n    color: #df5320; }\n  /* punctuation */\n  .pun {\n    color: #f1efee; }\n  /* lisp open bracket */\n  .opn {\n    color: #f1efee; }\n  /* lisp close bracket */\n  .clo {\n    color: #f1efee; }\n  /* markup tag name */\n  .tag {\n    color: #f22c40; }\n  /* markup attribute name */\n  .atn {\n    color: #df5320; }\n  /* markup attribute value */\n  .atv {\n    color: #3d97b8; }\n  /* declaration */\n  .dec {\n    color: #df5320; }\n  /* variable name */\n  .var {\n    color: #f22c40; }\n  /* function name */\n  .fun {\n    color: #407ee7; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #766e6b; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #1b1918;\n  list-style-type: decimal; }\n"},{"_content":"@import \"colors/atelier-forest-light\";\n@import \"base\";\n@include prettyprint();\n","source":"plugs/hexo-prettify-highlight/themes/atelier-forest-light.scss","raw":"@import \"colors/atelier-forest-light\";\n@import \"base\";\n@include prettyprint();\n","date":"2020-05-28T04:03:58.969Z","updated":"2020-05-28T04:03:58.969Z","path":"plugs/hexo-prettify-highlight/themes/atelier-forest-light.css","layout":"false","title":"","comments":1,"_id":"ckaq9am8200086hz4fplk5icg","content":".prettyprint {\n  background: #f1efee;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #1b1918; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #7b9726; }\n  /* keyword */\n  .kwd {\n    color: #6666ea; }\n  /* comment */\n  .com {\n    color: #9c9491; }\n  /* type name */\n  .typ {\n    color: #407ee7; }\n  /* literal value */\n  .lit {\n    color: #df5320; }\n  /* punctuation */\n  .pun {\n    color: #1b1918; }\n  /* lisp open bracket */\n  .opn {\n    color: #1b1918; }\n  /* lisp close bracket */\n  .clo {\n    color: #1b1918; }\n  /* markup tag name */\n  .tag {\n    color: #f22c40; }\n  /* markup attribute name */\n  .atn {\n    color: #df5320; }\n  /* markup attribute value */\n  .atv {\n    color: #3d97b8; }\n  /* declaration */\n  .dec {\n    color: #df5320; }\n  /* variable name */\n  .var {\n    color: #f22c40; }\n  /* function name */\n  .fun {\n    color: #407ee7; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #9c9491; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #f1efee;\n  list-style-type: decimal; }\n","site":{"data":{}},"excerpt":"","more":".prettyprint {\n  background: #f1efee;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #1b1918; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #7b9726; }\n  /* keyword */\n  .kwd {\n    color: #6666ea; }\n  /* comment */\n  .com {\n    color: #9c9491; }\n  /* type name */\n  .typ {\n    color: #407ee7; }\n  /* literal value */\n  .lit {\n    color: #df5320; }\n  /* punctuation */\n  .pun {\n    color: #1b1918; }\n  /* lisp open bracket */\n  .opn {\n    color: #1b1918; }\n  /* lisp close bracket */\n  .clo {\n    color: #1b1918; }\n  /* markup tag name */\n  .tag {\n    color: #f22c40; }\n  /* markup attribute name */\n  .atn {\n    color: #df5320; }\n  /* markup attribute value */\n  .atv {\n    color: #3d97b8; }\n  /* declaration */\n  .dec {\n    color: #df5320; }\n  /* variable name */\n  .var {\n    color: #f22c40; }\n  /* function name */\n  .fun {\n    color: #407ee7; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #9c9491; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #f1efee;\n  list-style-type: decimal; }\n"},{"_content":"@import \"colors/atelier-heath-dark\";\n@import \"base\";\n@include prettyprint();\n","source":"plugs/hexo-prettify-highlight/themes/atelier-heath-dark.scss","raw":"@import \"colors/atelier-heath-dark\";\n@import \"base\";\n@include prettyprint();\n","date":"2020-05-28T04:03:58.970Z","updated":"2020-05-28T04:03:58.970Z","path":"plugs/hexo-prettify-highlight/themes/atelier-heath-dark.css","layout":"false","title":"","comments":1,"_id":"ckaq9am8200096hz40xuo47gy","content":".prettyprint {\n  background: #1b181b;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #f7f3f7; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #918b3b; }\n  /* keyword */\n  .kwd {\n    color: #7b59c0; }\n  /* comment */\n  .com {\n    color: #776977; }\n  /* type name */\n  .typ {\n    color: #516aec; }\n  /* literal value */\n  .lit {\n    color: #a65926; }\n  /* punctuation */\n  .pun {\n    color: #f7f3f7; }\n  /* lisp open bracket */\n  .opn {\n    color: #f7f3f7; }\n  /* lisp close bracket */\n  .clo {\n    color: #f7f3f7; }\n  /* markup tag name */\n  .tag {\n    color: #ca402b; }\n  /* markup attribute name */\n  .atn {\n    color: #a65926; }\n  /* markup attribute value */\n  .atv {\n    color: #159393; }\n  /* declaration */\n  .dec {\n    color: #a65926; }\n  /* variable name */\n  .var {\n    color: #ca402b; }\n  /* function name */\n  .fun {\n    color: #516aec; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #776977; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #1b181b;\n  list-style-type: decimal; }\n","site":{"data":{}},"excerpt":"","more":".prettyprint {\n  background: #1b181b;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #f7f3f7; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #918b3b; }\n  /* keyword */\n  .kwd {\n    color: #7b59c0; }\n  /* comment */\n  .com {\n    color: #776977; }\n  /* type name */\n  .typ {\n    color: #516aec; }\n  /* literal value */\n  .lit {\n    color: #a65926; }\n  /* punctuation */\n  .pun {\n    color: #f7f3f7; }\n  /* lisp open bracket */\n  .opn {\n    color: #f7f3f7; }\n  /* lisp close bracket */\n  .clo {\n    color: #f7f3f7; }\n  /* markup tag name */\n  .tag {\n    color: #ca402b; }\n  /* markup attribute name */\n  .atn {\n    color: #a65926; }\n  /* markup attribute value */\n  .atv {\n    color: #159393; }\n  /* declaration */\n  .dec {\n    color: #a65926; }\n  /* variable name */\n  .var {\n    color: #ca402b; }\n  /* function name */\n  .fun {\n    color: #516aec; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #776977; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #1b181b;\n  list-style-type: decimal; }\n"},{"_content":"@import \"colors/atelier-heath-light\";\n@import \"base\";\n@include prettyprint();\n","source":"plugs/hexo-prettify-highlight/themes/atelier-heath-light.scss","raw":"@import \"colors/atelier-heath-light\";\n@import \"base\";\n@include prettyprint();\n","date":"2020-05-28T04:03:58.971Z","updated":"2020-05-28T04:03:58.971Z","path":"plugs/hexo-prettify-highlight/themes/atelier-heath-light.css","layout":"false","title":"","comments":1,"_id":"ckaq9am83000a6hz4a7sfaj8a","content":".prettyprint {\n  background: #f7f3f7;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #1b181b; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #918b3b; }\n  /* keyword */\n  .kwd {\n    color: #7b59c0; }\n  /* comment */\n  .com {\n    color: #5a7b8c; }\n  /* type name */\n  .typ {\n    color: #516aec; }\n  /* literal value */\n  .lit {\n    color: #a65926; }\n  /* punctuation */\n  .pun {\n    color: #1b181b; }\n  /* lisp open bracket */\n  .opn {\n    color: #1b181b; }\n  /* lisp close bracket */\n  .clo {\n    color: #1b181b; }\n  /* markup tag name */\n  .tag {\n    color: #ca402b; }\n  /* markup attribute name */\n  .atn {\n    color: #a65926; }\n  /* markup attribute value */\n  .atv {\n    color: #159393; }\n  /* declaration */\n  .dec {\n    color: #a65926; }\n  /* variable name */\n  .var {\n    color: #ca402b; }\n  /* function name */\n  .fun {\n    color: #516aec; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #5a7b8c; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #f7f3f7;\n  list-style-type: decimal; }\n","site":{"data":{}},"excerpt":"","more":".prettyprint {\n  background: #f7f3f7;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #1b181b; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #918b3b; }\n  /* keyword */\n  .kwd {\n    color: #7b59c0; }\n  /* comment */\n  .com {\n    color: #5a7b8c; }\n  /* type name */\n  .typ {\n    color: #516aec; }\n  /* literal value */\n  .lit {\n    color: #a65926; }\n  /* punctuation */\n  .pun {\n    color: #1b181b; }\n  /* lisp open bracket */\n  .opn {\n    color: #1b181b; }\n  /* lisp close bracket */\n  .clo {\n    color: #1b181b; }\n  /* markup tag name */\n  .tag {\n    color: #ca402b; }\n  /* markup attribute name */\n  .atn {\n    color: #a65926; }\n  /* markup attribute value */\n  .atv {\n    color: #159393; }\n  /* declaration */\n  .dec {\n    color: #a65926; }\n  /* variable name */\n  .var {\n    color: #ca402b; }\n  /* function name */\n  .fun {\n    color: #516aec; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #5a7b8c; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #f7f3f7;\n  list-style-type: decimal; }\n"},{"_content":"@import \"colors/atelier-lakeside-dark\";\n@import \"base\";\n@include prettyprint();\n","source":"plugs/hexo-prettify-highlight/themes/atelier-lakeside-dark.scss","raw":"@import \"colors/atelier-lakeside-dark\";\n@import \"base\";\n@include prettyprint();\n","date":"2020-05-28T04:03:58.973Z","updated":"2020-05-28T04:03:58.973Z","path":"plugs/hexo-prettify-highlight/themes/atelier-lakeside-dark.css","layout":"false","title":"","comments":1,"_id":"ckaq9am84000b6hz4c9imfq3k","content":".prettyprint {\n  background: #161b1d;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #ebf8ff; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #568c3b; }\n  /* keyword */\n  .kwd {\n    color: #6b6bb8; }\n  /* comment */\n  .com {\n    color: #5a7b8c; }\n  /* type name */\n  .typ {\n    color: #257fad; }\n  /* literal value */\n  .lit {\n    color: #935c25; }\n  /* punctuation */\n  .pun {\n    color: #ebf8ff; }\n  /* lisp open bracket */\n  .opn {\n    color: #ebf8ff; }\n  /* lisp close bracket */\n  .clo {\n    color: #ebf8ff; }\n  /* markup tag name */\n  .tag {\n    color: #d22d72; }\n  /* markup attribute name */\n  .atn {\n    color: #935c25; }\n  /* markup attribute value */\n  .atv {\n    color: #2d8f6f; }\n  /* declaration */\n  .dec {\n    color: #935c25; }\n  /* variable name */\n  .var {\n    color: #d22d72; }\n  /* function name */\n  .fun {\n    color: #257fad; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #5a7b8c; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #161b1d;\n  list-style-type: decimal; }\n","site":{"data":{}},"excerpt":"","more":".prettyprint {\n  background: #161b1d;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #ebf8ff; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #568c3b; }\n  /* keyword */\n  .kwd {\n    color: #6b6bb8; }\n  /* comment */\n  .com {\n    color: #5a7b8c; }\n  /* type name */\n  .typ {\n    color: #257fad; }\n  /* literal value */\n  .lit {\n    color: #935c25; }\n  /* punctuation */\n  .pun {\n    color: #ebf8ff; }\n  /* lisp open bracket */\n  .opn {\n    color: #ebf8ff; }\n  /* lisp close bracket */\n  .clo {\n    color: #ebf8ff; }\n  /* markup tag name */\n  .tag {\n    color: #d22d72; }\n  /* markup attribute name */\n  .atn {\n    color: #935c25; }\n  /* markup attribute value */\n  .atv {\n    color: #2d8f6f; }\n  /* declaration */\n  .dec {\n    color: #935c25; }\n  /* variable name */\n  .var {\n    color: #d22d72; }\n  /* function name */\n  .fun {\n    color: #257fad; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #5a7b8c; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #161b1d;\n  list-style-type: decimal; }\n"},{"_content":"@import \"colors/atelier-lakeside-light\";\n@import \"base\";\n@include prettyprint();\n","source":"plugs/hexo-prettify-highlight/themes/atelier-lakeside-light.scss","raw":"@import \"colors/atelier-lakeside-light\";\n@import \"base\";\n@include prettyprint();\n","date":"2020-05-28T04:03:58.975Z","updated":"2020-05-28T04:03:58.975Z","path":"plugs/hexo-prettify-highlight/themes/atelier-lakeside-light.css","layout":"false","title":"","comments":1,"_id":"ckaq9am85000c6hz4ct9x5ars","content":".prettyprint {\n  background: #ebf8ff;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #161b1d; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #568c3b; }\n  /* keyword */\n  .kwd {\n    color: #6b6bb8; }\n  /* comment */\n  .com {\n    color: #7195a8; }\n  /* type name */\n  .typ {\n    color: #257fad; }\n  /* literal value */\n  .lit {\n    color: #935c25; }\n  /* punctuation */\n  .pun {\n    color: #161b1d; }\n  /* lisp open bracket */\n  .opn {\n    color: #161b1d; }\n  /* lisp close bracket */\n  .clo {\n    color: #161b1d; }\n  /* markup tag name */\n  .tag {\n    color: #d22d72; }\n  /* markup attribute name */\n  .atn {\n    color: #935c25; }\n  /* markup attribute value */\n  .atv {\n    color: #2d8f6f; }\n  /* declaration */\n  .dec {\n    color: #935c25; }\n  /* variable name */\n  .var {\n    color: #d22d72; }\n  /* function name */\n  .fun {\n    color: #257fad; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #7195a8; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #ebf8ff;\n  list-style-type: decimal; }\n","site":{"data":{}},"excerpt":"","more":".prettyprint {\n  background: #ebf8ff;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #161b1d; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #568c3b; }\n  /* keyword */\n  .kwd {\n    color: #6b6bb8; }\n  /* comment */\n  .com {\n    color: #7195a8; }\n  /* type name */\n  .typ {\n    color: #257fad; }\n  /* literal value */\n  .lit {\n    color: #935c25; }\n  /* punctuation */\n  .pun {\n    color: #161b1d; }\n  /* lisp open bracket */\n  .opn {\n    color: #161b1d; }\n  /* lisp close bracket */\n  .clo {\n    color: #161b1d; }\n  /* markup tag name */\n  .tag {\n    color: #d22d72; }\n  /* markup attribute name */\n  .atn {\n    color: #935c25; }\n  /* markup attribute value */\n  .atv {\n    color: #2d8f6f; }\n  /* declaration */\n  .dec {\n    color: #935c25; }\n  /* variable name */\n  .var {\n    color: #d22d72; }\n  /* function name */\n  .fun {\n    color: #257fad; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #7195a8; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #ebf8ff;\n  list-style-type: decimal; }\n"},{"_content":"@import \"colors/_atelier-plateau-dark\";\n@import \"base\";\n@include prettyprint();\n","source":"plugs/hexo-prettify-highlight/themes/atelier-plateau-dark.scss","raw":"@import \"colors/_atelier-plateau-dark\";\n@import \"base\";\n@include prettyprint();\n","date":"2020-05-28T04:03:58.978Z","updated":"2020-05-28T04:03:58.978Z","path":"plugs/hexo-prettify-highlight/themes/atelier-plateau-dark.css","layout":"false","title":"","comments":1,"_id":"ckaq9am85000d6hz460nche54","content":".prettyprint {\n  background: #1b1818;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #f4ecec; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #4b8b8b; }\n  /* keyword */\n  .kwd {\n    color: #8464c4; }\n  /* comment */\n  .com {\n    color: #655d5d; }\n  /* type name */\n  .typ {\n    color: #7272ca; }\n  /* literal value */\n  .lit {\n    color: #b45a3c; }\n  /* punctuation */\n  .pun {\n    color: #f4ecec; }\n  /* lisp open bracket */\n  .opn {\n    color: #f4ecec; }\n  /* lisp close bracket */\n  .clo {\n    color: #f4ecec; }\n  /* markup tag name */\n  .tag {\n    color: #ca4949; }\n  /* markup attribute name */\n  .atn {\n    color: #b45a3c; }\n  /* markup attribute value */\n  .atv {\n    color: #5485b6; }\n  /* declaration */\n  .dec {\n    color: #b45a3c; }\n  /* variable name */\n  .var {\n    color: #ca4949; }\n  /* function name */\n  .fun {\n    color: #7272ca; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #655d5d; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #1b1818;\n  list-style-type: decimal; }\n","site":{"data":{}},"excerpt":"","more":".prettyprint {\n  background: #1b1818;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #f4ecec; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #4b8b8b; }\n  /* keyword */\n  .kwd {\n    color: #8464c4; }\n  /* comment */\n  .com {\n    color: #655d5d; }\n  /* type name */\n  .typ {\n    color: #7272ca; }\n  /* literal value */\n  .lit {\n    color: #b45a3c; }\n  /* punctuation */\n  .pun {\n    color: #f4ecec; }\n  /* lisp open bracket */\n  .opn {\n    color: #f4ecec; }\n  /* lisp close bracket */\n  .clo {\n    color: #f4ecec; }\n  /* markup tag name */\n  .tag {\n    color: #ca4949; }\n  /* markup attribute name */\n  .atn {\n    color: #b45a3c; }\n  /* markup attribute value */\n  .atv {\n    color: #5485b6; }\n  /* declaration */\n  .dec {\n    color: #b45a3c; }\n  /* variable name */\n  .var {\n    color: #ca4949; }\n  /* function name */\n  .fun {\n    color: #7272ca; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #655d5d; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #1b1818;\n  list-style-type: decimal; }\n"},{"_content":"@import \"colors/_atelier-plateau-light\";\n@import \"base\";\n@include prettyprint();\n","source":"plugs/hexo-prettify-highlight/themes/atelier-plateau-light.scss","raw":"@import \"colors/_atelier-plateau-light\";\n@import \"base\";\n@include prettyprint();\n","date":"2020-05-28T04:03:58.979Z","updated":"2020-05-28T04:03:58.979Z","path":"plugs/hexo-prettify-highlight/themes/atelier-plateau-light.css","layout":"false","title":"","comments":1,"_id":"ckaq9am86000e6hz46ye9dl1o","content":".prettyprint {\n  background: #f4ecec;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #1b1818; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #4b8b8b; }\n  /* keyword */\n  .kwd {\n    color: #8464c4; }\n  /* comment */\n  .com {\n    color: #7e7777; }\n  /* type name */\n  .typ {\n    color: #7272ca; }\n  /* literal value */\n  .lit {\n    color: #b45a3c; }\n  /* punctuation */\n  .pun {\n    color: #1b1818; }\n  /* lisp open bracket */\n  .opn {\n    color: #1b1818; }\n  /* lisp close bracket */\n  .clo {\n    color: #1b1818; }\n  /* markup tag name */\n  .tag {\n    color: #ca4949; }\n  /* markup attribute name */\n  .atn {\n    color: #b45a3c; }\n  /* markup attribute value */\n  .atv {\n    color: #5485b6; }\n  /* declaration */\n  .dec {\n    color: #b45a3c; }\n  /* variable name */\n  .var {\n    color: #ca4949; }\n  /* function name */\n  .fun {\n    color: #7272ca; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #7e7777; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #f4ecec;\n  list-style-type: decimal; }\n","site":{"data":{}},"excerpt":"","more":".prettyprint {\n  background: #f4ecec;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #1b1818; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #4b8b8b; }\n  /* keyword */\n  .kwd {\n    color: #8464c4; }\n  /* comment */\n  .com {\n    color: #7e7777; }\n  /* type name */\n  .typ {\n    color: #7272ca; }\n  /* literal value */\n  .lit {\n    color: #b45a3c; }\n  /* punctuation */\n  .pun {\n    color: #1b1818; }\n  /* lisp open bracket */\n  .opn {\n    color: #1b1818; }\n  /* lisp close bracket */\n  .clo {\n    color: #1b1818; }\n  /* markup tag name */\n  .tag {\n    color: #ca4949; }\n  /* markup attribute name */\n  .atn {\n    color: #b45a3c; }\n  /* markup attribute value */\n  .atv {\n    color: #5485b6; }\n  /* declaration */\n  .dec {\n    color: #b45a3c; }\n  /* variable name */\n  .var {\n    color: #ca4949; }\n  /* function name */\n  .fun {\n    color: #7272ca; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #7e7777; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #f4ecec;\n  list-style-type: decimal; }\n"},{"_content":"@import \"colors/_atelier-savanna-dark\";\n@import \"base\";\n@include prettyprint();\n","source":"plugs/hexo-prettify-highlight/themes/atelier-savanna-dark.scss","raw":"@import \"colors/_atelier-savanna-dark\";\n@import \"base\";\n@include prettyprint();\n","date":"2020-05-28T04:03:58.979Z","updated":"2020-05-28T04:03:58.979Z","path":"plugs/hexo-prettify-highlight/themes/atelier-savanna-dark.css","layout":"false","title":"","comments":1,"_id":"ckaq9am87000f6hz474uredin","content":".prettyprint {\n  background: #171c19;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #ecf4ee; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #489963; }\n  /* keyword */\n  .kwd {\n    color: #55859b; }\n  /* comment */\n  .com {\n    color: #5f6d64; }\n  /* type name */\n  .typ {\n    color: #478c90; }\n  /* literal value */\n  .lit {\n    color: #9f713c; }\n  /* punctuation */\n  .pun {\n    color: #ecf4ee; }\n  /* lisp open bracket */\n  .opn {\n    color: #ecf4ee; }\n  /* lisp close bracket */\n  .clo {\n    color: #ecf4ee; }\n  /* markup tag name */\n  .tag {\n    color: #b16139; }\n  /* markup attribute name */\n  .atn {\n    color: #9f713c; }\n  /* markup attribute value */\n  .atv {\n    color: #1c9aa0; }\n  /* declaration */\n  .dec {\n    color: #9f713c; }\n  /* variable name */\n  .var {\n    color: #b16139; }\n  /* function name */\n  .fun {\n    color: #478c90; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #5f6d64; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #171c19;\n  list-style-type: decimal; }\n","site":{"data":{}},"excerpt":"","more":".prettyprint {\n  background: #171c19;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #ecf4ee; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #489963; }\n  /* keyword */\n  .kwd {\n    color: #55859b; }\n  /* comment */\n  .com {\n    color: #5f6d64; }\n  /* type name */\n  .typ {\n    color: #478c90; }\n  /* literal value */\n  .lit {\n    color: #9f713c; }\n  /* punctuation */\n  .pun {\n    color: #ecf4ee; }\n  /* lisp open bracket */\n  .opn {\n    color: #ecf4ee; }\n  /* lisp close bracket */\n  .clo {\n    color: #ecf4ee; }\n  /* markup tag name */\n  .tag {\n    color: #b16139; }\n  /* markup attribute name */\n  .atn {\n    color: #9f713c; }\n  /* markup attribute value */\n  .atv {\n    color: #1c9aa0; }\n  /* declaration */\n  .dec {\n    color: #9f713c; }\n  /* variable name */\n  .var {\n    color: #b16139; }\n  /* function name */\n  .fun {\n    color: #478c90; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #5f6d64; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #171c19;\n  list-style-type: decimal; }\n"},{"_content":"@import \"colors/_atelier-savanna-light\";\n@import \"base\";\n@include prettyprint();\n","source":"plugs/hexo-prettify-highlight/themes/atelier-savanna-light.scss","raw":"@import \"colors/_atelier-savanna-light\";\n@import \"base\";\n@include prettyprint();\n","date":"2020-05-28T04:03:58.980Z","updated":"2020-05-28T04:03:58.980Z","path":"plugs/hexo-prettify-highlight/themes/atelier-savanna-light.css","layout":"false","title":"","comments":1,"_id":"ckaq9am88000g6hz48xz95m1k","content":".prettyprint {\n  background: #ecf4ee;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #171c19; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #489963; }\n  /* keyword */\n  .kwd {\n    color: #55859b; }\n  /* comment */\n  .com {\n    color: #78877d; }\n  /* type name */\n  .typ {\n    color: #478c90; }\n  /* literal value */\n  .lit {\n    color: #9f713c; }\n  /* punctuation */\n  .pun {\n    color: #171c19; }\n  /* lisp open bracket */\n  .opn {\n    color: #171c19; }\n  /* lisp close bracket */\n  .clo {\n    color: #171c19; }\n  /* markup tag name */\n  .tag {\n    color: #b16139; }\n  /* markup attribute name */\n  .atn {\n    color: #9f713c; }\n  /* markup attribute value */\n  .atv {\n    color: #1c9aa0; }\n  /* declaration */\n  .dec {\n    color: #9f713c; }\n  /* variable name */\n  .var {\n    color: #b16139; }\n  /* function name */\n  .fun {\n    color: #478c90; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #78877d; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #ecf4ee;\n  list-style-type: decimal; }\n","site":{"data":{}},"excerpt":"","more":".prettyprint {\n  background: #ecf4ee;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #171c19; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #489963; }\n  /* keyword */\n  .kwd {\n    color: #55859b; }\n  /* comment */\n  .com {\n    color: #78877d; }\n  /* type name */\n  .typ {\n    color: #478c90; }\n  /* literal value */\n  .lit {\n    color: #9f713c; }\n  /* punctuation */\n  .pun {\n    color: #171c19; }\n  /* lisp open bracket */\n  .opn {\n    color: #171c19; }\n  /* lisp close bracket */\n  .clo {\n    color: #171c19; }\n  /* markup tag name */\n  .tag {\n    color: #b16139; }\n  /* markup attribute name */\n  .atn {\n    color: #9f713c; }\n  /* markup attribute value */\n  .atv {\n    color: #1c9aa0; }\n  /* declaration */\n  .dec {\n    color: #9f713c; }\n  /* variable name */\n  .var {\n    color: #b16139; }\n  /* function name */\n  .fun {\n    color: #478c90; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #78877d; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #ecf4ee;\n  list-style-type: decimal; }\n"},{"_content":"@import \"colors/_atelier-seaside-dark\";\n@import \"base\";\n@include prettyprint();\n","source":"plugs/hexo-prettify-highlight/themes/atelier-seaside-dark.scss","raw":"@import \"colors/_atelier-seaside-dark\";\n@import \"base\";\n@include prettyprint();\n","date":"2020-05-28T04:03:58.982Z","updated":"2020-05-28T04:03:58.982Z","path":"plugs/hexo-prettify-highlight/themes/atelier-seaside-dark.css","layout":"false","title":"","comments":1,"_id":"ckaq9am88000h6hz4gji85123","content":".prettyprint {\n  background: #131513;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #f4fbf4; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #29a329; }\n  /* keyword */\n  .kwd {\n    color: #ad2bee; }\n  /* comment */\n  .com {\n    color: #687d68; }\n  /* type name */\n  .typ {\n    color: #3d62f5; }\n  /* literal value */\n  .lit {\n    color: #87711d; }\n  /* punctuation */\n  .pun {\n    color: #f4fbf4; }\n  /* lisp open bracket */\n  .opn {\n    color: #f4fbf4; }\n  /* lisp close bracket */\n  .clo {\n    color: #f4fbf4; }\n  /* markup tag name */\n  .tag {\n    color: #e6193c; }\n  /* markup attribute name */\n  .atn {\n    color: #87711d; }\n  /* markup attribute value */\n  .atv {\n    color: #1999b3; }\n  /* declaration */\n  .dec {\n    color: #87711d; }\n  /* variable name */\n  .var {\n    color: #e6193c; }\n  /* function name */\n  .fun {\n    color: #3d62f5; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #687d68; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #131513;\n  list-style-type: decimal; }\n","site":{"data":{}},"excerpt":"","more":".prettyprint {\n  background: #131513;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #f4fbf4; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #29a329; }\n  /* keyword */\n  .kwd {\n    color: #ad2bee; }\n  /* comment */\n  .com {\n    color: #687d68; }\n  /* type name */\n  .typ {\n    color: #3d62f5; }\n  /* literal value */\n  .lit {\n    color: #87711d; }\n  /* punctuation */\n  .pun {\n    color: #f4fbf4; }\n  /* lisp open bracket */\n  .opn {\n    color: #f4fbf4; }\n  /* lisp close bracket */\n  .clo {\n    color: #f4fbf4; }\n  /* markup tag name */\n  .tag {\n    color: #e6193c; }\n  /* markup attribute name */\n  .atn {\n    color: #87711d; }\n  /* markup attribute value */\n  .atv {\n    color: #1999b3; }\n  /* declaration */\n  .dec {\n    color: #87711d; }\n  /* variable name */\n  .var {\n    color: #e6193c; }\n  /* function name */\n  .fun {\n    color: #3d62f5; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #687d68; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #131513;\n  list-style-type: decimal; }\n"},{"_content":"@import \"colors/_atelier-seaside-light\";\n@import \"base\";\n@include prettyprint();\n","source":"plugs/hexo-prettify-highlight/themes/atelier-seaside-light.scss","raw":"@import \"colors/_atelier-seaside-light\";\n@import \"base\";\n@include prettyprint();\n","date":"2020-05-28T04:03:58.983Z","updated":"2020-05-28T04:03:58.983Z","path":"plugs/hexo-prettify-highlight/themes/atelier-seaside-light.css","layout":"false","title":"","comments":1,"_id":"ckaq9am89000i6hz41jam04l9","content":".prettyprint {\n  background: #f4fbf4;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #131513; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #29a329; }\n  /* keyword */\n  .kwd {\n    color: #ad2bee; }\n  /* comment */\n  .com {\n    color: #809980; }\n  /* type name */\n  .typ {\n    color: #3d62f5; }\n  /* literal value */\n  .lit {\n    color: #87711d; }\n  /* punctuation */\n  .pun {\n    color: #131513; }\n  /* lisp open bracket */\n  .opn {\n    color: #131513; }\n  /* lisp close bracket */\n  .clo {\n    color: #131513; }\n  /* markup tag name */\n  .tag {\n    color: #e6193c; }\n  /* markup attribute name */\n  .atn {\n    color: #87711d; }\n  /* markup attribute value */\n  .atv {\n    color: #1999b3; }\n  /* declaration */\n  .dec {\n    color: #87711d; }\n  /* variable name */\n  .var {\n    color: #e6193c; }\n  /* function name */\n  .fun {\n    color: #3d62f5; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #809980; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #f4fbf4;\n  list-style-type: decimal; }\n","site":{"data":{}},"excerpt":"","more":".prettyprint {\n  background: #f4fbf4;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #131513; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #29a329; }\n  /* keyword */\n  .kwd {\n    color: #ad2bee; }\n  /* comment */\n  .com {\n    color: #809980; }\n  /* type name */\n  .typ {\n    color: #3d62f5; }\n  /* literal value */\n  .lit {\n    color: #87711d; }\n  /* punctuation */\n  .pun {\n    color: #131513; }\n  /* lisp open bracket */\n  .opn {\n    color: #131513; }\n  /* lisp close bracket */\n  .clo {\n    color: #131513; }\n  /* markup tag name */\n  .tag {\n    color: #e6193c; }\n  /* markup attribute name */\n  .atn {\n    color: #87711d; }\n  /* markup attribute value */\n  .atv {\n    color: #1999b3; }\n  /* declaration */\n  .dec {\n    color: #87711d; }\n  /* variable name */\n  .var {\n    color: #e6193c; }\n  /* function name */\n  .fun {\n    color: #3d62f5; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #809980; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #f4fbf4;\n  list-style-type: decimal; }\n"},{"_content":"@import \"colors/_atelier-sulphurpool-dark\";\n@import \"base\";\n@include prettyprint();\n","source":"plugs/hexo-prettify-highlight/themes/atelier-sulphurpool-dark.scss","raw":"@import \"colors/_atelier-sulphurpool-dark\";\n@import \"base\";\n@include prettyprint();\n","date":"2020-05-28T04:03:58.985Z","updated":"2020-05-28T04:03:58.985Z","path":"plugs/hexo-prettify-highlight/themes/atelier-sulphurpool-dark.css","layout":"false","title":"","comments":1,"_id":"ckaq9am8a000j6hz4fjjm8t0o","content":".prettyprint {\n  background: #202746;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #f5f7ff; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #ac9739; }\n  /* keyword */\n  .kwd {\n    color: #6679cc; }\n  /* comment */\n  .com {\n    color: #6b7394; }\n  /* type name */\n  .typ {\n    color: #3d8fd1; }\n  /* literal value */\n  .lit {\n    color: #c76b29; }\n  /* punctuation */\n  .pun {\n    color: #f5f7ff; }\n  /* lisp open bracket */\n  .opn {\n    color: #f5f7ff; }\n  /* lisp close bracket */\n  .clo {\n    color: #f5f7ff; }\n  /* markup tag name */\n  .tag {\n    color: #c94922; }\n  /* markup attribute name */\n  .atn {\n    color: #c76b29; }\n  /* markup attribute value */\n  .atv {\n    color: #22a2c9; }\n  /* declaration */\n  .dec {\n    color: #c76b29; }\n  /* variable name */\n  .var {\n    color: #c94922; }\n  /* function name */\n  .fun {\n    color: #3d8fd1; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #6b7394; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #202746;\n  list-style-type: decimal; }\n","site":{"data":{}},"excerpt":"","more":".prettyprint {\n  background: #202746;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #f5f7ff; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #ac9739; }\n  /* keyword */\n  .kwd {\n    color: #6679cc; }\n  /* comment */\n  .com {\n    color: #6b7394; }\n  /* type name */\n  .typ {\n    color: #3d8fd1; }\n  /* literal value */\n  .lit {\n    color: #c76b29; }\n  /* punctuation */\n  .pun {\n    color: #f5f7ff; }\n  /* lisp open bracket */\n  .opn {\n    color: #f5f7ff; }\n  /* lisp close bracket */\n  .clo {\n    color: #f5f7ff; }\n  /* markup tag name */\n  .tag {\n    color: #c94922; }\n  /* markup attribute name */\n  .atn {\n    color: #c76b29; }\n  /* markup attribute value */\n  .atv {\n    color: #22a2c9; }\n  /* declaration */\n  .dec {\n    color: #c76b29; }\n  /* variable name */\n  .var {\n    color: #c94922; }\n  /* function name */\n  .fun {\n    color: #3d8fd1; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #6b7394; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #202746;\n  list-style-type: decimal; }\n"},{"_content":"@import \"colors/_atelier-sulphurpool-light\";\n@import \"base\";\n@include prettyprint();\n","source":"plugs/hexo-prettify-highlight/themes/atelier-sulphurpool-light.scss","raw":"@import \"colors/_atelier-sulphurpool-light\";\n@import \"base\";\n@include prettyprint();\n","date":"2020-05-28T04:03:58.986Z","updated":"2020-05-28T04:03:58.986Z","path":"plugs/hexo-prettify-highlight/themes/atelier-sulphurpool-light.css","layout":"false","title":"","comments":1,"_id":"ckaq9am8a000k6hz4ad2b80lq","content":".prettyprint {\n  background: #f5f7ff;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #202746; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #ac9739; }\n  /* keyword */\n  .kwd {\n    color: #6679cc; }\n  /* comment */\n  .com {\n    color: #202746; }\n  /* type name */\n  .typ {\n    color: #3d8fd1; }\n  /* literal value */\n  .lit {\n    color: #c76b29; }\n  /* punctuation */\n  .pun {\n    color: #202746; }\n  /* lisp open bracket */\n  .opn {\n    color: #202746; }\n  /* lisp close bracket */\n  .clo {\n    color: #202746; }\n  /* markup tag name */\n  .tag {\n    color: #c94922; }\n  /* markup attribute name */\n  .atn {\n    color: #c76b29; }\n  /* markup attribute value */\n  .atv {\n    color: #22a2c9; }\n  /* declaration */\n  .dec {\n    color: #c76b29; }\n  /* variable name */\n  .var {\n    color: #c94922; }\n  /* function name */\n  .fun {\n    color: #3d8fd1; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #202746; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #f5f7ff;\n  list-style-type: decimal; }\n","site":{"data":{}},"excerpt":"","more":".prettyprint {\n  background: #f5f7ff;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #202746; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #ac9739; }\n  /* keyword */\n  .kwd {\n    color: #6679cc; }\n  /* comment */\n  .com {\n    color: #202746; }\n  /* type name */\n  .typ {\n    color: #3d8fd1; }\n  /* literal value */\n  .lit {\n    color: #c76b29; }\n  /* punctuation */\n  .pun {\n    color: #202746; }\n  /* lisp open bracket */\n  .opn {\n    color: #202746; }\n  /* lisp close bracket */\n  .clo {\n    color: #202746; }\n  /* markup tag name */\n  .tag {\n    color: #c94922; }\n  /* markup attribute name */\n  .atn {\n    color: #c76b29; }\n  /* markup attribute value */\n  .atv {\n    color: #22a2c9; }\n  /* declaration */\n  .dec {\n    color: #c76b29; }\n  /* variable name */\n  .var {\n    color: #c94922; }\n  /* function name */\n  .fun {\n    color: #3d8fd1; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #202746; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #f5f7ff;\n  list-style-type: decimal; }\n"},{"_content":"@import \"colors/github-v2\";\n@import \"base\";\n@include prettyprint();\n","source":"plugs/hexo-prettify-highlight/themes/github-v2.scss","raw":"@import \"colors/github-v2\";\n@import \"base\";\n@include prettyprint();\n","date":"2020-05-28T04:03:59.013Z","updated":"2020-05-28T04:03:59.013Z","path":"plugs/hexo-prettify-highlight/themes/github-v2.css","layout":"false","title":"","comments":1,"_id":"ckaq9am8b000l6hz41crvhusj","content":".prettyprint {\n  background: #fff;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #333; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #183691; }\n  /* keyword */\n  .kwd {\n    color: #a71d5d; }\n  /* comment */\n  .com {\n    color: #969896; }\n  /* type name */\n  .typ {\n    color: #0086b3; }\n  /* literal value */\n  .lit {\n    color: #0086b3; }\n  /* punctuation */\n  .pun {\n    color: #333; }\n  /* lisp open bracket */\n  .opn {\n    color: #333; }\n  /* lisp close bracket */\n  .clo {\n    color: #333; }\n  /* markup tag name */\n  .tag {\n    color: #000080; }\n  /* markup attribute name */\n  .atn {\n    color: #795da3; }\n  /* markup attribute value */\n  .atv {\n    color: #183691; }\n  /* declaration */\n  .dec {\n    color: #333; }\n  /* variable name */\n  .var {\n    color: #008080; }\n  /* function name */\n  .fun {\n    color: #900; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #cccccc; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #fff;\n  list-style-type: decimal; }\n","site":{"data":{}},"excerpt":"","more":".prettyprint {\n  background: #fff;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #333; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #183691; }\n  /* keyword */\n  .kwd {\n    color: #a71d5d; }\n  /* comment */\n  .com {\n    color: #969896; }\n  /* type name */\n  .typ {\n    color: #0086b3; }\n  /* literal value */\n  .lit {\n    color: #0086b3; }\n  /* punctuation */\n  .pun {\n    color: #333; }\n  /* lisp open bracket */\n  .opn {\n    color: #333; }\n  /* lisp close bracket */\n  .clo {\n    color: #333; }\n  /* markup tag name */\n  .tag {\n    color: #000080; }\n  /* markup attribute name */\n  .atn {\n    color: #795da3; }\n  /* markup attribute value */\n  .atv {\n    color: #183691; }\n  /* declaration */\n  .dec {\n    color: #333; }\n  /* variable name */\n  .var {\n    color: #008080; }\n  /* function name */\n  .fun {\n    color: #900; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #cccccc; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #fff;\n  list-style-type: decimal; }\n"},{"_content":"@import \"colors/github\";\n@import \"base\";\n@include prettyprint();\n","source":"plugs/hexo-prettify-highlight/themes/github.scss","raw":"@import \"colors/github\";\n@import \"base\";\n@include prettyprint();\n","date":"2020-05-28T04:03:59.013Z","updated":"2020-05-28T04:03:59.013Z","path":"plugs/hexo-prettify-highlight/themes/github.css","layout":"false","title":"","comments":1,"_id":"ckaq9am8c000m6hz4c4w54ho9","content":".prettyprint {\n  background: #fff;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #333; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #d14; }\n  /* keyword */\n  .kwd {\n    color: #333; }\n  /* comment */\n  .com {\n    color: #998; }\n  /* type name */\n  .typ {\n    color: #458; }\n  /* literal value */\n  .lit {\n    color: #458; }\n  /* punctuation */\n  .pun {\n    color: #333; }\n  /* lisp open bracket */\n  .opn {\n    color: #333; }\n  /* lisp close bracket */\n  .clo {\n    color: #333; }\n  /* markup tag name */\n  .tag {\n    color: #000080; }\n  /* markup attribute name */\n  .atn {\n    color: #008080; }\n  /* markup attribute value */\n  .atv {\n    color: #d14; }\n  /* declaration */\n  .dec {\n    color: #333; }\n  /* variable name */\n  .var {\n    color: #008080; }\n  /* function name */\n  .fun {\n    color: #900; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #cccccc; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #fff;\n  list-style-type: decimal; }\n","site":{"data":{}},"excerpt":"","more":".prettyprint {\n  background: #fff;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #333; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #d14; }\n  /* keyword */\n  .kwd {\n    color: #333; }\n  /* comment */\n  .com {\n    color: #998; }\n  /* type name */\n  .typ {\n    color: #458; }\n  /* literal value */\n  .lit {\n    color: #458; }\n  /* punctuation */\n  .pun {\n    color: #333; }\n  /* lisp open bracket */\n  .opn {\n    color: #333; }\n  /* lisp close bracket */\n  .clo {\n    color: #333; }\n  /* markup tag name */\n  .tag {\n    color: #000080; }\n  /* markup attribute name */\n  .atn {\n    color: #008080; }\n  /* markup attribute value */\n  .atv {\n    color: #d14; }\n  /* declaration */\n  .dec {\n    color: #333; }\n  /* variable name */\n  .var {\n    color: #008080; }\n  /* function name */\n  .fun {\n    color: #900; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #cccccc; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #fff;\n  list-style-type: decimal; }\n"},{"_content":"@import \"colors/hemisu\";\n@import \"colors/hemisu-dark\";\n@import \"base-hemisu\";\n@import \"base\";\n@include prettyprint();\n","source":"plugs/hexo-prettify-highlight/themes/hemisu-dark.scss","raw":"@import \"colors/hemisu\";\n@import \"colors/hemisu-dark\";\n@import \"base-hemisu\";\n@import \"base\";\n@include prettyprint();\n","date":"2020-05-28T04:03:59.014Z","updated":"2020-05-28T04:03:59.014Z","path":"plugs/hexo-prettify-highlight/themes/hemisu-dark.css","layout":"false","title":"","comments":1,"_id":"ckaq9am8h000n6hz467qa6jke","content":".prettyprint {\n  background: #000000;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #EEEEEE; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #B1D631; }\n  /* keyword */\n  .kwd {\n    color: #B1D631; }\n  /* comment */\n  .com {\n    color: #777777; }\n  /* type name */\n  .typ {\n    color: #BBFFAA; }\n  /* literal value */\n  .lit {\n    color: #9FD3E6; }\n  /* punctuation */\n  .pun {\n    color: #EEEEEE; }\n  /* lisp open bracket */\n  .opn {\n    color: #EEEEEE; }\n  /* lisp close bracket */\n  .clo {\n    color: #EEEEEE; }\n  /* markup tag name */\n  .tag {\n    color: #EEEEEE; }\n  /* markup attribute name */\n  .atn {\n    color: #B1D631; }\n  /* markup attribute value */\n  .atv {\n    color: #BBFFAA; }\n  /* declaration */\n  .dec {\n    color: #EEEEEE; }\n  /* variable name */\n  .var {\n    color: #EEEEEE; }\n  /* function name */\n  .fun {\n    color: #9FD3E6; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #777777; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #000000;\n  list-style-type: decimal; }\n","site":{"data":{}},"excerpt":"","more":".prettyprint {\n  background: #000000;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #EEEEEE; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #B1D631; }\n  /* keyword */\n  .kwd {\n    color: #B1D631; }\n  /* comment */\n  .com {\n    color: #777777; }\n  /* type name */\n  .typ {\n    color: #BBFFAA; }\n  /* literal value */\n  .lit {\n    color: #9FD3E6; }\n  /* punctuation */\n  .pun {\n    color: #EEEEEE; }\n  /* lisp open bracket */\n  .opn {\n    color: #EEEEEE; }\n  /* lisp close bracket */\n  .clo {\n    color: #EEEEEE; }\n  /* markup tag name */\n  .tag {\n    color: #EEEEEE; }\n  /* markup attribute name */\n  .atn {\n    color: #B1D631; }\n  /* markup attribute value */\n  .atv {\n    color: #BBFFAA; }\n  /* declaration */\n  .dec {\n    color: #EEEEEE; }\n  /* variable name */\n  .var {\n    color: #EEEEEE; }\n  /* function name */\n  .fun {\n    color: #9FD3E6; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #777777; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #000000;\n  list-style-type: decimal; }\n"},{"_content":"@import \"colors/hemisu\";\n@import \"colors/hemisu-light\";\n@import \"base-hemisu\";\n@import \"base\";\n@include prettyprint();\n","source":"plugs/hexo-prettify-highlight/themes/hemisu-light.scss","raw":"@import \"colors/hemisu\";\n@import \"colors/hemisu-light\";\n@import \"base-hemisu\";\n@import \"base\";\n@include prettyprint();\n","date":"2020-05-28T04:03:59.014Z","updated":"2020-05-28T04:03:59.014Z","path":"plugs/hexo-prettify-highlight/themes/hemisu-light.css","layout":"false","title":"","comments":1,"_id":"ckaq9am8h000o6hz4214i3y9p","content":".prettyprint {\n  background: #FFFFFF;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #111111; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #739200; }\n  /* keyword */\n  .kwd {\n    color: #739200; }\n  /* comment */\n  .com {\n    color: #999999; }\n  /* type name */\n  .typ {\n    color: #FF0055; }\n  /* literal value */\n  .lit {\n    color: #538192; }\n  /* punctuation */\n  .pun {\n    color: #111111; }\n  /* lisp open bracket */\n  .opn {\n    color: #111111; }\n  /* lisp close bracket */\n  .clo {\n    color: #111111; }\n  /* markup tag name */\n  .tag {\n    color: #111111; }\n  /* markup attribute name */\n  .atn {\n    color: #739200; }\n  /* markup attribute value */\n  .atv {\n    color: #FF0055; }\n  /* declaration */\n  .dec {\n    color: #111111; }\n  /* variable name */\n  .var {\n    color: #111111; }\n  /* function name */\n  .fun {\n    color: #538192; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #999999; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #FFFFFF;\n  list-style-type: decimal; }\n","site":{"data":{}},"excerpt":"","more":".prettyprint {\n  background: #FFFFFF;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #111111; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #739200; }\n  /* keyword */\n  .kwd {\n    color: #739200; }\n  /* comment */\n  .com {\n    color: #999999; }\n  /* type name */\n  .typ {\n    color: #FF0055; }\n  /* literal value */\n  .lit {\n    color: #538192; }\n  /* punctuation */\n  .pun {\n    color: #111111; }\n  /* lisp open bracket */\n  .opn {\n    color: #111111; }\n  /* lisp close bracket */\n  .clo {\n    color: #111111; }\n  /* markup tag name */\n  .tag {\n    color: #111111; }\n  /* markup attribute name */\n  .atn {\n    color: #739200; }\n  /* markup attribute value */\n  .atv {\n    color: #FF0055; }\n  /* declaration */\n  .dec {\n    color: #111111; }\n  /* variable name */\n  .var {\n    color: #111111; }\n  /* function name */\n  .fun {\n    color: #538192; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #999999; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #FFFFFF;\n  list-style-type: decimal; }\n"},{"_content":"@import \"colors/tomorrow-night-blue\";\n@import \"base-tomorrow\";\n@import \"base\";\n@include prettyprint();\n","source":"plugs/hexo-prettify-highlight/themes/tomorrow-night-blue.scss","raw":"@import \"colors/tomorrow-night-blue\";\n@import \"base-tomorrow\";\n@import \"base\";\n@include prettyprint();\n","date":"2020-05-28T04:03:59.015Z","updated":"2020-05-28T04:03:59.015Z","path":"plugs/hexo-prettify-highlight/themes/tomorrow-night-blue.css","layout":"false","title":"","comments":1,"_id":"ckaq9am8i000p6hz4abia28kr","content":".prettyprint {\n  background: #002451;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #ffffff; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #d1f1a9; }\n  /* keyword */\n  .kwd {\n    color: #ebbbff; }\n  /* comment */\n  .com {\n    color: #7285b7; }\n  /* type name */\n  .typ {\n    color: #bbdaff; }\n  /* literal value */\n  .lit {\n    color: #ffc58f; }\n  /* punctuation */\n  .pun {\n    color: #ffffff; }\n  /* lisp open bracket */\n  .opn {\n    color: #ffffff; }\n  /* lisp close bracket */\n  .clo {\n    color: #ffffff; }\n  /* markup tag name */\n  .tag {\n    color: #ff9da4; }\n  /* markup attribute name */\n  .atn {\n    color: #ffc58f; }\n  /* markup attribute value */\n  .atv {\n    color: #99ffff; }\n  /* declaration */\n  .dec {\n    color: #ffc58f; }\n  /* variable name */\n  .var {\n    color: #ff9da4; }\n  /* function name */\n  .fun {\n    color: #bbdaff; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #7285b7; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #002451;\n  list-style-type: decimal; }\n","site":{"data":{}},"excerpt":"","more":".prettyprint {\n  background: #002451;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #ffffff; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #d1f1a9; }\n  /* keyword */\n  .kwd {\n    color: #ebbbff; }\n  /* comment */\n  .com {\n    color: #7285b7; }\n  /* type name */\n  .typ {\n    color: #bbdaff; }\n  /* literal value */\n  .lit {\n    color: #ffc58f; }\n  /* punctuation */\n  .pun {\n    color: #ffffff; }\n  /* lisp open bracket */\n  .opn {\n    color: #ffffff; }\n  /* lisp close bracket */\n  .clo {\n    color: #ffffff; }\n  /* markup tag name */\n  .tag {\n    color: #ff9da4; }\n  /* markup attribute name */\n  .atn {\n    color: #ffc58f; }\n  /* markup attribute value */\n  .atv {\n    color: #99ffff; }\n  /* declaration */\n  .dec {\n    color: #ffc58f; }\n  /* variable name */\n  .var {\n    color: #ff9da4; }\n  /* function name */\n  .fun {\n    color: #bbdaff; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #7285b7; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #002451;\n  list-style-type: decimal; }\n"},{"_content":"@import \"colors/tomorrow-night-bright\";\n@import \"base-tomorrow\";\n@import \"base\";\n@include prettyprint();\n","source":"plugs/hexo-prettify-highlight/themes/tomorrow-night-bright.scss","raw":"@import \"colors/tomorrow-night-bright\";\n@import \"base-tomorrow\";\n@import \"base\";\n@include prettyprint();\n","date":"2020-05-28T04:03:59.016Z","updated":"2020-05-28T04:03:59.016Z","path":"plugs/hexo-prettify-highlight/themes/tomorrow-night-bright.css","layout":"false","title":"","comments":1,"_id":"ckaq9am8j000q6hz42m1v4xo5","content":".prettyprint {\n  background: #000000;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #eaeaea; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #b9ca4a; }\n  /* keyword */\n  .kwd {\n    color: #c397d8; }\n  /* comment */\n  .com {\n    color: #969896; }\n  /* type name */\n  .typ {\n    color: #7aa6da; }\n  /* literal value */\n  .lit {\n    color: #e78c45; }\n  /* punctuation */\n  .pun {\n    color: #eaeaea; }\n  /* lisp open bracket */\n  .opn {\n    color: #eaeaea; }\n  /* lisp close bracket */\n  .clo {\n    color: #eaeaea; }\n  /* markup tag name */\n  .tag {\n    color: #d54e53; }\n  /* markup attribute name */\n  .atn {\n    color: #e78c45; }\n  /* markup attribute value */\n  .atv {\n    color: #70c0b1; }\n  /* declaration */\n  .dec {\n    color: #e78c45; }\n  /* variable name */\n  .var {\n    color: #d54e53; }\n  /* function name */\n  .fun {\n    color: #7aa6da; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #969896; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #000000;\n  list-style-type: decimal; }\n","site":{"data":{}},"excerpt":"","more":".prettyprint {\n  background: #000000;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #eaeaea; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #b9ca4a; }\n  /* keyword */\n  .kwd {\n    color: #c397d8; }\n  /* comment */\n  .com {\n    color: #969896; }\n  /* type name */\n  .typ {\n    color: #7aa6da; }\n  /* literal value */\n  .lit {\n    color: #e78c45; }\n  /* punctuation */\n  .pun {\n    color: #eaeaea; }\n  /* lisp open bracket */\n  .opn {\n    color: #eaeaea; }\n  /* lisp close bracket */\n  .clo {\n    color: #eaeaea; }\n  /* markup tag name */\n  .tag {\n    color: #d54e53; }\n  /* markup attribute name */\n  .atn {\n    color: #e78c45; }\n  /* markup attribute value */\n  .atv {\n    color: #70c0b1; }\n  /* declaration */\n  .dec {\n    color: #e78c45; }\n  /* variable name */\n  .var {\n    color: #d54e53; }\n  /* function name */\n  .fun {\n    color: #7aa6da; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #969896; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #000000;\n  list-style-type: decimal; }\n"},{"_content":"@import \"colors/tomorrow-night-eighties\";\n@import \"base-tomorrow\";\n@import \"base\";\n@include prettyprint();\n","source":"plugs/hexo-prettify-highlight/themes/tomorrow-night-eighties.scss","raw":"@import \"colors/tomorrow-night-eighties\";\n@import \"base-tomorrow\";\n@import \"base\";\n@include prettyprint();\n","date":"2020-05-28T04:03:59.017Z","updated":"2020-05-28T04:03:59.017Z","path":"plugs/hexo-prettify-highlight/themes/tomorrow-night-eighties.css","layout":"false","title":"","comments":1,"_id":"ckaq9am8k000r6hz41ge5djpm","content":".prettyprint {\n  background: #2d2d2d;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #cccccc; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #99cc99; }\n  /* keyword */\n  .kwd {\n    color: #cc99cc; }\n  /* comment */\n  .com {\n    color: #999999; }\n  /* type name */\n  .typ {\n    color: #6699cc; }\n  /* literal value */\n  .lit {\n    color: #f99157; }\n  /* punctuation */\n  .pun {\n    color: #cccccc; }\n  /* lisp open bracket */\n  .opn {\n    color: #cccccc; }\n  /* lisp close bracket */\n  .clo {\n    color: #cccccc; }\n  /* markup tag name */\n  .tag {\n    color: #f2777a; }\n  /* markup attribute name */\n  .atn {\n    color: #f99157; }\n  /* markup attribute value */\n  .atv {\n    color: #66cccc; }\n  /* declaration */\n  .dec {\n    color: #f99157; }\n  /* variable name */\n  .var {\n    color: #f2777a; }\n  /* function name */\n  .fun {\n    color: #6699cc; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #999999; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #2d2d2d;\n  list-style-type: decimal; }\n","site":{"data":{}},"excerpt":"","more":".prettyprint {\n  background: #2d2d2d;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #cccccc; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #99cc99; }\n  /* keyword */\n  .kwd {\n    color: #cc99cc; }\n  /* comment */\n  .com {\n    color: #999999; }\n  /* type name */\n  .typ {\n    color: #6699cc; }\n  /* literal value */\n  .lit {\n    color: #f99157; }\n  /* punctuation */\n  .pun {\n    color: #cccccc; }\n  /* lisp open bracket */\n  .opn {\n    color: #cccccc; }\n  /* lisp close bracket */\n  .clo {\n    color: #cccccc; }\n  /* markup tag name */\n  .tag {\n    color: #f2777a; }\n  /* markup attribute name */\n  .atn {\n    color: #f99157; }\n  /* markup attribute value */\n  .atv {\n    color: #66cccc; }\n  /* declaration */\n  .dec {\n    color: #f99157; }\n  /* variable name */\n  .var {\n    color: #f2777a; }\n  /* function name */\n  .fun {\n    color: #6699cc; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #999999; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #2d2d2d;\n  list-style-type: decimal; }\n"},{"_content":"@import \"colors/tomorrow-night\";\n@import \"base-tomorrow\";\n@import \"base\";\n@include prettyprint();\n","source":"plugs/hexo-prettify-highlight/themes/tomorrow-night.scss","raw":"@import \"colors/tomorrow-night\";\n@import \"base-tomorrow\";\n@import \"base\";\n@include prettyprint();\n","date":"2020-05-28T04:03:59.018Z","updated":"2020-05-28T04:03:59.018Z","path":"plugs/hexo-prettify-highlight/themes/tomorrow-night.css","layout":"false","title":"","comments":1,"_id":"ckaq9am8l000s6hz44gm09bm1","content":".prettyprint {\n  background: #1d1f21;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #c5c8c6; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #b5bd68; }\n  /* keyword */\n  .kwd {\n    color: #b294bb; }\n  /* comment */\n  .com {\n    color: #969896; }\n  /* type name */\n  .typ {\n    color: #81a2be; }\n  /* literal value */\n  .lit {\n    color: #de935f; }\n  /* punctuation */\n  .pun {\n    color: #c5c8c6; }\n  /* lisp open bracket */\n  .opn {\n    color: #c5c8c6; }\n  /* lisp close bracket */\n  .clo {\n    color: #c5c8c6; }\n  /* markup tag name */\n  .tag {\n    color: #cc6666; }\n  /* markup attribute name */\n  .atn {\n    color: #de935f; }\n  /* markup attribute value */\n  .atv {\n    color: #8abeb7; }\n  /* declaration */\n  .dec {\n    color: #de935f; }\n  /* variable name */\n  .var {\n    color: #cc6666; }\n  /* function name */\n  .fun {\n    color: #81a2be; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #969896; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #1d1f21;\n  list-style-type: decimal; }\n","site":{"data":{}},"excerpt":"","more":".prettyprint {\n  background: #1d1f21;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #c5c8c6; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #b5bd68; }\n  /* keyword */\n  .kwd {\n    color: #b294bb; }\n  /* comment */\n  .com {\n    color: #969896; }\n  /* type name */\n  .typ {\n    color: #81a2be; }\n  /* literal value */\n  .lit {\n    color: #de935f; }\n  /* punctuation */\n  .pun {\n    color: #c5c8c6; }\n  /* lisp open bracket */\n  .opn {\n    color: #c5c8c6; }\n  /* lisp close bracket */\n  .clo {\n    color: #c5c8c6; }\n  /* markup tag name */\n  .tag {\n    color: #cc6666; }\n  /* markup attribute name */\n  .atn {\n    color: #de935f; }\n  /* markup attribute value */\n  .atv {\n    color: #8abeb7; }\n  /* declaration */\n  .dec {\n    color: #de935f; }\n  /* variable name */\n  .var {\n    color: #cc6666; }\n  /* function name */\n  .fun {\n    color: #81a2be; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #969896; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #1d1f21;\n  list-style-type: decimal; }\n"},{"_content":"@import \"colors/tomorrow\";\n@import \"base-tomorrow\";\n@import \"base\";\n@include prettyprint();\n","source":"plugs/hexo-prettify-highlight/themes/tomorrow.scss","raw":"@import \"colors/tomorrow\";\n@import \"base-tomorrow\";\n@import \"base\";\n@include prettyprint();\n","date":"2020-05-28T04:03:59.019Z","updated":"2020-05-28T04:03:59.019Z","path":"plugs/hexo-prettify-highlight/themes/tomorrow.css","layout":"false","title":"","comments":1,"_id":"ckaq9am8l000t6hz4flbf3pw4","content":".prettyprint {\n  background: #ffffff;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #4d4d4c; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #718c00; }\n  /* keyword */\n  .kwd {\n    color: #8959a8; }\n  /* comment */\n  .com {\n    color: #8e908c; }\n  /* type name */\n  .typ {\n    color: #4271ae; }\n  /* literal value */\n  .lit {\n    color: #f5871f; }\n  /* punctuation */\n  .pun {\n    color: #4d4d4c; }\n  /* lisp open bracket */\n  .opn {\n    color: #4d4d4c; }\n  /* lisp close bracket */\n  .clo {\n    color: #4d4d4c; }\n  /* markup tag name */\n  .tag {\n    color: #c82829; }\n  /* markup attribute name */\n  .atn {\n    color: #f5871f; }\n  /* markup attribute value */\n  .atv {\n    color: #3e999f; }\n  /* declaration */\n  .dec {\n    color: #f5871f; }\n  /* variable name */\n  .var {\n    color: #c82829; }\n  /* function name */\n  .fun {\n    color: #4271ae; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #8e908c; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #ffffff;\n  list-style-type: decimal; }\n","site":{"data":{}},"excerpt":"","more":".prettyprint {\n  background: #ffffff;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #4d4d4c; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #718c00; }\n  /* keyword */\n  .kwd {\n    color: #8959a8; }\n  /* comment */\n  .com {\n    color: #8e908c; }\n  /* type name */\n  .typ {\n    color: #4271ae; }\n  /* literal value */\n  .lit {\n    color: #f5871f; }\n  /* punctuation */\n  .pun {\n    color: #4d4d4c; }\n  /* lisp open bracket */\n  .opn {\n    color: #4d4d4c; }\n  /* lisp close bracket */\n  .clo {\n    color: #4d4d4c; }\n  /* markup tag name */\n  .tag {\n    color: #c82829; }\n  /* markup attribute name */\n  .atn {\n    color: #f5871f; }\n  /* markup attribute value */\n  .atv {\n    color: #3e999f; }\n  /* declaration */\n  .dec {\n    color: #f5871f; }\n  /* variable name */\n  .var {\n    color: #c82829; }\n  /* function name */\n  .fun {\n    color: #4271ae; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #8e908c; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #ffffff;\n  list-style-type: decimal; }\n"},{"_content":"@import \"colors/tranquil-heart\";\n@import \"base\";\n@include prettyprint();\n","source":"plugs/hexo-prettify-highlight/themes/tranquil-heart.scss","raw":"@import \"colors/tranquil-heart\";\n@import \"base\";\n@include prettyprint();\n","date":"2020-05-28T04:03:59.020Z","updated":"2020-05-28T04:03:59.020Z","path":"plugs/hexo-prettify-highlight/themes/tranquil-heart.css","layout":"false","title":"","comments":1,"_id":"ckaq9am8m000u6hz49z0q2asc","content":".prettyprint {\n  background: #2f3640;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #e6e9ed; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #ffce54; }\n  /* keyword */\n  .kwd {\n    color: #4fc1e9; }\n  /* comment */\n  .com {\n    color: #656d78; }\n  /* type name */\n  .typ {\n    color: #4fc1e9; }\n  /* literal value */\n  .lit {\n    color: #ac92ec; }\n  /* punctuation */\n  .pun {\n    color: #e6e9ed; }\n  /* lisp open bracket */\n  .opn {\n    color: #e6e9ed; }\n  /* lisp close bracket */\n  .clo {\n    color: #e6e9ed; }\n  /* markup tag name */\n  .tag {\n    color: #ed5565; }\n  /* markup attribute name */\n  .atn {\n    color: #a0d468; }\n  /* markup attribute value */\n  .atv {\n    color: #ffce54; }\n  /* declaration */\n  .dec {\n    color: #ac92ec; }\n  /* variable name */\n  .var {\n    color: #e6e9ed; }\n  /* function name */\n  .fun {\n    color: #e6e9ed; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #656d78; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #2f3640;\n  list-style-type: decimal; }\n","site":{"data":{}},"excerpt":"","more":".prettyprint {\n  background: #2f3640;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #e6e9ed; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #ffce54; }\n  /* keyword */\n  .kwd {\n    color: #4fc1e9; }\n  /* comment */\n  .com {\n    color: #656d78; }\n  /* type name */\n  .typ {\n    color: #4fc1e9; }\n  /* literal value */\n  .lit {\n    color: #ac92ec; }\n  /* punctuation */\n  .pun {\n    color: #e6e9ed; }\n  /* lisp open bracket */\n  .opn {\n    color: #e6e9ed; }\n  /* lisp close bracket */\n  .clo {\n    color: #e6e9ed; }\n  /* markup tag name */\n  .tag {\n    color: #ed5565; }\n  /* markup attribute name */\n  .atn {\n    color: #a0d468; }\n  /* markup attribute value */\n  .atv {\n    color: #ffce54; }\n  /* declaration */\n  .dec {\n    color: #ac92ec; }\n  /* variable name */\n  .var {\n    color: #e6e9ed; }\n  /* function name */\n  .fun {\n    color: #e6e9ed; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #656d78; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #2f3640;\n  list-style-type: decimal; }\n"},{"_content":"@import \"colors/vibrant-ink\";\n@import \"base\";\n@include prettyprint();\n","source":"plugs/hexo-prettify-highlight/themes/vibrant-ink.scss","raw":"@import \"colors/vibrant-ink\";\n@import \"base\";\n@include prettyprint();\n","date":"2020-05-28T04:03:59.020Z","updated":"2020-05-28T04:03:59.020Z","path":"plugs/hexo-prettify-highlight/themes/vibrant-ink.css","layout":"false","title":"","comments":1,"_id":"ckaq9am8n000v6hz4g35c64td","content":".prettyprint {\n  background: #000;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #fff; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #6f0; }\n  /* keyword */\n  .kwd {\n    color: #f60; }\n  /* comment */\n  .com {\n    color: #93c; }\n  /* type name */\n  .typ {\n    color: #458; }\n  /* literal value */\n  .lit {\n    color: #458; }\n  /* punctuation */\n  .pun {\n    color: #fff; }\n  /* lisp open bracket */\n  .opn {\n    color: #fff; }\n  /* lisp close bracket */\n  .clo {\n    color: #fff; }\n  /* markup tag name */\n  .tag {\n    color: #fff; }\n  /* markup attribute name */\n  .atn {\n    color: #9c9; }\n  /* markup attribute value */\n  .atv {\n    color: #6f0; }\n  /* declaration */\n  .dec {\n    color: #fff; }\n  /* variable name */\n  .var {\n    color: #fff; }\n  /* function name */\n  .fun {\n    color: #fc0; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #666666; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #000;\n  list-style-type: decimal; }\n","site":{"data":{}},"excerpt":"","more":".prettyprint {\n  background: #000;\n  font-family: Menlo, \"Bitstream Vera Sans Mono\", \"DejaVu Sans Mono\", Monaco, Consolas, monospace;\n  border: 0 !important; }\n\n.pln {\n  color: #fff; }\n\n@media screen {\n  /* string content */\n  .str {\n    color: #6f0; }\n  /* keyword */\n  .kwd {\n    color: #f60; }\n  /* comment */\n  .com {\n    color: #93c; }\n  /* type name */\n  .typ {\n    color: #458; }\n  /* literal value */\n  .lit {\n    color: #458; }\n  /* punctuation */\n  .pun {\n    color: #fff; }\n  /* lisp open bracket */\n  .opn {\n    color: #fff; }\n  /* lisp close bracket */\n  .clo {\n    color: #fff; }\n  /* markup tag name */\n  .tag {\n    color: #fff; }\n  /* markup attribute name */\n  .atn {\n    color: #9c9; }\n  /* markup attribute value */\n  .atv {\n    color: #6f0; }\n  /* declaration */\n  .dec {\n    color: #fff; }\n  /* variable name */\n  .var {\n    color: #fff; }\n  /* function name */\n  .fun {\n    color: #fc0; } }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #666666; }\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #000;\n  list-style-type: decimal; }\n"}],"Post":[{"title":"从零开始前端架构1：现代前端工作流","url":"325.html","id":"325","comments":0,"_content":"\n软件架构\n====\n\n什么是软件架构\n-------\n\n对于计算机工程而言，“架构”是一个十足的“舶来品”，最出“架构”是从建筑工程系来的一个概念，对于建筑工程而言，需要规划、设计、实施等多个过程，中间需要考虑成本、功能、美观、坚固等诸多需求，因此一个合适的建筑蓝图和计划，对于建筑工程而言至关重要。 软件开发也是和建筑工程类似，我们需要一个类似于建筑工程中的架构，来指导我们的开发工作，包括：\n\n*   各个模块之间关系是什么？\n*   采用什么技术栈、框架等来完成各个模块？\n*   各个模块如何通信？\n*   项目如何上线和部署？\n*   各个模块中的结构细节如何？\n*   开发测试部署中的约定、规则和制度？\n*   对于程序员来说如何遵循上述这些细节？\n\n需要怎样的架构\n-------\n\n*   一个能够上线部署的架构\n*   一个团队所有人都能完成部分工作，集体可以完成全部工作的架构\n*   一个技术上可行的架构\n*   一个不多也不少刚刚好的架构\n*   一个可持续可维护可拓展的架构\n\n架构的设计步骤\n-------\n\n1.  收集业务需求\n2.  与具体开发人员沟通了解技术限制（比如用了大家不会的技术做了主方案就是极不可取的选择，遵循团队传统是一个优秀架构设计人员必须具有的素质）\n3.  寻找潜在的可行性技术方案\n4.  发现可能的风险点\n5.  在团队中确认并证明方案可行性\n6.  细化技术方案的每个阶段实施\n7.  结合业务和工作量，按照轻重缓急法，对项目进行排期\n\n前端技术发展史\n=======\n\n*   石器时代（1990-1995）：彼时js还没有诞生，由后端渲染HTML，前端只包括布局和简单的样式。\n*   青铜时代（1995-2005）：js开始诞生，前端可以用js实现一些动效以及表单校验等工作。后来者的IE游览器与网景进行第一次游览器大战并胜利。\n*   铁器时代（2005-2008）：2005年，gmail采用ajax进行开发，是第一个动态页面，之后ajax开始流行。同时flash和ActionScript大行其道。\n*   蒸汽时代(2008-2009)：2008年，现代游览器内核webkit和强力js引擎V8发布并开源，2年后苹果开始抵制flash强推html5。\n*   电气时代（2009-2013）:node.js和npm发布，angular.js发布。\n*   现代（2013后）：react.js和vue.js及其生态圈内模块相继发布，带来新的思维组件化和数据驱动；出现了typescript；ES6发布并且持续跟进；gulp和webpack作为自动化和打包工具的代表发布；跨平台框架Electron、RN、Flutter等被发布并且强力承担了当前移动端开发半数以上工作；node.js趋于稳定并且承担了大量项目的后台开发；游览器随着性能的提高使得游览器三维越来越流行。\n\n前端架构的层次\n=======\n\n![](http://img.bugzhang.com/architecture-level.jpg)\n\n*   系统级：应用在整个系统内的架构关系，即与后端如何组织结构\n*   应用级：应用外部的架构关系，如多个应用之间的组件共享\n*   模块级：应用内部的架构关系，如状态管理、模块化\n*   代码级：代码级别的基础设施，包括规范、原则、文档等\n\n工作流和构建流\n=======\n\n工作流\n---\n\n![前端工作流](http://img.bugzhang.com/workflow.jpg)\n\n构件流\n---\n\n![前端构建流](http://img.bugzhang.com/build-workflow.jpg)\n\n开发中一些常见的文档对比\n------------\n\n类型\n\n适用场景\n\n使用频率\n\n性价比\n\n搭建指南README\n\n项目搭建和开发\n\n低\n\n高\n\n架构图\n\n熟悉项目设计\n\n低\n\n高\n\n看板\n\n了解业务，把控进度\n\n中\n\n中\n\n需求追踪\n\n了解需求，追踪进度\n\n高\n\n高\n\nbug追踪\n\n追踪bug情况\n\n高\n\n高\n\n代码规范与提交规范\n\n如何提交和规范代码\n\n高\n\n高\n\n接口文档\n\n了解接口\n\n高\n\n高\n\n这里顺便讲下代码commit规范，我通常采用的是一个简洁的规范，这个规范是： 【类型】(【影响范围-可选】):【修改内容】 其中类型有以下几种：\n\n*   feat：新功能（feature）\n*   fix：修补bug\n*   style：写了css样式（不影响代码运行的变动）\n*   docs：补充文档（documentation）\n*   refactor：重构（即不是新增功能，也不是修改bug的代码变动）\n*   test：增加测试\n*   build：构建过程或辅助工具的变动\n\n\\-\\- 参考：\n\n*   《前端架构-从入门到微前端》\n*   《整洁架构》\n*   《软件系统架构》","source":"_drafts/e4-bb-8e-e9-9b-b6-e5-bc-80-e5-a7-8b-e5-89-8d-e7-ab-af-e6-9e-b6-e6-9e-841-ef-bc-9a-e7-8e-b0-e4-bb-a3-e5-89-8d-e7-ab-af-e5-b7-a5-e4-bd-9c-e6-b5-81.md","raw":"---\ntitle: 从零开始前端架构1：现代前端工作流\ntags:\n  - 前端架构\nurl: 325.html\nid: 325\ncomments: false\ncategories:\n  - 未分类\n---\n\n软件架构\n====\n\n什么是软件架构\n-------\n\n对于计算机工程而言，“架构”是一个十足的“舶来品”，最出“架构”是从建筑工程系来的一个概念，对于建筑工程而言，需要规划、设计、实施等多个过程，中间需要考虑成本、功能、美观、坚固等诸多需求，因此一个合适的建筑蓝图和计划，对于建筑工程而言至关重要。 软件开发也是和建筑工程类似，我们需要一个类似于建筑工程中的架构，来指导我们的开发工作，包括：\n\n*   各个模块之间关系是什么？\n*   采用什么技术栈、框架等来完成各个模块？\n*   各个模块如何通信？\n*   项目如何上线和部署？\n*   各个模块中的结构细节如何？\n*   开发测试部署中的约定、规则和制度？\n*   对于程序员来说如何遵循上述这些细节？\n\n需要怎样的架构\n-------\n\n*   一个能够上线部署的架构\n*   一个团队所有人都能完成部分工作，集体可以完成全部工作的架构\n*   一个技术上可行的架构\n*   一个不多也不少刚刚好的架构\n*   一个可持续可维护可拓展的架构\n\n架构的设计步骤\n-------\n\n1.  收集业务需求\n2.  与具体开发人员沟通了解技术限制（比如用了大家不会的技术做了主方案就是极不可取的选择，遵循团队传统是一个优秀架构设计人员必须具有的素质）\n3.  寻找潜在的可行性技术方案\n4.  发现可能的风险点\n5.  在团队中确认并证明方案可行性\n6.  细化技术方案的每个阶段实施\n7.  结合业务和工作量，按照轻重缓急法，对项目进行排期\n\n前端技术发展史\n=======\n\n*   石器时代（1990-1995）：彼时js还没有诞生，由后端渲染HTML，前端只包括布局和简单的样式。\n*   青铜时代（1995-2005）：js开始诞生，前端可以用js实现一些动效以及表单校验等工作。后来者的IE游览器与网景进行第一次游览器大战并胜利。\n*   铁器时代（2005-2008）：2005年，gmail采用ajax进行开发，是第一个动态页面，之后ajax开始流行。同时flash和ActionScript大行其道。\n*   蒸汽时代(2008-2009)：2008年，现代游览器内核webkit和强力js引擎V8发布并开源，2年后苹果开始抵制flash强推html5。\n*   电气时代（2009-2013）:node.js和npm发布，angular.js发布。\n*   现代（2013后）：react.js和vue.js及其生态圈内模块相继发布，带来新的思维组件化和数据驱动；出现了typescript；ES6发布并且持续跟进；gulp和webpack作为自动化和打包工具的代表发布；跨平台框架Electron、RN、Flutter等被发布并且强力承担了当前移动端开发半数以上工作；node.js趋于稳定并且承担了大量项目的后台开发；游览器随着性能的提高使得游览器三维越来越流行。\n\n前端架构的层次\n=======\n\n![](http://img.bugzhang.com/architecture-level.jpg)\n\n*   系统级：应用在整个系统内的架构关系，即与后端如何组织结构\n*   应用级：应用外部的架构关系，如多个应用之间的组件共享\n*   模块级：应用内部的架构关系，如状态管理、模块化\n*   代码级：代码级别的基础设施，包括规范、原则、文档等\n\n工作流和构建流\n=======\n\n工作流\n---\n\n![前端工作流](http://img.bugzhang.com/workflow.jpg)\n\n构件流\n---\n\n![前端构建流](http://img.bugzhang.com/build-workflow.jpg)\n\n开发中一些常见的文档对比\n------------\n\n类型\n\n适用场景\n\n使用频率\n\n性价比\n\n搭建指南README\n\n项目搭建和开发\n\n低\n\n高\n\n架构图\n\n熟悉项目设计\n\n低\n\n高\n\n看板\n\n了解业务，把控进度\n\n中\n\n中\n\n需求追踪\n\n了解需求，追踪进度\n\n高\n\n高\n\nbug追踪\n\n追踪bug情况\n\n高\n\n高\n\n代码规范与提交规范\n\n如何提交和规范代码\n\n高\n\n高\n\n接口文档\n\n了解接口\n\n高\n\n高\n\n这里顺便讲下代码commit规范，我通常采用的是一个简洁的规范，这个规范是： 【类型】(【影响范围-可选】):【修改内容】 其中类型有以下几种：\n\n*   feat：新功能（feature）\n*   fix：修补bug\n*   style：写了css样式（不影响代码运行的变动）\n*   docs：补充文档（documentation）\n*   refactor：重构（即不是新增功能，也不是修改bug的代码变动）\n*   test：增加测试\n*   build：构建过程或辅助工具的变动\n\n\\-\\- 参考：\n\n*   《前端架构-从入门到微前端》\n*   《整洁架构》\n*   《软件系统架构》","slug":"e4-bb-8e-e9-9b-b6-e5-bc-80-e5-a7-8b-e5-89-8d-e7-ab-af-e6-9e-b6-e6-9e-841-ef-bc-9a-e7-8e-b0-e4-bb-a3-e5-89-8d-e7-ab-af-e5-b7-a5-e4-bd-9c-e6-b5-81","published":0,"date":"2020-05-19T08:33:55.937Z","updated":"2020-05-19T08:33:55.939Z","layout":"post","photos":[],"link":"","_id":"ckahts7wk0000zmz8cztca836","content":"<h1 id=\"软件架构\"><a href=\"#软件架构\" class=\"headerlink\" title=\"软件架构\"></a>软件架构</h1><h2 id=\"什么是软件架构\"><a href=\"#什么是软件架构\" class=\"headerlink\" title=\"什么是软件架构\"></a>什么是软件架构</h2><p>对于计算机工程而言，“架构”是一个十足的“舶来品”，最出“架构”是从建筑工程系来的一个概念，对于建筑工程而言，需要规划、设计、实施等多个过程，中间需要考虑成本、功能、美观、坚固等诸多需求，因此一个合适的建筑蓝图和计划，对于建筑工程而言至关重要。 软件开发也是和建筑工程类似，我们需要一个类似于建筑工程中的架构，来指导我们的开发工作，包括：</p>\n<ul>\n<li>各个模块之间关系是什么？</li>\n<li>采用什么技术栈、框架等来完成各个模块？</li>\n<li>各个模块如何通信？</li>\n<li>项目如何上线和部署？</li>\n<li>各个模块中的结构细节如何？</li>\n<li>开发测试部署中的约定、规则和制度？</li>\n<li>对于程序员来说如何遵循上述这些细节？</li>\n</ul>\n<h2 id=\"需要怎样的架构\"><a href=\"#需要怎样的架构\" class=\"headerlink\" title=\"需要怎样的架构\"></a>需要怎样的架构</h2><ul>\n<li>一个能够上线部署的架构</li>\n<li>一个团队所有人都能完成部分工作，集体可以完成全部工作的架构</li>\n<li>一个技术上可行的架构</li>\n<li>一个不多也不少刚刚好的架构</li>\n<li>一个可持续可维护可拓展的架构</li>\n</ul>\n<h2 id=\"架构的设计步骤\"><a href=\"#架构的设计步骤\" class=\"headerlink\" title=\"架构的设计步骤\"></a>架构的设计步骤</h2><ol>\n<li>收集业务需求</li>\n<li>与具体开发人员沟通了解技术限制（比如用了大家不会的技术做了主方案就是极不可取的选择，遵循团队传统是一个优秀架构设计人员必须具有的素质）</li>\n<li>寻找潜在的可行性技术方案</li>\n<li>发现可能的风险点</li>\n<li>在团队中确认并证明方案可行性</li>\n<li>细化技术方案的每个阶段实施</li>\n<li>结合业务和工作量，按照轻重缓急法，对项目进行排期</li>\n</ol>\n<h1 id=\"前端技术发展史\"><a href=\"#前端技术发展史\" class=\"headerlink\" title=\"前端技术发展史\"></a>前端技术发展史</h1><ul>\n<li>石器时代（1990-1995）：彼时js还没有诞生，由后端渲染HTML，前端只包括布局和简单的样式。</li>\n<li>青铜时代（1995-2005）：js开始诞生，前端可以用js实现一些动效以及表单校验等工作。后来者的IE游览器与网景进行第一次游览器大战并胜利。</li>\n<li>铁器时代（2005-2008）：2005年，gmail采用ajax进行开发，是第一个动态页面，之后ajax开始流行。同时flash和ActionScript大行其道。</li>\n<li>蒸汽时代(2008-2009)：2008年，现代游览器内核webkit和强力js引擎V8发布并开源，2年后苹果开始抵制flash强推html5。</li>\n<li>电气时代（2009-2013）:node.js和npm发布，angular.js发布。</li>\n<li>现代（2013后）：react.js和vue.js及其生态圈内模块相继发布，带来新的思维组件化和数据驱动；出现了typescript；ES6发布并且持续跟进；gulp和webpack作为自动化和打包工具的代表发布；跨平台框架Electron、RN、Flutter等被发布并且强力承担了当前移动端开发半数以上工作；node.js趋于稳定并且承担了大量项目的后台开发；游览器随着性能的提高使得游览器三维越来越流行。</li>\n</ul>\n<h1 id=\"前端架构的层次\"><a href=\"#前端架构的层次\" class=\"headerlink\" title=\"前端架构的层次\"></a>前端架构的层次</h1><p><img src=\"http://img.bugzhang.com/architecture-level.jpg\" alt=\"\"></p>\n<ul>\n<li>系统级：应用在整个系统内的架构关系，即与后端如何组织结构</li>\n<li>应用级：应用外部的架构关系，如多个应用之间的组件共享</li>\n<li>模块级：应用内部的架构关系，如状态管理、模块化</li>\n<li>代码级：代码级别的基础设施，包括规范、原则、文档等</li>\n</ul>\n<h1 id=\"工作流和构建流\"><a href=\"#工作流和构建流\" class=\"headerlink\" title=\"工作流和构建流\"></a>工作流和构建流</h1><h2 id=\"工作流\"><a href=\"#工作流\" class=\"headerlink\" title=\"工作流\"></a>工作流</h2><p><img src=\"http://img.bugzhang.com/workflow.jpg\" alt=\"前端工作流\"></p>\n<h2 id=\"构件流\"><a href=\"#构件流\" class=\"headerlink\" title=\"构件流\"></a>构件流</h2><p><img src=\"http://img.bugzhang.com/build-workflow.jpg\" alt=\"前端构建流\"></p>\n<h2 id=\"开发中一些常见的文档对比\"><a href=\"#开发中一些常见的文档对比\" class=\"headerlink\" title=\"开发中一些常见的文档对比\"></a>开发中一些常见的文档对比</h2><p>类型</p>\n<p>适用场景</p>\n<p>使用频率</p>\n<p>性价比</p>\n<p>搭建指南README</p>\n<p>项目搭建和开发</p>\n<p>低</p>\n<p>高</p>\n<p>架构图</p>\n<p>熟悉项目设计</p>\n<p>低</p>\n<p>高</p>\n<p>看板</p>\n<p>了解业务，把控进度</p>\n<p>中</p>\n<p>中</p>\n<p>需求追踪</p>\n<p>了解需求，追踪进度</p>\n<p>高</p>\n<p>高</p>\n<p>bug追踪</p>\n<p>追踪bug情况</p>\n<p>高</p>\n<p>高</p>\n<p>代码规范与提交规范</p>\n<p>如何提交和规范代码</p>\n<p>高</p>\n<p>高</p>\n<p>接口文档</p>\n<p>了解接口</p>\n<p>高</p>\n<p>高</p>\n<p>这里顺便讲下代码commit规范，我通常采用的是一个简洁的规范，这个规范是： 【类型】(【影响范围-可选】):【修改内容】 其中类型有以下几种：</p>\n<ul>\n<li>feat：新功能（feature）</li>\n<li>fix：修补bug</li>\n<li>style：写了css样式（不影响代码运行的变动）</li>\n<li>docs：补充文档（documentation）</li>\n<li>refactor：重构（即不是新增功能，也不是修改bug的代码变动）</li>\n<li>test：增加测试</li>\n<li>build：构建过程或辅助工具的变动</li>\n</ul>\n<p>-- 参考：</p>\n<ul>\n<li>《前端架构-从入门到微前端》</li>\n<li>《整洁架构》</li>\n<li>《软件系统架构》</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"软件架构\"><a href=\"#软件架构\" class=\"headerlink\" title=\"软件架构\"></a>软件架构</h1><h2 id=\"什么是软件架构\"><a href=\"#什么是软件架构\" class=\"headerlink\" title=\"什么是软件架构\"></a>什么是软件架构</h2><p>对于计算机工程而言，“架构”是一个十足的“舶来品”，最出“架构”是从建筑工程系来的一个概念，对于建筑工程而言，需要规划、设计、实施等多个过程，中间需要考虑成本、功能、美观、坚固等诸多需求，因此一个合适的建筑蓝图和计划，对于建筑工程而言至关重要。 软件开发也是和建筑工程类似，我们需要一个类似于建筑工程中的架构，来指导我们的开发工作，包括：</p>\n<ul>\n<li>各个模块之间关系是什么？</li>\n<li>采用什么技术栈、框架等来完成各个模块？</li>\n<li>各个模块如何通信？</li>\n<li>项目如何上线和部署？</li>\n<li>各个模块中的结构细节如何？</li>\n<li>开发测试部署中的约定、规则和制度？</li>\n<li>对于程序员来说如何遵循上述这些细节？</li>\n</ul>\n<h2 id=\"需要怎样的架构\"><a href=\"#需要怎样的架构\" class=\"headerlink\" title=\"需要怎样的架构\"></a>需要怎样的架构</h2><ul>\n<li>一个能够上线部署的架构</li>\n<li>一个团队所有人都能完成部分工作，集体可以完成全部工作的架构</li>\n<li>一个技术上可行的架构</li>\n<li>一个不多也不少刚刚好的架构</li>\n<li>一个可持续可维护可拓展的架构</li>\n</ul>\n<h2 id=\"架构的设计步骤\"><a href=\"#架构的设计步骤\" class=\"headerlink\" title=\"架构的设计步骤\"></a>架构的设计步骤</h2><ol>\n<li>收集业务需求</li>\n<li>与具体开发人员沟通了解技术限制（比如用了大家不会的技术做了主方案就是极不可取的选择，遵循团队传统是一个优秀架构设计人员必须具有的素质）</li>\n<li>寻找潜在的可行性技术方案</li>\n<li>发现可能的风险点</li>\n<li>在团队中确认并证明方案可行性</li>\n<li>细化技术方案的每个阶段实施</li>\n<li>结合业务和工作量，按照轻重缓急法，对项目进行排期</li>\n</ol>\n<h1 id=\"前端技术发展史\"><a href=\"#前端技术发展史\" class=\"headerlink\" title=\"前端技术发展史\"></a>前端技术发展史</h1><ul>\n<li>石器时代（1990-1995）：彼时js还没有诞生，由后端渲染HTML，前端只包括布局和简单的样式。</li>\n<li>青铜时代（1995-2005）：js开始诞生，前端可以用js实现一些动效以及表单校验等工作。后来者的IE游览器与网景进行第一次游览器大战并胜利。</li>\n<li>铁器时代（2005-2008）：2005年，gmail采用ajax进行开发，是第一个动态页面，之后ajax开始流行。同时flash和ActionScript大行其道。</li>\n<li>蒸汽时代(2008-2009)：2008年，现代游览器内核webkit和强力js引擎V8发布并开源，2年后苹果开始抵制flash强推html5。</li>\n<li>电气时代（2009-2013）:node.js和npm发布，angular.js发布。</li>\n<li>现代（2013后）：react.js和vue.js及其生态圈内模块相继发布，带来新的思维组件化和数据驱动；出现了typescript；ES6发布并且持续跟进；gulp和webpack作为自动化和打包工具的代表发布；跨平台框架Electron、RN、Flutter等被发布并且强力承担了当前移动端开发半数以上工作；node.js趋于稳定并且承担了大量项目的后台开发；游览器随着性能的提高使得游览器三维越来越流行。</li>\n</ul>\n<h1 id=\"前端架构的层次\"><a href=\"#前端架构的层次\" class=\"headerlink\" title=\"前端架构的层次\"></a>前端架构的层次</h1><p><img src=\"http://img.bugzhang.com/architecture-level.jpg\" alt=\"\"></p>\n<ul>\n<li>系统级：应用在整个系统内的架构关系，即与后端如何组织结构</li>\n<li>应用级：应用外部的架构关系，如多个应用之间的组件共享</li>\n<li>模块级：应用内部的架构关系，如状态管理、模块化</li>\n<li>代码级：代码级别的基础设施，包括规范、原则、文档等</li>\n</ul>\n<h1 id=\"工作流和构建流\"><a href=\"#工作流和构建流\" class=\"headerlink\" title=\"工作流和构建流\"></a>工作流和构建流</h1><h2 id=\"工作流\"><a href=\"#工作流\" class=\"headerlink\" title=\"工作流\"></a>工作流</h2><p><img src=\"http://img.bugzhang.com/workflow.jpg\" alt=\"前端工作流\"></p>\n<h2 id=\"构件流\"><a href=\"#构件流\" class=\"headerlink\" title=\"构件流\"></a>构件流</h2><p><img src=\"http://img.bugzhang.com/build-workflow.jpg\" alt=\"前端构建流\"></p>\n<h2 id=\"开发中一些常见的文档对比\"><a href=\"#开发中一些常见的文档对比\" class=\"headerlink\" title=\"开发中一些常见的文档对比\"></a>开发中一些常见的文档对比</h2><p>类型</p>\n<p>适用场景</p>\n<p>使用频率</p>\n<p>性价比</p>\n<p>搭建指南README</p>\n<p>项目搭建和开发</p>\n<p>低</p>\n<p>高</p>\n<p>架构图</p>\n<p>熟悉项目设计</p>\n<p>低</p>\n<p>高</p>\n<p>看板</p>\n<p>了解业务，把控进度</p>\n<p>中</p>\n<p>中</p>\n<p>需求追踪</p>\n<p>了解需求，追踪进度</p>\n<p>高</p>\n<p>高</p>\n<p>bug追踪</p>\n<p>追踪bug情况</p>\n<p>高</p>\n<p>高</p>\n<p>代码规范与提交规范</p>\n<p>如何提交和规范代码</p>\n<p>高</p>\n<p>高</p>\n<p>接口文档</p>\n<p>了解接口</p>\n<p>高</p>\n<p>高</p>\n<p>这里顺便讲下代码commit规范，我通常采用的是一个简洁的规范，这个规范是： 【类型】(【影响范围-可选】):【修改内容】 其中类型有以下几种：</p>\n<ul>\n<li>feat：新功能（feature）</li>\n<li>fix：修补bug</li>\n<li>style：写了css样式（不影响代码运行的变动）</li>\n<li>docs：补充文档（documentation）</li>\n<li>refactor：重构（即不是新增功能，也不是修改bug的代码变动）</li>\n<li>test：增加测试</li>\n<li>build：构建过程或辅助工具的变动</li>\n</ul>\n<p>-- 参考：</p>\n<ul>\n<li>《前端架构-从入门到微前端》</li>\n<li>《整洁架构》</li>\n<li>《软件系统架构》</li>\n</ul>\n"},{"title":"为什么事业单位和当公务员毫无吸引力","url":"157.html","id":"157","_content":"","source":"_drafts/为什么事业单位和当公务员毫无吸引力.md","raw":"---\ntitle: 为什么事业单位和当公务员毫无吸引力\nurl: 157.html\nid: 157\ncategories:\n  - 未分类\ntags:\n---\n","slug":"为什么事业单位和当公务员毫无吸引力","published":0,"date":"2020-05-19T08:33:55.937Z","updated":"2020-05-19T08:33:55.939Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts7x10002zmz87csq6xs8","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"使用javascript描述数据结构——树","url":"232.html","id":"232","_content":"\n树的定义\n----\n\n因为树通常可以转为二叉树，所以常见的树算法都是以二叉树为准，二叉树的代码定义：\n\n    function TreeNode(value, left, right) {\n        this.value = value; // 节点存储的值\n        this.left = left; // 左节点\n        this.right = right; // 右节点\n    }\n\n\n二叉树有以下特点： \\- 二叉树的每个结点至多只有二棵子树(不存在度大于2的结点)，二叉树的子树有左右之分，次序不能颠倒。 - 二叉树的第 i 层至多有 2^(i-1)个结点。 - 深度为 k 的二叉树至多有 2^k-1个结点。 - 对任何一棵二叉树T，如果其终端结点数为n0，度为2的结点数为n2，则n0=n2+1。 - 一棵深度为k，且有 2^k-1 个节点称之为满二叉树； - 深度为k，有n个节点的二叉树，当且仅当其每一个节点都与深度为k的满二叉树中，序号为1至n的节点对应时，称之为完全二叉树。 - 平衡二叉树又被称为AVL树（区别于AVL算法），它是一棵二叉排序树，且具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。 因为根节点是唯一的，我们通常用根节点的变量指针代替的就是这颗树。同理，任何一个节点的变量也代指了这棵树。\n\n二叉树的遍历\n------\n\n二叉树的遍历一共有四种：先序（又叫前序或先根），中序（又叫中序或中根），后序（又叫后序或后根），层序。 所谓“序”指的是根的顺序，即先序是先遍历根，中序是根在中间，后序是根在最后。需要记得的是左右节点的访问顺序都是先左后右的。 二叉树的遍历递归解法都非常简单，非递归解法中和根相关的三种无一例外用到栈，层序会用到队列，这是需要记清楚的。记住这个要点之后，是很容易自己思考出来如何用栈和队列实现空间占用更小的非递归算法。\n\n# 先序遍历\n\n递归的解法： 1.如果树为空，返回 2.否则打印根的值，并且递归调用先序遍历左子树，先序遍历右子树\n\n    function preorderTraversalRec(root){\n       if (root == null) {\n           return;\n       }\n       console.log(root.value);\n       preorderTraversalRec(root.left);\n       preorderTraversalRec(root.right);\n    }\n\n\n非递归的解法","source":"_drafts/使用javascript描述数据结构——树.md","raw":"---\ntitle: 使用javascript描述数据结构——树\nurl: 232.html\nid: 232\ncategories:\n  - 算法\ntags:\n---\n\n树的定义\n----\n\n因为树通常可以转为二叉树，所以常见的树算法都是以二叉树为准，二叉树的代码定义：\n\n    function TreeNode(value, left, right) {\n        this.value = value; // 节点存储的值\n        this.left = left; // 左节点\n        this.right = right; // 右节点\n    }\n\n\n二叉树有以下特点： \\- 二叉树的每个结点至多只有二棵子树(不存在度大于2的结点)，二叉树的子树有左右之分，次序不能颠倒。 - 二叉树的第 i 层至多有 2^(i-1)个结点。 - 深度为 k 的二叉树至多有 2^k-1个结点。 - 对任何一棵二叉树T，如果其终端结点数为n0，度为2的结点数为n2，则n0=n2+1。 - 一棵深度为k，且有 2^k-1 个节点称之为满二叉树； - 深度为k，有n个节点的二叉树，当且仅当其每一个节点都与深度为k的满二叉树中，序号为1至n的节点对应时，称之为完全二叉树。 - 平衡二叉树又被称为AVL树（区别于AVL算法），它是一棵二叉排序树，且具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。 因为根节点是唯一的，我们通常用根节点的变量指针代替的就是这颗树。同理，任何一个节点的变量也代指了这棵树。\n\n二叉树的遍历\n------\n\n二叉树的遍历一共有四种：先序（又叫前序或先根），中序（又叫中序或中根），后序（又叫后序或后根），层序。 所谓“序”指的是根的顺序，即先序是先遍历根，中序是根在中间，后序是根在最后。需要记得的是左右节点的访问顺序都是先左后右的。 二叉树的遍历递归解法都非常简单，非递归解法中和根相关的三种无一例外用到栈，层序会用到队列，这是需要记清楚的。记住这个要点之后，是很容易自己思考出来如何用栈和队列实现空间占用更小的非递归算法。\n\n# 先序遍历\n\n递归的解法： 1.如果树为空，返回 2.否则打印根的值，并且递归调用先序遍历左子树，先序遍历右子树\n\n    function preorderTraversalRec(root){\n       if (root == null) {\n           return;\n       }\n       console.log(root.value);\n       preorderTraversalRec(root.left);\n       preorderTraversalRec(root.right);\n    }\n\n\n非递归的解法","slug":"使用javascript描述数据结构——树","published":0,"date":"2020-05-19T08:33:55.929Z","updated":"2020-05-19T08:51:28.566Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts7x50005zmz8c72gaj5v","content":"<h2 id=\"树的定义\"><a href=\"#树的定义\" class=\"headerlink\" title=\"树的定义\"></a>树的定义</h2><p>因为树通常可以转为二叉树，所以常见的树算法都是以二叉树为准，二叉树的代码定义：</p>\n<pre><code>function TreeNode(value, left, right) {\n    this.value = value; // 节点存储的值\n    this.left = left; // 左节点\n    this.right = right; // 右节点\n}</code></pre><p>二叉树有以下特点： - 二叉树的每个结点至多只有二棵子树(不存在度大于2的结点)，二叉树的子树有左右之分，次序不能颠倒。 - 二叉树的第 i 层至多有 2^(i-1)个结点。 - 深度为 k 的二叉树至多有 2^k-1个结点。 - 对任何一棵二叉树T，如果其终端结点数为n0，度为2的结点数为n2，则n0=n2+1。 - 一棵深度为k，且有 2^k-1 个节点称之为满二叉树； - 深度为k，有n个节点的二叉树，当且仅当其每一个节点都与深度为k的满二叉树中，序号为1至n的节点对应时，称之为完全二叉树。 - 平衡二叉树又被称为AVL树（区别于AVL算法），它是一棵二叉排序树，且具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。 因为根节点是唯一的，我们通常用根节点的变量指针代替的就是这颗树。同理，任何一个节点的变量也代指了这棵树。</p>\n<h2 id=\"二叉树的遍历\"><a href=\"#二叉树的遍历\" class=\"headerlink\" title=\"二叉树的遍历\"></a>二叉树的遍历</h2><p>二叉树的遍历一共有四种：先序（又叫前序或先根），中序（又叫中序或中根），后序（又叫后序或后根），层序。 所谓“序”指的是根的顺序，即先序是先遍历根，中序是根在中间，后序是根在最后。需要记得的是左右节点的访问顺序都是先左后右的。 二叉树的遍历递归解法都非常简单，非递归解法中和根相关的三种无一例外用到栈，层序会用到队列，这是需要记清楚的。记住这个要点之后，是很容易自己思考出来如何用栈和队列实现空间占用更小的非递归算法。</p>\n<h1 id=\"先序遍历\"><a href=\"#先序遍历\" class=\"headerlink\" title=\"先序遍历\"></a>先序遍历</h1><p>递归的解法： 1.如果树为空，返回 2.否则打印根的值，并且递归调用先序遍历左子树，先序遍历右子树</p>\n<pre><code>function preorderTraversalRec(root){\n   if (root == null) {\n       return;\n   }\n   console.log(root.value);\n   preorderTraversalRec(root.left);\n   preorderTraversalRec(root.right);\n}</code></pre><p>非递归的解法</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"树的定义\"><a href=\"#树的定义\" class=\"headerlink\" title=\"树的定义\"></a>树的定义</h2><p>因为树通常可以转为二叉树，所以常见的树算法都是以二叉树为准，二叉树的代码定义：</p>\n<pre><code>function TreeNode(value, left, right) {\n    this.value = value; // 节点存储的值\n    this.left = left; // 左节点\n    this.right = right; // 右节点\n}</code></pre><p>二叉树有以下特点： - 二叉树的每个结点至多只有二棵子树(不存在度大于2的结点)，二叉树的子树有左右之分，次序不能颠倒。 - 二叉树的第 i 层至多有 2^(i-1)个结点。 - 深度为 k 的二叉树至多有 2^k-1个结点。 - 对任何一棵二叉树T，如果其终端结点数为n0，度为2的结点数为n2，则n0=n2+1。 - 一棵深度为k，且有 2^k-1 个节点称之为满二叉树； - 深度为k，有n个节点的二叉树，当且仅当其每一个节点都与深度为k的满二叉树中，序号为1至n的节点对应时，称之为完全二叉树。 - 平衡二叉树又被称为AVL树（区别于AVL算法），它是一棵二叉排序树，且具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。 因为根节点是唯一的，我们通常用根节点的变量指针代替的就是这颗树。同理，任何一个节点的变量也代指了这棵树。</p>\n<h2 id=\"二叉树的遍历\"><a href=\"#二叉树的遍历\" class=\"headerlink\" title=\"二叉树的遍历\"></a>二叉树的遍历</h2><p>二叉树的遍历一共有四种：先序（又叫前序或先根），中序（又叫中序或中根），后序（又叫后序或后根），层序。 所谓“序”指的是根的顺序，即先序是先遍历根，中序是根在中间，后序是根在最后。需要记得的是左右节点的访问顺序都是先左后右的。 二叉树的遍历递归解法都非常简单，非递归解法中和根相关的三种无一例外用到栈，层序会用到队列，这是需要记清楚的。记住这个要点之后，是很容易自己思考出来如何用栈和队列实现空间占用更小的非递归算法。</p>\n<h1 id=\"先序遍历\"><a href=\"#先序遍历\" class=\"headerlink\" title=\"先序遍历\"></a>先序遍历</h1><p>递归的解法： 1.如果树为空，返回 2.否则打印根的值，并且递归调用先序遍历左子树，先序遍历右子树</p>\n<pre><code>function preorderTraversalRec(root){\n   if (root == null) {\n       return;\n   }\n   console.log(root.value);\n   preorderTraversalRec(root.left);\n   preorderTraversalRec(root.right);\n}</code></pre><p>非递归的解法</p>\n"},{"title":"2016.11.2 记一次黑客松","url":"32.html","id":"32","date":"2016-11-02T11:56:31.000Z","_content":"\n![](http://7xqgks.com1.z0.glb.clouddn.com/wuhackathon-head.jpg)\n\n> > 10月30号到31号两天，和萌天、飞飞、zp，去武汉参加了光谷社区主办的黑客松，最后开发一个寻找周围网速最快咖啡厅的应用的想法，结合实时渲染三维地图+数据查找的应用，起名为CafeGo。 <\n\n吐槽和感想\n-----\n\n当时天哥很忙，当时手上外包还没有结束，不过最后还是带我们去搞了。当时报名队伍很多，远远多于去年，似乎是16年开始黑客松在国内兴起的原因。安排在一个大电气厂房，并且估计是因为DHCP虚拟IP不够用的原因，一大半开发者全程没网，根本无法实现服务和查询资料。最后基本是去外边宾馆完成了。 ![](http://7xqgks.com1.z0.glb.clouddn.com/wuhanhackerathon5.jpg)\n\n> 天哥正在调试开发，被摄影师抓拍\n\n开发过程中，发现自己在解决实际项目或者说是领域内未接触过的内容的开发时，战力基本为0，忍不住膜拜天哥的能力。 <br> 因为是在武汉的原因，除了武汉本地公司的程序员参加外，还有很多华科的团队参加，冰岩作坊、联创和dian这几个大牛团队都在，和中南这边的开发者相比，华科开发者能力完全不是中南所能理解（除了天哥这种个别几个强人之外）。或者说，人家看我们大概就是我们看朝鲜一样的技术。当时中南参加的除了我们，还有一些人，在我作为一个低水平web开发看来，他们做的网站难度和创意，至少前端的实现还是处于相当低级的水平（典型jQuery+bootstrap切图工）。所以在这种环境中，如果你不能像天哥那样碾压掉所有人，那么能力已经注定不会太高。 ![](http://7xqgks.com1.z0.glb.clouddn.com/wuhanhackerathon4.jpg)\n\n> 左起是zp，天哥，我，飞哥。我当时正在讲产品。\n\n# 技术实现\n\n应用服务端比较简单，采用node.js+mongodb的架构，提供RESTful的API返回json，数据库中主要包含咖啡屋地名，用户提交次数，经纬度，网速等几个字段。当客户端以发出请求后，可以响应咖啡馆的信息，客户端进行数据的解析与处理并实时渲染出所需。同事，客户端可以将自己目前的网速上传进服务器，用于数据共享，共同组建出足够大的数据库。另外，如果更新时已有数据，取最近的几个数据均值作为最终网速。 模式图如下： ![](http://ofu6xsokr.bkt.clouddn.com/CafeGo.png) 客户端相对比较复杂，主要有以下解决点：\n\n*   根据数据实施建模，有较好网速区分度？最后我们用绿黄红三种颜色的立体柱形外加与网速绑定的柱高来明显区分，并在旁边标注出咖啡厅名子与具体网速。\n*   本地网速数据的获取与上传。\n*   基于VR导航系统。\n\n考虑到三维方面的需求和有VR功能的需求，并且要高效高速完成开发（只有不到三十小时开发）。最后决定移动客户端上，采用Unity3d完成，之后打包成为iOS与Android应用。网页端使用[Mapbox](https://www.mapbox.com)的API完成。\n\n# 效果预览\n\n![](http://ofu6xsokr.bkt.clouddn.com/ALL.jpg) 预览视频:http://v.qq.com/x/page/g0344t8vf3h.html","source":"_posts/2016-11-2-e8-ae-b0-e4-b8-80-e6-ac-a1-e9-bb-91-e5-ae-a2-e6-9d-be.md","raw":"---\ntitle: 2016.11.2 记一次黑客松\ntags:\n  - 扯淡\nurl: 32.html\nid: 32\ncategories:\n  - 未分类\ndate: 2016-11-02 19:56:31\n---\n\n![](http://7xqgks.com1.z0.glb.clouddn.com/wuhackathon-head.jpg)\n\n> > 10月30号到31号两天，和萌天、飞飞、zp，去武汉参加了光谷社区主办的黑客松，最后开发一个寻找周围网速最快咖啡厅的应用的想法，结合实时渲染三维地图+数据查找的应用，起名为CafeGo。 <\n\n吐槽和感想\n-----\n\n当时天哥很忙，当时手上外包还没有结束，不过最后还是带我们去搞了。当时报名队伍很多，远远多于去年，似乎是16年开始黑客松在国内兴起的原因。安排在一个大电气厂房，并且估计是因为DHCP虚拟IP不够用的原因，一大半开发者全程没网，根本无法实现服务和查询资料。最后基本是去外边宾馆完成了。 ![](http://7xqgks.com1.z0.glb.clouddn.com/wuhanhackerathon5.jpg)\n\n> 天哥正在调试开发，被摄影师抓拍\n\n开发过程中，发现自己在解决实际项目或者说是领域内未接触过的内容的开发时，战力基本为0，忍不住膜拜天哥的能力。 <br> 因为是在武汉的原因，除了武汉本地公司的程序员参加外，还有很多华科的团队参加，冰岩作坊、联创和dian这几个大牛团队都在，和中南这边的开发者相比，华科开发者能力完全不是中南所能理解（除了天哥这种个别几个强人之外）。或者说，人家看我们大概就是我们看朝鲜一样的技术。当时中南参加的除了我们，还有一些人，在我作为一个低水平web开发看来，他们做的网站难度和创意，至少前端的实现还是处于相当低级的水平（典型jQuery+bootstrap切图工）。所以在这种环境中，如果你不能像天哥那样碾压掉所有人，那么能力已经注定不会太高。 ![](http://7xqgks.com1.z0.glb.clouddn.com/wuhanhackerathon4.jpg)\n\n> 左起是zp，天哥，我，飞哥。我当时正在讲产品。\n\n# 技术实现\n\n应用服务端比较简单，采用node.js+mongodb的架构，提供RESTful的API返回json，数据库中主要包含咖啡屋地名，用户提交次数，经纬度，网速等几个字段。当客户端以发出请求后，可以响应咖啡馆的信息，客户端进行数据的解析与处理并实时渲染出所需。同事，客户端可以将自己目前的网速上传进服务器，用于数据共享，共同组建出足够大的数据库。另外，如果更新时已有数据，取最近的几个数据均值作为最终网速。 模式图如下： ![](http://ofu6xsokr.bkt.clouddn.com/CafeGo.png) 客户端相对比较复杂，主要有以下解决点：\n\n*   根据数据实施建模，有较好网速区分度？最后我们用绿黄红三种颜色的立体柱形外加与网速绑定的柱高来明显区分，并在旁边标注出咖啡厅名子与具体网速。\n*   本地网速数据的获取与上传。\n*   基于VR导航系统。\n\n考虑到三维方面的需求和有VR功能的需求，并且要高效高速完成开发（只有不到三十小时开发）。最后决定移动客户端上，采用Unity3d完成，之后打包成为iOS与Android应用。网页端使用[Mapbox](https://www.mapbox.com)的API完成。\n\n# 效果预览\n\n![](http://ofu6xsokr.bkt.clouddn.com/ALL.jpg) 预览视频:http://v.qq.com/x/page/g0344t8vf3h.html","slug":"2016-11-2-e8-ae-b0-e4-b8-80-e6-ac-a1-e9-bb-91-e5-ae-a2-e6-9d-be","published":1,"updated":"2020-05-19T08:51:28.570Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts7x60006zmz8gt5pb9ws","content":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/wuhackathon-head.jpg\" alt=\"\"></p>\n<blockquote>\n<blockquote>\n<p>10月30号到31号两天，和萌天、飞飞、zp，去武汉参加了光谷社区主办的黑客松，最后开发一个寻找周围网速最快咖啡厅的应用的想法，结合实时渲染三维地图+数据查找的应用，起名为CafeGo。 &lt;</p>\n</blockquote>\n</blockquote>\n<h2 id=\"吐槽和感想\"><a href=\"#吐槽和感想\" class=\"headerlink\" title=\"吐槽和感想\"></a>吐槽和感想</h2><p>当时天哥很忙，当时手上外包还没有结束，不过最后还是带我们去搞了。当时报名队伍很多，远远多于去年，似乎是16年开始黑客松在国内兴起的原因。安排在一个大电气厂房，并且估计是因为DHCP虚拟IP不够用的原因，一大半开发者全程没网，根本无法实现服务和查询资料。最后基本是去外边宾馆完成了。 <img src=\"http://7xqgks.com1.z0.glb.clouddn.com/wuhanhackerathon5.jpg\" alt=\"\"></p>\n<blockquote>\n<p>天哥正在调试开发，被摄影师抓拍</p>\n</blockquote>\n<p>开发过程中，发现自己在解决实际项目或者说是领域内未接触过的内容的开发时，战力基本为0，忍不住膜拜天哥的能力。 <br> 因为是在武汉的原因，除了武汉本地公司的程序员参加外，还有很多华科的团队参加，冰岩作坊、联创和dian这几个大牛团队都在，和中南这边的开发者相比，华科开发者能力完全不是中南所能理解（除了天哥这种个别几个强人之外）。或者说，人家看我们大概就是我们看朝鲜一样的技术。当时中南参加的除了我们，还有一些人，在我作为一个低水平web开发看来，他们做的网站难度和创意，至少前端的实现还是处于相当低级的水平（典型jQuery+bootstrap切图工）。所以在这种环境中，如果你不能像天哥那样碾压掉所有人，那么能力已经注定不会太高。 <img src=\"http://7xqgks.com1.z0.glb.clouddn.com/wuhanhackerathon4.jpg\" alt=\"\"></p>\n<blockquote>\n<p>左起是zp，天哥，我，飞哥。我当时正在讲产品。</p>\n</blockquote>\n<h1 id=\"技术实现\"><a href=\"#技术实现\" class=\"headerlink\" title=\"技术实现\"></a>技术实现</h1><p>应用服务端比较简单，采用node.js+mongodb的架构，提供RESTful的API返回json，数据库中主要包含咖啡屋地名，用户提交次数，经纬度，网速等几个字段。当客户端以发出请求后，可以响应咖啡馆的信息，客户端进行数据的解析与处理并实时渲染出所需。同事，客户端可以将自己目前的网速上传进服务器，用于数据共享，共同组建出足够大的数据库。另外，如果更新时已有数据，取最近的几个数据均值作为最终网速。 模式图如下： <img src=\"http://ofu6xsokr.bkt.clouddn.com/CafeGo.png\" alt=\"\"> 客户端相对比较复杂，主要有以下解决点：</p>\n<ul>\n<li>根据数据实施建模，有较好网速区分度？最后我们用绿黄红三种颜色的立体柱形外加与网速绑定的柱高来明显区分，并在旁边标注出咖啡厅名子与具体网速。</li>\n<li>本地网速数据的获取与上传。</li>\n<li>基于VR导航系统。</li>\n</ul>\n<p>考虑到三维方面的需求和有VR功能的需求，并且要高效高速完成开发（只有不到三十小时开发）。最后决定移动客户端上，采用Unity3d完成，之后打包成为iOS与Android应用。网页端使用<a href=\"https://www.mapbox.com\" target=\"_blank\" rel=\"noopener\">Mapbox</a>的API完成。</p>\n<h1 id=\"效果预览\"><a href=\"#效果预览\" class=\"headerlink\" title=\"效果预览\"></a>效果预览</h1><p><img src=\"http://ofu6xsokr.bkt.clouddn.com/ALL.jpg\" alt=\"\"> 预览视频:<a href=\"http://v.qq.com/x/page/g0344t8vf3h.html\" target=\"_blank\" rel=\"noopener\">http://v.qq.com/x/page/g0344t8vf3h.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/wuhackathon-head.jpg\" alt=\"\"></p>\n<blockquote>\n<blockquote>\n<p>10月30号到31号两天，和萌天、飞飞、zp，去武汉参加了光谷社区主办的黑客松，最后开发一个寻找周围网速最快咖啡厅的应用的想法，结合实时渲染三维地图+数据查找的应用，起名为CafeGo。 &lt;</p>\n</blockquote>\n</blockquote>\n<h2 id=\"吐槽和感想\"><a href=\"#吐槽和感想\" class=\"headerlink\" title=\"吐槽和感想\"></a>吐槽和感想</h2><p>当时天哥很忙，当时手上外包还没有结束，不过最后还是带我们去搞了。当时报名队伍很多，远远多于去年，似乎是16年开始黑客松在国内兴起的原因。安排在一个大电气厂房，并且估计是因为DHCP虚拟IP不够用的原因，一大半开发者全程没网，根本无法实现服务和查询资料。最后基本是去外边宾馆完成了。 <img src=\"http://7xqgks.com1.z0.glb.clouddn.com/wuhanhackerathon5.jpg\" alt=\"\"></p>\n<blockquote>\n<p>天哥正在调试开发，被摄影师抓拍</p>\n</blockquote>\n<p>开发过程中，发现自己在解决实际项目或者说是领域内未接触过的内容的开发时，战力基本为0，忍不住膜拜天哥的能力。 <br> 因为是在武汉的原因，除了武汉本地公司的程序员参加外，还有很多华科的团队参加，冰岩作坊、联创和dian这几个大牛团队都在，和中南这边的开发者相比，华科开发者能力完全不是中南所能理解（除了天哥这种个别几个强人之外）。或者说，人家看我们大概就是我们看朝鲜一样的技术。当时中南参加的除了我们，还有一些人，在我作为一个低水平web开发看来，他们做的网站难度和创意，至少前端的实现还是处于相当低级的水平（典型jQuery+bootstrap切图工）。所以在这种环境中，如果你不能像天哥那样碾压掉所有人，那么能力已经注定不会太高。 <img src=\"http://7xqgks.com1.z0.glb.clouddn.com/wuhanhackerathon4.jpg\" alt=\"\"></p>\n<blockquote>\n<p>左起是zp，天哥，我，飞哥。我当时正在讲产品。</p>\n</blockquote>\n<h1 id=\"技术实现\"><a href=\"#技术实现\" class=\"headerlink\" title=\"技术实现\"></a>技术实现</h1><p>应用服务端比较简单，采用node.js+mongodb的架构，提供RESTful的API返回json，数据库中主要包含咖啡屋地名，用户提交次数，经纬度，网速等几个字段。当客户端以发出请求后，可以响应咖啡馆的信息，客户端进行数据的解析与处理并实时渲染出所需。同事，客户端可以将自己目前的网速上传进服务器，用于数据共享，共同组建出足够大的数据库。另外，如果更新时已有数据，取最近的几个数据均值作为最终网速。 模式图如下： <img src=\"http://ofu6xsokr.bkt.clouddn.com/CafeGo.png\" alt=\"\"> 客户端相对比较复杂，主要有以下解决点：</p>\n<ul>\n<li>根据数据实施建模，有较好网速区分度？最后我们用绿黄红三种颜色的立体柱形外加与网速绑定的柱高来明显区分，并在旁边标注出咖啡厅名子与具体网速。</li>\n<li>本地网速数据的获取与上传。</li>\n<li>基于VR导航系统。</li>\n</ul>\n<p>考虑到三维方面的需求和有VR功能的需求，并且要高效高速完成开发（只有不到三十小时开发）。最后决定移动客户端上，采用Unity3d完成，之后打包成为iOS与Android应用。网页端使用<a href=\"https://www.mapbox.com\" target=\"_blank\" rel=\"noopener\">Mapbox</a>的API完成。</p>\n<h1 id=\"效果预览\"><a href=\"#效果预览\" class=\"headerlink\" title=\"效果预览\"></a>效果预览</h1><p><img src=\"http://ofu6xsokr.bkt.clouddn.com/ALL.jpg\" alt=\"\"> 预览视频:<a href=\"http://v.qq.com/x/page/g0344t8vf3h.html\" target=\"_blank\" rel=\"noopener\">http://v.qq.com/x/page/g0344t8vf3h.html</a></p>\n"},{"title":"node.js web应用优化之读写分离","url":"243.html","id":"243","date":"2019-04-14T16:43:17.000Z","_content":"\n概述\n==\n\n先了解读写分离是什么，什么原理，解决了什么问题。 什么是读写分离？ 其实就是将数据库分为了主从库，一个主库用于写数据，多个从库完成读数据的操作，主从库之间通过某种机制进行数据的同步，是一种常见的数据库架构，最常用的web应用优化方式之一。 优化原理是：对于常见的web应用，绝大多数是读操作，少数是写操作，数据库的读会是应用的性能瓶颈。故可以用大量机器专门做读操作，少量机器专门做写操作，一来可以可以消除读写锁冲突，二是节约了服务器资源，避免读成为瓶颈的时候，写业务浪费资源。 读写分离解决了数据库的读成为性能瓶颈。\n\n手动读写分离\n======\n\n写两套代码write和read，部署write只做写，部署read只做读。 最原始的实现方法。具体实现很简单不再描述。\n\n*   优点：实现简单，不需要多于知识，性能也会很好。\n*   缺点：一旦需要部署的服务一多，部署和维护会非常麻烦。\n\n利用mysql主从架构实现读写分离\n=================\n\n因为项目通常会使用ORM，故我们用最常用的node的orm——sequelize作为实现实例。其他ORM或者原生都是类似思路。 主要原理就是创建两个sequelize实例，一个负责读一个负责写，分别指定读写数据库，并且把读写数据库部署在不同的机器或者集群。 egg.default.config.js配置：\n\n      config.sequelize = {\n        dialect: 'mysql',\n        port: 3306,\n        replication: {\n          read: [\n          { host: '192.168.0.1', username: 'root', password: 'pass' },\n          { host: '192.168.0.2', username: 'root', password: 'pass' }\n          ],\n          write: { host: '192.168.0.3', username: 'root', password: 'pass' }\n        }\n      }\n    \n\nreplication中的read实例会处理所有的select操作，而write会处理instert、delete、update语句。\n\n*   优点：实现简单，维护方便，代码友好不需要额外知识。\n*   缺点：暂时没想到，有想到我再补充。\n\nnginx实现读写分离\n===========\n\nnginx基本成为了通用的代理服务器，Nginx的通过配置可以把不用的请求分配到不同的服务器，只要使用了标准的restful或者近似标准的restful（读get写post）。就可以借助nginx实现读写分离 实现原理：WebDAV，一种基于HTTP的通信协议，拓展了HTTP1.1，使应用程序可以读写web server。 nginx.conf配置：\n\n    ## 读服务器集群\n    upstream read {\n      server 192.168.0.1 weight=2 max_fails=2 fail_timeout=2;\n      server 192.168.0.2 weight=2 max_fails=2 fail_timeout=2;\n      server 192.168.0.3 weight=2 max_fails=2 fail_timeout=2;\n    }\n    \n    ## 写服务器集群\n    upstream write {\n      server 192.168.0.4 weight=2 max_fails=2 fail_timeout=2;\n      server 192.168.0.5 weight=2 max_fails=2 fail_timeout=2;\n      server 192.168.0.6 weight=2 max_fails=2 fail_timeout=2;\n    }\n    \n    server {\n        location / {\n            proxy_pass  http://read;\n            if ($request_method = \"POST\" || $request_method = \"DELETE\" || $request_method = \"PUT\" || $request_method = \"PATCH\"){\n                proxy_pass  http://write;\n            }\n        }\n    }\n    \n\n是我最推荐的一种方式，主要原因是nginx作用很多基本成目前的必须。\n\n*   优点：实现不算难，维护方便，性能高效，不需要接触代码内容，鲁棒性好，通用性好（用人话说，一点都不会的项目我也能把它读写分离部署）。\n*   缺点：需要引入nginx，\n\nMySQL-Proxy等中间件解决\n=================\n\n此类中间件很多，除了官方的mysql-proxy，还有Amoeba等。 mysql中间件服务，上游可接入若干个mysql-client，后端可连接若干个mysql-server。 mysql-proxy可以分析与修改请求，通过中间件支持的脚本，可以判断mysql-client的操作分配到不同的mysql-server。\n\n*   优点：基本不需要修改","source":"_posts/243.md","raw":"---\ntitle: node.js web应用优化之读写分离\ntags:\n  - mysql\n  - node.js\n  - 性能优化\nurl: 243.html\nid: 243\ncategories:\n  - node.js\n  - 后端\n  - 数据库\ndate: 2019-04-15 00:43:17\n---\n\n概述\n==\n\n先了解读写分离是什么，什么原理，解决了什么问题。 什么是读写分离？ 其实就是将数据库分为了主从库，一个主库用于写数据，多个从库完成读数据的操作，主从库之间通过某种机制进行数据的同步，是一种常见的数据库架构，最常用的web应用优化方式之一。 优化原理是：对于常见的web应用，绝大多数是读操作，少数是写操作，数据库的读会是应用的性能瓶颈。故可以用大量机器专门做读操作，少量机器专门做写操作，一来可以可以消除读写锁冲突，二是节约了服务器资源，避免读成为瓶颈的时候，写业务浪费资源。 读写分离解决了数据库的读成为性能瓶颈。\n\n手动读写分离\n======\n\n写两套代码write和read，部署write只做写，部署read只做读。 最原始的实现方法。具体实现很简单不再描述。\n\n*   优点：实现简单，不需要多于知识，性能也会很好。\n*   缺点：一旦需要部署的服务一多，部署和维护会非常麻烦。\n\n利用mysql主从架构实现读写分离\n=================\n\n因为项目通常会使用ORM，故我们用最常用的node的orm——sequelize作为实现实例。其他ORM或者原生都是类似思路。 主要原理就是创建两个sequelize实例，一个负责读一个负责写，分别指定读写数据库，并且把读写数据库部署在不同的机器或者集群。 egg.default.config.js配置：\n\n      config.sequelize = {\n        dialect: 'mysql',\n        port: 3306,\n        replication: {\n          read: [\n          { host: '192.168.0.1', username: 'root', password: 'pass' },\n          { host: '192.168.0.2', username: 'root', password: 'pass' }\n          ],\n          write: { host: '192.168.0.3', username: 'root', password: 'pass' }\n        }\n      }\n    \n\nreplication中的read实例会处理所有的select操作，而write会处理instert、delete、update语句。\n\n*   优点：实现简单，维护方便，代码友好不需要额外知识。\n*   缺点：暂时没想到，有想到我再补充。\n\nnginx实现读写分离\n===========\n\nnginx基本成为了通用的代理服务器，Nginx的通过配置可以把不用的请求分配到不同的服务器，只要使用了标准的restful或者近似标准的restful（读get写post）。就可以借助nginx实现读写分离 实现原理：WebDAV，一种基于HTTP的通信协议，拓展了HTTP1.1，使应用程序可以读写web server。 nginx.conf配置：\n\n    ## 读服务器集群\n    upstream read {\n      server 192.168.0.1 weight=2 max_fails=2 fail_timeout=2;\n      server 192.168.0.2 weight=2 max_fails=2 fail_timeout=2;\n      server 192.168.0.3 weight=2 max_fails=2 fail_timeout=2;\n    }\n    \n    ## 写服务器集群\n    upstream write {\n      server 192.168.0.4 weight=2 max_fails=2 fail_timeout=2;\n      server 192.168.0.5 weight=2 max_fails=2 fail_timeout=2;\n      server 192.168.0.6 weight=2 max_fails=2 fail_timeout=2;\n    }\n    \n    server {\n        location / {\n            proxy_pass  http://read;\n            if ($request_method = \"POST\" || $request_method = \"DELETE\" || $request_method = \"PUT\" || $request_method = \"PATCH\"){\n                proxy_pass  http://write;\n            }\n        }\n    }\n    \n\n是我最推荐的一种方式，主要原因是nginx作用很多基本成目前的必须。\n\n*   优点：实现不算难，维护方便，性能高效，不需要接触代码内容，鲁棒性好，通用性好（用人话说，一点都不会的项目我也能把它读写分离部署）。\n*   缺点：需要引入nginx，\n\nMySQL-Proxy等中间件解决\n=================\n\n此类中间件很多，除了官方的mysql-proxy，还有Amoeba等。 mysql中间件服务，上游可接入若干个mysql-client，后端可连接若干个mysql-server。 mysql-proxy可以分析与修改请求，通过中间件支持的脚本，可以判断mysql-client的操作分配到不同的mysql-server。\n\n*   优点：基本不需要修改","slug":"243","published":1,"updated":"2020-05-19T08:33:55.927Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts7xa0007zmz8bxbke3hv","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>先了解读写分离是什么，什么原理，解决了什么问题。 什么是读写分离？ 其实就是将数据库分为了主从库，一个主库用于写数据，多个从库完成读数据的操作，主从库之间通过某种机制进行数据的同步，是一种常见的数据库架构，最常用的web应用优化方式之一。 优化原理是：对于常见的web应用，绝大多数是读操作，少数是写操作，数据库的读会是应用的性能瓶颈。故可以用大量机器专门做读操作，少量机器专门做写操作，一来可以可以消除读写锁冲突，二是节约了服务器资源，避免读成为瓶颈的时候，写业务浪费资源。 读写分离解决了数据库的读成为性能瓶颈。</p>\n<h1 id=\"手动读写分离\"><a href=\"#手动读写分离\" class=\"headerlink\" title=\"手动读写分离\"></a>手动读写分离</h1><p>写两套代码write和read，部署write只做写，部署read只做读。 最原始的实现方法。具体实现很简单不再描述。</p>\n<ul>\n<li>优点：实现简单，不需要多于知识，性能也会很好。</li>\n<li>缺点：一旦需要部署的服务一多，部署和维护会非常麻烦。</li>\n</ul>\n<h1 id=\"利用mysql主从架构实现读写分离\"><a href=\"#利用mysql主从架构实现读写分离\" class=\"headerlink\" title=\"利用mysql主从架构实现读写分离\"></a>利用mysql主从架构实现读写分离</h1><p>因为项目通常会使用ORM，故我们用最常用的node的orm——sequelize作为实现实例。其他ORM或者原生都是类似思路。 主要原理就是创建两个sequelize实例，一个负责读一个负责写，分别指定读写数据库，并且把读写数据库部署在不同的机器或者集群。 egg.default.config.js配置：</p>\n<pre><code>config.sequelize = {\n  dialect: &apos;mysql&apos;,\n  port: 3306,\n  replication: {\n    read: [\n    { host: &apos;192.168.0.1&apos;, username: &apos;root&apos;, password: &apos;pass&apos; },\n    { host: &apos;192.168.0.2&apos;, username: &apos;root&apos;, password: &apos;pass&apos; }\n    ],\n    write: { host: &apos;192.168.0.3&apos;, username: &apos;root&apos;, password: &apos;pass&apos; }\n  }\n}</code></pre><p>replication中的read实例会处理所有的select操作，而write会处理instert、delete、update语句。</p>\n<ul>\n<li>优点：实现简单，维护方便，代码友好不需要额外知识。</li>\n<li>缺点：暂时没想到，有想到我再补充。</li>\n</ul>\n<h1 id=\"nginx实现读写分离\"><a href=\"#nginx实现读写分离\" class=\"headerlink\" title=\"nginx实现读写分离\"></a>nginx实现读写分离</h1><p>nginx基本成为了通用的代理服务器，Nginx的通过配置可以把不用的请求分配到不同的服务器，只要使用了标准的restful或者近似标准的restful（读get写post）。就可以借助nginx实现读写分离 实现原理：WebDAV，一种基于HTTP的通信协议，拓展了HTTP1.1，使应用程序可以读写web server。 nginx.conf配置：</p>\n<pre><code>## 读服务器集群\nupstream read {\n  server 192.168.0.1 weight=2 max_fails=2 fail_timeout=2;\n  server 192.168.0.2 weight=2 max_fails=2 fail_timeout=2;\n  server 192.168.0.3 weight=2 max_fails=2 fail_timeout=2;\n}\n\n## 写服务器集群\nupstream write {\n  server 192.168.0.4 weight=2 max_fails=2 fail_timeout=2;\n  server 192.168.0.5 weight=2 max_fails=2 fail_timeout=2;\n  server 192.168.0.6 weight=2 max_fails=2 fail_timeout=2;\n}\n\nserver {\n    location / {\n        proxy_pass  http://read;\n        if ($request_method = &quot;POST&quot; || $request_method = &quot;DELETE&quot; || $request_method = &quot;PUT&quot; || $request_method = &quot;PATCH&quot;){\n            proxy_pass  http://write;\n        }\n    }\n}</code></pre><p>是我最推荐的一种方式，主要原因是nginx作用很多基本成目前的必须。</p>\n<ul>\n<li>优点：实现不算难，维护方便，性能高效，不需要接触代码内容，鲁棒性好，通用性好（用人话说，一点都不会的项目我也能把它读写分离部署）。</li>\n<li>缺点：需要引入nginx，</li>\n</ul>\n<h1 id=\"MySQL-Proxy等中间件解决\"><a href=\"#MySQL-Proxy等中间件解决\" class=\"headerlink\" title=\"MySQL-Proxy等中间件解决\"></a>MySQL-Proxy等中间件解决</h1><p>此类中间件很多，除了官方的mysql-proxy，还有Amoeba等。 mysql中间件服务，上游可接入若干个mysql-client，后端可连接若干个mysql-server。 mysql-proxy可以分析与修改请求，通过中间件支持的脚本，可以判断mysql-client的操作分配到不同的mysql-server。</p>\n<ul>\n<li>优点：基本不需要修改</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>先了解读写分离是什么，什么原理，解决了什么问题。 什么是读写分离？ 其实就是将数据库分为了主从库，一个主库用于写数据，多个从库完成读数据的操作，主从库之间通过某种机制进行数据的同步，是一种常见的数据库架构，最常用的web应用优化方式之一。 优化原理是：对于常见的web应用，绝大多数是读操作，少数是写操作，数据库的读会是应用的性能瓶颈。故可以用大量机器专门做读操作，少量机器专门做写操作，一来可以可以消除读写锁冲突，二是节约了服务器资源，避免读成为瓶颈的时候，写业务浪费资源。 读写分离解决了数据库的读成为性能瓶颈。</p>\n<h1 id=\"手动读写分离\"><a href=\"#手动读写分离\" class=\"headerlink\" title=\"手动读写分离\"></a>手动读写分离</h1><p>写两套代码write和read，部署write只做写，部署read只做读。 最原始的实现方法。具体实现很简单不再描述。</p>\n<ul>\n<li>优点：实现简单，不需要多于知识，性能也会很好。</li>\n<li>缺点：一旦需要部署的服务一多，部署和维护会非常麻烦。</li>\n</ul>\n<h1 id=\"利用mysql主从架构实现读写分离\"><a href=\"#利用mysql主从架构实现读写分离\" class=\"headerlink\" title=\"利用mysql主从架构实现读写分离\"></a>利用mysql主从架构实现读写分离</h1><p>因为项目通常会使用ORM，故我们用最常用的node的orm——sequelize作为实现实例。其他ORM或者原生都是类似思路。 主要原理就是创建两个sequelize实例，一个负责读一个负责写，分别指定读写数据库，并且把读写数据库部署在不同的机器或者集群。 egg.default.config.js配置：</p>\n<pre><code>config.sequelize = {\n  dialect: &apos;mysql&apos;,\n  port: 3306,\n  replication: {\n    read: [\n    { host: &apos;192.168.0.1&apos;, username: &apos;root&apos;, password: &apos;pass&apos; },\n    { host: &apos;192.168.0.2&apos;, username: &apos;root&apos;, password: &apos;pass&apos; }\n    ],\n    write: { host: &apos;192.168.0.3&apos;, username: &apos;root&apos;, password: &apos;pass&apos; }\n  }\n}</code></pre><p>replication中的read实例会处理所有的select操作，而write会处理instert、delete、update语句。</p>\n<ul>\n<li>优点：实现简单，维护方便，代码友好不需要额外知识。</li>\n<li>缺点：暂时没想到，有想到我再补充。</li>\n</ul>\n<h1 id=\"nginx实现读写分离\"><a href=\"#nginx实现读写分离\" class=\"headerlink\" title=\"nginx实现读写分离\"></a>nginx实现读写分离</h1><p>nginx基本成为了通用的代理服务器，Nginx的通过配置可以把不用的请求分配到不同的服务器，只要使用了标准的restful或者近似标准的restful（读get写post）。就可以借助nginx实现读写分离 实现原理：WebDAV，一种基于HTTP的通信协议，拓展了HTTP1.1，使应用程序可以读写web server。 nginx.conf配置：</p>\n<pre><code>## 读服务器集群\nupstream read {\n  server 192.168.0.1 weight=2 max_fails=2 fail_timeout=2;\n  server 192.168.0.2 weight=2 max_fails=2 fail_timeout=2;\n  server 192.168.0.3 weight=2 max_fails=2 fail_timeout=2;\n}\n\n## 写服务器集群\nupstream write {\n  server 192.168.0.4 weight=2 max_fails=2 fail_timeout=2;\n  server 192.168.0.5 weight=2 max_fails=2 fail_timeout=2;\n  server 192.168.0.6 weight=2 max_fails=2 fail_timeout=2;\n}\n\nserver {\n    location / {\n        proxy_pass  http://read;\n        if ($request_method = &quot;POST&quot; || $request_method = &quot;DELETE&quot; || $request_method = &quot;PUT&quot; || $request_method = &quot;PATCH&quot;){\n            proxy_pass  http://write;\n        }\n    }\n}</code></pre><p>是我最推荐的一种方式，主要原因是nginx作用很多基本成目前的必须。</p>\n<ul>\n<li>优点：实现不算难，维护方便，性能高效，不需要接触代码内容，鲁棒性好，通用性好（用人话说，一点都不会的项目我也能把它读写分离部署）。</li>\n<li>缺点：需要引入nginx，</li>\n</ul>\n<h1 id=\"MySQL-Proxy等中间件解决\"><a href=\"#MySQL-Proxy等中间件解决\" class=\"headerlink\" title=\"MySQL-Proxy等中间件解决\"></a>MySQL-Proxy等中间件解决</h1><p>此类中间件很多，除了官方的mysql-proxy，还有Amoeba等。 mysql中间件服务，上游可接入若干个mysql-client，后端可连接若干个mysql-server。 mysql-proxy可以分析与修改请求，通过中间件支持的脚本，可以判断mysql-client的操作分配到不同的mysql-server。</p>\n<ul>\n<li>优点：基本不需要修改</li>\n</ul>\n"},{"title":"360校招面试","url":"68.html","id":"68","date":"2017-09-29T09:19:28.000Z","_content":"\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0051.jpg) 做完接到电话告诉我笔试通过了，今天早上10点开始面试，最近最难一场面试，一面发挥良好，顺利过；二面中途问题太难太紧张，后期基本思路很乱，主要还是知识储备不够。\n\n一面（45分钟）\n--------\n\n1.介绍项目\n\n2.svg与canvas的不同，热力图应该用哪个\n\n3.介绍下vue开发时候如何规划项目，讲了讲组建、通信状态管理、路由、通信方式、打包发布。\n\n4.游览器渲染过程。详细讲了渲染引擎和JS引擎。也讲了些编译原理的东西。\n\n5.webpack本地开发怎么解决跨域的\n\n6.webpack的原理，哪里是词法分析还是语法分析，具体什么？\n\n7.loader和plugin区别，分别做什么\n\n8.vue的v-dom原理，为什么高效，和模板引擎什么区别\n\n9.diff算法\n\n10.深拷贝，写代码。各种数据类型哪些在堆栈上？jquery的extend是浅拷贝还是深拷贝。Json的方法实现有什么缺陷\n\n11.原型继承，写代码不能用ES6的class...extend...\n\n12.service worker\n\n13.websocket\n\n14.flex布局实现栅格，实现水平垂直居中 一面问题比较和我口味，都是实现和研究过的，就全部回答出来包括追问，估计面试官也是给了个比较高的评价，当初给通过让我准备二面。刚结束立即就通知二面，然后二面很难很难，直接血崩了。\n\n二面（1小时）\n-------\n\n1.前端优化\n\n2.get和post区别，get和post性能差距大不大\n\n3.http基于udp还是tcp？tcp和udp什么区别？几次握手几次断开？为什么要这样设计？如果不这样可能会发生什么？\n\n4.resuful的API设计\n\n5.游览器缓存机制\n\n6.跨域，追问正向代理与反向代理，追问websocket跨域\n\n7.vue平级组件通信\n\n8.200万条数据插入vue的data，不添加watcher怎么实现\n\n9.react平级组件通信\n\n10.rudex的设计思想\n\n11.flux架构的单向数据流有哪些部分组成，和vuex不同点\n\n12.jsx怎么被解析？我说AST，我知道肯定要用AST，具体说说过程。那解析jsx用了babel和webpack的什么插件或者loader\n\n13.组件热加载方案\n\n14.你框架掌握的不是很好。问你js基础吧。写一个观察者模式。我写不出来，讲了下概念。写一个单例模式。\n\n15.遍历一个多叉树，我写了个递归被吐槽复杂度高。后边问我用什么数据结构优化，我说数组。然后没能写出来算法。\n\n10分钟后收到电话告诉我未通过二面。1-6答上了，第7题到第13题基本全部不会或者讲的不清楚。感谢把我虐的很惨的二面面试官。","source":"_posts/360-e6-a0-a1-e6-8b-9b-e9-9d-a2-e8-af-95.md","raw":"---\ntitle: 360校招面试\ntags:\n  - 面试\nurl: 68.html\nid: 68\ncategories:\n  - 前端\ndate: 2017-09-29 17:19:28\n---\n\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0051.jpg) 做完接到电话告诉我笔试通过了，今天早上10点开始面试，最近最难一场面试，一面发挥良好，顺利过；二面中途问题太难太紧张，后期基本思路很乱，主要还是知识储备不够。\n\n一面（45分钟）\n--------\n\n1.介绍项目\n\n2.svg与canvas的不同，热力图应该用哪个\n\n3.介绍下vue开发时候如何规划项目，讲了讲组建、通信状态管理、路由、通信方式、打包发布。\n\n4.游览器渲染过程。详细讲了渲染引擎和JS引擎。也讲了些编译原理的东西。\n\n5.webpack本地开发怎么解决跨域的\n\n6.webpack的原理，哪里是词法分析还是语法分析，具体什么？\n\n7.loader和plugin区别，分别做什么\n\n8.vue的v-dom原理，为什么高效，和模板引擎什么区别\n\n9.diff算法\n\n10.深拷贝，写代码。各种数据类型哪些在堆栈上？jquery的extend是浅拷贝还是深拷贝。Json的方法实现有什么缺陷\n\n11.原型继承，写代码不能用ES6的class...extend...\n\n12.service worker\n\n13.websocket\n\n14.flex布局实现栅格，实现水平垂直居中 一面问题比较和我口味，都是实现和研究过的，就全部回答出来包括追问，估计面试官也是给了个比较高的评价，当初给通过让我准备二面。刚结束立即就通知二面，然后二面很难很难，直接血崩了。\n\n二面（1小时）\n-------\n\n1.前端优化\n\n2.get和post区别，get和post性能差距大不大\n\n3.http基于udp还是tcp？tcp和udp什么区别？几次握手几次断开？为什么要这样设计？如果不这样可能会发生什么？\n\n4.resuful的API设计\n\n5.游览器缓存机制\n\n6.跨域，追问正向代理与反向代理，追问websocket跨域\n\n7.vue平级组件通信\n\n8.200万条数据插入vue的data，不添加watcher怎么实现\n\n9.react平级组件通信\n\n10.rudex的设计思想\n\n11.flux架构的单向数据流有哪些部分组成，和vuex不同点\n\n12.jsx怎么被解析？我说AST，我知道肯定要用AST，具体说说过程。那解析jsx用了babel和webpack的什么插件或者loader\n\n13.组件热加载方案\n\n14.你框架掌握的不是很好。问你js基础吧。写一个观察者模式。我写不出来，讲了下概念。写一个单例模式。\n\n15.遍历一个多叉树，我写了个递归被吐槽复杂度高。后边问我用什么数据结构优化，我说数组。然后没能写出来算法。\n\n10分钟后收到电话告诉我未通过二面。1-6答上了，第7题到第13题基本全部不会或者讲的不清楚。感谢把我虐的很惨的二面面试官。","slug":"360-e6-a0-a1-e6-8b-9b-e9-9d-a2-e8-af-95","published":1,"updated":"2020-05-19T09:12:12.014Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts7xf000bzmz8ed2zfqyj","content":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0051.jpg\" alt=\"\"> 做完接到电话告诉我笔试通过了，今天早上10点开始面试，最近最难一场面试，一面发挥良好，顺利过；二面中途问题太难太紧张，后期基本思路很乱，主要还是知识储备不够。</p>\n<h2 id=\"一面（45分钟）\"><a href=\"#一面（45分钟）\" class=\"headerlink\" title=\"一面（45分钟）\"></a>一面（45分钟）</h2><p>1.介绍项目</p>\n<p>2.svg与canvas的不同，热力图应该用哪个</p>\n<p>3.介绍下vue开发时候如何规划项目，讲了讲组建、通信状态管理、路由、通信方式、打包发布。</p>\n<p>4.游览器渲染过程。详细讲了渲染引擎和JS引擎。也讲了些编译原理的东西。</p>\n<p>5.webpack本地开发怎么解决跨域的</p>\n<p>6.webpack的原理，哪里是词法分析还是语法分析，具体什么？</p>\n<p>7.loader和plugin区别，分别做什么</p>\n<p>8.vue的v-dom原理，为什么高效，和模板引擎什么区别</p>\n<p>9.diff算法</p>\n<p>10.深拷贝，写代码。各种数据类型哪些在堆栈上？jquery的extend是浅拷贝还是深拷贝。Json的方法实现有什么缺陷</p>\n<p>11.原型继承，写代码不能用ES6的class…extend…</p>\n<p>12.service worker</p>\n<p>13.websocket</p>\n<p>14.flex布局实现栅格，实现水平垂直居中 一面问题比较和我口味，都是实现和研究过的，就全部回答出来包括追问，估计面试官也是给了个比较高的评价，当初给通过让我准备二面。刚结束立即就通知二面，然后二面很难很难，直接血崩了。</p>\n<h2 id=\"二面（1小时）\"><a href=\"#二面（1小时）\" class=\"headerlink\" title=\"二面（1小时）\"></a>二面（1小时）</h2><p>1.前端优化</p>\n<p>2.get和post区别，get和post性能差距大不大</p>\n<p>3.http基于udp还是tcp？tcp和udp什么区别？几次握手几次断开？为什么要这样设计？如果不这样可能会发生什么？</p>\n<p>4.resuful的API设计</p>\n<p>5.游览器缓存机制</p>\n<p>6.跨域，追问正向代理与反向代理，追问websocket跨域</p>\n<p>7.vue平级组件通信</p>\n<p>8.200万条数据插入vue的data，不添加watcher怎么实现</p>\n<p>9.react平级组件通信</p>\n<p>10.rudex的设计思想</p>\n<p>11.flux架构的单向数据流有哪些部分组成，和vuex不同点</p>\n<p>12.jsx怎么被解析？我说AST，我知道肯定要用AST，具体说说过程。那解析jsx用了babel和webpack的什么插件或者loader</p>\n<p>13.组件热加载方案</p>\n<p>14.你框架掌握的不是很好。问你js基础吧。写一个观察者模式。我写不出来，讲了下概念。写一个单例模式。</p>\n<p>15.遍历一个多叉树，我写了个递归被吐槽复杂度高。后边问我用什么数据结构优化，我说数组。然后没能写出来算法。</p>\n<p>10分钟后收到电话告诉我未通过二面。1-6答上了，第7题到第13题基本全部不会或者讲的不清楚。感谢把我虐的很惨的二面面试官。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0051.jpg\" alt=\"\"> 做完接到电话告诉我笔试通过了，今天早上10点开始面试，最近最难一场面试，一面发挥良好，顺利过；二面中途问题太难太紧张，后期基本思路很乱，主要还是知识储备不够。</p>\n<h2 id=\"一面（45分钟）\"><a href=\"#一面（45分钟）\" class=\"headerlink\" title=\"一面（45分钟）\"></a>一面（45分钟）</h2><p>1.介绍项目</p>\n<p>2.svg与canvas的不同，热力图应该用哪个</p>\n<p>3.介绍下vue开发时候如何规划项目，讲了讲组建、通信状态管理、路由、通信方式、打包发布。</p>\n<p>4.游览器渲染过程。详细讲了渲染引擎和JS引擎。也讲了些编译原理的东西。</p>\n<p>5.webpack本地开发怎么解决跨域的</p>\n<p>6.webpack的原理，哪里是词法分析还是语法分析，具体什么？</p>\n<p>7.loader和plugin区别，分别做什么</p>\n<p>8.vue的v-dom原理，为什么高效，和模板引擎什么区别</p>\n<p>9.diff算法</p>\n<p>10.深拷贝，写代码。各种数据类型哪些在堆栈上？jquery的extend是浅拷贝还是深拷贝。Json的方法实现有什么缺陷</p>\n<p>11.原型继承，写代码不能用ES6的class…extend…</p>\n<p>12.service worker</p>\n<p>13.websocket</p>\n<p>14.flex布局实现栅格，实现水平垂直居中 一面问题比较和我口味，都是实现和研究过的，就全部回答出来包括追问，估计面试官也是给了个比较高的评价，当初给通过让我准备二面。刚结束立即就通知二面，然后二面很难很难，直接血崩了。</p>\n<h2 id=\"二面（1小时）\"><a href=\"#二面（1小时）\" class=\"headerlink\" title=\"二面（1小时）\"></a>二面（1小时）</h2><p>1.前端优化</p>\n<p>2.get和post区别，get和post性能差距大不大</p>\n<p>3.http基于udp还是tcp？tcp和udp什么区别？几次握手几次断开？为什么要这样设计？如果不这样可能会发生什么？</p>\n<p>4.resuful的API设计</p>\n<p>5.游览器缓存机制</p>\n<p>6.跨域，追问正向代理与反向代理，追问websocket跨域</p>\n<p>7.vue平级组件通信</p>\n<p>8.200万条数据插入vue的data，不添加watcher怎么实现</p>\n<p>9.react平级组件通信</p>\n<p>10.rudex的设计思想</p>\n<p>11.flux架构的单向数据流有哪些部分组成，和vuex不同点</p>\n<p>12.jsx怎么被解析？我说AST，我知道肯定要用AST，具体说说过程。那解析jsx用了babel和webpack的什么插件或者loader</p>\n<p>13.组件热加载方案</p>\n<p>14.你框架掌握的不是很好。问你js基础吧。写一个观察者模式。我写不出来，讲了下概念。写一个单例模式。</p>\n<p>15.遍历一个多叉树，我写了个递归被吐槽复杂度高。后边问我用什么数据结构优化，我说数组。然后没能写出来算法。</p>\n<p>10分钟后收到电话告诉我未通过二面。1-6答上了，第7题到第13题基本全部不会或者讲的不清楚。感谢把我虐的很惨的二面面试官。</p>\n"},{"title":"ajax全揭秘","url":"250.html","id":"250","date":"2019-04-20T06:28:21.000Z","_content":"\n> 项目中一直都使用ajax的封装库，时间久了难免忘记，前不久看到公司笔试题有实现promise的ajax，居然想不出来完整的。所以把ajax复习一遍，并且封装下。文章会花很大篇幅讲对象基础和原理，如果直接库封装看实现的可以看最后两小节。\n\nXMLHttpRequest\n==============\n\nXMLHttpRequest是用于与后台交换数据的对象，XMLHttpRequest不仅仅能传递XML而是允许任何类型的数据传输。 所有现代的浏览器都支持 XMLHttpRequest 对象。 XMLHttpRequest是ajax的实现基础。 XMLHttpRequest 继承了 XMLHttpRequestEventTarget，XMLHttpRequestEventTarget继承了EventTarget。 简单说明下这两个父对象的属性方法\n\n# EventTarget\n\n|方法 | 功能 |\n| - | - |\n| addEventListener() | 注册特定事件类型的事件处理程序 |\n| removeEventListener() | 删除事件侦听器 |\n| dispatchEvent() | 将事件分派到此EventTarget |\n\n\nEventTarget的简单实现\n```js\n    class EventTarget {\n      constructor() {\n        this.listeners = {};\n      }\n\n      addEventListener(type, callback) {\n        if(!(type in this.listeners)) {\n          this.listeners[type] = [];\n        }\n        this.listeners[type].push(callback);\n      }\n\n      removeEventListener(type, callback) {\n        if(!(type in this.listeners)) {\n          return;\n        }\n        let stack = this.listeners[type];\n        for (let i = 0, l = stack.length; i < l; i++) {\n          if(stack[i] === callback) {\n            stack.splice(i, 1);\n            return this.removeEventListener(type, callback);\n          }\n        }\n      }\n\n      dispatchEvent(event) {\n        if(!(event.type in this.listeners)) {\n          return;\n        }\n        var stack = this.listeners[event.type];\n        event.target = this;\n        for (let i = 0, l = stack.length; i < 1; i++) {\n          stack[i].call(this. event);\n        }\n      }\n    }\n```\n\n# XMLHttpRequestEventTarget\n\nXMLHttpRequestEventTarget是一个描述事件处理程序的接口\n\n| 属性 | 功能 |\n| - | - |\n| onabort | 当请求失败时调用该方法 |\n| onerror | 当请求发生错误时调用该方法 |\n| onload | 当一个HTTP请求正确加载出内容后返回时调用 |\n| onloadstart | 当一个HTTP请求开始加载数据时调用 |\n| onprogress | 间歇调用该方法用来获取请求过程中的信息 |\n| ontimeout | 当时间超时（设置了timeout）时调用 |\n| onloadend | 当内容加载完成（不管成功与否）时调用 |\n\n\n# XMLHttpRequest\n\n| 属性 | 功能 |\n| - | - |\n| onreadystatechange | 当readyState属性发生变化时调用的EventHandler |\n| readyState | 请求的状态码 |\n| responseType | 响应数据的类型 |\n| responseURL | 响应的序列化URL |\n| responseXML | 一个Document，其中包含该请求的响应 |\n| status | 返回无符号短整型请求响应状态 |\n| statusText | 返回字符串型请求响应状态和信息 |\n| timeout | 超时时间 |\n| upload | 上传过程 |\n| withCredentials | 用来指定跨域的请求是否应该使用证书 |\n| withCredentials | 用来指定跨域的请求是否应该使用证书 |\n| withCredentials | 用来指定跨域的请求是否应该使用证书 |\n| abort() | 终止请求 |\n| getAllResponseHeaders\b() | 以字符串的形式返回所有用CRLF分隔的响应头 |\n| getResponseHeader() | 返回包含指定响应头的字符串 |\n| open() | 初始化一个请求 |\n| send() | 发送请求 |\n| setRequestHeader() | 设置HTTP请求头的值 |\n\n\n## readyState的取值\n\n| 值 | 属性 | 功能 |\n| - | - | - |\n| 0 | UNSENT | 代理被创建，但尚未调用 open() 方法 |\n| 1 | OPENED | open() 方法已经被调用 |\n| 2 | HEADERS_RECEIVED | send() 方法已经被调用，并且头部和状态已经可获得 |\n| 3 | LOADING | 下载中； responseText 属性已经包含部分数据 |\n| 4 | DONE | 下载操作已完成 |\n\n\n封装简单的Ajax方法\n===========\n\n大概流程是：\n\n1.通过兼容性判断创建XMLHttpRequest对象还是ActiveXObject对象\n\n2.设置请求头，区分get与其他方法，调用open()，send()方法建立连接\n\n3.每当 readyState 改变时，就会触发 onreadystatechange 事件。当 readyState 是\n\n4 并且 status 是介于200（含）与400（不包含）之间时，可以获取到responseText。\n\n5.用sent()方法发送请求 首先定义一下入参data\n\n\n| 参数 | 类型 | 说明 |\n| - | - | - |\n| option | string | 请求方法 |\n| url | string | 请求地址 |\n| body | object | 请求参数 |\n\n```js\n    function ajax(data){\n        // 创建对象\n        var xhr = null;\n        var params = formsParams(data.body);\n        if(window.XMLHttpRequest){\n            xhr = new XMLHttpRequest()\n        } else {\n            xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n        }\n        // 设置请求头，建立连接\n        if(data.option == \"GET\"){\n            xhr.open(data.option, data.url + \"?\"+ params,data.async);\n            xhr.send(null)\n        } else if(data.option !== \"GET\"){\n            xhr.open(data.option,data.url,data.async);\n            xhr.setRequestHeader(\"Content-Type\",\"application/x-www-form-urlencoded\");\n            xhr.send(params);\n        }\n        // onreadystatechange监听并相应\n        xhr.onreadystatechange = function(){\n            if(xhr.readyState == 4 && xhr.status >= 200 && xhr.status < 400) {\n              data.success(xhr.responseText);\n            }\n        }\n        function formsParams(data){\n            var arr = [];\n            for(var prop in data){\n                arr.push(prop + \"=\" + data[prop]);\n            }\n            return arr.join(\"&\");\n        }\n```\n\n\n实现Promise版的Ajax方法\n=================\n\n其主要是返回一个Promise对象，把回调版的ajax的逻辑写入Promise中。\n```js\n    let ajax = ({url = '', option = 'get', body = {} }) => {\n      return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest()\n        xhr.open(option, url, true);\n        xhr.onreadystatechange = () => {\n          if(xhr.readyState == 4 && xhr.status >= 200 && xhr.status < 400) {\n            resolve(xhr.responseText);\n          }\n        }\n        xhr.onerror = (error) => {\n                reject(error);\n            }\n        xhr.send()\n      });\n    }\n```","source":"_posts/ajax-e5-85-a8-e6-8f-ad-e7-a7-98.md","raw":"---\ntitle: ajax全揭秘\ntags:\n  - JavaScript\nurl: 250.html\nid: 250\ncategories:\n  - HTTP\n  - 前端\ndate: 2019-04-20 14:28:21\n---\n\n> 项目中一直都使用ajax的封装库，时间久了难免忘记，前不久看到公司笔试题有实现promise的ajax，居然想不出来完整的。所以把ajax复习一遍，并且封装下。文章会花很大篇幅讲对象基础和原理，如果直接库封装看实现的可以看最后两小节。\n\nXMLHttpRequest\n==============\n\nXMLHttpRequest是用于与后台交换数据的对象，XMLHttpRequest不仅仅能传递XML而是允许任何类型的数据传输。 所有现代的浏览器都支持 XMLHttpRequest 对象。 XMLHttpRequest是ajax的实现基础。 XMLHttpRequest 继承了 XMLHttpRequestEventTarget，XMLHttpRequestEventTarget继承了EventTarget。 简单说明下这两个父对象的属性方法\n\n# EventTarget\n\n|方法 | 功能 |\n| - | - |\n| addEventListener() | 注册特定事件类型的事件处理程序 |\n| removeEventListener() | 删除事件侦听器 |\n| dispatchEvent() | 将事件分派到此EventTarget |\n\n\nEventTarget的简单实现\n```js\n    class EventTarget {\n      constructor() {\n        this.listeners = {};\n      }\n\n      addEventListener(type, callback) {\n        if(!(type in this.listeners)) {\n          this.listeners[type] = [];\n        }\n        this.listeners[type].push(callback);\n      }\n\n      removeEventListener(type, callback) {\n        if(!(type in this.listeners)) {\n          return;\n        }\n        let stack = this.listeners[type];\n        for (let i = 0, l = stack.length; i < l; i++) {\n          if(stack[i] === callback) {\n            stack.splice(i, 1);\n            return this.removeEventListener(type, callback);\n          }\n        }\n      }\n\n      dispatchEvent(event) {\n        if(!(event.type in this.listeners)) {\n          return;\n        }\n        var stack = this.listeners[event.type];\n        event.target = this;\n        for (let i = 0, l = stack.length; i < 1; i++) {\n          stack[i].call(this. event);\n        }\n      }\n    }\n```\n\n# XMLHttpRequestEventTarget\n\nXMLHttpRequestEventTarget是一个描述事件处理程序的接口\n\n| 属性 | 功能 |\n| - | - |\n| onabort | 当请求失败时调用该方法 |\n| onerror | 当请求发生错误时调用该方法 |\n| onload | 当一个HTTP请求正确加载出内容后返回时调用 |\n| onloadstart | 当一个HTTP请求开始加载数据时调用 |\n| onprogress | 间歇调用该方法用来获取请求过程中的信息 |\n| ontimeout | 当时间超时（设置了timeout）时调用 |\n| onloadend | 当内容加载完成（不管成功与否）时调用 |\n\n\n# XMLHttpRequest\n\n| 属性 | 功能 |\n| - | - |\n| onreadystatechange | 当readyState属性发生变化时调用的EventHandler |\n| readyState | 请求的状态码 |\n| responseType | 响应数据的类型 |\n| responseURL | 响应的序列化URL |\n| responseXML | 一个Document，其中包含该请求的响应 |\n| status | 返回无符号短整型请求响应状态 |\n| statusText | 返回字符串型请求响应状态和信息 |\n| timeout | 超时时间 |\n| upload | 上传过程 |\n| withCredentials | 用来指定跨域的请求是否应该使用证书 |\n| withCredentials | 用来指定跨域的请求是否应该使用证书 |\n| withCredentials | 用来指定跨域的请求是否应该使用证书 |\n| abort() | 终止请求 |\n| getAllResponseHeaders\b() | 以字符串的形式返回所有用CRLF分隔的响应头 |\n| getResponseHeader() | 返回包含指定响应头的字符串 |\n| open() | 初始化一个请求 |\n| send() | 发送请求 |\n| setRequestHeader() | 设置HTTP请求头的值 |\n\n\n## readyState的取值\n\n| 值 | 属性 | 功能 |\n| - | - | - |\n| 0 | UNSENT | 代理被创建，但尚未调用 open() 方法 |\n| 1 | OPENED | open() 方法已经被调用 |\n| 2 | HEADERS_RECEIVED | send() 方法已经被调用，并且头部和状态已经可获得 |\n| 3 | LOADING | 下载中； responseText 属性已经包含部分数据 |\n| 4 | DONE | 下载操作已完成 |\n\n\n封装简单的Ajax方法\n===========\n\n大概流程是：\n\n1.通过兼容性判断创建XMLHttpRequest对象还是ActiveXObject对象\n\n2.设置请求头，区分get与其他方法，调用open()，send()方法建立连接\n\n3.每当 readyState 改变时，就会触发 onreadystatechange 事件。当 readyState 是\n\n4 并且 status 是介于200（含）与400（不包含）之间时，可以获取到responseText。\n\n5.用sent()方法发送请求 首先定义一下入参data\n\n\n| 参数 | 类型 | 说明 |\n| - | - | - |\n| option | string | 请求方法 |\n| url | string | 请求地址 |\n| body | object | 请求参数 |\n\n```js\n    function ajax(data){\n        // 创建对象\n        var xhr = null;\n        var params = formsParams(data.body);\n        if(window.XMLHttpRequest){\n            xhr = new XMLHttpRequest()\n        } else {\n            xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n        }\n        // 设置请求头，建立连接\n        if(data.option == \"GET\"){\n            xhr.open(data.option, data.url + \"?\"+ params,data.async);\n            xhr.send(null)\n        } else if(data.option !== \"GET\"){\n            xhr.open(data.option,data.url,data.async);\n            xhr.setRequestHeader(\"Content-Type\",\"application/x-www-form-urlencoded\");\n            xhr.send(params);\n        }\n        // onreadystatechange监听并相应\n        xhr.onreadystatechange = function(){\n            if(xhr.readyState == 4 && xhr.status >= 200 && xhr.status < 400) {\n              data.success(xhr.responseText);\n            }\n        }\n        function formsParams(data){\n            var arr = [];\n            for(var prop in data){\n                arr.push(prop + \"=\" + data[prop]);\n            }\n            return arr.join(\"&\");\n        }\n```\n\n\n实现Promise版的Ajax方法\n=================\n\n其主要是返回一个Promise对象，把回调版的ajax的逻辑写入Promise中。\n```js\n    let ajax = ({url = '', option = 'get', body = {} }) => {\n      return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest()\n        xhr.open(option, url, true);\n        xhr.onreadystatechange = () => {\n          if(xhr.readyState == 4 && xhr.status >= 200 && xhr.status < 400) {\n            resolve(xhr.responseText);\n          }\n        }\n        xhr.onerror = (error) => {\n                reject(error);\n            }\n        xhr.send()\n      });\n    }\n```","slug":"ajax-e5-85-a8-e6-8f-ad-e7-a7-98","published":1,"updated":"2020-05-22T06:37:55.280Z","_id":"ckahts7xh000czmz80b509sxz","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>项目中一直都使用ajax的封装库，时间久了难免忘记，前不久看到公司笔试题有实现promise的ajax，居然想不出来完整的。所以把ajax复习一遍，并且封装下。文章会花很大篇幅讲对象基础和原理，如果直接库封装看实现的可以看最后两小节。</p>\n</blockquote>\n<h1 id=\"XMLHttpRequest\"><a href=\"#XMLHttpRequest\" class=\"headerlink\" title=\"XMLHttpRequest\"></a>XMLHttpRequest</h1><p>XMLHttpRequest是用于与后台交换数据的对象，XMLHttpRequest不仅仅能传递XML而是允许任何类型的数据传输。 所有现代的浏览器都支持 XMLHttpRequest 对象。 XMLHttpRequest是ajax的实现基础。 XMLHttpRequest 继承了 XMLHttpRequestEventTarget，XMLHttpRequestEventTarget继承了EventTarget。 简单说明下这两个父对象的属性方法</p>\n<h1 id=\"EventTarget\"><a href=\"#EventTarget\" class=\"headerlink\" title=\"EventTarget\"></a>EventTarget</h1><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>addEventListener()</td>\n<td>注册特定事件类型的事件处理程序</td>\n</tr>\n<tr>\n<td>removeEventListener()</td>\n<td>删除事件侦听器</td>\n</tr>\n<tr>\n<td>dispatchEvent()</td>\n<td>将事件分派到此EventTarget</td>\n</tr>\n</tbody></table>\n<p>EventTarget的简单实现</p>\n<pre><code class=\"js\">    class EventTarget {\n      constructor() {\n        this.listeners = {};\n      }\n\n      addEventListener(type, callback) {\n        if(!(type in this.listeners)) {\n          this.listeners[type] = [];\n        }\n        this.listeners[type].push(callback);\n      }\n\n      removeEventListener(type, callback) {\n        if(!(type in this.listeners)) {\n          return;\n        }\n        let stack = this.listeners[type];\n        for (let i = 0, l = stack.length; i &lt; l; i++) {\n          if(stack[i] === callback) {\n            stack.splice(i, 1);\n            return this.removeEventListener(type, callback);\n          }\n        }\n      }\n\n      dispatchEvent(event) {\n        if(!(event.type in this.listeners)) {\n          return;\n        }\n        var stack = this.listeners[event.type];\n        event.target = this;\n        for (let i = 0, l = stack.length; i &lt; 1; i++) {\n          stack[i].call(this. event);\n        }\n      }\n    }</code></pre>\n<h1 id=\"XMLHttpRequestEventTarget\"><a href=\"#XMLHttpRequestEventTarget\" class=\"headerlink\" title=\"XMLHttpRequestEventTarget\"></a>XMLHttpRequestEventTarget</h1><p>XMLHttpRequestEventTarget是一个描述事件处理程序的接口</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>onabort</td>\n<td>当请求失败时调用该方法</td>\n</tr>\n<tr>\n<td>onerror</td>\n<td>当请求发生错误时调用该方法</td>\n</tr>\n<tr>\n<td>onload</td>\n<td>当一个HTTP请求正确加载出内容后返回时调用</td>\n</tr>\n<tr>\n<td>onloadstart</td>\n<td>当一个HTTP请求开始加载数据时调用</td>\n</tr>\n<tr>\n<td>onprogress</td>\n<td>间歇调用该方法用来获取请求过程中的信息</td>\n</tr>\n<tr>\n<td>ontimeout</td>\n<td>当时间超时（设置了timeout）时调用</td>\n</tr>\n<tr>\n<td>onloadend</td>\n<td>当内容加载完成（不管成功与否）时调用</td>\n</tr>\n</tbody></table>\n<h1 id=\"XMLHttpRequest-1\"><a href=\"#XMLHttpRequest-1\" class=\"headerlink\" title=\"XMLHttpRequest\"></a>XMLHttpRequest</h1><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>onreadystatechange</td>\n<td>当readyState属性发生变化时调用的EventHandler</td>\n</tr>\n<tr>\n<td>readyState</td>\n<td>请求的状态码</td>\n</tr>\n<tr>\n<td>responseType</td>\n<td>响应数据的类型</td>\n</tr>\n<tr>\n<td>responseURL</td>\n<td>响应的序列化URL</td>\n</tr>\n<tr>\n<td>responseXML</td>\n<td>一个Document，其中包含该请求的响应</td>\n</tr>\n<tr>\n<td>status</td>\n<td>返回无符号短整型请求响应状态</td>\n</tr>\n<tr>\n<td>statusText</td>\n<td>返回字符串型请求响应状态和信息</td>\n</tr>\n<tr>\n<td>timeout</td>\n<td>超时时间</td>\n</tr>\n<tr>\n<td>upload</td>\n<td>上传过程</td>\n</tr>\n<tr>\n<td>withCredentials</td>\n<td>用来指定跨域的请求是否应该使用证书</td>\n</tr>\n<tr>\n<td>withCredentials</td>\n<td>用来指定跨域的请求是否应该使用证书</td>\n</tr>\n<tr>\n<td>withCredentials</td>\n<td>用来指定跨域的请求是否应该使用证书</td>\n</tr>\n<tr>\n<td>abort()</td>\n<td>终止请求</td>\n</tr>\n<tr>\n<td>getAllResponseHeaders\b()</td>\n<td>以字符串的形式返回所有用CRLF分隔的响应头</td>\n</tr>\n<tr>\n<td>getResponseHeader()</td>\n<td>返回包含指定响应头的字符串</td>\n</tr>\n<tr>\n<td>open()</td>\n<td>初始化一个请求</td>\n</tr>\n<tr>\n<td>send()</td>\n<td>发送请求</td>\n</tr>\n<tr>\n<td>setRequestHeader()</td>\n<td>设置HTTP请求头的值</td>\n</tr>\n</tbody></table>\n<h2 id=\"readyState的取值\"><a href=\"#readyState的取值\" class=\"headerlink\" title=\"readyState的取值\"></a>readyState的取值</h2><table>\n<thead>\n<tr>\n<th>值</th>\n<th>属性</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>UNSENT</td>\n<td>代理被创建，但尚未调用 open() 方法</td>\n</tr>\n<tr>\n<td>1</td>\n<td>OPENED</td>\n<td>open() 方法已经被调用</td>\n</tr>\n<tr>\n<td>2</td>\n<td>HEADERS_RECEIVED</td>\n<td>send() 方法已经被调用，并且头部和状态已经可获得</td>\n</tr>\n<tr>\n<td>3</td>\n<td>LOADING</td>\n<td>下载中； responseText 属性已经包含部分数据</td>\n</tr>\n<tr>\n<td>4</td>\n<td>DONE</td>\n<td>下载操作已完成</td>\n</tr>\n</tbody></table>\n<h1 id=\"封装简单的Ajax方法\"><a href=\"#封装简单的Ajax方法\" class=\"headerlink\" title=\"封装简单的Ajax方法\"></a>封装简单的Ajax方法</h1><p>大概流程是：</p>\n<p>1.通过兼容性判断创建XMLHttpRequest对象还是ActiveXObject对象</p>\n<p>2.设置请求头，区分get与其他方法，调用open()，send()方法建立连接</p>\n<p>3.每当 readyState 改变时，就会触发 onreadystatechange 事件。当 readyState 是</p>\n<p>4 并且 status 是介于200（含）与400（不包含）之间时，可以获取到responseText。</p>\n<p>5.用sent()方法发送请求 首先定义一下入参data</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>option</td>\n<td>string</td>\n<td>请求方法</td>\n</tr>\n<tr>\n<td>url</td>\n<td>string</td>\n<td>请求地址</td>\n</tr>\n<tr>\n<td>body</td>\n<td>object</td>\n<td>请求参数</td>\n</tr>\n</tbody></table>\n<pre><code class=\"js\">    function ajax(data){\n        // 创建对象\n        var xhr = null;\n        var params = formsParams(data.body);\n        if(window.XMLHttpRequest){\n            xhr = new XMLHttpRequest()\n        } else {\n            xhr = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);\n        }\n        // 设置请求头，建立连接\n        if(data.option == &quot;GET&quot;){\n            xhr.open(data.option, data.url + &quot;?&quot;+ params,data.async);\n            xhr.send(null)\n        } else if(data.option !== &quot;GET&quot;){\n            xhr.open(data.option,data.url,data.async);\n            xhr.setRequestHeader(&quot;Content-Type&quot;,&quot;application/x-www-form-urlencoded&quot;);\n            xhr.send(params);\n        }\n        // onreadystatechange监听并相应\n        xhr.onreadystatechange = function(){\n            if(xhr.readyState == 4 &amp;&amp; xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 400) {\n              data.success(xhr.responseText);\n            }\n        }\n        function formsParams(data){\n            var arr = [];\n            for(var prop in data){\n                arr.push(prop + &quot;=&quot; + data[prop]);\n            }\n            return arr.join(&quot;&amp;&quot;);\n        }</code></pre>\n<h1 id=\"实现Promise版的Ajax方法\"><a href=\"#实现Promise版的Ajax方法\" class=\"headerlink\" title=\"实现Promise版的Ajax方法\"></a>实现Promise版的Ajax方法</h1><p>其主要是返回一个Promise对象，把回调版的ajax的逻辑写入Promise中。</p>\n<pre><code class=\"js\">    let ajax = ({url = &#39;&#39;, option = &#39;get&#39;, body = {} }) =&gt; {\n      return new Promise((resolve, reject) =&gt; {\n        const xhr = new XMLHttpRequest()\n        xhr.open(option, url, true);\n        xhr.onreadystatechange = () =&gt; {\n          if(xhr.readyState == 4 &amp;&amp; xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 400) {\n            resolve(xhr.responseText);\n          }\n        }\n        xhr.onerror = (error) =&gt; {\n                reject(error);\n            }\n        xhr.send()\n      });\n    }</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>项目中一直都使用ajax的封装库，时间久了难免忘记，前不久看到公司笔试题有实现promise的ajax，居然想不出来完整的。所以把ajax复习一遍，并且封装下。文章会花很大篇幅讲对象基础和原理，如果直接库封装看实现的可以看最后两小节。</p>\n</blockquote>\n<h1 id=\"XMLHttpRequest\"><a href=\"#XMLHttpRequest\" class=\"headerlink\" title=\"XMLHttpRequest\"></a>XMLHttpRequest</h1><p>XMLHttpRequest是用于与后台交换数据的对象，XMLHttpRequest不仅仅能传递XML而是允许任何类型的数据传输。 所有现代的浏览器都支持 XMLHttpRequest 对象。 XMLHttpRequest是ajax的实现基础。 XMLHttpRequest 继承了 XMLHttpRequestEventTarget，XMLHttpRequestEventTarget继承了EventTarget。 简单说明下这两个父对象的属性方法</p>\n<h1 id=\"EventTarget\"><a href=\"#EventTarget\" class=\"headerlink\" title=\"EventTarget\"></a>EventTarget</h1><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>addEventListener()</td>\n<td>注册特定事件类型的事件处理程序</td>\n</tr>\n<tr>\n<td>removeEventListener()</td>\n<td>删除事件侦听器</td>\n</tr>\n<tr>\n<td>dispatchEvent()</td>\n<td>将事件分派到此EventTarget</td>\n</tr>\n</tbody></table>\n<p>EventTarget的简单实现</p>\n<pre><code class=\"js\">    class EventTarget {\n      constructor() {\n        this.listeners = {};\n      }\n\n      addEventListener(type, callback) {\n        if(!(type in this.listeners)) {\n          this.listeners[type] = [];\n        }\n        this.listeners[type].push(callback);\n      }\n\n      removeEventListener(type, callback) {\n        if(!(type in this.listeners)) {\n          return;\n        }\n        let stack = this.listeners[type];\n        for (let i = 0, l = stack.length; i &lt; l; i++) {\n          if(stack[i] === callback) {\n            stack.splice(i, 1);\n            return this.removeEventListener(type, callback);\n          }\n        }\n      }\n\n      dispatchEvent(event) {\n        if(!(event.type in this.listeners)) {\n          return;\n        }\n        var stack = this.listeners[event.type];\n        event.target = this;\n        for (let i = 0, l = stack.length; i &lt; 1; i++) {\n          stack[i].call(this. event);\n        }\n      }\n    }</code></pre>\n<h1 id=\"XMLHttpRequestEventTarget\"><a href=\"#XMLHttpRequestEventTarget\" class=\"headerlink\" title=\"XMLHttpRequestEventTarget\"></a>XMLHttpRequestEventTarget</h1><p>XMLHttpRequestEventTarget是一个描述事件处理程序的接口</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>onabort</td>\n<td>当请求失败时调用该方法</td>\n</tr>\n<tr>\n<td>onerror</td>\n<td>当请求发生错误时调用该方法</td>\n</tr>\n<tr>\n<td>onload</td>\n<td>当一个HTTP请求正确加载出内容后返回时调用</td>\n</tr>\n<tr>\n<td>onloadstart</td>\n<td>当一个HTTP请求开始加载数据时调用</td>\n</tr>\n<tr>\n<td>onprogress</td>\n<td>间歇调用该方法用来获取请求过程中的信息</td>\n</tr>\n<tr>\n<td>ontimeout</td>\n<td>当时间超时（设置了timeout）时调用</td>\n</tr>\n<tr>\n<td>onloadend</td>\n<td>当内容加载完成（不管成功与否）时调用</td>\n</tr>\n</tbody></table>\n<h1 id=\"XMLHttpRequest-1\"><a href=\"#XMLHttpRequest-1\" class=\"headerlink\" title=\"XMLHttpRequest\"></a>XMLHttpRequest</h1><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>onreadystatechange</td>\n<td>当readyState属性发生变化时调用的EventHandler</td>\n</tr>\n<tr>\n<td>readyState</td>\n<td>请求的状态码</td>\n</tr>\n<tr>\n<td>responseType</td>\n<td>响应数据的类型</td>\n</tr>\n<tr>\n<td>responseURL</td>\n<td>响应的序列化URL</td>\n</tr>\n<tr>\n<td>responseXML</td>\n<td>一个Document，其中包含该请求的响应</td>\n</tr>\n<tr>\n<td>status</td>\n<td>返回无符号短整型请求响应状态</td>\n</tr>\n<tr>\n<td>statusText</td>\n<td>返回字符串型请求响应状态和信息</td>\n</tr>\n<tr>\n<td>timeout</td>\n<td>超时时间</td>\n</tr>\n<tr>\n<td>upload</td>\n<td>上传过程</td>\n</tr>\n<tr>\n<td>withCredentials</td>\n<td>用来指定跨域的请求是否应该使用证书</td>\n</tr>\n<tr>\n<td>withCredentials</td>\n<td>用来指定跨域的请求是否应该使用证书</td>\n</tr>\n<tr>\n<td>withCredentials</td>\n<td>用来指定跨域的请求是否应该使用证书</td>\n</tr>\n<tr>\n<td>abort()</td>\n<td>终止请求</td>\n</tr>\n<tr>\n<td>getAllResponseHeaders\b()</td>\n<td>以字符串的形式返回所有用CRLF分隔的响应头</td>\n</tr>\n<tr>\n<td>getResponseHeader()</td>\n<td>返回包含指定响应头的字符串</td>\n</tr>\n<tr>\n<td>open()</td>\n<td>初始化一个请求</td>\n</tr>\n<tr>\n<td>send()</td>\n<td>发送请求</td>\n</tr>\n<tr>\n<td>setRequestHeader()</td>\n<td>设置HTTP请求头的值</td>\n</tr>\n</tbody></table>\n<h2 id=\"readyState的取值\"><a href=\"#readyState的取值\" class=\"headerlink\" title=\"readyState的取值\"></a>readyState的取值</h2><table>\n<thead>\n<tr>\n<th>值</th>\n<th>属性</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>UNSENT</td>\n<td>代理被创建，但尚未调用 open() 方法</td>\n</tr>\n<tr>\n<td>1</td>\n<td>OPENED</td>\n<td>open() 方法已经被调用</td>\n</tr>\n<tr>\n<td>2</td>\n<td>HEADERS_RECEIVED</td>\n<td>send() 方法已经被调用，并且头部和状态已经可获得</td>\n</tr>\n<tr>\n<td>3</td>\n<td>LOADING</td>\n<td>下载中； responseText 属性已经包含部分数据</td>\n</tr>\n<tr>\n<td>4</td>\n<td>DONE</td>\n<td>下载操作已完成</td>\n</tr>\n</tbody></table>\n<h1 id=\"封装简单的Ajax方法\"><a href=\"#封装简单的Ajax方法\" class=\"headerlink\" title=\"封装简单的Ajax方法\"></a>封装简单的Ajax方法</h1><p>大概流程是：</p>\n<p>1.通过兼容性判断创建XMLHttpRequest对象还是ActiveXObject对象</p>\n<p>2.设置请求头，区分get与其他方法，调用open()，send()方法建立连接</p>\n<p>3.每当 readyState 改变时，就会触发 onreadystatechange 事件。当 readyState 是</p>\n<p>4 并且 status 是介于200（含）与400（不包含）之间时，可以获取到responseText。</p>\n<p>5.用sent()方法发送请求 首先定义一下入参data</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>option</td>\n<td>string</td>\n<td>请求方法</td>\n</tr>\n<tr>\n<td>url</td>\n<td>string</td>\n<td>请求地址</td>\n</tr>\n<tr>\n<td>body</td>\n<td>object</td>\n<td>请求参数</td>\n</tr>\n</tbody></table>\n<pre><code class=\"js\">    function ajax(data){\n        // 创建对象\n        var xhr = null;\n        var params = formsParams(data.body);\n        if(window.XMLHttpRequest){\n            xhr = new XMLHttpRequest()\n        } else {\n            xhr = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);\n        }\n        // 设置请求头，建立连接\n        if(data.option == &quot;GET&quot;){\n            xhr.open(data.option, data.url + &quot;?&quot;+ params,data.async);\n            xhr.send(null)\n        } else if(data.option !== &quot;GET&quot;){\n            xhr.open(data.option,data.url,data.async);\n            xhr.setRequestHeader(&quot;Content-Type&quot;,&quot;application/x-www-form-urlencoded&quot;);\n            xhr.send(params);\n        }\n        // onreadystatechange监听并相应\n        xhr.onreadystatechange = function(){\n            if(xhr.readyState == 4 &amp;&amp; xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 400) {\n              data.success(xhr.responseText);\n            }\n        }\n        function formsParams(data){\n            var arr = [];\n            for(var prop in data){\n                arr.push(prop + &quot;=&quot; + data[prop]);\n            }\n            return arr.join(&quot;&amp;&quot;);\n        }</code></pre>\n<h1 id=\"实现Promise版的Ajax方法\"><a href=\"#实现Promise版的Ajax方法\" class=\"headerlink\" title=\"实现Promise版的Ajax方法\"></a>实现Promise版的Ajax方法</h1><p>其主要是返回一个Promise对象，把回调版的ajax的逻辑写入Promise中。</p>\n<pre><code class=\"js\">    let ajax = ({url = &#39;&#39;, option = &#39;get&#39;, body = {} }) =&gt; {\n      return new Promise((resolve, reject) =&gt; {\n        const xhr = new XMLHttpRequest()\n        xhr.open(option, url, true);\n        xhr.onreadystatechange = () =&gt; {\n          if(xhr.readyState == 4 &amp;&amp; xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 400) {\n            resolve(xhr.responseText);\n          }\n        }\n        xhr.onerror = (error) =&gt; {\n                reject(error);\n            }\n        xhr.send()\n      });\n    }</code></pre>\n"},{"title":"一个简易留言板","url":"333.html","id":"333","date":"2011-08-01T12:21:47.000Z","_content":"\n![](http://img.bugzhang.com/banner.jpg) 这是一个留言板，输入密码后可以在下边的评论框中留言","source":"_posts/e4-b8-80-e4-b8-aa-e7-ae-80-e6-98-93-e7-95-99-e8-a8-80-e6-9d-bf.md","raw":"---\ntitle: 一个简易留言板\nurl: 333.html\nid: 333\ncategories:\n  - 未分类\ndate: 2011-08-01 20:21:47\ntags:\n---\n\n![](http://img.bugzhang.com/banner.jpg) 这是一个留言板，输入密码后可以在下边的评论框中留言","slug":"e4-b8-80-e4-b8-aa-e7-ae-80-e6-98-93-e7-95-99-e8-a8-80-e6-9d-bf","published":1,"updated":"2020-05-19T08:33:55.925Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts7xj000fzmz83b0obr5t","content":"<p><img src=\"http://img.bugzhang.com/banner.jpg\" alt=\"\"> 这是一个留言板，输入密码后可以在下边的评论框中留言</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://img.bugzhang.com/banner.jpg\" alt=\"\"> 这是一个留言板，输入密码后可以在下边的评论框中留言</p>\n"},{"title":"一些链接","url":"76.html","id":"76","date":"2015-12-23T15:42:48.000Z","_content":"\nNodex's Hackers：\n================\n\n# [JustZht：天哥，iOS，也写unity，在中南最佩服的人，目前准备留美学习中](http://www.justzht.com)\n\n# [飞飞 : 大学好友，目前在中山大学读硕士做CV](http://blog.x-fei.me/)\n\n# [neroyang：高中学弟，锋哥，全栈，C++/Java/PHP/js/Golang，天津大学毕业，目前是thoughtwork的高级工程师](https://github.com/nerososft)\n\n# [nastul：中南大学好友，常见搞安卓和web，目前在墨尔本大学研究机器学习](http://blog.nastul.com/t)\n\n# [gay平 ：zpnaruto，腾讯前端，中南大学隔壁宿舍的好基友](http://www.zpnaruto.cn/)\n\n\n\n* * *\n\n\n\nCSU相关\n=====\n\n# [joyseedog：权哥，今日头条iOS](http://www.iseedog.com/)\n\n# [zhangdongxuan：微信iOS](http://zhangdongxuan.com)\n\n# [Tsukasa：也是白学家，华为云java](http://tsukasa.moe/)\n\n# [Equim：Eq酱，C#、node.js，大神学弟，女装大佬](https://ekyu.moe)\n\n# [AndyGu：豪哥，安卓开发](http://www.andygu.cn/)\n\n\n\n* * *\n\n\n\n一些组织\n====\n\n# [中南大学苹果实验室：大三时候作为第一个程序员加入的学校实验室](http://csuapple.com/)","source":"_posts/e4-b8-80-e4-ba-9b-e9-93-be-e6-8e-a5.md","raw":"---\ntitle: 一些链接\nurl: 76.html\nid: 76\ncategories:\n  - 未分类\ndate: 2015-12-23 23:42:48\ntags:\n---\n\nNodex's Hackers：\n================\n\n# [JustZht：天哥，iOS，也写unity，在中南最佩服的人，目前准备留美学习中](http://www.justzht.com)\n\n# [飞飞 : 大学好友，目前在中山大学读硕士做CV](http://blog.x-fei.me/)\n\n# [neroyang：高中学弟，锋哥，全栈，C++/Java/PHP/js/Golang，天津大学毕业，目前是thoughtwork的高级工程师](https://github.com/nerososft)\n\n# [nastul：中南大学好友，常见搞安卓和web，目前在墨尔本大学研究机器学习](http://blog.nastul.com/t)\n\n# [gay平 ：zpnaruto，腾讯前端，中南大学隔壁宿舍的好基友](http://www.zpnaruto.cn/)\n\n\n\n* * *\n\n\n\nCSU相关\n=====\n\n# [joyseedog：权哥，今日头条iOS](http://www.iseedog.com/)\n\n# [zhangdongxuan：微信iOS](http://zhangdongxuan.com)\n\n# [Tsukasa：也是白学家，华为云java](http://tsukasa.moe/)\n\n# [Equim：Eq酱，C#、node.js，大神学弟，女装大佬](https://ekyu.moe)\n\n# [AndyGu：豪哥，安卓开发](http://www.andygu.cn/)\n\n\n\n* * *\n\n\n\n一些组织\n====\n\n# [中南大学苹果实验室：大三时候作为第一个程序员加入的学校实验室](http://csuapple.com/)","slug":"e4-b8-80-e4-ba-9b-e9-93-be-e6-8e-a5","published":1,"updated":"2020-05-19T08:51:28.807Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts7xl000jzmz800ur99lj","content":"<h1 id=\"Nodex’s-Hackers：\"><a href=\"#Nodex’s-Hackers：\" class=\"headerlink\" title=\"Nodex’s Hackers：\"></a>Nodex’s Hackers：</h1><h1 id=\"JustZht：天哥，iOS，也写unity，在中南最佩服的人，目前准备留美学习中\"><a href=\"#JustZht：天哥，iOS，也写unity，在中南最佩服的人，目前准备留美学习中\" class=\"headerlink\" title=\"JustZht：天哥，iOS，也写unity，在中南最佩服的人，目前准备留美学习中\"></a><a href=\"http://www.justzht.com\" target=\"_blank\" rel=\"noopener\">JustZht：天哥，iOS，也写unity，在中南最佩服的人，目前准备留美学习中</a></h1><h1 id=\"飞飞-大学好友，目前在中山大学读硕士做CV\"><a href=\"#飞飞-大学好友，目前在中山大学读硕士做CV\" class=\"headerlink\" title=\"飞飞 : 大学好友，目前在中山大学读硕士做CV\"></a><a href=\"http://blog.x-fei.me/\" target=\"_blank\" rel=\"noopener\">飞飞 : 大学好友，目前在中山大学读硕士做CV</a></h1><h1 id=\"neroyang：高中学弟，锋哥，全栈，C-Java-PHP-js-Golang，天津大学毕业，目前是thoughtwork的高级工程师\"><a href=\"#neroyang：高中学弟，锋哥，全栈，C-Java-PHP-js-Golang，天津大学毕业，目前是thoughtwork的高级工程师\" class=\"headerlink\" title=\"neroyang：高中学弟，锋哥，全栈，C++/Java/PHP/js/Golang，天津大学毕业，目前是thoughtwork的高级工程师\"></a><a href=\"https://github.com/nerososft\" target=\"_blank\" rel=\"noopener\">neroyang：高中学弟，锋哥，全栈，C++/Java/PHP/js/Golang，天津大学毕业，目前是thoughtwork的高级工程师</a></h1><h1 id=\"nastul：中南大学好友，常见搞安卓和web，目前在墨尔本大学研究机器学习\"><a href=\"#nastul：中南大学好友，常见搞安卓和web，目前在墨尔本大学研究机器学习\" class=\"headerlink\" title=\"nastul：中南大学好友，常见搞安卓和web，目前在墨尔本大学研究机器学习\"></a><a href=\"http://blog.nastul.com/t\" target=\"_blank\" rel=\"noopener\">nastul：中南大学好友，常见搞安卓和web，目前在墨尔本大学研究机器学习</a></h1><h1 id=\"gay平-：zpnaruto，腾讯前端，中南大学隔壁宿舍的好基友\"><a href=\"#gay平-：zpnaruto，腾讯前端，中南大学隔壁宿舍的好基友\" class=\"headerlink\" title=\"gay平 ：zpnaruto，腾讯前端，中南大学隔壁宿舍的好基友\"></a><a href=\"http://www.zpnaruto.cn/\" target=\"_blank\" rel=\"noopener\">gay平 ：zpnaruto，腾讯前端，中南大学隔壁宿舍的好基友</a></h1><hr>\n<h1 id=\"CSU相关\"><a href=\"#CSU相关\" class=\"headerlink\" title=\"CSU相关\"></a>CSU相关</h1><h1 id=\"joyseedog：权哥，今日头条iOS\"><a href=\"#joyseedog：权哥，今日头条iOS\" class=\"headerlink\" title=\"joyseedog：权哥，今日头条iOS\"></a><a href=\"http://www.iseedog.com/\" target=\"_blank\" rel=\"noopener\">joyseedog：权哥，今日头条iOS</a></h1><h1 id=\"zhangdongxuan：微信iOS\"><a href=\"#zhangdongxuan：微信iOS\" class=\"headerlink\" title=\"zhangdongxuan：微信iOS\"></a><a href=\"http://zhangdongxuan.com\" target=\"_blank\" rel=\"noopener\">zhangdongxuan：微信iOS</a></h1><h1 id=\"Tsukasa：也是白学家，华为云java\"><a href=\"#Tsukasa：也是白学家，华为云java\" class=\"headerlink\" title=\"Tsukasa：也是白学家，华为云java\"></a><a href=\"http://tsukasa.moe/\" target=\"_blank\" rel=\"noopener\">Tsukasa：也是白学家，华为云java</a></h1><h1 id=\"Equim：Eq酱，C-、node-js，大神学弟，女装大佬\"><a href=\"#Equim：Eq酱，C-、node-js，大神学弟，女装大佬\" class=\"headerlink\" title=\"Equim：Eq酱，C#、node.js，大神学弟，女装大佬\"></a><a href=\"https://ekyu.moe\" target=\"_blank\" rel=\"noopener\">Equim：Eq酱，C#、node.js，大神学弟，女装大佬</a></h1><h1 id=\"AndyGu：豪哥，安卓开发\"><a href=\"#AndyGu：豪哥，安卓开发\" class=\"headerlink\" title=\"AndyGu：豪哥，安卓开发\"></a><a href=\"http://www.andygu.cn/\" target=\"_blank\" rel=\"noopener\">AndyGu：豪哥，安卓开发</a></h1><hr>\n<h1 id=\"一些组织\"><a href=\"#一些组织\" class=\"headerlink\" title=\"一些组织\"></a>一些组织</h1><h1 id=\"中南大学苹果实验室：大三时候作为第一个程序员加入的学校实验室\"><a href=\"#中南大学苹果实验室：大三时候作为第一个程序员加入的学校实验室\" class=\"headerlink\" title=\"中南大学苹果实验室：大三时候作为第一个程序员加入的学校实验室\"></a><a href=\"http://csuapple.com/\" target=\"_blank\" rel=\"noopener\">中南大学苹果实验室：大三时候作为第一个程序员加入的学校实验室</a></h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Nodex’s-Hackers：\"><a href=\"#Nodex’s-Hackers：\" class=\"headerlink\" title=\"Nodex’s Hackers：\"></a>Nodex’s Hackers：</h1><h1 id=\"JustZht：天哥，iOS，也写unity，在中南最佩服的人，目前准备留美学习中\"><a href=\"#JustZht：天哥，iOS，也写unity，在中南最佩服的人，目前准备留美学习中\" class=\"headerlink\" title=\"JustZht：天哥，iOS，也写unity，在中南最佩服的人，目前准备留美学习中\"></a><a href=\"http://www.justzht.com\" target=\"_blank\" rel=\"noopener\">JustZht：天哥，iOS，也写unity，在中南最佩服的人，目前准备留美学习中</a></h1><h1 id=\"飞飞-大学好友，目前在中山大学读硕士做CV\"><a href=\"#飞飞-大学好友，目前在中山大学读硕士做CV\" class=\"headerlink\" title=\"飞飞 : 大学好友，目前在中山大学读硕士做CV\"></a><a href=\"http://blog.x-fei.me/\" target=\"_blank\" rel=\"noopener\">飞飞 : 大学好友，目前在中山大学读硕士做CV</a></h1><h1 id=\"neroyang：高中学弟，锋哥，全栈，C-Java-PHP-js-Golang，天津大学毕业，目前是thoughtwork的高级工程师\"><a href=\"#neroyang：高中学弟，锋哥，全栈，C-Java-PHP-js-Golang，天津大学毕业，目前是thoughtwork的高级工程师\" class=\"headerlink\" title=\"neroyang：高中学弟，锋哥，全栈，C++/Java/PHP/js/Golang，天津大学毕业，目前是thoughtwork的高级工程师\"></a><a href=\"https://github.com/nerososft\" target=\"_blank\" rel=\"noopener\">neroyang：高中学弟，锋哥，全栈，C++/Java/PHP/js/Golang，天津大学毕业，目前是thoughtwork的高级工程师</a></h1><h1 id=\"nastul：中南大学好友，常见搞安卓和web，目前在墨尔本大学研究机器学习\"><a href=\"#nastul：中南大学好友，常见搞安卓和web，目前在墨尔本大学研究机器学习\" class=\"headerlink\" title=\"nastul：中南大学好友，常见搞安卓和web，目前在墨尔本大学研究机器学习\"></a><a href=\"http://blog.nastul.com/t\" target=\"_blank\" rel=\"noopener\">nastul：中南大学好友，常见搞安卓和web，目前在墨尔本大学研究机器学习</a></h1><h1 id=\"gay平-：zpnaruto，腾讯前端，中南大学隔壁宿舍的好基友\"><a href=\"#gay平-：zpnaruto，腾讯前端，中南大学隔壁宿舍的好基友\" class=\"headerlink\" title=\"gay平 ：zpnaruto，腾讯前端，中南大学隔壁宿舍的好基友\"></a><a href=\"http://www.zpnaruto.cn/\" target=\"_blank\" rel=\"noopener\">gay平 ：zpnaruto，腾讯前端，中南大学隔壁宿舍的好基友</a></h1><hr>\n<h1 id=\"CSU相关\"><a href=\"#CSU相关\" class=\"headerlink\" title=\"CSU相关\"></a>CSU相关</h1><h1 id=\"joyseedog：权哥，今日头条iOS\"><a href=\"#joyseedog：权哥，今日头条iOS\" class=\"headerlink\" title=\"joyseedog：权哥，今日头条iOS\"></a><a href=\"http://www.iseedog.com/\" target=\"_blank\" rel=\"noopener\">joyseedog：权哥，今日头条iOS</a></h1><h1 id=\"zhangdongxuan：微信iOS\"><a href=\"#zhangdongxuan：微信iOS\" class=\"headerlink\" title=\"zhangdongxuan：微信iOS\"></a><a href=\"http://zhangdongxuan.com\" target=\"_blank\" rel=\"noopener\">zhangdongxuan：微信iOS</a></h1><h1 id=\"Tsukasa：也是白学家，华为云java\"><a href=\"#Tsukasa：也是白学家，华为云java\" class=\"headerlink\" title=\"Tsukasa：也是白学家，华为云java\"></a><a href=\"http://tsukasa.moe/\" target=\"_blank\" rel=\"noopener\">Tsukasa：也是白学家，华为云java</a></h1><h1 id=\"Equim：Eq酱，C-、node-js，大神学弟，女装大佬\"><a href=\"#Equim：Eq酱，C-、node-js，大神学弟，女装大佬\" class=\"headerlink\" title=\"Equim：Eq酱，C#、node.js，大神学弟，女装大佬\"></a><a href=\"https://ekyu.moe\" target=\"_blank\" rel=\"noopener\">Equim：Eq酱，C#、node.js，大神学弟，女装大佬</a></h1><h1 id=\"AndyGu：豪哥，安卓开发\"><a href=\"#AndyGu：豪哥，安卓开发\" class=\"headerlink\" title=\"AndyGu：豪哥，安卓开发\"></a><a href=\"http://www.andygu.cn/\" target=\"_blank\" rel=\"noopener\">AndyGu：豪哥，安卓开发</a></h1><hr>\n<h1 id=\"一些组织\"><a href=\"#一些组织\" class=\"headerlink\" title=\"一些组织\"></a>一些组织</h1><h1 id=\"中南大学苹果实验室：大三时候作为第一个程序员加入的学校实验室\"><a href=\"#中南大学苹果实验室：大三时候作为第一个程序员加入的学校实验室\" class=\"headerlink\" title=\"中南大学苹果实验室：大三时候作为第一个程序员加入的学校实验室\"></a><a href=\"http://csuapple.com/\" target=\"_blank\" rel=\"noopener\">中南大学苹果实验室：大三时候作为第一个程序员加入的学校实验室</a></h1>"},{"title":"JavaScript工作原理：五种JavaScript代码的优化方式","url":"268.html","id":"268","date":"2019-06-12T07:45:02.000Z","_content":"\n在了解这些优化方式前，先强烈建议阅读本博客前两篇文章，前两篇是对V8原理的一个入门，因为这些优化方式，都是针对原理而引入的可行方式。\n\n对象属性的顺序\n-------\n\n始终以相同的顺序实例化对象属性，以便可以共享隐藏的类和随后优化的代码。\n```js\n    // bad\n    function Point(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    var a = new Point(1,2);\n    var b = new Point();  // 顺序不一致\n    b.x = 2;\n    b.y = 1;\n\n    // good\n    function Point(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    var a = new Point(1,2);\n    var b = new Point(2,1);\n```\n\n动态属性\n----\n\n在实例化之后向对象添加属性或者修改属性的类，都会修改隐藏类，使得优化无效。所以对象实例化时尽量添加好属性，并且尽量不再做对属性类型的修改。\n```js\n    // bad\n    function Point(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    var a = new Point(1,2);\n    var b = new Point(2,1);\n    b.z = 3; // 实例化后添加了属性\n    a.y = null // 实例化后修改了类型\n\n    // good\n    function Point(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    var a = new Point(1,2);\n    var b = new Point(2,1);\n```\n\n对象的方法\n-----\n\n对同一个类new出来的对象多次执行同一个方法，第一次后的执行速度会非常快，因为内联缓存。\n```js\n    // bad\n    function Rectangle(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    function Square(a) {\n        this.a = a;\n    }\n\n    var a = new Rectangle(1, 2);\n    var b = new Square(2);\n    function SquareArea(square) {\n        var a = square.a;\n        return a * a;\n    }\n    function RectangleArea(rectangle) {\n        var x = rectangle.x;\n        var y = rectangle.y;\n        return x * y;\n    }\n\n    // good\n    function Rectangle(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    function Area (rectangle) {\n        var x = rectangle.x;\n        var y = rectangle.y;\n        return x * y;\n    }\n    var a = new Rectangle(1, 2);\n    var b = new Rectangle(2, 2);\n    var b = new Rectangle(5, 6);\n    Area(a);\n    Area(b);\n    Area(c);\n```\n\n内存回收\n----\n\n有效使用内存总是可以提高代码的性能，对于使用了垃圾回收的语言来说，并不意味着有了垃圾回收就没有内存泄漏的问题，如果及时回收不再使用的内存，可以避免内存泄漏的同时减轻编译器的工作。简单的做法就是把不再使用的对象设置为null，以及通过delete关键字，来删除对象的一个属性。\n\n数组\n--\n\n避免稀疏数组，其中键值不是自增的数字。并没有存储所有元素的稀疏数组是哈希表。这种数组中的元素访问开销较高。另外，尽量避免预分配大数组。最好是按需增长。最后，不要删除数组中间的元素，即使用队列和栈方法删除。这会使键值变得稀疏。\n```js\n    var a = [];\n    a[0] = 1;\n    a[5] = 2; // 稀疏数组\n\n    var b = [];\n    b.length = 10000; // 预先分配了大数组\n\n    var c = [1,2,3,4,5];\n    c[3] = undefined; // 删除后变为稀疏数组\n```\n\n数据表示\n----\n\nV8 使用 32 位表示对象和数值。由于数值是 31 位的，它使用了一位来区分它是一个对象（flag = 1）还是一个称为 SMI（SMall Integer）整数（flag = 0）。那么，如果一个数值大于 31 位，V8会将该数字装箱，把它变成一个双精度数，并创建一个新的对象来存放该数字。尽可能使用 31 位有符号数字，以避免对 JS 对象的高开销的装箱操作。 V8 的简单数据存放在句柄，句柄的操作是非常快的，而对大整数和大浮点数会使用堆，因为大整数是不可避免的，所以能使用整数的，尽量不要使用浮点数。","source":"_posts/e4-ba-94-e7-a7-8djavascript-e4-bb-a3-e7-a0-81-e7-9a-84-e4-bc-98-e5-8c-96-e6-96-b9-e5-bc-8f.md","raw":"---\ntitle: JavaScript工作原理：五种JavaScript代码的优化方式\ntags:\n  - JavaScript\nurl: 268.html\nid: 268\ncategories:\n  - node.js\n  - 前端\ndate: 2019-06-12 15:45:02\n---\n\n在了解这些优化方式前，先强烈建议阅读本博客前两篇文章，前两篇是对V8原理的一个入门，因为这些优化方式，都是针对原理而引入的可行方式。\n\n对象属性的顺序\n-------\n\n始终以相同的顺序实例化对象属性，以便可以共享隐藏的类和随后优化的代码。\n```js\n    // bad\n    function Point(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    var a = new Point(1,2);\n    var b = new Point();  // 顺序不一致\n    b.x = 2;\n    b.y = 1;\n\n    // good\n    function Point(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    var a = new Point(1,2);\n    var b = new Point(2,1);\n```\n\n动态属性\n----\n\n在实例化之后向对象添加属性或者修改属性的类，都会修改隐藏类，使得优化无效。所以对象实例化时尽量添加好属性，并且尽量不再做对属性类型的修改。\n```js\n    // bad\n    function Point(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    var a = new Point(1,2);\n    var b = new Point(2,1);\n    b.z = 3; // 实例化后添加了属性\n    a.y = null // 实例化后修改了类型\n\n    // good\n    function Point(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    var a = new Point(1,2);\n    var b = new Point(2,1);\n```\n\n对象的方法\n-----\n\n对同一个类new出来的对象多次执行同一个方法，第一次后的执行速度会非常快，因为内联缓存。\n```js\n    // bad\n    function Rectangle(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    function Square(a) {\n        this.a = a;\n    }\n\n    var a = new Rectangle(1, 2);\n    var b = new Square(2);\n    function SquareArea(square) {\n        var a = square.a;\n        return a * a;\n    }\n    function RectangleArea(rectangle) {\n        var x = rectangle.x;\n        var y = rectangle.y;\n        return x * y;\n    }\n\n    // good\n    function Rectangle(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    function Area (rectangle) {\n        var x = rectangle.x;\n        var y = rectangle.y;\n        return x * y;\n    }\n    var a = new Rectangle(1, 2);\n    var b = new Rectangle(2, 2);\n    var b = new Rectangle(5, 6);\n    Area(a);\n    Area(b);\n    Area(c);\n```\n\n内存回收\n----\n\n有效使用内存总是可以提高代码的性能，对于使用了垃圾回收的语言来说，并不意味着有了垃圾回收就没有内存泄漏的问题，如果及时回收不再使用的内存，可以避免内存泄漏的同时减轻编译器的工作。简单的做法就是把不再使用的对象设置为null，以及通过delete关键字，来删除对象的一个属性。\n\n数组\n--\n\n避免稀疏数组，其中键值不是自增的数字。并没有存储所有元素的稀疏数组是哈希表。这种数组中的元素访问开销较高。另外，尽量避免预分配大数组。最好是按需增长。最后，不要删除数组中间的元素，即使用队列和栈方法删除。这会使键值变得稀疏。\n```js\n    var a = [];\n    a[0] = 1;\n    a[5] = 2; // 稀疏数组\n\n    var b = [];\n    b.length = 10000; // 预先分配了大数组\n\n    var c = [1,2,3,4,5];\n    c[3] = undefined; // 删除后变为稀疏数组\n```\n\n数据表示\n----\n\nV8 使用 32 位表示对象和数值。由于数值是 31 位的，它使用了一位来区分它是一个对象（flag = 1）还是一个称为 SMI（SMall Integer）整数（flag = 0）。那么，如果一个数值大于 31 位，V8会将该数字装箱，把它变成一个双精度数，并创建一个新的对象来存放该数字。尽可能使用 31 位有符号数字，以避免对 JS 对象的高开销的装箱操作。 V8 的简单数据存放在句柄，句柄的操作是非常快的，而对大整数和大浮点数会使用堆，因为大整数是不可避免的，所以能使用整数的，尽量不要使用浮点数。","slug":"e4-ba-94-e7-a7-8djavascript-e4-bb-a3-e7-a0-81-e7-9a-84-e4-bc-98-e5-8c-96-e6-96-b9-e5-bc-8f","published":1,"updated":"2020-05-19T09:24:28.402Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts7xm000mzmz81o9q71t3","content":"<p>在了解这些优化方式前，先强烈建议阅读本博客前两篇文章，前两篇是对V8原理的一个入门，因为这些优化方式，都是针对原理而引入的可行方式。</p>\n<h2 id=\"对象属性的顺序\"><a href=\"#对象属性的顺序\" class=\"headerlink\" title=\"对象属性的顺序\"></a>对象属性的顺序</h2><p>始终以相同的顺序实例化对象属性，以便可以共享隐藏的类和随后优化的代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// bad</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Point</span>(<span class=\"hljs-params\">x, y</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.x = x;<br>    <span class=\"hljs-keyword\">this</span>.y = y;<br>&#125;<br><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-keyword\">new</span> Point(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>);<br><span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-keyword\">new</span> Point();  <span class=\"hljs-comment\">// 顺序不一致</span><br>b.x = <span class=\"hljs-number\">2</span>;<br>b.y = <span class=\"hljs-number\">1</span>;<br><br><span class=\"hljs-comment\">// good</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Point</span>(<span class=\"hljs-params\">x, y</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.x = x;<br>    <span class=\"hljs-keyword\">this</span>.y = y;<br>&#125;<br><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-keyword\">new</span> Point(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>);<br><span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-keyword\">new</span> Point(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"动态属性\"><a href=\"#动态属性\" class=\"headerlink\" title=\"动态属性\"></a>动态属性</h2><p>在实例化之后向对象添加属性或者修改属性的类，都会修改隐藏类，使得优化无效。所以对象实例化时尽量添加好属性，并且尽量不再做对属性类型的修改。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// bad</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Point</span>(<span class=\"hljs-params\">x, y</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.x = x;<br>    <span class=\"hljs-keyword\">this</span>.y = y;<br>&#125;<br><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-keyword\">new</span> Point(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>);<br><span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-keyword\">new</span> Point(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>);<br>b.z = <span class=\"hljs-number\">3</span>; <span class=\"hljs-comment\">// 实例化后添加了属性</span><br>a.y = <span class=\"hljs-literal\">null</span> <span class=\"hljs-comment\">// 实例化后修改了类型</span><br><br><span class=\"hljs-comment\">// good</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Point</span>(<span class=\"hljs-params\">x, y</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.x = x;<br>    <span class=\"hljs-keyword\">this</span>.y = y;<br>&#125;<br><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-keyword\">new</span> Point(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>);<br><span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-keyword\">new</span> Point(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"对象的方法\"><a href=\"#对象的方法\" class=\"headerlink\" title=\"对象的方法\"></a>对象的方法</h2><p>对同一个类new出来的对象多次执行同一个方法，第一次后的执行速度会非常快，因为内联缓存。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// bad</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Rectangle</span>(<span class=\"hljs-params\">x, y</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.x = x;<br>    <span class=\"hljs-keyword\">this</span>.y = y;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Square</span>(<span class=\"hljs-params\">a</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.a = a;<br>&#125;<br><br><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-keyword\">new</span> Rectangle(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);<br><span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-keyword\">new</span> Square(<span class=\"hljs-number\">2</span>);<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">SquareArea</span>(<span class=\"hljs-params\">square</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">var</span> a = square.a;<br>    <span class=\"hljs-keyword\">return</span> a * a;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">RectangleArea</span>(<span class=\"hljs-params\">rectangle</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">var</span> x = rectangle.x;<br>    <span class=\"hljs-keyword\">var</span> y = rectangle.y;<br>    <span class=\"hljs-keyword\">return</span> x * y;<br>&#125;<br><br><span class=\"hljs-comment\">// good</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Rectangle</span>(<span class=\"hljs-params\">x, y</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.x = x;<br>    <span class=\"hljs-keyword\">this</span>.y = y;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Area</span> (<span class=\"hljs-params\">rectangle</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">var</span> x = rectangle.x;<br>    <span class=\"hljs-keyword\">var</span> y = rectangle.y;<br>    <span class=\"hljs-keyword\">return</span> x * y;<br>&#125;<br><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-keyword\">new</span> Rectangle(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);<br><span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-keyword\">new</span> Rectangle(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>);<br><span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-keyword\">new</span> Rectangle(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>);<br>Area(a);<br>Area(b);<br>Area(c);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"内存回收\"><a href=\"#内存回收\" class=\"headerlink\" title=\"内存回收\"></a>内存回收</h2><p>有效使用内存总是可以提高代码的性能，对于使用了垃圾回收的语言来说，并不意味着有了垃圾回收就没有内存泄漏的问题，如果及时回收不再使用的内存，可以避免内存泄漏的同时减轻编译器的工作。简单的做法就是把不再使用的对象设置为null，以及通过delete关键字，来删除对象的一个属性。</p>\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><p>避免稀疏数组，其中键值不是自增的数字。并没有存储所有元素的稀疏数组是哈希表。这种数组中的元素访问开销较高。另外，尽量避免预分配大数组。最好是按需增长。最后，不要删除数组中间的元素，即使用队列和栈方法删除。这会使键值变得稀疏。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> a = [];<br>a[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;<br>a[<span class=\"hljs-number\">5</span>] = <span class=\"hljs-number\">2</span>; <span class=\"hljs-comment\">// 稀疏数组</span><br><br><span class=\"hljs-keyword\">var</span> b = [];<br>b.length = <span class=\"hljs-number\">10000</span>; <span class=\"hljs-comment\">// 预先分配了大数组</span><br><br><span class=\"hljs-keyword\">var</span> c = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>];<br>c[<span class=\"hljs-number\">3</span>] = <span class=\"hljs-literal\">undefined</span>; <span class=\"hljs-comment\">// 删除后变为稀疏数组</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"数据表示\"><a href=\"#数据表示\" class=\"headerlink\" title=\"数据表示\"></a>数据表示</h2><p>V8 使用 32 位表示对象和数值。由于数值是 31 位的，它使用了一位来区分它是一个对象（flag = 1）还是一个称为 SMI（SMall Integer）整数（flag = 0）。那么，如果一个数值大于 31 位，V8会将该数字装箱，把它变成一个双精度数，并创建一个新的对象来存放该数字。尽可能使用 31 位有符号数字，以避免对 JS 对象的高开销的装箱操作。 V8 的简单数据存放在句柄，句柄的操作是非常快的，而对大整数和大浮点数会使用堆，因为大整数是不可避免的，所以能使用整数的，尽量不要使用浮点数。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在了解这些优化方式前，先强烈建议阅读本博客前两篇文章，前两篇是对V8原理的一个入门，因为这些优化方式，都是针对原理而引入的可行方式。</p>\n<h2 id=\"对象属性的顺序\"><a href=\"#对象属性的顺序\" class=\"headerlink\" title=\"对象属性的顺序\"></a>对象属性的顺序</h2><p>始终以相同的顺序实例化对象属性，以便可以共享隐藏的类和随后优化的代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// bad</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Point</span>(<span class=\"hljs-params\">x, y</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.x = x;<br>    <span class=\"hljs-keyword\">this</span>.y = y;<br>&#125;<br><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-keyword\">new</span> Point(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>);<br><span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-keyword\">new</span> Point();  <span class=\"hljs-comment\">// 顺序不一致</span><br>b.x = <span class=\"hljs-number\">2</span>;<br>b.y = <span class=\"hljs-number\">1</span>;<br><br><span class=\"hljs-comment\">// good</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Point</span>(<span class=\"hljs-params\">x, y</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.x = x;<br>    <span class=\"hljs-keyword\">this</span>.y = y;<br>&#125;<br><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-keyword\">new</span> Point(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>);<br><span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-keyword\">new</span> Point(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"动态属性\"><a href=\"#动态属性\" class=\"headerlink\" title=\"动态属性\"></a>动态属性</h2><p>在实例化之后向对象添加属性或者修改属性的类，都会修改隐藏类，使得优化无效。所以对象实例化时尽量添加好属性，并且尽量不再做对属性类型的修改。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// bad</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Point</span>(<span class=\"hljs-params\">x, y</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.x = x;<br>    <span class=\"hljs-keyword\">this</span>.y = y;<br>&#125;<br><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-keyword\">new</span> Point(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>);<br><span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-keyword\">new</span> Point(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>);<br>b.z = <span class=\"hljs-number\">3</span>; <span class=\"hljs-comment\">// 实例化后添加了属性</span><br>a.y = <span class=\"hljs-literal\">null</span> <span class=\"hljs-comment\">// 实例化后修改了类型</span><br><br><span class=\"hljs-comment\">// good</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Point</span>(<span class=\"hljs-params\">x, y</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.x = x;<br>    <span class=\"hljs-keyword\">this</span>.y = y;<br>&#125;<br><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-keyword\">new</span> Point(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>);<br><span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-keyword\">new</span> Point(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"对象的方法\"><a href=\"#对象的方法\" class=\"headerlink\" title=\"对象的方法\"></a>对象的方法</h2><p>对同一个类new出来的对象多次执行同一个方法，第一次后的执行速度会非常快，因为内联缓存。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// bad</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Rectangle</span>(<span class=\"hljs-params\">x, y</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.x = x;<br>    <span class=\"hljs-keyword\">this</span>.y = y;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Square</span>(<span class=\"hljs-params\">a</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.a = a;<br>&#125;<br><br><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-keyword\">new</span> Rectangle(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);<br><span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-keyword\">new</span> Square(<span class=\"hljs-number\">2</span>);<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">SquareArea</span>(<span class=\"hljs-params\">square</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">var</span> a = square.a;<br>    <span class=\"hljs-keyword\">return</span> a * a;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">RectangleArea</span>(<span class=\"hljs-params\">rectangle</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">var</span> x = rectangle.x;<br>    <span class=\"hljs-keyword\">var</span> y = rectangle.y;<br>    <span class=\"hljs-keyword\">return</span> x * y;<br>&#125;<br><br><span class=\"hljs-comment\">// good</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Rectangle</span>(<span class=\"hljs-params\">x, y</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.x = x;<br>    <span class=\"hljs-keyword\">this</span>.y = y;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Area</span> (<span class=\"hljs-params\">rectangle</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">var</span> x = rectangle.x;<br>    <span class=\"hljs-keyword\">var</span> y = rectangle.y;<br>    <span class=\"hljs-keyword\">return</span> x * y;<br>&#125;<br><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-keyword\">new</span> Rectangle(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);<br><span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-keyword\">new</span> Rectangle(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>);<br><span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-keyword\">new</span> Rectangle(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>);<br>Area(a);<br>Area(b);<br>Area(c);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"内存回收\"><a href=\"#内存回收\" class=\"headerlink\" title=\"内存回收\"></a>内存回收</h2><p>有效使用内存总是可以提高代码的性能，对于使用了垃圾回收的语言来说，并不意味着有了垃圾回收就没有内存泄漏的问题，如果及时回收不再使用的内存，可以避免内存泄漏的同时减轻编译器的工作。简单的做法就是把不再使用的对象设置为null，以及通过delete关键字，来删除对象的一个属性。</p>\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><p>避免稀疏数组，其中键值不是自增的数字。并没有存储所有元素的稀疏数组是哈希表。这种数组中的元素访问开销较高。另外，尽量避免预分配大数组。最好是按需增长。最后，不要删除数组中间的元素，即使用队列和栈方法删除。这会使键值变得稀疏。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> a = [];<br>a[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;<br>a[<span class=\"hljs-number\">5</span>] = <span class=\"hljs-number\">2</span>; <span class=\"hljs-comment\">// 稀疏数组</span><br><br><span class=\"hljs-keyword\">var</span> b = [];<br>b.length = <span class=\"hljs-number\">10000</span>; <span class=\"hljs-comment\">// 预先分配了大数组</span><br><br><span class=\"hljs-keyword\">var</span> c = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>];<br>c[<span class=\"hljs-number\">3</span>] = <span class=\"hljs-literal\">undefined</span>; <span class=\"hljs-comment\">// 删除后变为稀疏数组</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"数据表示\"><a href=\"#数据表示\" class=\"headerlink\" title=\"数据表示\"></a>数据表示</h2><p>V8 使用 32 位表示对象和数值。由于数值是 31 位的，它使用了一位来区分它是一个对象（flag = 1）还是一个称为 SMI（SMall Integer）整数（flag = 0）。那么，如果一个数值大于 31 位，V8会将该数字装箱，把它变成一个双精度数，并创建一个新的对象来存放该数字。尽可能使用 31 位有符号数字，以避免对 JS 对象的高开销的装箱操作。 V8 的简单数据存放在句柄，句柄的操作是非常快的，而对大整数和大浮点数会使用堆，因为大整数是不可避免的，所以能使用整数的，尽量不要使用浮点数。</p>\n"},{"title":"使用gulp减少HTTP请求","url":"40.html","id":"40","date":"2017-06-18T14:42:56.000Z","_content":"\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0026.jpg)\n\n> 游览器与服务器每进行一个http连接，需要进行TCP三次握手的确认，如果是https更是多出了7次安全确认来完成连接。每个http报文中，又有很多重复的多余信息，因此减少http请求，是最为可行的前端优化方式之一。以下是现代前端中，常用的减少http请求的方式及其实现。\n\n# CSS Sprites\n\nCSS Sprites，又叫雪碧图或者CSS精灵，是指把多个图片合并在一张图片上，然后通过`background-positon`属性制定CSS prites偏移量。 因为实现很简单，这个就不粘代码了。<br> 总之雪碧图可以让项目变得：更少的图片，干净的标签，更少的HTTP请求，甚至更小的文件（因为图片压缩编码的原因，合并后的文件往往比分开的文件总和要小，空白区域并不会增加额外的大小）。总而言之使用CSS Sprites可以提升网站性能。\n\n# 合并js脚本与css样式表\n\n每多合并一个js脚本或者css样式表，就可以减少一次http请求，进而提升性能。对于现代前端而言，合并脚本与样式表的工作，往往交给自动化工具完成，我常用的是Gulp，下边是使用Gulp自动化工具进行压缩的配置文件gulpfile.js的示例：\n\n    const gulp = require('gulp');\n    const concat = require('gulp-concat');\n    const concatCss = require('gulp-concat-css');\n\n    gulp.task('testConcat', function () {\n        gulp.src('src/js/*.js')\n            .pipe(concat('main.js'))        //合并后的文件名\n            .pipe(gulp.dest('dist/js'));\n    });\n\n    gulp.task('testConcatCss', function () {\n      return gulp.src('assets/**/*.css')\n        .pipe(concatCss(\"styles/bundle.css\"))\n        .pipe(gulp.dest('out/'));\n    });\n\n\n附gulp中文文档：[www.gulpjs.com.cn](www.gulpjs.com.cn)\n\n# 将小图片进行base64编码后写入css\n\n用编码工具，将小图片进行base64编码，然后将编码后的数据拷贝出来，放在background-image: url的位置。该方法也同样减少了http请求，但会增大体积，故不适合于大图片仅适合于小图片。实现同样很简单，就不写了。\n\n# 采用icon-font的方式引入矢量图标\n\n实现很简单，把svg丢到一个自动化的工具里就可以打包出来了，使用通过css的类来使用，相信用过bootstrap等此类响应式框架的同学都知道。我常用的打包网站是：https://icomoon.io/ 。个人感觉，这是最适合的对图片的处理方式，未来小图片将全部矢量化。 <br>","source":"_posts/e4-bd-bf-e7-94-a8gulp-e5-87-8f-e5-b0-91http-e8-af-b7-e6-b1-82.md","raw":"---\ntitle: 使用gulp减少HTTP请求\ntags:\n  - 前端\n  - 前端工程化\nurl: 40.html\nid: 40\ncategories:\n  - 前端\ndate: 2017-06-18 22:42:56\n---\n\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0026.jpg)\n\n> 游览器与服务器每进行一个http连接，需要进行TCP三次握手的确认，如果是https更是多出了7次安全确认来完成连接。每个http报文中，又有很多重复的多余信息，因此减少http请求，是最为可行的前端优化方式之一。以下是现代前端中，常用的减少http请求的方式及其实现。\n\n# CSS Sprites\n\nCSS Sprites，又叫雪碧图或者CSS精灵，是指把多个图片合并在一张图片上，然后通过`background-positon`属性制定CSS prites偏移量。 因为实现很简单，这个就不粘代码了。<br> 总之雪碧图可以让项目变得：更少的图片，干净的标签，更少的HTTP请求，甚至更小的文件（因为图片压缩编码的原因，合并后的文件往往比分开的文件总和要小，空白区域并不会增加额外的大小）。总而言之使用CSS Sprites可以提升网站性能。\n\n# 合并js脚本与css样式表\n\n每多合并一个js脚本或者css样式表，就可以减少一次http请求，进而提升性能。对于现代前端而言，合并脚本与样式表的工作，往往交给自动化工具完成，我常用的是Gulp，下边是使用Gulp自动化工具进行压缩的配置文件gulpfile.js的示例：\n\n    const gulp = require('gulp');\n    const concat = require('gulp-concat');\n    const concatCss = require('gulp-concat-css');\n\n    gulp.task('testConcat', function () {\n        gulp.src('src/js/*.js')\n            .pipe(concat('main.js'))        //合并后的文件名\n            .pipe(gulp.dest('dist/js'));\n    });\n\n    gulp.task('testConcatCss', function () {\n      return gulp.src('assets/**/*.css')\n        .pipe(concatCss(\"styles/bundle.css\"))\n        .pipe(gulp.dest('out/'));\n    });\n\n\n附gulp中文文档：[www.gulpjs.com.cn](www.gulpjs.com.cn)\n\n# 将小图片进行base64编码后写入css\n\n用编码工具，将小图片进行base64编码，然后将编码后的数据拷贝出来，放在background-image: url的位置。该方法也同样减少了http请求，但会增大体积，故不适合于大图片仅适合于小图片。实现同样很简单，就不写了。\n\n# 采用icon-font的方式引入矢量图标\n\n实现很简单，把svg丢到一个自动化的工具里就可以打包出来了，使用通过css的类来使用，相信用过bootstrap等此类响应式框架的同学都知道。我常用的打包网站是：https://icomoon.io/ 。个人感觉，这是最适合的对图片的处理方式，未来小图片将全部矢量化。 <br>","slug":"e4-bd-bf-e7-94-a8gulp-e5-87-8f-e5-b0-91http-e8-af-b7-e6-b1-82","published":1,"updated":"2020-05-19T08:51:28.571Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts7xp000ozmz8f7lg7csh","content":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0026.jpg\" alt=\"\"></p>\n<blockquote>\n<p>游览器与服务器每进行一个http连接，需要进行TCP三次握手的确认，如果是https更是多出了7次安全确认来完成连接。每个http报文中，又有很多重复的多余信息，因此减少http请求，是最为可行的前端优化方式之一。以下是现代前端中，常用的减少http请求的方式及其实现。</p>\n</blockquote>\n<h1 id=\"CSS-Sprites\"><a href=\"#CSS-Sprites\" class=\"headerlink\" title=\"CSS Sprites\"></a>CSS Sprites</h1><p>CSS Sprites，又叫雪碧图或者CSS精灵，是指把多个图片合并在一张图片上，然后通过<code>background-positon</code>属性制定CSS prites偏移量。 因为实现很简单，这个就不粘代码了。<br> 总之雪碧图可以让项目变得：更少的图片，干净的标签，更少的HTTP请求，甚至更小的文件（因为图片压缩编码的原因，合并后的文件往往比分开的文件总和要小，空白区域并不会增加额外的大小）。总而言之使用CSS Sprites可以提升网站性能。</p>\n<h1 id=\"合并js脚本与css样式表\"><a href=\"#合并js脚本与css样式表\" class=\"headerlink\" title=\"合并js脚本与css样式表\"></a>合并js脚本与css样式表</h1><p>每多合并一个js脚本或者css样式表，就可以减少一次http请求，进而提升性能。对于现代前端而言，合并脚本与样式表的工作，往往交给自动化工具完成，我常用的是Gulp，下边是使用Gulp自动化工具进行压缩的配置文件gulpfile.js的示例：</p>\n<pre><code>const gulp = require(&apos;gulp&apos;);\nconst concat = require(&apos;gulp-concat&apos;);\nconst concatCss = require(&apos;gulp-concat-css&apos;);\n\ngulp.task(&apos;testConcat&apos;, function () {\n    gulp.src(&apos;src/js/*.js&apos;)\n        .pipe(concat(&apos;main.js&apos;))        //合并后的文件名\n        .pipe(gulp.dest(&apos;dist/js&apos;));\n});\n\ngulp.task(&apos;testConcatCss&apos;, function () {\n  return gulp.src(&apos;assets/**/*.css&apos;)\n    .pipe(concatCss(&quot;styles/bundle.css&quot;))\n    .pipe(gulp.dest(&apos;out/&apos;));\n});</code></pre><p>附gulp中文文档：<a href=\"www.gulpjs.com.cn\">www.gulpjs.com.cn</a></p>\n<h1 id=\"将小图片进行base64编码后写入css\"><a href=\"#将小图片进行base64编码后写入css\" class=\"headerlink\" title=\"将小图片进行base64编码后写入css\"></a>将小图片进行base64编码后写入css</h1><p>用编码工具，将小图片进行base64编码，然后将编码后的数据拷贝出来，放在background-image: url的位置。该方法也同样减少了http请求，但会增大体积，故不适合于大图片仅适合于小图片。实现同样很简单，就不写了。</p>\n<h1 id=\"采用icon-font的方式引入矢量图标\"><a href=\"#采用icon-font的方式引入矢量图标\" class=\"headerlink\" title=\"采用icon-font的方式引入矢量图标\"></a>采用icon-font的方式引入矢量图标</h1><p>实现很简单，把svg丢到一个自动化的工具里就可以打包出来了，使用通过css的类来使用，相信用过bootstrap等此类响应式框架的同学都知道。我常用的打包网站是：<a href=\"https://icomoon.io/\" target=\"_blank\" rel=\"noopener\">https://icomoon.io/</a> 。个人感觉，这是最适合的对图片的处理方式，未来小图片将全部矢量化。 <br></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0026.jpg\" alt=\"\"></p>\n<blockquote>\n<p>游览器与服务器每进行一个http连接，需要进行TCP三次握手的确认，如果是https更是多出了7次安全确认来完成连接。每个http报文中，又有很多重复的多余信息，因此减少http请求，是最为可行的前端优化方式之一。以下是现代前端中，常用的减少http请求的方式及其实现。</p>\n</blockquote>\n<h1 id=\"CSS-Sprites\"><a href=\"#CSS-Sprites\" class=\"headerlink\" title=\"CSS Sprites\"></a>CSS Sprites</h1><p>CSS Sprites，又叫雪碧图或者CSS精灵，是指把多个图片合并在一张图片上，然后通过<code>background-positon</code>属性制定CSS prites偏移量。 因为实现很简单，这个就不粘代码了。<br> 总之雪碧图可以让项目变得：更少的图片，干净的标签，更少的HTTP请求，甚至更小的文件（因为图片压缩编码的原因，合并后的文件往往比分开的文件总和要小，空白区域并不会增加额外的大小）。总而言之使用CSS Sprites可以提升网站性能。</p>\n<h1 id=\"合并js脚本与css样式表\"><a href=\"#合并js脚本与css样式表\" class=\"headerlink\" title=\"合并js脚本与css样式表\"></a>合并js脚本与css样式表</h1><p>每多合并一个js脚本或者css样式表，就可以减少一次http请求，进而提升性能。对于现代前端而言，合并脚本与样式表的工作，往往交给自动化工具完成，我常用的是Gulp，下边是使用Gulp自动化工具进行压缩的配置文件gulpfile.js的示例：</p>\n<pre><code>const gulp = require(&apos;gulp&apos;);\nconst concat = require(&apos;gulp-concat&apos;);\nconst concatCss = require(&apos;gulp-concat-css&apos;);\n\ngulp.task(&apos;testConcat&apos;, function () {\n    gulp.src(&apos;src/js/*.js&apos;)\n        .pipe(concat(&apos;main.js&apos;))        //合并后的文件名\n        .pipe(gulp.dest(&apos;dist/js&apos;));\n});\n\ngulp.task(&apos;testConcatCss&apos;, function () {\n  return gulp.src(&apos;assets/**/*.css&apos;)\n    .pipe(concatCss(&quot;styles/bundle.css&quot;))\n    .pipe(gulp.dest(&apos;out/&apos;));\n});</code></pre><p>附gulp中文文档：<a href=\"www.gulpjs.com.cn\">www.gulpjs.com.cn</a></p>\n<h1 id=\"将小图片进行base64编码后写入css\"><a href=\"#将小图片进行base64编码后写入css\" class=\"headerlink\" title=\"将小图片进行base64编码后写入css\"></a>将小图片进行base64编码后写入css</h1><p>用编码工具，将小图片进行base64编码，然后将编码后的数据拷贝出来，放在background-image: url的位置。该方法也同样减少了http请求，但会增大体积，故不适合于大图片仅适合于小图片。实现同样很简单，就不写了。</p>\n<h1 id=\"采用icon-font的方式引入矢量图标\"><a href=\"#采用icon-font的方式引入矢量图标\" class=\"headerlink\" title=\"采用icon-font的方式引入矢量图标\"></a>采用icon-font的方式引入矢量图标</h1><p>实现很简单，把svg丢到一个自动化的工具里就可以打包出来了，使用通过css的类来使用，相信用过bootstrap等此类响应式框架的同学都知道。我常用的打包网站是：<a href=\"https://icomoon.io/\" target=\"_blank\" rel=\"noopener\">https://icomoon.io/</a> 。个人感觉，这是最适合的对图片的处理方式，未来小图片将全部矢量化。 <br></p>\n"},{"title":"使用javascript描述数据结构——栈和队列","url":"206.html","id":"206","date":"2018-06-28T14:35:46.000Z","_content":"\n栈\n-\n\n栈是一种先入后出的数据结构：从末尾添加、从末尾删除，末尾的元素成为栈顶，最先进入的元素称为栈底。 js的数组可以用来模拟数据结构中的栈。\n```js\n    class Stack {\n\n        constructor() {\n            this.items = [];\n        }\n\n        // 入栈：推入一个元素\n        push(element) {\n             this.items.push(element);\n        }\n\n        // 出栈：移除顶部元素\n        pop() {\n            return this.items.pop();\n        }\n\n        // 获取栈底元素\n        get peek() {\n            return this.items[this.items.length - 1];\n        }\n\n        // 是否为空栈\n        get isEmpty() {\n            return !this.items.length;\n        }\n\n        // 获取长度\n        get size() {\n            return this.items.length;\n        }\n\n        // 清空栈\n        clear() {\n            this.items = [];\n        }\n\n        // 打印栈数据\n        print() {\n            console.log(this.items.toString());\n        }\n    }\n```\n\n队列\n--\n\n队列是一种遵循先进先出的数据机构；队列在尾部添加新元素，从头部移除元素。最新添加的元素必须排在队列的末尾。\n```js\n    class Queue {\n\n        constructor(items) {\n            this.items = items || [];\n        }\n\n            // 添加元素\n        enqueue(element){\n            this.items.push(element);\n        }\n\n            // 删除元素\n        dequeue(){\n            return this.items.shift();\n        }\n\n            // 返回第一个元素\n        front(){\n            return this.items[0];\n        }\n\n            // 清空队列\n        clear(){\n            this.items = [];\n        }\n\n            // 队列大小\n        get size(){\n            return this.items.length;\n        }\n\n            // 是否为空\n        get isEmpty(){\n            return !this.items.length;\n        }\n\n            // 打印\n        print() {\n            console.log(this.items.toString());\n        }\n    }\n```","source":"_posts/e4-bd-bf-e7-94-a8javascript-e6-8f-8f-e8-bf-b0-e6-95-b0-e6-8d-ae-e7-bb-93-e6-9e-84-e6-a0-88-e5-92-8c-e9-98-9f-e5-88-97.md","raw":"---\ntitle: 使用javascript描述数据结构——栈和队列\ntags:\n  - JavaScript\n  - 数据结构\nurl: 206.html\nid: 206\ncategories:\n  - 算法\ndate: 2018-06-28 22:35:46\n---\n\n栈\n-\n\n栈是一种先入后出的数据结构：从末尾添加、从末尾删除，末尾的元素成为栈顶，最先进入的元素称为栈底。 js的数组可以用来模拟数据结构中的栈。\n```js\n    class Stack {\n\n        constructor() {\n            this.items = [];\n        }\n\n        // 入栈：推入一个元素\n        push(element) {\n             this.items.push(element);\n        }\n\n        // 出栈：移除顶部元素\n        pop() {\n            return this.items.pop();\n        }\n\n        // 获取栈底元素\n        get peek() {\n            return this.items[this.items.length - 1];\n        }\n\n        // 是否为空栈\n        get isEmpty() {\n            return !this.items.length;\n        }\n\n        // 获取长度\n        get size() {\n            return this.items.length;\n        }\n\n        // 清空栈\n        clear() {\n            this.items = [];\n        }\n\n        // 打印栈数据\n        print() {\n            console.log(this.items.toString());\n        }\n    }\n```\n\n队列\n--\n\n队列是一种遵循先进先出的数据机构；队列在尾部添加新元素，从头部移除元素。最新添加的元素必须排在队列的末尾。\n```js\n    class Queue {\n\n        constructor(items) {\n            this.items = items || [];\n        }\n\n            // 添加元素\n        enqueue(element){\n            this.items.push(element);\n        }\n\n            // 删除元素\n        dequeue(){\n            return this.items.shift();\n        }\n\n            // 返回第一个元素\n        front(){\n            return this.items[0];\n        }\n\n            // 清空队列\n        clear(){\n            this.items = [];\n        }\n\n            // 队列大小\n        get size(){\n            return this.items.length;\n        }\n\n            // 是否为空\n        get isEmpty(){\n            return !this.items.length;\n        }\n\n            // 打印\n        print() {\n            console.log(this.items.toString());\n        }\n    }\n```","slug":"e4-bd-bf-e7-94-a8javascript-e6-8f-8f-e8-bf-b0-e6-95-b0-e6-8d-ae-e7-bb-93-e6-9e-84-e6-a0-88-e5-92-8c-e9-98-9f-e5-88-97","published":1,"updated":"2020-05-19T09:25:25.758Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts7xr000rzmz88fp28kgm","content":"<h2 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h2><p>栈是一种先入后出的数据结构：从末尾添加、从末尾删除，末尾的元素成为栈顶，最先进入的元素称为栈底。 js的数组可以用来模拟数据结构中的栈。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Stack</span> </span>&#123;<br><br>    <span class=\"hljs-keyword\">constructor</span>() &#123;<br>        <span class=\"hljs-keyword\">this</span>.items = [];<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 入栈：推入一个元素</span><br>    push(element) &#123;<br>         <span class=\"hljs-keyword\">this</span>.items.push(element);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 出栈：移除顶部元素</span><br>    pop() &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.items.pop();<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 获取栈底元素</span><br>    <span class=\"hljs-keyword\">get</span> peek() &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.items[<span class=\"hljs-keyword\">this</span>.items.length - <span class=\"hljs-number\">1</span>];<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 是否为空栈</span><br>    <span class=\"hljs-keyword\">get</span> isEmpty() &#123;<br>        <span class=\"hljs-keyword\">return</span> !<span class=\"hljs-keyword\">this</span>.items.length;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 获取长度</span><br>    <span class=\"hljs-keyword\">get</span> size() &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.items.length;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 清空栈</span><br>    clear() &#123;<br>        <span class=\"hljs-keyword\">this</span>.items = [];<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 打印栈数据</span><br>    print() &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.items.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h2><p>队列是一种遵循先进先出的数据机构；队列在尾部添加新元素，从头部移除元素。最新添加的元素必须排在队列的末尾。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Queue</span> </span>&#123;<br><br>    <span class=\"hljs-keyword\">constructor</span>(items) &#123;<br>        <span class=\"hljs-keyword\">this</span>.items = items || [];<br>    &#125;<br><br>        <span class=\"hljs-comment\">// 添加元素</span><br>    enqueue(element)&#123;<br>        <span class=\"hljs-keyword\">this</span>.items.push(element);<br>    &#125;<br><br>        <span class=\"hljs-comment\">// 删除元素</span><br>    dequeue()&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.items.shift();<br>    &#125;<br><br>        <span class=\"hljs-comment\">// 返回第一个元素</span><br>    front()&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.items[<span class=\"hljs-number\">0</span>];<br>    &#125;<br><br>        <span class=\"hljs-comment\">// 清空队列</span><br>    clear()&#123;<br>        <span class=\"hljs-keyword\">this</span>.items = [];<br>    &#125;<br><br>        <span class=\"hljs-comment\">// 队列大小</span><br>    <span class=\"hljs-keyword\">get</span> size()&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.items.length;<br>    &#125;<br><br>        <span class=\"hljs-comment\">// 是否为空</span><br>    <span class=\"hljs-keyword\">get</span> isEmpty()&#123;<br>        <span class=\"hljs-keyword\">return</span> !<span class=\"hljs-keyword\">this</span>.items.length;<br>    &#125;<br><br>        <span class=\"hljs-comment\">// 打印</span><br>    print() &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.items.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h2><p>栈是一种先入后出的数据结构：从末尾添加、从末尾删除，末尾的元素成为栈顶，最先进入的元素称为栈底。 js的数组可以用来模拟数据结构中的栈。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Stack</span> </span>&#123;<br><br>    <span class=\"hljs-keyword\">constructor</span>() &#123;<br>        <span class=\"hljs-keyword\">this</span>.items = [];<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 入栈：推入一个元素</span><br>    push(element) &#123;<br>         <span class=\"hljs-keyword\">this</span>.items.push(element);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 出栈：移除顶部元素</span><br>    pop() &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.items.pop();<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 获取栈底元素</span><br>    <span class=\"hljs-keyword\">get</span> peek() &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.items[<span class=\"hljs-keyword\">this</span>.items.length - <span class=\"hljs-number\">1</span>];<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 是否为空栈</span><br>    <span class=\"hljs-keyword\">get</span> isEmpty() &#123;<br>        <span class=\"hljs-keyword\">return</span> !<span class=\"hljs-keyword\">this</span>.items.length;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 获取长度</span><br>    <span class=\"hljs-keyword\">get</span> size() &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.items.length;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 清空栈</span><br>    clear() &#123;<br>        <span class=\"hljs-keyword\">this</span>.items = [];<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 打印栈数据</span><br>    print() &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.items.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h2><p>队列是一种遵循先进先出的数据机构；队列在尾部添加新元素，从头部移除元素。最新添加的元素必须排在队列的末尾。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Queue</span> </span>&#123;<br><br>    <span class=\"hljs-keyword\">constructor</span>(items) &#123;<br>        <span class=\"hljs-keyword\">this</span>.items = items || [];<br>    &#125;<br><br>        <span class=\"hljs-comment\">// 添加元素</span><br>    enqueue(element)&#123;<br>        <span class=\"hljs-keyword\">this</span>.items.push(element);<br>    &#125;<br><br>        <span class=\"hljs-comment\">// 删除元素</span><br>    dequeue()&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.items.shift();<br>    &#125;<br><br>        <span class=\"hljs-comment\">// 返回第一个元素</span><br>    front()&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.items[<span class=\"hljs-number\">0</span>];<br>    &#125;<br><br>        <span class=\"hljs-comment\">// 清空队列</span><br>    clear()&#123;<br>        <span class=\"hljs-keyword\">this</span>.items = [];<br>    &#125;<br><br>        <span class=\"hljs-comment\">// 队列大小</span><br>    <span class=\"hljs-keyword\">get</span> size()&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.items.length;<br>    &#125;<br><br>        <span class=\"hljs-comment\">// 是否为空</span><br>    <span class=\"hljs-keyword\">get</span> isEmpty()&#123;<br>        <span class=\"hljs-keyword\">return</span> !<span class=\"hljs-keyword\">this</span>.items.length;<br>    &#125;<br><br>        <span class=\"hljs-comment\">// 打印</span><br>    print() &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.items.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"使用Web Worker","url":"42.html","id":"42","date":"2017-06-28T14:48:00.000Z","_content":"\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0022.jpg)\n\n> js作为单线程的语言，无法同时运行多个处理程序，但面对一些不得不耗费资源才能完成的任务时，单线程弊端就显现出来，为了解决这个问题，Wob Worker应身而出：“Worker”是指执行代码的并行线程，可以在一个不与用户交互的独立环境中，就行一些耗资源任务的处理，与游览器文档中的js相当于多线程，比如图像处理等任务。Web Worker有效解决了js的缺点，同时是提升性能的一个方法之一：将耗资源的代码在worker中执行。\n\n# worker对象\n```js\n    //创建worker对象并执行\n    var worker = new Worker(\"js/decrypt.js\");\n\n    //添加事件处理程序，完成后给主线程发送信息时执行\n    worker.onmessage = function(e){\n        console.log('finash');\n    }\n\n    //发送信息给worker\n    worker.postMessage('file.txt');\n\n    //注册用来接收来自主线程信息的处理程序\n    worker.onmessage = function(e){\n        //从事件对象获取消息\n        var valueToDecrypt = e.data;\n        //进行操作\n        console.log('end');\n        //返回给主线程\n        postMessage(decryptedValue);\n    }\n```\n\n# Worker执行模型与作用域\n\nWorker线程从上到下执行代码与文件，如果Worker注册了onmessage事件，只要message事件可能触发，将永远不会退出。 一个Worker对象是运行在完全隔离的环境中，其作用域大于主线程所在的JavaScript全局对象，小于整个客户端的Window对象。","source":"_posts/e4-bd-bf-e7-94-a8web-worker.md","raw":"---\ntitle: 使用Web Worker\ntags:\n  - 前端优化\nurl: 42.html\nid: 42\ncategories:\n  - 前端\ndate: 2017-06-28 22:48:00\n---\n\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0022.jpg)\n\n> js作为单线程的语言，无法同时运行多个处理程序，但面对一些不得不耗费资源才能完成的任务时，单线程弊端就显现出来，为了解决这个问题，Wob Worker应身而出：“Worker”是指执行代码的并行线程，可以在一个不与用户交互的独立环境中，就行一些耗资源任务的处理，与游览器文档中的js相当于多线程，比如图像处理等任务。Web Worker有效解决了js的缺点，同时是提升性能的一个方法之一：将耗资源的代码在worker中执行。\n\n# worker对象\n```js\n    //创建worker对象并执行\n    var worker = new Worker(\"js/decrypt.js\");\n\n    //添加事件处理程序，完成后给主线程发送信息时执行\n    worker.onmessage = function(e){\n        console.log('finash');\n    }\n\n    //发送信息给worker\n    worker.postMessage('file.txt');\n\n    //注册用来接收来自主线程信息的处理程序\n    worker.onmessage = function(e){\n        //从事件对象获取消息\n        var valueToDecrypt = e.data;\n        //进行操作\n        console.log('end');\n        //返回给主线程\n        postMessage(decryptedValue);\n    }\n```\n\n# Worker执行模型与作用域\n\nWorker线程从上到下执行代码与文件，如果Worker注册了onmessage事件，只要message事件可能触发，将永远不会退出。 一个Worker对象是运行在完全隔离的环境中，其作用域大于主线程所在的JavaScript全局对象，小于整个客户端的Window对象。","slug":"e4-bd-bf-e7-94-a8web-worker","published":1,"updated":"2020-05-19T09:25:00.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts7xw000uzmz88l3f8ao8","content":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0022.jpg\" alt=\"\"></p>\n<blockquote>\n<p>js作为单线程的语言，无法同时运行多个处理程序，但面对一些不得不耗费资源才能完成的任务时，单线程弊端就显现出来，为了解决这个问题，Wob Worker应身而出：“Worker”是指执行代码的并行线程，可以在一个不与用户交互的独立环境中，就行一些耗资源任务的处理，与游览器文档中的js相当于多线程，比如图像处理等任务。Web Worker有效解决了js的缺点，同时是提升性能的一个方法之一：将耗资源的代码在worker中执行。</p>\n</blockquote>\n<h1 id=\"worker对象\"><a href=\"#worker对象\" class=\"headerlink\" title=\"worker对象\"></a>worker对象</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//创建worker对象并执行</span><br><span class=\"hljs-keyword\">var</span> worker = <span class=\"hljs-keyword\">new</span> Worker(<span class=\"hljs-string\">\"js/decrypt.js\"</span>);<br><br><span class=\"hljs-comment\">//添加事件处理程序，完成后给主线程发送信息时执行</span><br>worker.onmessage = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'finash'</span>);<br>&#125;<br><br><span class=\"hljs-comment\">//发送信息给worker</span><br>worker.postMessage(<span class=\"hljs-string\">'file.txt'</span>);<br><br><span class=\"hljs-comment\">//注册用来接收来自主线程信息的处理程序</span><br>worker.onmessage = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>&#123;<br>    <span class=\"hljs-comment\">//从事件对象获取消息</span><br>    <span class=\"hljs-keyword\">var</span> valueToDecrypt = e.data;<br>    <span class=\"hljs-comment\">//进行操作</span><br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'end'</span>);<br>    <span class=\"hljs-comment\">//返回给主线程</span><br>    postMessage(decryptedValue);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"Worker执行模型与作用域\"><a href=\"#Worker执行模型与作用域\" class=\"headerlink\" title=\"Worker执行模型与作用域\"></a>Worker执行模型与作用域</h1><p>Worker线程从上到下执行代码与文件，如果Worker注册了onmessage事件，只要message事件可能触发，将永远不会退出。 一个Worker对象是运行在完全隔离的环境中，其作用域大于主线程所在的JavaScript全局对象，小于整个客户端的Window对象。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0022.jpg\" alt=\"\"></p>\n<blockquote>\n<p>js作为单线程的语言，无法同时运行多个处理程序，但面对一些不得不耗费资源才能完成的任务时，单线程弊端就显现出来，为了解决这个问题，Wob Worker应身而出：“Worker”是指执行代码的并行线程，可以在一个不与用户交互的独立环境中，就行一些耗资源任务的处理，与游览器文档中的js相当于多线程，比如图像处理等任务。Web Worker有效解决了js的缺点，同时是提升性能的一个方法之一：将耗资源的代码在worker中执行。</p>\n</blockquote>\n<h1 id=\"worker对象\"><a href=\"#worker对象\" class=\"headerlink\" title=\"worker对象\"></a>worker对象</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//创建worker对象并执行</span><br><span class=\"hljs-keyword\">var</span> worker = <span class=\"hljs-keyword\">new</span> Worker(<span class=\"hljs-string\">\"js/decrypt.js\"</span>);<br><br><span class=\"hljs-comment\">//添加事件处理程序，完成后给主线程发送信息时执行</span><br>worker.onmessage = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'finash'</span>);<br>&#125;<br><br><span class=\"hljs-comment\">//发送信息给worker</span><br>worker.postMessage(<span class=\"hljs-string\">'file.txt'</span>);<br><br><span class=\"hljs-comment\">//注册用来接收来自主线程信息的处理程序</span><br>worker.onmessage = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>&#123;<br>    <span class=\"hljs-comment\">//从事件对象获取消息</span><br>    <span class=\"hljs-keyword\">var</span> valueToDecrypt = e.data;<br>    <span class=\"hljs-comment\">//进行操作</span><br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'end'</span>);<br>    <span class=\"hljs-comment\">//返回给主线程</span><br>    postMessage(decryptedValue);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"Worker执行模型与作用域\"><a href=\"#Worker执行模型与作用域\" class=\"headerlink\" title=\"Worker执行模型与作用域\"></a>Worker执行模型与作用域</h1><p>Worker线程从上到下执行代码与文件，如果Worker注册了onmessage事件，只要message事件可能触发，将永远不会退出。 一个Worker对象是运行在完全隔离的环境中，其作用域大于主线程所在的JavaScript全局对象，小于整个客户端的Window对象。</p>\n"},{"title":"关于我","url":"74.html","id":"74","date":"2015-12-23T15:34:28.000Z","_content":"\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0058.jpg)\n\nWho am I ?\n==========\n\n我是Bugzhang 95年出生 来自西北甘肃武威，目前在深圳工作 web全栈工程师 从事web开发接近2年 毕业于中南大学计算机系\n\nWhat do I write ?\n=================\n\n*   生活点滴\n*   学习经验\n*   个人心得\n\n所以大部分会是流水账式的烂文\n\nWhat can I do ?\n===============\n\n**√=掌握技能** **o=熟练技能** **#=入门技能** \\- 计算机网络 √ \\- 操作系统 √ \\- 数据结构和算法 √ \\- 信息安全 √ \\- html/css/js √ - node.js √ - egg.js √ - vue √ - webpack √ - webkit √ - mysql √ - react √ - 编译原理 o - angular o - golang o - AE/final cut pro # - PS/Sketch #\n\nHow to contact me ？\n===================\n\n评论：可以评论任意博客内容联系我: E-mail：nuptunee@gmail.com","source":"_posts/e5-85-b3-e4-ba-8e-e6-88-91.md","raw":"---\ntitle: 关于我\nurl: 74.html\nid: 74\ncategories:\n  - 未分类\ndate: 2015-12-23 23:34:28\ntags:\n---\n\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0058.jpg)\n\nWho am I ?\n==========\n\n我是Bugzhang 95年出生 来自西北甘肃武威，目前在深圳工作 web全栈工程师 从事web开发接近2年 毕业于中南大学计算机系\n\nWhat do I write ?\n=================\n\n*   生活点滴\n*   学习经验\n*   个人心得\n\n所以大部分会是流水账式的烂文\n\nWhat can I do ?\n===============\n\n**√=掌握技能** **o=熟练技能** **#=入门技能** \\- 计算机网络 √ \\- 操作系统 √ \\- 数据结构和算法 √ \\- 信息安全 √ \\- html/css/js √ - node.js √ - egg.js √ - vue √ - webpack √ - webkit √ - mysql √ - react √ - 编译原理 o - angular o - golang o - AE/final cut pro # - PS/Sketch #\n\nHow to contact me ？\n===================\n\n评论：可以评论任意博客内容联系我: E-mail：nuptunee@gmail.com","slug":"e5-85-b3-e4-ba-8e-e6-88-91","published":1,"updated":"2020-05-19T08:33:55.925Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts7xy000xzmz8b9yadln4","content":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0058.jpg\" alt=\"\"></p>\n<h1 id=\"Who-am-I\"><a href=\"#Who-am-I\" class=\"headerlink\" title=\"Who am I ?\"></a>Who am I ?</h1><p>我是Bugzhang 95年出生 来自西北甘肃武威，目前在深圳工作 web全栈工程师 从事web开发接近2年 毕业于中南大学计算机系</p>\n<h1 id=\"What-do-I-write\"><a href=\"#What-do-I-write\" class=\"headerlink\" title=\"What do I write ?\"></a>What do I write ?</h1><ul>\n<li>生活点滴</li>\n<li>学习经验</li>\n<li>个人心得</li>\n</ul>\n<p>所以大部分会是流水账式的烂文</p>\n<h1 id=\"What-can-I-do\"><a href=\"#What-can-I-do\" class=\"headerlink\" title=\"What can I do ?\"></a>What can I do ?</h1><p><strong>√=掌握技能</strong> <strong>o=熟练技能</strong> <strong>#=入门技能</strong> - 计算机网络 √ - 操作系统 √ - 数据结构和算法 √ - 信息安全 √ - html/css/js √ - node.js √ - egg.js √ - vue √ - webpack √ - webkit √ - mysql √ - react √ - 编译原理 o - angular o - golang o - AE/final cut pro # - PS/Sketch #</p>\n<h1 id=\"How-to-contact-me-？\"><a href=\"#How-to-contact-me-？\" class=\"headerlink\" title=\"How to contact me ？\"></a>How to contact me ？</h1><p>评论：可以评论任意博客内容联系我: E-mail：<a href=\"mailto:nuptunee@gmail.com\">nuptunee@gmail.com</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0058.jpg\" alt=\"\"></p>\n<h1 id=\"Who-am-I\"><a href=\"#Who-am-I\" class=\"headerlink\" title=\"Who am I ?\"></a>Who am I ?</h1><p>我是Bugzhang 95年出生 来自西北甘肃武威，目前在深圳工作 web全栈工程师 从事web开发接近2年 毕业于中南大学计算机系</p>\n<h1 id=\"What-do-I-write\"><a href=\"#What-do-I-write\" class=\"headerlink\" title=\"What do I write ?\"></a>What do I write ?</h1><ul>\n<li>生活点滴</li>\n<li>学习经验</li>\n<li>个人心得</li>\n</ul>\n<p>所以大部分会是流水账式的烂文</p>\n<h1 id=\"What-can-I-do\"><a href=\"#What-can-I-do\" class=\"headerlink\" title=\"What can I do ?\"></a>What can I do ?</h1><p><strong>√=掌握技能</strong> <strong>o=熟练技能</strong> <strong>#=入门技能</strong> - 计算机网络 √ - 操作系统 √ - 数据结构和算法 √ - 信息安全 √ - html/css/js √ - node.js √ - egg.js √ - vue √ - webpack √ - webkit √ - mysql √ - react √ - 编译原理 o - angular o - golang o - AE/final cut pro # - PS/Sketch #</p>\n<h1 id=\"How-to-contact-me-？\"><a href=\"#How-to-contact-me-？\" class=\"headerlink\" title=\"How to contact me ？\"></a>How to contact me ？</h1><p>评论：可以评论任意博客内容联系我: E-mail：<a href=\"mailto:nuptunee@gmail.com\">nuptunee@gmail.com</a></p>\n"},{"title":"前端代码风格指南——CSS篇","url":"216.html","id":"216","date":"2018-11-07T07:35:27.000Z","_content":"\n是我常用的一套开发标准，借鉴、删减、自创的一些规则，保留的基本都是比较实用的。用于统一代码风格。并给出了每条标准的理由。\n\n* * *\n\n*   空白与格式（可选）\n    \n    *   大括号与选择器之间留空，冒号后面留空 \\> 理由：这样比较好看而且多数已有代码是这样。\n    \n        /* 不推荐的 */\n        .el-pager{\n        width:$--pagination-number-after-width;\n        }\n        \n        /* 推荐的 */\n        .el-pager {\n        width: $--pagination-number-after-width;\n        }\n        \n    \n    *   在只有一条样式时允许和选择器写到同一行，但大括号首尾最好留一个空格。 \\> 理由：写三行太浪费屏幕空间。\n    \n        /* 不推荐的 */\n        .el-pager {\n          width:$--pagination-number-after-width;\n        }\n        \n        /* 推荐的 */\n        .el-pager { width: $--pagination-number-after-width; }\n        \n    \n    *   一个选择器中有多个样式声明时每条写一行 \\> 理由：使报错可以精确到具体的规则上，便于排错。\n    \n        /* 不推荐的 */\n        .el-pager {width:$--pagination-number-after-width; height: $--pagination-number-after-height; color: $--pagination-number-after-color;}\n        \n        /* 推荐的 */\n        .el-pager {\n          width: $--pagination-number-after-width;\n          height: $--pagination-number-after-height;\n          color: $--pagination-number-after-color;\n        }\n        \n    \n    *   多个选择器使用逗号隔开时写在不同的行，大括号不要另起一行 \\> 理由：修改时不容易漏掉逗号后面的选择器。\n    \n        /* 不推荐的 */\n        .el-pager, div {\n          width:$--pagination-number-after-width;\n        }\n        \n        /* 推荐的 */\n        .el-pager,\n        div {\n          width:$--pagination-number-after-width;\n        }\n        \n    \n    *   每条样式声明后面都加上分号\n        \n        > 理由：复制起来方便。\n        \n    *   所有最外层引号使用双引号\n        \n        > 理由：与HTML保持一致。\n        \n    \n        /* 不推荐的 */\n        @import url(//www.google.com/css/maia.css);\n        html { font-family: 'open sans', arial, sans-serif; }\n        \n        /* 推荐的 */\n        @import url(\"//www.google.com/css/maia.css\");\n        html {\n          font-family: \"open sans\", arial, sans-serif;\n        }\n        .selector[type=\"text\"] { }\n        \n    \n    *   用逗号分隔的多个样式值写成多行\n    \n    > 理由：便于阅读和编辑。\n    \n        /* 不推荐的 */\n          .block {\n            box-shadow: 0 0 0 rgba(#000, 0.1), 1px 1px 0 rgba(#000, 0.2), 2px 2px 0 rgba(#000, 0.3), 3px 3px 0 rgba(#000, 0.4), 4px 4px 0 rgba(#000, 0.5);\n          }\n        \n        /* 推荐的 */\n        .block {\n          box-shadow: 0 0 0 rgba(#000, 0.1),\n                    1px 1px 0 rgba(#000, 0.2),\n                    2px 2px 0 rgba(#000, 0.3),\n                    3px 3px 0 rgba(#000, 0.4),\n                    4px 4px 0 rgba(#000, 0.5);\n          }\n        \n    \n*   功能限定（可选）\n    \n    *   避免使用ID选择器，如无必要禁止使用!important\n        \n        > 理由：权重太高，不易维护。\n        \n    *   禁止使用 @import 引入 CSS 文件，但在SCSS等预编译处理器中是允许的\n        \n    \n    > 理由：兼容性差，并且会打破资源下载顺序有性能问题\n    \n*   属性顺序（可选）\n    *   位置属性(position, top, right, z-index, display, float等)\n    *   大小(width, height, padding, margin)\n    *   文字系列(font, line-height, letter-spacing, color- text-align等)\n    *   背景(background, border等)\n    *   其他(animation, transition等) > 理由：顺序从高到低依次和使用频率直接相关。\n*   变量与属性命名\b（可选）\n    \n    *   0 值的单位建议省略，但不强制。\n        \n        > 理由：css中所有 0 值的单位是没用的。\n        \n    *   16进制颜色值中的字母统一为小写。\n        \n        > 理由：大小写对CSS是一样的，但切换大写麻烦。\n        \n    *   类名中的字母一律小写\n        \n        > 理由：大小写对CSS是一样的，但难道统一大写或者首字母大写？\n        \n    *   类名中只是用用字母、数字以及“-”，并且尽量不要使用数字。\n        \n        > 理由：CSS类名可以用任何字符，但命名还是和js语言变量统一为好。\n        \n    \n        .hello {} /* OK */\n        .module-title {} /* OK */\n        .panel-level1 {} /* OK */\n        \n        .导航栏 /* Fuck */\n        \n    \n*   CSS模块化（可选）\n    \n    *   基本命名\n    *   除非是非常常见的缩写，否则类名使用完整英文单词或者抽调空格的英文词组 \\> 理由：正常阅读，缩写可能不统一\n    \n        /* 不推荐的 */\n        .konnichiwa {} /* 非英文单词会导致大家无法正常阅读 */\n        .modl {} /* 每个人的缩写未必一致，会造成不统一 */\n        .hello-world {} /* 类名请只使用一个没有分隔[-_]的词 */\n        \n        /* 推荐的 */\n        .module {}\n        .helloworld {}\n        .nav {}\n        \n    \n    *   仅当有层级关系时候使用“-”连接 \\> 理由：使css与html的层级一致\n    \n          .form-submit {} /* 推荐 */\n          .form-submittingbutton {} /* 不推荐 */\n        \n    \n    *   当要对选择器进行样式的修饰时，可以使用多个类而非对已有类进行定语的限制 \\> 理由：先前规范已经规定了必须层级关系采用“-”，并且修饰符可能与组件名冲突\n    \n        .success-popup. {} /* 不推荐的 */\n        .successPopup. {} /* 不推荐的 */\n        \n        .popup.success {} /* 推荐的 */\n        .popup.error {} /* 推荐的 */","source":"_posts/e5-89-8d-e7-ab-af-e4-bb-a3-e7-a0-81-e9-a3-8e-e6-a0-bc-e6-8c-87-e5-8d-97-css-e7-af-87.md","raw":"---\ntitle: 前端代码风格指南——CSS篇\nurl: 216.html\nid: 216\ncategories:\n  - 前端\ndate: 2018-11-07 15:35:27\ntags:\n---\n\n是我常用的一套开发标准，借鉴、删减、自创的一些规则，保留的基本都是比较实用的。用于统一代码风格。并给出了每条标准的理由。\n\n* * *\n\n*   空白与格式（可选）\n    \n    *   大括号与选择器之间留空，冒号后面留空 \\> 理由：这样比较好看而且多数已有代码是这样。\n    \n        /* 不推荐的 */\n        .el-pager{\n        width:$--pagination-number-after-width;\n        }\n        \n        /* 推荐的 */\n        .el-pager {\n        width: $--pagination-number-after-width;\n        }\n        \n    \n    *   在只有一条样式时允许和选择器写到同一行，但大括号首尾最好留一个空格。 \\> 理由：写三行太浪费屏幕空间。\n    \n        /* 不推荐的 */\n        .el-pager {\n          width:$--pagination-number-after-width;\n        }\n        \n        /* 推荐的 */\n        .el-pager { width: $--pagination-number-after-width; }\n        \n    \n    *   一个选择器中有多个样式声明时每条写一行 \\> 理由：使报错可以精确到具体的规则上，便于排错。\n    \n        /* 不推荐的 */\n        .el-pager {width:$--pagination-number-after-width; height: $--pagination-number-after-height; color: $--pagination-number-after-color;}\n        \n        /* 推荐的 */\n        .el-pager {\n          width: $--pagination-number-after-width;\n          height: $--pagination-number-after-height;\n          color: $--pagination-number-after-color;\n        }\n        \n    \n    *   多个选择器使用逗号隔开时写在不同的行，大括号不要另起一行 \\> 理由：修改时不容易漏掉逗号后面的选择器。\n    \n        /* 不推荐的 */\n        .el-pager, div {\n          width:$--pagination-number-after-width;\n        }\n        \n        /* 推荐的 */\n        .el-pager,\n        div {\n          width:$--pagination-number-after-width;\n        }\n        \n    \n    *   每条样式声明后面都加上分号\n        \n        > 理由：复制起来方便。\n        \n    *   所有最外层引号使用双引号\n        \n        > 理由：与HTML保持一致。\n        \n    \n        /* 不推荐的 */\n        @import url(//www.google.com/css/maia.css);\n        html { font-family: 'open sans', arial, sans-serif; }\n        \n        /* 推荐的 */\n        @import url(\"//www.google.com/css/maia.css\");\n        html {\n          font-family: \"open sans\", arial, sans-serif;\n        }\n        .selector[type=\"text\"] { }\n        \n    \n    *   用逗号分隔的多个样式值写成多行\n    \n    > 理由：便于阅读和编辑。\n    \n        /* 不推荐的 */\n          .block {\n            box-shadow: 0 0 0 rgba(#000, 0.1), 1px 1px 0 rgba(#000, 0.2), 2px 2px 0 rgba(#000, 0.3), 3px 3px 0 rgba(#000, 0.4), 4px 4px 0 rgba(#000, 0.5);\n          }\n        \n        /* 推荐的 */\n        .block {\n          box-shadow: 0 0 0 rgba(#000, 0.1),\n                    1px 1px 0 rgba(#000, 0.2),\n                    2px 2px 0 rgba(#000, 0.3),\n                    3px 3px 0 rgba(#000, 0.4),\n                    4px 4px 0 rgba(#000, 0.5);\n          }\n        \n    \n*   功能限定（可选）\n    \n    *   避免使用ID选择器，如无必要禁止使用!important\n        \n        > 理由：权重太高，不易维护。\n        \n    *   禁止使用 @import 引入 CSS 文件，但在SCSS等预编译处理器中是允许的\n        \n    \n    > 理由：兼容性差，并且会打破资源下载顺序有性能问题\n    \n*   属性顺序（可选）\n    *   位置属性(position, top, right, z-index, display, float等)\n    *   大小(width, height, padding, margin)\n    *   文字系列(font, line-height, letter-spacing, color- text-align等)\n    *   背景(background, border等)\n    *   其他(animation, transition等) > 理由：顺序从高到低依次和使用频率直接相关。\n*   变量与属性命名\b（可选）\n    \n    *   0 值的单位建议省略，但不强制。\n        \n        > 理由：css中所有 0 值的单位是没用的。\n        \n    *   16进制颜色值中的字母统一为小写。\n        \n        > 理由：大小写对CSS是一样的，但切换大写麻烦。\n        \n    *   类名中的字母一律小写\n        \n        > 理由：大小写对CSS是一样的，但难道统一大写或者首字母大写？\n        \n    *   类名中只是用用字母、数字以及“-”，并且尽量不要使用数字。\n        \n        > 理由：CSS类名可以用任何字符，但命名还是和js语言变量统一为好。\n        \n    \n        .hello {} /* OK */\n        .module-title {} /* OK */\n        .panel-level1 {} /* OK */\n        \n        .导航栏 /* Fuck */\n        \n    \n*   CSS模块化（可选）\n    \n    *   基本命名\n    *   除非是非常常见的缩写，否则类名使用完整英文单词或者抽调空格的英文词组 \\> 理由：正常阅读，缩写可能不统一\n    \n        /* 不推荐的 */\n        .konnichiwa {} /* 非英文单词会导致大家无法正常阅读 */\n        .modl {} /* 每个人的缩写未必一致，会造成不统一 */\n        .hello-world {} /* 类名请只使用一个没有分隔[-_]的词 */\n        \n        /* 推荐的 */\n        .module {}\n        .helloworld {}\n        .nav {}\n        \n    \n    *   仅当有层级关系时候使用“-”连接 \\> 理由：使css与html的层级一致\n    \n          .form-submit {} /* 推荐 */\n          .form-submittingbutton {} /* 不推荐 */\n        \n    \n    *   当要对选择器进行样式的修饰时，可以使用多个类而非对已有类进行定语的限制 \\> 理由：先前规范已经规定了必须层级关系采用“-”，并且修饰符可能与组件名冲突\n    \n        .success-popup. {} /* 不推荐的 */\n        .successPopup. {} /* 不推荐的 */\n        \n        .popup.success {} /* 推荐的 */\n        .popup.error {} /* 推荐的 */","slug":"e5-89-8d-e7-ab-af-e4-bb-a3-e7-a0-81-e9-a3-8e-e6-a0-bc-e6-8c-87-e5-8d-97-css-e7-af-87","published":1,"updated":"2020-05-19T08:33:55.927Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts7xz000zzmz86k9f346j","content":"<p>是我常用的一套开发标准，借鉴、删减、自创的一些规则，保留的基本都是比较实用的。用于统一代码风格。并给出了每条标准的理由。</p>\n<hr>\n<ul>\n<li><p>空白与格式（可选）</p>\n<ul>\n<li><p>大括号与选择器之间留空，冒号后面留空 &gt; 理由：这样比较好看而且多数已有代码是这样。</p>\n<p>/* 不推荐的 */<br>.el-pager{<br>width:$–pagination-number-after-width;<br>}</p>\n<p>/* 推荐的 */<br>.el-pager {<br>width: $–pagination-number-after-width;<br>}</p>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>*   在只有一条样式时允许和选择器写到同一行，但大括号首尾最好留一个空格。 \\&gt; 理由：写三行太浪费屏幕空间。\n\n    /* 不推荐的 */\n    .el-pager {\n      width:$--pagination-number-after-width;\n    }\n\n    /* 推荐的 */\n    .el-pager { width: $--pagination-number-after-width; }\n\n\n*   一个选择器中有多个样式声明时每条写一行 \\&gt; 理由：使报错可以精确到具体的规则上，便于排错。\n\n    /* 不推荐的 */\n    .el-pager {width:$--pagination-number-after-width; height: $--pagination-number-after-height; color: $--pagination-number-after-color;}\n\n    /* 推荐的 */\n    .el-pager {\n      width: $--pagination-number-after-width;\n      height: $--pagination-number-after-height;\n      color: $--pagination-number-after-color;\n    }\n\n\n*   多个选择器使用逗号隔开时写在不同的行，大括号不要另起一行 \\&gt; 理由：修改时不容易漏掉逗号后面的选择器。\n\n    /* 不推荐的 */\n    .el-pager, div {\n      width:$--pagination-number-after-width;\n    }\n\n    /* 推荐的 */\n    .el-pager,\n    div {\n      width:$--pagination-number-after-width;\n    }\n\n\n*   每条样式声明后面都加上分号\n\n    &gt; 理由：复制起来方便。\n\n*   所有最外层引号使用双引号\n\n    &gt; 理由：与HTML保持一致。\n\n\n    /* 不推荐的 */\n    @import url(//www.google.com/css/maia.css);\n    html { font-family: &apos;open sans&apos;, arial, sans-serif; }\n\n    /* 推荐的 */\n    @import url(&quot;//www.google.com/css/maia.css&quot;);\n    html {\n      font-family: &quot;open sans&quot;, arial, sans-serif;\n    }\n    .selector[type=&quot;text&quot;] { }\n\n\n*   用逗号分隔的多个样式值写成多行\n\n&gt; 理由：便于阅读和编辑。\n\n    /* 不推荐的 */\n      .block {\n        box-shadow: 0 0 0 rgba(#000, 0.1), 1px 1px 0 rgba(#000, 0.2), 2px 2px 0 rgba(#000, 0.3), 3px 3px 0 rgba(#000, 0.4), 4px 4px 0 rgba(#000, 0.5);\n      }\n\n    /* 推荐的 */\n    .block {\n      box-shadow: 0 0 0 rgba(#000, 0.1),\n                1px 1px 0 rgba(#000, 0.2),\n                2px 2px 0 rgba(#000, 0.3),\n                3px 3px 0 rgba(#000, 0.4),\n                4px 4px 0 rgba(#000, 0.5);\n      }</code></pre><ul>\n<li><p>功能限定（可选）</p>\n<ul>\n<li><p>避免使用ID选择器，如无必要禁止使用!important</p>\n<blockquote>\n<p>理由：权重太高，不易维护。</p>\n</blockquote>\n</li>\n<li><p>禁止使用 @import 引入 CSS 文件，但在SCSS等预编译处理器中是允许的</p>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>&gt; 理由：兼容性差，并且会打破资源下载顺序有性能问题</code></pre><ul>\n<li><p>属性顺序（可选）</p>\n<ul>\n<li>位置属性(position, top, right, z-index, display, float等)</li>\n<li>大小(width, height, padding, margin)</li>\n<li>文字系列(font, line-height, letter-spacing, color- text-align等)</li>\n<li>背景(background, border等)</li>\n<li>其他(animation, transition等) &gt; 理由：顺序从高到低依次和使用频率直接相关。</li>\n</ul>\n</li>\n<li><p>变量与属性命名\b（可选）</p>\n<ul>\n<li><p>0 值的单位建议省略，但不强制。</p>\n<blockquote>\n<p>理由：css中所有 0 值的单位是没用的。</p>\n</blockquote>\n</li>\n<li><p>16进制颜色值中的字母统一为小写。</p>\n<blockquote>\n<p>理由：大小写对CSS是一样的，但切换大写麻烦。</p>\n</blockquote>\n</li>\n<li><p>类名中的字母一律小写</p>\n<blockquote>\n<p>理由：大小写对CSS是一样的，但难道统一大写或者首字母大写？</p>\n</blockquote>\n</li>\n<li><p>类名中只是用用字母、数字以及“-”，并且尽量不要使用数字。</p>\n<blockquote>\n<p>理由：CSS类名可以用任何字符，但命名还是和js语言变量统一为好。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>.hello {} /* OK */\n.module-title {} /* OK */\n.panel-level1 {} /* OK */\n\n.导航栏 /* Fuck */</code></pre><ul>\n<li><p>CSS模块化（可选）</p>\n<ul>\n<li><p>基本命名</p>\n</li>\n<li><p>除非是非常常见的缩写，否则类名使用完整英文单词或者抽调空格的英文词组 &gt; 理由：正常阅读，缩写可能不统一</p>\n<p>/* 不推荐的 <em>/<br>.konnichiwa {} /</em> 非英文单词会导致大家无法正常阅读 <em>/<br>.modl {} /</em> 每个人的缩写未必一致，会造成不统一 <em>/<br>.hello-world {} /</em> 类名请只使用一个没有分隔[-_]的词 */</p>\n<p>/* 推荐的 */<br>.module {}<br>.helloworld {}<br>.nav {}</p>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>*   仅当有层级关系时候使用“-”连接 \\&gt; 理由：使css与html的层级一致\n\n      .form-submit {} /* 推荐 */\n      .form-submittingbutton {} /* 不推荐 */\n\n\n*   当要对选择器进行样式的修饰时，可以使用多个类而非对已有类进行定语的限制 \\&gt; 理由：先前规范已经规定了必须层级关系采用“-”，并且修饰符可能与组件名冲突\n\n    .success-popup. {} /* 不推荐的 */\n    .successPopup. {} /* 不推荐的 */\n\n    .popup.success {} /* 推荐的 */\n    .popup.error {} /* 推荐的 */</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>是我常用的一套开发标准，借鉴、删减、自创的一些规则，保留的基本都是比较实用的。用于统一代码风格。并给出了每条标准的理由。</p>\n<hr>\n<ul>\n<li><p>空白与格式（可选）</p>\n<ul>\n<li><p>大括号与选择器之间留空，冒号后面留空 &gt; 理由：这样比较好看而且多数已有代码是这样。</p>\n<p>/* 不推荐的 */<br>.el-pager{<br>width:$–pagination-number-after-width;<br>}</p>\n<p>/* 推荐的 */<br>.el-pager {<br>width: $–pagination-number-after-width;<br>}</p>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>*   在只有一条样式时允许和选择器写到同一行，但大括号首尾最好留一个空格。 \\&gt; 理由：写三行太浪费屏幕空间。\n\n    /* 不推荐的 */\n    .el-pager {\n      width:$--pagination-number-after-width;\n    }\n\n    /* 推荐的 */\n    .el-pager { width: $--pagination-number-after-width; }\n\n\n*   一个选择器中有多个样式声明时每条写一行 \\&gt; 理由：使报错可以精确到具体的规则上，便于排错。\n\n    /* 不推荐的 */\n    .el-pager {width:$--pagination-number-after-width; height: $--pagination-number-after-height; color: $--pagination-number-after-color;}\n\n    /* 推荐的 */\n    .el-pager {\n      width: $--pagination-number-after-width;\n      height: $--pagination-number-after-height;\n      color: $--pagination-number-after-color;\n    }\n\n\n*   多个选择器使用逗号隔开时写在不同的行，大括号不要另起一行 \\&gt; 理由：修改时不容易漏掉逗号后面的选择器。\n\n    /* 不推荐的 */\n    .el-pager, div {\n      width:$--pagination-number-after-width;\n    }\n\n    /* 推荐的 */\n    .el-pager,\n    div {\n      width:$--pagination-number-after-width;\n    }\n\n\n*   每条样式声明后面都加上分号\n\n    &gt; 理由：复制起来方便。\n\n*   所有最外层引号使用双引号\n\n    &gt; 理由：与HTML保持一致。\n\n\n    /* 不推荐的 */\n    @import url(//www.google.com/css/maia.css);\n    html { font-family: &apos;open sans&apos;, arial, sans-serif; }\n\n    /* 推荐的 */\n    @import url(&quot;//www.google.com/css/maia.css&quot;);\n    html {\n      font-family: &quot;open sans&quot;, arial, sans-serif;\n    }\n    .selector[type=&quot;text&quot;] { }\n\n\n*   用逗号分隔的多个样式值写成多行\n\n&gt; 理由：便于阅读和编辑。\n\n    /* 不推荐的 */\n      .block {\n        box-shadow: 0 0 0 rgba(#000, 0.1), 1px 1px 0 rgba(#000, 0.2), 2px 2px 0 rgba(#000, 0.3), 3px 3px 0 rgba(#000, 0.4), 4px 4px 0 rgba(#000, 0.5);\n      }\n\n    /* 推荐的 */\n    .block {\n      box-shadow: 0 0 0 rgba(#000, 0.1),\n                1px 1px 0 rgba(#000, 0.2),\n                2px 2px 0 rgba(#000, 0.3),\n                3px 3px 0 rgba(#000, 0.4),\n                4px 4px 0 rgba(#000, 0.5);\n      }</code></pre><ul>\n<li><p>功能限定（可选）</p>\n<ul>\n<li><p>避免使用ID选择器，如无必要禁止使用!important</p>\n<blockquote>\n<p>理由：权重太高，不易维护。</p>\n</blockquote>\n</li>\n<li><p>禁止使用 @import 引入 CSS 文件，但在SCSS等预编译处理器中是允许的</p>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>&gt; 理由：兼容性差，并且会打破资源下载顺序有性能问题</code></pre><ul>\n<li><p>属性顺序（可选）</p>\n<ul>\n<li>位置属性(position, top, right, z-index, display, float等)</li>\n<li>大小(width, height, padding, margin)</li>\n<li>文字系列(font, line-height, letter-spacing, color- text-align等)</li>\n<li>背景(background, border等)</li>\n<li>其他(animation, transition等) &gt; 理由：顺序从高到低依次和使用频率直接相关。</li>\n</ul>\n</li>\n<li><p>变量与属性命名\b（可选）</p>\n<ul>\n<li><p>0 值的单位建议省略，但不强制。</p>\n<blockquote>\n<p>理由：css中所有 0 值的单位是没用的。</p>\n</blockquote>\n</li>\n<li><p>16进制颜色值中的字母统一为小写。</p>\n<blockquote>\n<p>理由：大小写对CSS是一样的，但切换大写麻烦。</p>\n</blockquote>\n</li>\n<li><p>类名中的字母一律小写</p>\n<blockquote>\n<p>理由：大小写对CSS是一样的，但难道统一大写或者首字母大写？</p>\n</blockquote>\n</li>\n<li><p>类名中只是用用字母、数字以及“-”，并且尽量不要使用数字。</p>\n<blockquote>\n<p>理由：CSS类名可以用任何字符，但命名还是和js语言变量统一为好。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>.hello {} /* OK */\n.module-title {} /* OK */\n.panel-level1 {} /* OK */\n\n.导航栏 /* Fuck */</code></pre><ul>\n<li><p>CSS模块化（可选）</p>\n<ul>\n<li><p>基本命名</p>\n</li>\n<li><p>除非是非常常见的缩写，否则类名使用完整英文单词或者抽调空格的英文词组 &gt; 理由：正常阅读，缩写可能不统一</p>\n<p>/* 不推荐的 <em>/<br>.konnichiwa {} /</em> 非英文单词会导致大家无法正常阅读 <em>/<br>.modl {} /</em> 每个人的缩写未必一致，会造成不统一 <em>/<br>.hello-world {} /</em> 类名请只使用一个没有分隔[-_]的词 */</p>\n<p>/* 推荐的 */<br>.module {}<br>.helloworld {}<br>.nav {}</p>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>*   仅当有层级关系时候使用“-”连接 \\&gt; 理由：使css与html的层级一致\n\n      .form-submit {} /* 推荐 */\n      .form-submittingbutton {} /* 不推荐 */\n\n\n*   当要对选择器进行样式的修饰时，可以使用多个类而非对已有类进行定语的限制 \\&gt; 理由：先前规范已经规定了必须层级关系采用“-”，并且修饰符可能与组件名冲突\n\n    .success-popup. {} /* 不推荐的 */\n    .successPopup. {} /* 不推荐的 */\n\n    .popup.success {} /* 推荐的 */\n    .popup.error {} /* 推荐的 */</code></pre>"},{"title":"前端代码风格指南——javascript篇","url":"317.html","id":"317","comments":0,"date":"2018-11-20T12:17:27.000Z","_content":"\n*   严格模式：开启（必须）\n    \n    > 理由：能够避免一些不精通js特性导致的坑，如==和===，得益于js早期糟糕的设计，有太多这样的问题。需要注意的是，严格模式在ie9下不兼容，但该项目是vue体系项目至少运行在ie10以上故不需要考虑。\n    \n*   引号：一律使用单引号（必须）\n    \n    > 理由：可以和html的双引号更好的工作\n    \n*   分号：一律在语句结尾加分号（必须）\n    \n    > 理由：首先官方新规范是要求分号的，可以避免不必要的坑。\n    \n        /* 不推荐的 */\n        let fn = {\n        return 0\n        }\n        \n        /* 推荐的 */\n        let fn = {\n        return 0;\n        }; //这里有分号\n        \n    \n*   空白与格式（必须）\n\n在二元和三元运算符的符号与操作数之间添加空格，在非行末的 , ; } 后添加空格，在 { 前添加空格。并在每个逻辑块中间添加空白行。 特别的，在 if、while 等关键字后加空格，与函数调用做区分\n\n    /* 不推荐的 */\n    let foo='bar',hello=foo+2,test=true;\n    function hi(){\n      // ...\n    }\n    if(foo&&hello){\n      // ...\n    }else if(foo){\n      // ...\n    }else if(! test){\n      // ...\n    }\n    \n    /* 推荐的 */\n    let foo = 'bar';\n    let hello = foo + 2;\n    let test = true;\n    function hi(arg1, arg2) {\n      // ...\n    }\n    if (foo && hello) {\n      // ...\n    } else if (foo) {\n      // ...\n    } else if (!test) {\n      // ...\n    }\n    \n\n*   变量声明（必须）\n    *   一个函数作用域中所有的变量声明尽量提到函数首部。\n    *   如果可以使用 let 和 const 的，要使用 let 和 const。\n    *   除了特殊情况如挂载全局jquery等外，不要定义全局变量。 > 理由：第一条是保证可读性，第三条和第四条是安全的作用域，\n*   变量命名（必须）\n    \n    *   变量全部使用小驼峰，如\n    *   常量使用大写匈牙利式命名法，如MAX_COUNT\n    *   组件名必须为多个单词，如ConfigCenter\n    *   组件名使用大驼峰命名，如ConfigCenter\n    *   构造函数与类，大写第一个字母，如Person()\n    *   jquery 对象必须以'$'开头命名\n    *   对象私有属性和方法，用'#'开头命名\n    *   不要使用复数，对于变量而言，复数还是非负数都一样 \\> 理由：可读性好，实际这是js与vue.js官方推荐的命名方式整合。\n    \n        /* 推荐的 */\n        var thisIsMyName; // 变量\n        var MAX_COUNT = 10; // 常量\n        function Person(name) { // 构造函数\n        this.name = name;\n        }\n        var $body = $(\"body\"); // jquery对象\n        class Point { // 类\n        #x; // 私有属性\n        #y;\n        \n        constructor(x, y) {\n          this.#x = x;\n          this.#y = y;\n        }\n        }\n        \n    \n*   括号（可选）\n    \n\n下列关键字后必须有大括号（即使代码块的内容只有一行）：if, else, for, while, do, switch, try, catch, finally, with。大括号如果是单行，前后要加一个空格。\n\n> 理由：能够避免一些bug，提升可读性，方便复制代码而不复制到括号。\n\n    /* 不推荐的 */\n    if (condition) doSomething();\n    \n    /* 推荐的 */\n    if (condition) { doSomething() };\n    import { x, y } from myModule;\n    \n\n*   对于循环和判断代码，不要循环或判断三层以上。（可选）\n    \n*   能用ES6、ES7等新版本ES语法的，尽量用新语法，包括不仅限于：（部分必须）\n    \n    *   使用对象和数组的解构赋值的方式实现多个变量的赋值。\n    \n        /* 不推荐的 */\n        let [a, b, c] = [1, 'a', [ 2 , 3]]\n        \n        /* 推荐的 */\n        let []\n        \n    \n    *   使用拓展运算符...对参数对象中的所有可遍历属性进行拷贝。\n        \n    *   小函数使用箭头函数来替代function，这里要注意箭头函数作用域问题。\n        \n    *   使用字符串模板进行字符串拼接。\n        \n    *   使用安全的块级作用域语法let和const。\n        \n    *   使用Object.assign()进行对象的浅拷贝。\n        \n    *   使用Set去重，以及替代元素不重复的数组。\n        \n    *   使用class语法替代原有的方式。\n        \n    *   使用函数参数的默认值替代 || 语法\n        \n    \n        /* 不推荐的 */\n        function f(x, y, z) {\n        y = 1 || undefined;\n        z = 2 || undefined\n        return x + y + z;\n        }\n        \n        /* 推荐的 */\n        function f1(x, y = 4, z = 12) {\n        return x + y + z;\n        }\n        \n    \n    *   使用对象中函数的缩写形式\n    \n        /* 不推荐的 */\n        let obj = {\n        add: function() {}\n        }\n        \n        /* 推荐的 */\n        let obj =  {\n        add() {}\n        }\n        \n    \n    *   使用Promise，async-await解决回调函数多层嵌套问题。\n\n注释与文档规范\n-------\n\n*   单行注释（必须）\n    *   注释单独一行的情况下，注释的//后面要跟一个空格\n    *   注释如果和代码同一行，代码分号结束后，要跟一个空格，注释的//后也要跟一个空格 \\> 理由：写起来简单，看上去直观。\n\n    // 调用函数\n    foo();\n    \n    var maxCount = 10; // 这是一个变量\n    \n\n*   多行注释（必须）\n\n多行注释使用下面这种形式\n\n> 理由：js统一的规范，官方也是这么写的。\n\n    /**\n     * 代码注释1\n     * 代码注释2\n     */\n     ```\n    \n      多行注释建议在以下几种情况使用：\n      - 难于理解的代码段\n      - 可能存在错误的代码段\n      - 浏览器特殊的 HACK 代码\n      - 业务逻辑强相关的代码\n    \n    - 函数注释（必须）\n    \n    复杂的函数，所有类，都必须进行标准函数注释，示例如下。\n    > 理由：函数注释使用业界统一的规范，方便后续使用 jsdoc 生成文档。\n    ```js\n    /**\n     * 获取任务的名称\n     * @param id {Number} 传入需要获取名称的人物id\n     * @return {String} 返回的姓名\n     * @author shi 2015/07/21 可以不写\n     * @version 1.1.0 可以不写\n     * @example 示例代码，可以不写\n     */\n    function getTaskName(id) {\n      let name = \"test\";\n      return name;\n    }","source":"_posts/e5-89-8d-e7-ab-af-e4-bb-a3-e7-a0-81-e9-a3-8e-e6-a0-bc-e6-8c-87-e5-8d-97-javascript-e7-af-87.md","raw":"---\ntitle: 前端代码风格指南——javascript篇\ntags:\n  - 前端优化\n  - 前端工程化\nurl: 317.html\nid: 317\ncomments: false\ncategories:\n  - 前端\ndate: 2018-11-20 20:17:27\n---\n\n*   严格模式：开启（必须）\n    \n    > 理由：能够避免一些不精通js特性导致的坑，如==和===，得益于js早期糟糕的设计，有太多这样的问题。需要注意的是，严格模式在ie9下不兼容，但该项目是vue体系项目至少运行在ie10以上故不需要考虑。\n    \n*   引号：一律使用单引号（必须）\n    \n    > 理由：可以和html的双引号更好的工作\n    \n*   分号：一律在语句结尾加分号（必须）\n    \n    > 理由：首先官方新规范是要求分号的，可以避免不必要的坑。\n    \n        /* 不推荐的 */\n        let fn = {\n        return 0\n        }\n        \n        /* 推荐的 */\n        let fn = {\n        return 0;\n        }; //这里有分号\n        \n    \n*   空白与格式（必须）\n\n在二元和三元运算符的符号与操作数之间添加空格，在非行末的 , ; } 后添加空格，在 { 前添加空格。并在每个逻辑块中间添加空白行。 特别的，在 if、while 等关键字后加空格，与函数调用做区分\n\n    /* 不推荐的 */\n    let foo='bar',hello=foo+2,test=true;\n    function hi(){\n      // ...\n    }\n    if(foo&&hello){\n      // ...\n    }else if(foo){\n      // ...\n    }else if(! test){\n      // ...\n    }\n    \n    /* 推荐的 */\n    let foo = 'bar';\n    let hello = foo + 2;\n    let test = true;\n    function hi(arg1, arg2) {\n      // ...\n    }\n    if (foo && hello) {\n      // ...\n    } else if (foo) {\n      // ...\n    } else if (!test) {\n      // ...\n    }\n    \n\n*   变量声明（必须）\n    *   一个函数作用域中所有的变量声明尽量提到函数首部。\n    *   如果可以使用 let 和 const 的，要使用 let 和 const。\n    *   除了特殊情况如挂载全局jquery等外，不要定义全局变量。 > 理由：第一条是保证可读性，第三条和第四条是安全的作用域，\n*   变量命名（必须）\n    \n    *   变量全部使用小驼峰，如\n    *   常量使用大写匈牙利式命名法，如MAX_COUNT\n    *   组件名必须为多个单词，如ConfigCenter\n    *   组件名使用大驼峰命名，如ConfigCenter\n    *   构造函数与类，大写第一个字母，如Person()\n    *   jquery 对象必须以'$'开头命名\n    *   对象私有属性和方法，用'#'开头命名\n    *   不要使用复数，对于变量而言，复数还是非负数都一样 \\> 理由：可读性好，实际这是js与vue.js官方推荐的命名方式整合。\n    \n        /* 推荐的 */\n        var thisIsMyName; // 变量\n        var MAX_COUNT = 10; // 常量\n        function Person(name) { // 构造函数\n        this.name = name;\n        }\n        var $body = $(\"body\"); // jquery对象\n        class Point { // 类\n        #x; // 私有属性\n        #y;\n        \n        constructor(x, y) {\n          this.#x = x;\n          this.#y = y;\n        }\n        }\n        \n    \n*   括号（可选）\n    \n\n下列关键字后必须有大括号（即使代码块的内容只有一行）：if, else, for, while, do, switch, try, catch, finally, with。大括号如果是单行，前后要加一个空格。\n\n> 理由：能够避免一些bug，提升可读性，方便复制代码而不复制到括号。\n\n    /* 不推荐的 */\n    if (condition) doSomething();\n    \n    /* 推荐的 */\n    if (condition) { doSomething() };\n    import { x, y } from myModule;\n    \n\n*   对于循环和判断代码，不要循环或判断三层以上。（可选）\n    \n*   能用ES6、ES7等新版本ES语法的，尽量用新语法，包括不仅限于：（部分必须）\n    \n    *   使用对象和数组的解构赋值的方式实现多个变量的赋值。\n    \n        /* 不推荐的 */\n        let [a, b, c] = [1, 'a', [ 2 , 3]]\n        \n        /* 推荐的 */\n        let []\n        \n    \n    *   使用拓展运算符...对参数对象中的所有可遍历属性进行拷贝。\n        \n    *   小函数使用箭头函数来替代function，这里要注意箭头函数作用域问题。\n        \n    *   使用字符串模板进行字符串拼接。\n        \n    *   使用安全的块级作用域语法let和const。\n        \n    *   使用Object.assign()进行对象的浅拷贝。\n        \n    *   使用Set去重，以及替代元素不重复的数组。\n        \n    *   使用class语法替代原有的方式。\n        \n    *   使用函数参数的默认值替代 || 语法\n        \n    \n        /* 不推荐的 */\n        function f(x, y, z) {\n        y = 1 || undefined;\n        z = 2 || undefined\n        return x + y + z;\n        }\n        \n        /* 推荐的 */\n        function f1(x, y = 4, z = 12) {\n        return x + y + z;\n        }\n        \n    \n    *   使用对象中函数的缩写形式\n    \n        /* 不推荐的 */\n        let obj = {\n        add: function() {}\n        }\n        \n        /* 推荐的 */\n        let obj =  {\n        add() {}\n        }\n        \n    \n    *   使用Promise，async-await解决回调函数多层嵌套问题。\n\n注释与文档规范\n-------\n\n*   单行注释（必须）\n    *   注释单独一行的情况下，注释的//后面要跟一个空格\n    *   注释如果和代码同一行，代码分号结束后，要跟一个空格，注释的//后也要跟一个空格 \\> 理由：写起来简单，看上去直观。\n\n    // 调用函数\n    foo();\n    \n    var maxCount = 10; // 这是一个变量\n    \n\n*   多行注释（必须）\n\n多行注释使用下面这种形式\n\n> 理由：js统一的规范，官方也是这么写的。\n\n    /**\n     * 代码注释1\n     * 代码注释2\n     */\n     ```\n    \n      多行注释建议在以下几种情况使用：\n      - 难于理解的代码段\n      - 可能存在错误的代码段\n      - 浏览器特殊的 HACK 代码\n      - 业务逻辑强相关的代码\n    \n    - 函数注释（必须）\n    \n    复杂的函数，所有类，都必须进行标准函数注释，示例如下。\n    > 理由：函数注释使用业界统一的规范，方便后续使用 jsdoc 生成文档。\n    ```js\n    /**\n     * 获取任务的名称\n     * @param id {Number} 传入需要获取名称的人物id\n     * @return {String} 返回的姓名\n     * @author shi 2015/07/21 可以不写\n     * @version 1.1.0 可以不写\n     * @example 示例代码，可以不写\n     */\n    function getTaskName(id) {\n      let name = \"test\";\n      return name;\n    }","slug":"e5-89-8d-e7-ab-af-e4-bb-a3-e7-a0-81-e9-a3-8e-e6-a0-bc-e6-8c-87-e5-8d-97-javascript-e7-af-87","published":1,"updated":"2020-05-19T08:33:55.929Z","layout":"post","photos":[],"link":"","_id":"ckahts7y10012zmz80iwjcp99","content":"<ul>\n<li><p>严格模式：开启（必须）</p>\n<blockquote>\n<p>理由：能够避免一些不精通js特性导致的坑，如==和===，得益于js早期糟糕的设计，有太多这样的问题。需要注意的是，严格模式在ie9下不兼容，但该项目是vue体系项目至少运行在ie10以上故不需要考虑。</p>\n</blockquote>\n</li>\n<li><p>引号：一律使用单引号（必须）</p>\n<blockquote>\n<p>理由：可以和html的双引号更好的工作</p>\n</blockquote>\n</li>\n<li><p>分号：一律在语句结尾加分号（必须）</p>\n<blockquote>\n<p>理由：首先官方新规范是要求分号的，可以避免不必要的坑。</p>\n</blockquote>\n<pre><code>/* 不推荐的 */\nlet fn = {\nreturn 0\n}\n\n/* 推荐的 */\nlet fn = {\nreturn 0;\n}; //这里有分号</code></pre></li>\n</ul>\n<ul>\n<li>空白与格式（必须）</li>\n</ul>\n<p>在二元和三元运算符的符号与操作数之间添加空格，在非行末的 , ; } 后添加空格，在 { 前添加空格。并在每个逻辑块中间添加空白行。 特别的，在 if、while 等关键字后加空格，与函数调用做区分</p>\n<pre><code>/* 不推荐的 */\nlet foo=&apos;bar&apos;,hello=foo+2,test=true;\nfunction hi(){\n  // ...\n}\nif(foo&amp;&amp;hello){\n  // ...\n}else if(foo){\n  // ...\n}else if(! test){\n  // ...\n}\n\n/* 推荐的 */\nlet foo = &apos;bar&apos;;\nlet hello = foo + 2;\nlet test = true;\nfunction hi(arg1, arg2) {\n  // ...\n}\nif (foo &amp;&amp; hello) {\n  // ...\n} else if (foo) {\n  // ...\n} else if (!test) {\n  // ...\n}</code></pre><ul>\n<li><p>变量声明（必须）</p>\n<ul>\n<li>一个函数作用域中所有的变量声明尽量提到函数首部。</li>\n<li>如果可以使用 let 和 const 的，要使用 let 和 const。</li>\n<li>除了特殊情况如挂载全局jquery等外，不要定义全局变量。 &gt; 理由：第一条是保证可读性，第三条和第四条是安全的作用域，</li>\n</ul>\n</li>\n<li><p>变量命名（必须）</p>\n<ul>\n<li><p>变量全部使用小驼峰，如</p>\n</li>\n<li><p>常量使用大写匈牙利式命名法，如MAX_COUNT</p>\n</li>\n<li><p>组件名必须为多个单词，如ConfigCenter</p>\n</li>\n<li><p>组件名使用大驼峰命名，如ConfigCenter</p>\n</li>\n<li><p>构造函数与类，大写第一个字母，如Person()</p>\n</li>\n<li><p>jquery 对象必须以’$’开头命名</p>\n</li>\n<li><p>对象私有属性和方法，用’#’开头命名</p>\n</li>\n<li><p>不要使用复数，对于变量而言，复数还是非负数都一样 &gt; 理由：可读性好，实际这是js与vue.js官方推荐的命名方式整合。</p>\n<p>/* 推荐的 */<br>var thisIsMyName; // 变量<br>var MAX_COUNT = 10; // 常量<br>function Person(name) { // 构造函数<br>this.name = name;<br>}<br>var $body = $(“body”); // jquery对象<br>class Point { // 类<br>#x; // 私有属性<br>#y;</p>\n<p>constructor(x, y) {<br>  this.#x = x;<br>  this.#y = y;<br>}<br>}</p>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>括号（可选）</li>\n</ul>\n<p>下列关键字后必须有大括号（即使代码块的内容只有一行）：if, else, for, while, do, switch, try, catch, finally, with。大括号如果是单行，前后要加一个空格。</p>\n<blockquote>\n<p>理由：能够避免一些bug，提升可读性，方便复制代码而不复制到括号。</p>\n</blockquote>\n<pre><code>/* 不推荐的 */\nif (condition) doSomething();\n\n/* 推荐的 */\nif (condition) { doSomething() };\nimport { x, y } from myModule;</code></pre><ul>\n<li><p>对于循环和判断代码，不要循环或判断三层以上。（可选）</p>\n</li>\n<li><p>能用ES6、ES7等新版本ES语法的，尽量用新语法，包括不仅限于：（部分必须）</p>\n<ul>\n<li><p>使用对象和数组的解构赋值的方式实现多个变量的赋值。</p>\n<p>/* 不推荐的 */<br>let [a, b, c] = [1, ‘a’, [ 2 , 3]]</p>\n<p>/* 推荐的 */<br>let []</p>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>*   使用拓展运算符...对参数对象中的所有可遍历属性进行拷贝。\n\n*   小函数使用箭头函数来替代function，这里要注意箭头函数作用域问题。\n\n*   使用字符串模板进行字符串拼接。\n\n*   使用安全的块级作用域语法let和const。\n\n*   使用Object.assign()进行对象的浅拷贝。\n\n*   使用Set去重，以及替代元素不重复的数组。\n\n*   使用class语法替代原有的方式。\n\n*   使用函数参数的默认值替代 || 语法\n\n\n    /* 不推荐的 */\n    function f(x, y, z) {\n    y = 1 || undefined;\n    z = 2 || undefined\n    return x + y + z;\n    }\n\n    /* 推荐的 */\n    function f1(x, y = 4, z = 12) {\n    return x + y + z;\n    }\n\n\n*   使用对象中函数的缩写形式\n\n    /* 不推荐的 */\n    let obj = {\n    add: function() {}\n    }\n\n    /* 推荐的 */\n    let obj =  {\n    add() {}\n    }\n\n\n*   使用Promise，async-await解决回调函数多层嵌套问题。</code></pre><h2 id=\"注释与文档规范\"><a href=\"#注释与文档规范\" class=\"headerlink\" title=\"注释与文档规范\"></a>注释与文档规范</h2><ul>\n<li><p>单行注释（必须）</p>\n<ul>\n<li>注释单独一行的情况下，注释的//后面要跟一个空格</li>\n<li>注释如果和代码同一行，代码分号结束后，要跟一个空格，注释的//后也要跟一个空格 &gt; 理由：写起来简单，看上去直观。</li>\n</ul>\n<p>// 调用函数<br>foo();</p>\n<p>var maxCount = 10; // 这是一个变量</p>\n</li>\n</ul>\n<ul>\n<li>多行注释（必须）</li>\n</ul>\n<p>多行注释使用下面这种形式</p>\n<blockquote>\n<p>理由：js统一的规范，官方也是这么写的。</p>\n</blockquote>\n<pre><code>/**\n * 代码注释1\n * 代码注释2\n */\n ```\n\n  多行注释建议在以下几种情况使用：\n  - 难于理解的代码段\n  - 可能存在错误的代码段\n  - 浏览器特殊的 HACK 代码\n  - 业务逻辑强相关的代码\n\n- 函数注释（必须）\n\n复杂的函数，所有类，都必须进行标准函数注释，示例如下。\n&gt; 理由：函数注释使用业界统一的规范，方便后续使用 jsdoc 生成文档。\n```js\n/**\n * 获取任务的名称\n * @param id {Number} 传入需要获取名称的人物id\n * @return {String} 返回的姓名\n * @author shi 2015/07/21 可以不写\n * @version 1.1.0 可以不写\n * @example 示例代码，可以不写\n */\nfunction getTaskName(id) {\n  let name = &quot;test&quot;;\n  return name;\n}</code></pre>","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>严格模式：开启（必须）</p>\n<blockquote>\n<p>理由：能够避免一些不精通js特性导致的坑，如==和===，得益于js早期糟糕的设计，有太多这样的问题。需要注意的是，严格模式在ie9下不兼容，但该项目是vue体系项目至少运行在ie10以上故不需要考虑。</p>\n</blockquote>\n</li>\n<li><p>引号：一律使用单引号（必须）</p>\n<blockquote>\n<p>理由：可以和html的双引号更好的工作</p>\n</blockquote>\n</li>\n<li><p>分号：一律在语句结尾加分号（必须）</p>\n<blockquote>\n<p>理由：首先官方新规范是要求分号的，可以避免不必要的坑。</p>\n</blockquote>\n<pre><code>/* 不推荐的 */\nlet fn = {\nreturn 0\n}\n\n/* 推荐的 */\nlet fn = {\nreturn 0;\n}; //这里有分号</code></pre></li>\n</ul>\n<ul>\n<li>空白与格式（必须）</li>\n</ul>\n<p>在二元和三元运算符的符号与操作数之间添加空格，在非行末的 , ; } 后添加空格，在 { 前添加空格。并在每个逻辑块中间添加空白行。 特别的，在 if、while 等关键字后加空格，与函数调用做区分</p>\n<pre><code>/* 不推荐的 */\nlet foo=&apos;bar&apos;,hello=foo+2,test=true;\nfunction hi(){\n  // ...\n}\nif(foo&amp;&amp;hello){\n  // ...\n}else if(foo){\n  // ...\n}else if(! test){\n  // ...\n}\n\n/* 推荐的 */\nlet foo = &apos;bar&apos;;\nlet hello = foo + 2;\nlet test = true;\nfunction hi(arg1, arg2) {\n  // ...\n}\nif (foo &amp;&amp; hello) {\n  // ...\n} else if (foo) {\n  // ...\n} else if (!test) {\n  // ...\n}</code></pre><ul>\n<li><p>变量声明（必须）</p>\n<ul>\n<li>一个函数作用域中所有的变量声明尽量提到函数首部。</li>\n<li>如果可以使用 let 和 const 的，要使用 let 和 const。</li>\n<li>除了特殊情况如挂载全局jquery等外，不要定义全局变量。 &gt; 理由：第一条是保证可读性，第三条和第四条是安全的作用域，</li>\n</ul>\n</li>\n<li><p>变量命名（必须）</p>\n<ul>\n<li><p>变量全部使用小驼峰，如</p>\n</li>\n<li><p>常量使用大写匈牙利式命名法，如MAX_COUNT</p>\n</li>\n<li><p>组件名必须为多个单词，如ConfigCenter</p>\n</li>\n<li><p>组件名使用大驼峰命名，如ConfigCenter</p>\n</li>\n<li><p>构造函数与类，大写第一个字母，如Person()</p>\n</li>\n<li><p>jquery 对象必须以’$’开头命名</p>\n</li>\n<li><p>对象私有属性和方法，用’#’开头命名</p>\n</li>\n<li><p>不要使用复数，对于变量而言，复数还是非负数都一样 &gt; 理由：可读性好，实际这是js与vue.js官方推荐的命名方式整合。</p>\n<p>/* 推荐的 */<br>var thisIsMyName; // 变量<br>var MAX_COUNT = 10; // 常量<br>function Person(name) { // 构造函数<br>this.name = name;<br>}<br>var $body = $(“body”); // jquery对象<br>class Point { // 类<br>#x; // 私有属性<br>#y;</p>\n<p>constructor(x, y) {<br>  this.#x = x;<br>  this.#y = y;<br>}<br>}</p>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>括号（可选）</li>\n</ul>\n<p>下列关键字后必须有大括号（即使代码块的内容只有一行）：if, else, for, while, do, switch, try, catch, finally, with。大括号如果是单行，前后要加一个空格。</p>\n<blockquote>\n<p>理由：能够避免一些bug，提升可读性，方便复制代码而不复制到括号。</p>\n</blockquote>\n<pre><code>/* 不推荐的 */\nif (condition) doSomething();\n\n/* 推荐的 */\nif (condition) { doSomething() };\nimport { x, y } from myModule;</code></pre><ul>\n<li><p>对于循环和判断代码，不要循环或判断三层以上。（可选）</p>\n</li>\n<li><p>能用ES6、ES7等新版本ES语法的，尽量用新语法，包括不仅限于：（部分必须）</p>\n<ul>\n<li><p>使用对象和数组的解构赋值的方式实现多个变量的赋值。</p>\n<p>/* 不推荐的 */<br>let [a, b, c] = [1, ‘a’, [ 2 , 3]]</p>\n<p>/* 推荐的 */<br>let []</p>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>*   使用拓展运算符...对参数对象中的所有可遍历属性进行拷贝。\n\n*   小函数使用箭头函数来替代function，这里要注意箭头函数作用域问题。\n\n*   使用字符串模板进行字符串拼接。\n\n*   使用安全的块级作用域语法let和const。\n\n*   使用Object.assign()进行对象的浅拷贝。\n\n*   使用Set去重，以及替代元素不重复的数组。\n\n*   使用class语法替代原有的方式。\n\n*   使用函数参数的默认值替代 || 语法\n\n\n    /* 不推荐的 */\n    function f(x, y, z) {\n    y = 1 || undefined;\n    z = 2 || undefined\n    return x + y + z;\n    }\n\n    /* 推荐的 */\n    function f1(x, y = 4, z = 12) {\n    return x + y + z;\n    }\n\n\n*   使用对象中函数的缩写形式\n\n    /* 不推荐的 */\n    let obj = {\n    add: function() {}\n    }\n\n    /* 推荐的 */\n    let obj =  {\n    add() {}\n    }\n\n\n*   使用Promise，async-await解决回调函数多层嵌套问题。</code></pre><h2 id=\"注释与文档规范\"><a href=\"#注释与文档规范\" class=\"headerlink\" title=\"注释与文档规范\"></a>注释与文档规范</h2><ul>\n<li><p>单行注释（必须）</p>\n<ul>\n<li>注释单独一行的情况下，注释的//后面要跟一个空格</li>\n<li>注释如果和代码同一行，代码分号结束后，要跟一个空格，注释的//后也要跟一个空格 &gt; 理由：写起来简单，看上去直观。</li>\n</ul>\n<p>// 调用函数<br>foo();</p>\n<p>var maxCount = 10; // 这是一个变量</p>\n</li>\n</ul>\n<ul>\n<li>多行注释（必须）</li>\n</ul>\n<p>多行注释使用下面这种形式</p>\n<blockquote>\n<p>理由：js统一的规范，官方也是这么写的。</p>\n</blockquote>\n<pre><code>/**\n * 代码注释1\n * 代码注释2\n */\n ```\n\n  多行注释建议在以下几种情况使用：\n  - 难于理解的代码段\n  - 可能存在错误的代码段\n  - 浏览器特殊的 HACK 代码\n  - 业务逻辑强相关的代码\n\n- 函数注释（必须）\n\n复杂的函数，所有类，都必须进行标准函数注释，示例如下。\n&gt; 理由：函数注释使用业界统一的规范，方便后续使用 jsdoc 生成文档。\n```js\n/**\n * 获取任务的名称\n * @param id {Number} 传入需要获取名称的人物id\n * @return {String} 返回的姓名\n * @author shi 2015/07/21 可以不写\n * @version 1.1.0 可以不写\n * @example 示例代码，可以不写\n */\nfunction getTaskName(id) {\n  let name = &quot;test&quot;;\n  return name;\n}</code></pre>"},{"title":"前端代码风格指南——vue篇","url":"214.html","id":"214","date":"2018-11-08T17:29:45.000Z","_content":"\n是我常用的一套开发标准，借鉴、删减、自创的一些规则，保留的基本都是比较实用的。用于统一代码风格。并给出了每条标准的理由。\n\n* * *\n\n*   组件名为多个单词（必须） \\> 理由：这样做可以避免跟现有的以及未来的 HTML 元素相冲突，因为所有的 HTML 元素名称都是单个单词的。\n\n    /* 不推荐的 */\n    Vue.component('todo', {\n      // ...\n    })\n    export default {\n      name: 'Todo',\n      // ...\n    }\n    \n    /* 推荐的 */\n    Vue.component('todo-item', {\n      // ...\n    })\n    export default {\n      name: 'TodoItem',\n      // ...\n    }\n    \n\n*   prop 的定义应该尽量详细，至少需要指定其类型（必须） > 理由：一目了然的知道prop是什么，并且在类型报错时可以顺利定位。\n\n    /* 不推荐的，可以在demo和原型中使用 */\n    props: ['status']\n    \n    /* 推荐的 */\n    props: {\n      status: String\n    }\n    \n    /* 最好的 */\n    props: {\n      status: {\n        type: String,\n        required: true,\n        validator(value) {\n          return [\n            'syncing',\n            'synced',\n            'version-conflict',\n            'error'\n          ].indexOf(value) !== -1\n        }\n      }\n    }\n    \n\n*   为v-for设置index与key > 理由：方便维护内部组件及其子树的状态\n\n    /* 不推荐的 */\n    <ul>\n      <li v-for=\"todo in todos\">\n        { { todo.text }}\n      </li>\n    </ul>\n    \n    /* 推荐的 */\n    <ul>\n      <li\n        v-for=\"todo in todos\"\n        :key=\"todo.id\"\n      >\n        { { todo.text }}\n      </li>\n    </ul>\n    \n\n*   组件命名（可选）\n    \n    *   单文件组件的文件名应该要么始终是单词大写开头 (PascalCase)，要么始终是横线连接 (kebab-case) > 理由：单词大写开头对于代码编辑器的自动补全最为友好，而对于模板横线连接可以避免大小写不敏感的问题。\n    \n        /* 不推荐的 */\n        <ul>\n        <li v-for=\"todo in todos\">\n          { { todo.text }}\n        </li>\n        </ul>\n        \n        /* 推荐的 */\n        <ul>\n        <li\n          v-for=\"todo in todos\"\n          :key=\"todo.id\"\n        >\n          { { todo.text }}\n        </li>\n        </ul>\n        \n    \n    *   只应该拥有单个活跃实例的组件应该以 The 前缀命名，以示其唯一性 > 理由：增加项目可读性。\n    \n        /* 不推荐的 */\n        components/\n        |- Heading.vue\n        |- MySidebar.vue\n        \n        /* 推荐的 */\n        components/\n        |- TheHeading.vue\n        |- TheSidebar.vue\n        \n    \n    *   和父组件紧密耦合的子组件应该以父组件名作为前缀命名 \\> 理由：增加项目可读性与层级性。\n    \n        /* 不推荐的 */\n        components/\n        |- TodoList.vue\n        |- TodoItem.vue\n        |- TodoButton.vue\n        \n        /* 推荐的 */\n        components/\n        |- TodoList.vue\n        |- TodoListItem.vue\n        |- TodoListItemButton.vue\n        \n    \n    *   组件名应该以高级别的 (通常是一般化描述的) 单词开头，以描述性的修饰词结尾 \\> 理由：可以首先知道这个组件大概是什么东西，然后知道细节，此外与自然语法相反的这种描述是为了减少连接词的数量，否则组件名会变得很长\n    \n        /* 不推荐的 */\n        components/\n        |- ClearSearchButton.vue\n        |- ExcludeFromSearchInput.vue\n        |- LaunchOnStartupCheckbox.vue\n        |- RunSearchButton.vue\n        |- SearchInput.vue\n        |- TermsCheckbox.vue\n        \n        /* 推荐的 */\n        components/\n        |- SearchButtonClear.vue\n        |- SearchButtonRun.vue\n        |- SearchInputQuery.vue\n        |- SearchInputExcludeGlob.vue\n        |- SettingsCheckboxTerms.vue\n        |- SettingsCheckboxLaunchOnStartup.vue\n        \n    \n    *   对于绝大多数项目来说，在单文件组件和字符串模板中组件名应该总是 PascalCase 的——但是在 DOM 模板中总是 kebab-case 的 > 理由：编辑器可以自动补全组件名，大驼峰保证了视觉的易识别性，但HTML是大小写不敏感，所以要使用横线连接式。\n    \n        /* 不推荐的 */\n        <!-- 在单文件组件和字符串模板中 -->\n        <mycomponent/>\n        <!-- 在单文件组件和字符串模板中 -->\n        <myComponent/>\n        <!-- 在 DOM 模板中 -->\n        <MyComponent></MyComponent>\n        \n        /* 推荐的 */\n        <!-- 在单文件组件和字符串模板中 -->\n        <MyComponent/>\n        <!-- 在 DOM 模板中 -->\n        <my-component></my-component>\n        \n    \n*   在声明 prop 的时候，其命名应该始终使用 camelCase，而在模板和 JSX 中应该始终使用 kebab-case（建议）\n    \n    > 理由：\b\b遵循js和html的命名习惯。\n    \n\n    /* 不推荐的 */\n    props: {\n      'greeting-text': String\n    }\n    <WelcomeMessage greetingText=\"hi\"/>\n    \n    /* 推荐的 */\n    props: {\n      greetingText: String\n    }\n    <WelcomeMessage greeting-text=\"hi\"/>\n    \n\n*   模板中的属性多于3个时候，分行写属性（推荐） > 理由：首先太多的话分行不好读，其次这样比较好看；少的话即使在一行读起来问题不大，而且一行可以少点行数\n\n    /* 不推荐的 */\n    <el-option v-for=\"item in options\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\">\n    </el-option>\n    \n    /* 推荐的 */\n    <el-option\n      v-for=\"item in options\"\n      :key=\"item.value\"\n      :label=\"item.label\"\n      :value=\"item.value\">\n    </el-option>\n    \n      <el-button plain @click=\"open\">可自动关闭</el-button>\n    \n\n*   指令全部使用缩写 ，用 : 表示 v-bind: 和用 @ 表示 v-on:（推荐） > 理由：一样的东西能少些为什么要多写。\n\n    /* 不推荐的 */\n      <input\n        v-bind:value=\"newTodoText\"\n        @focus=\"onFocus\"\n      >\n    \n    /* 推荐的 */\n      <input\n        :value=\"newTodoText\"\n        @focus=\"onFocus\"\n      >\n    \n    /* 最差的 */\n      <input\n        v-on:input=\"onInput\"\n        @focus=\"onFocus\"\n      >","source":"_posts/e5-89-8d-e7-ab-af-e4-bb-a3-e7-a0-81-e9-a3-8e-e6-a0-bc-e6-8c-87-e5-8d-97-vue-e7-af-87.md","raw":"---\ntitle: 前端代码风格指南——vue篇\nurl: 214.html\nid: 214\ncategories:\n  - 前端\ndate: 2018-11-09 01:29:45\ntags:\n---\n\n是我常用的一套开发标准，借鉴、删减、自创的一些规则，保留的基本都是比较实用的。用于统一代码风格。并给出了每条标准的理由。\n\n* * *\n\n*   组件名为多个单词（必须） \\> 理由：这样做可以避免跟现有的以及未来的 HTML 元素相冲突，因为所有的 HTML 元素名称都是单个单词的。\n\n    /* 不推荐的 */\n    Vue.component('todo', {\n      // ...\n    })\n    export default {\n      name: 'Todo',\n      // ...\n    }\n    \n    /* 推荐的 */\n    Vue.component('todo-item', {\n      // ...\n    })\n    export default {\n      name: 'TodoItem',\n      // ...\n    }\n    \n\n*   prop 的定义应该尽量详细，至少需要指定其类型（必须） > 理由：一目了然的知道prop是什么，并且在类型报错时可以顺利定位。\n\n    /* 不推荐的，可以在demo和原型中使用 */\n    props: ['status']\n    \n    /* 推荐的 */\n    props: {\n      status: String\n    }\n    \n    /* 最好的 */\n    props: {\n      status: {\n        type: String,\n        required: true,\n        validator(value) {\n          return [\n            'syncing',\n            'synced',\n            'version-conflict',\n            'error'\n          ].indexOf(value) !== -1\n        }\n      }\n    }\n    \n\n*   为v-for设置index与key > 理由：方便维护内部组件及其子树的状态\n\n    /* 不推荐的 */\n    <ul>\n      <li v-for=\"todo in todos\">\n        { { todo.text }}\n      </li>\n    </ul>\n    \n    /* 推荐的 */\n    <ul>\n      <li\n        v-for=\"todo in todos\"\n        :key=\"todo.id\"\n      >\n        { { todo.text }}\n      </li>\n    </ul>\n    \n\n*   组件命名（可选）\n    \n    *   单文件组件的文件名应该要么始终是单词大写开头 (PascalCase)，要么始终是横线连接 (kebab-case) > 理由：单词大写开头对于代码编辑器的自动补全最为友好，而对于模板横线连接可以避免大小写不敏感的问题。\n    \n        /* 不推荐的 */\n        <ul>\n        <li v-for=\"todo in todos\">\n          { { todo.text }}\n        </li>\n        </ul>\n        \n        /* 推荐的 */\n        <ul>\n        <li\n          v-for=\"todo in todos\"\n          :key=\"todo.id\"\n        >\n          { { todo.text }}\n        </li>\n        </ul>\n        \n    \n    *   只应该拥有单个活跃实例的组件应该以 The 前缀命名，以示其唯一性 > 理由：增加项目可读性。\n    \n        /* 不推荐的 */\n        components/\n        |- Heading.vue\n        |- MySidebar.vue\n        \n        /* 推荐的 */\n        components/\n        |- TheHeading.vue\n        |- TheSidebar.vue\n        \n    \n    *   和父组件紧密耦合的子组件应该以父组件名作为前缀命名 \\> 理由：增加项目可读性与层级性。\n    \n        /* 不推荐的 */\n        components/\n        |- TodoList.vue\n        |- TodoItem.vue\n        |- TodoButton.vue\n        \n        /* 推荐的 */\n        components/\n        |- TodoList.vue\n        |- TodoListItem.vue\n        |- TodoListItemButton.vue\n        \n    \n    *   组件名应该以高级别的 (通常是一般化描述的) 单词开头，以描述性的修饰词结尾 \\> 理由：可以首先知道这个组件大概是什么东西，然后知道细节，此外与自然语法相反的这种描述是为了减少连接词的数量，否则组件名会变得很长\n    \n        /* 不推荐的 */\n        components/\n        |- ClearSearchButton.vue\n        |- ExcludeFromSearchInput.vue\n        |- LaunchOnStartupCheckbox.vue\n        |- RunSearchButton.vue\n        |- SearchInput.vue\n        |- TermsCheckbox.vue\n        \n        /* 推荐的 */\n        components/\n        |- SearchButtonClear.vue\n        |- SearchButtonRun.vue\n        |- SearchInputQuery.vue\n        |- SearchInputExcludeGlob.vue\n        |- SettingsCheckboxTerms.vue\n        |- SettingsCheckboxLaunchOnStartup.vue\n        \n    \n    *   对于绝大多数项目来说，在单文件组件和字符串模板中组件名应该总是 PascalCase 的——但是在 DOM 模板中总是 kebab-case 的 > 理由：编辑器可以自动补全组件名，大驼峰保证了视觉的易识别性，但HTML是大小写不敏感，所以要使用横线连接式。\n    \n        /* 不推荐的 */\n        <!-- 在单文件组件和字符串模板中 -->\n        <mycomponent/>\n        <!-- 在单文件组件和字符串模板中 -->\n        <myComponent/>\n        <!-- 在 DOM 模板中 -->\n        <MyComponent></MyComponent>\n        \n        /* 推荐的 */\n        <!-- 在单文件组件和字符串模板中 -->\n        <MyComponent/>\n        <!-- 在 DOM 模板中 -->\n        <my-component></my-component>\n        \n    \n*   在声明 prop 的时候，其命名应该始终使用 camelCase，而在模板和 JSX 中应该始终使用 kebab-case（建议）\n    \n    > 理由：\b\b遵循js和html的命名习惯。\n    \n\n    /* 不推荐的 */\n    props: {\n      'greeting-text': String\n    }\n    <WelcomeMessage greetingText=\"hi\"/>\n    \n    /* 推荐的 */\n    props: {\n      greetingText: String\n    }\n    <WelcomeMessage greeting-text=\"hi\"/>\n    \n\n*   模板中的属性多于3个时候，分行写属性（推荐） > 理由：首先太多的话分行不好读，其次这样比较好看；少的话即使在一行读起来问题不大，而且一行可以少点行数\n\n    /* 不推荐的 */\n    <el-option v-for=\"item in options\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\">\n    </el-option>\n    \n    /* 推荐的 */\n    <el-option\n      v-for=\"item in options\"\n      :key=\"item.value\"\n      :label=\"item.label\"\n      :value=\"item.value\">\n    </el-option>\n    \n      <el-button plain @click=\"open\">可自动关闭</el-button>\n    \n\n*   指令全部使用缩写 ，用 : 表示 v-bind: 和用 @ 表示 v-on:（推荐） > 理由：一样的东西能少些为什么要多写。\n\n    /* 不推荐的 */\n      <input\n        v-bind:value=\"newTodoText\"\n        @focus=\"onFocus\"\n      >\n    \n    /* 推荐的 */\n      <input\n        :value=\"newTodoText\"\n        @focus=\"onFocus\"\n      >\n    \n    /* 最差的 */\n      <input\n        v-on:input=\"onInput\"\n        @focus=\"onFocus\"\n      >","slug":"e5-89-8d-e7-ab-af-e4-bb-a3-e7-a0-81-e9-a3-8e-e6-a0-bc-e6-8c-87-e5-8d-97-vue-e7-af-87","published":1,"updated":"2020-05-19T08:33:55.927Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts7y70016zmz88y588wnq","content":"<p>是我常用的一套开发标准，借鉴、删减、自创的一些规则，保留的基本都是比较实用的。用于统一代码风格。并给出了每条标准的理由。</p>\n<hr>\n<ul>\n<li><p>组件名为多个单词（必须） &gt; 理由：这样做可以避免跟现有的以及未来的 HTML 元素相冲突，因为所有的 HTML 元素名称都是单个单词的。</p>\n<p>/* 不推荐的 */<br>Vue.component(‘todo’, {<br>  // …<br>})<br>export default {<br>  name: ‘Todo’,<br>  // …<br>}</p>\n<p>/* 推荐的 */<br>Vue.component(‘todo-item’, {<br>  // …<br>})<br>export default {<br>  name: ‘TodoItem’,<br>  // …<br>}</p>\n</li>\n</ul>\n<ul>\n<li><p>prop 的定义应该尽量详细，至少需要指定其类型（必须） &gt; 理由：一目了然的知道prop是什么，并且在类型报错时可以顺利定位。</p>\n<p>/* 不推荐的，可以在demo和原型中使用 */<br>props: [‘status’]</p>\n<p>/* 推荐的 */<br>props: {<br>  status: String<br>}</p>\n<p>/* 最好的 */<br>props: {<br>  status: {</p>\n<pre><code>type: String,\nrequired: true,\nvalidator(value) {\n  return [\n    &apos;syncing&apos;,\n    &apos;synced&apos;,\n    &apos;version-conflict&apos;,\n    &apos;error&apos;\n  ].indexOf(value) !== -1\n}</code></pre><p>  }<br>}</p>\n</li>\n</ul>\n<ul>\n<li><p>为v-for设置index与key &gt; 理由：方便维护内部组件及其子树的状态</p>\n<p>/* 不推荐的 */</p>\n<ul>\n  <li v-for=\"todo in todos\">\n    { { todo.text }}\n  </li>\n</ul>\n\n<p>/* 推荐的 */</p>\n<ul>\n  <li\n    v-for=\"todo in todos\"\n    :key=\"todo.id\"\n  >\n    { { todo.text }}\n  </li>\n</ul>\n\n\n</li>\n</ul>\n<ul>\n<li><p>组件命名（可选）</p>\n<ul>\n<li><p>单文件组件的文件名应该要么始终是单词大写开头 (PascalCase)，要么始终是横线连接 (kebab-case) &gt; 理由：单词大写开头对于代码编辑器的自动补全最为友好，而对于模板横线连接可以避免大小写不敏感的问题。</p>\n<p>/* 不推荐的 */</p>\n<ul>\n<li v-for=\"todo in todos\">\n  { { todo.text }}\n</li>\n</ul>\n\n<p>/* 推荐的 */</p>\n<ul>\n<li\n  v-for=\"todo in todos\"\n  :key=\"todo.id\"\n>\n  { { todo.text }}\n</li>\n</ul>\n\n\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>*   只应该拥有单个活跃实例的组件应该以 The 前缀命名，以示其唯一性 &gt; 理由：增加项目可读性。\n\n    /* 不推荐的 */\n    components/\n    |- Heading.vue\n    |- MySidebar.vue\n\n    /* 推荐的 */\n    components/\n    |- TheHeading.vue\n    |- TheSidebar.vue\n\n\n*   和父组件紧密耦合的子组件应该以父组件名作为前缀命名 \\&gt; 理由：增加项目可读性与层级性。\n\n    /* 不推荐的 */\n    components/\n    |- TodoList.vue\n    |- TodoItem.vue\n    |- TodoButton.vue\n\n    /* 推荐的 */\n    components/\n    |- TodoList.vue\n    |- TodoListItem.vue\n    |- TodoListItemButton.vue\n\n\n*   组件名应该以高级别的 (通常是一般化描述的) 单词开头，以描述性的修饰词结尾 \\&gt; 理由：可以首先知道这个组件大概是什么东西，然后知道细节，此外与自然语法相反的这种描述是为了减少连接词的数量，否则组件名会变得很长\n\n    /* 不推荐的 */\n    components/\n    |- ClearSearchButton.vue\n    |- ExcludeFromSearchInput.vue\n    |- LaunchOnStartupCheckbox.vue\n    |- RunSearchButton.vue\n    |- SearchInput.vue\n    |- TermsCheckbox.vue\n\n    /* 推荐的 */\n    components/\n    |- SearchButtonClear.vue\n    |- SearchButtonRun.vue\n    |- SearchInputQuery.vue\n    |- SearchInputExcludeGlob.vue\n    |- SettingsCheckboxTerms.vue\n    |- SettingsCheckboxLaunchOnStartup.vue\n\n\n*   对于绝大多数项目来说，在单文件组件和字符串模板中组件名应该总是 PascalCase 的——但是在 DOM 模板中总是 kebab-case 的 &gt; 理由：编辑器可以自动补全组件名，大驼峰保证了视觉的易识别性，但HTML是大小写不敏感，所以要使用横线连接式。\n\n    /* 不推荐的 */\n    &lt;!-- 在单文件组件和字符串模板中 --&gt;\n    &lt;mycomponent/&gt;\n    &lt;!-- 在单文件组件和字符串模板中 --&gt;\n    &lt;myComponent/&gt;\n    &lt;!-- 在 DOM 模板中 --&gt;\n    &lt;MyComponent&gt;&lt;/MyComponent&gt;\n\n    /* 推荐的 */\n    &lt;!-- 在单文件组件和字符串模板中 --&gt;\n    &lt;MyComponent/&gt;\n    &lt;!-- 在 DOM 模板中 --&gt;\n    &lt;my-component&gt;&lt;/my-component&gt;</code></pre><ul>\n<li><p>在声明 prop 的时候，其命名应该始终使用 camelCase，而在模板和 JSX 中应该始终使用 kebab-case（建议）</p>\n<blockquote>\n<p>理由：\b\b遵循js和html的命名习惯。</p>\n</blockquote>\n</li>\n</ul>\n<pre><code>/* 不推荐的 */\nprops: {\n  &apos;greeting-text&apos;: String\n}\n&lt;WelcomeMessage greetingText=&quot;hi&quot;/&gt;\n\n/* 推荐的 */\nprops: {\n  greetingText: String\n}\n&lt;WelcomeMessage greeting-text=&quot;hi&quot;/&gt;</code></pre><ul>\n<li><p>模板中的属性多于3个时候，分行写属性（推荐） &gt; 理由：首先太多的话分行不好读，其次这样比较好看；少的话即使在一行读起来问题不大，而且一行可以少点行数</p>\n<p>/* 不推荐的 */</p>\n<el-option v-for=\"item in options\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\">\n</el-option>\n\n<p>/* 推荐的 */<br><el-option\n  v-for=\"item in options\"\n  :key=\"item.value\"\n  :label=\"item.label\"\n  :value=\"item.value\"></p>\n</el-option>\n\n<p>  &lt;el-button plain @click=”open”&gt;可自动关闭</el-button></p>\n</li>\n</ul>\n<ul>\n<li><p>指令全部使用缩写 ，用 : 表示 v-bind: 和用 @ 表示 v-on:（推荐） &gt; 理由：一样的东西能少些为什么要多写。</p>\n<p>/* 不推荐的 */<br>  &lt;input</p>\n<pre><code>v-bind:value=&quot;newTodoText&quot;\n@focus=&quot;onFocus&quot;</code></pre><blockquote>\n</blockquote>\n<p>/* 推荐的 */<br>  &lt;input</p>\n<pre><code>:value=&quot;newTodoText&quot;\n@focus=&quot;onFocus&quot;</code></pre><blockquote>\n</blockquote>\n<p>/* 最差的 */<br>  &lt;input</p>\n<pre><code>v-on:input=&quot;onInput&quot;\n@focus=&quot;onFocus&quot;</code></pre><blockquote>\n</blockquote>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>是我常用的一套开发标准，借鉴、删减、自创的一些规则，保留的基本都是比较实用的。用于统一代码风格。并给出了每条标准的理由。</p>\n<hr>\n<ul>\n<li><p>组件名为多个单词（必须） &gt; 理由：这样做可以避免跟现有的以及未来的 HTML 元素相冲突，因为所有的 HTML 元素名称都是单个单词的。</p>\n<p>/* 不推荐的 */<br>Vue.component(‘todo’, {<br>  // …<br>})<br>export default {<br>  name: ‘Todo’,<br>  // …<br>}</p>\n<p>/* 推荐的 */<br>Vue.component(‘todo-item’, {<br>  // …<br>})<br>export default {<br>  name: ‘TodoItem’,<br>  // …<br>}</p>\n</li>\n</ul>\n<ul>\n<li><p>prop 的定义应该尽量详细，至少需要指定其类型（必须） &gt; 理由：一目了然的知道prop是什么，并且在类型报错时可以顺利定位。</p>\n<p>/* 不推荐的，可以在demo和原型中使用 */<br>props: [‘status’]</p>\n<p>/* 推荐的 */<br>props: {<br>  status: String<br>}</p>\n<p>/* 最好的 */<br>props: {<br>  status: {</p>\n<pre><code>type: String,\nrequired: true,\nvalidator(value) {\n  return [\n    &apos;syncing&apos;,\n    &apos;synced&apos;,\n    &apos;version-conflict&apos;,\n    &apos;error&apos;\n  ].indexOf(value) !== -1\n}</code></pre><p>  }<br>}</p>\n</li>\n</ul>\n<ul>\n<li><p>为v-for设置index与key &gt; 理由：方便维护内部组件及其子树的状态</p>\n<p>/* 不推荐的 */</p>\n<ul>\n  <li v-for=\"todo in todos\">\n    { { todo.text }}\n  </li>\n</ul>\n\n<p>/* 推荐的 */</p>\n<ul>\n  <li\n    v-for=\"todo in todos\"\n    :key=\"todo.id\"\n  >\n    { { todo.text }}\n  </li>\n</ul>\n\n\n</li>\n</ul>\n<ul>\n<li><p>组件命名（可选）</p>\n<ul>\n<li><p>单文件组件的文件名应该要么始终是单词大写开头 (PascalCase)，要么始终是横线连接 (kebab-case) &gt; 理由：单词大写开头对于代码编辑器的自动补全最为友好，而对于模板横线连接可以避免大小写不敏感的问题。</p>\n<p>/* 不推荐的 */</p>\n<ul>\n<li v-for=\"todo in todos\">\n  { { todo.text }}\n</li>\n</ul>\n\n<p>/* 推荐的 */</p>\n<ul>\n<li\n  v-for=\"todo in todos\"\n  :key=\"todo.id\"\n>\n  { { todo.text }}\n</li>\n</ul>\n\n\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>*   只应该拥有单个活跃实例的组件应该以 The 前缀命名，以示其唯一性 &gt; 理由：增加项目可读性。\n\n    /* 不推荐的 */\n    components/\n    |- Heading.vue\n    |- MySidebar.vue\n\n    /* 推荐的 */\n    components/\n    |- TheHeading.vue\n    |- TheSidebar.vue\n\n\n*   和父组件紧密耦合的子组件应该以父组件名作为前缀命名 \\&gt; 理由：增加项目可读性与层级性。\n\n    /* 不推荐的 */\n    components/\n    |- TodoList.vue\n    |- TodoItem.vue\n    |- TodoButton.vue\n\n    /* 推荐的 */\n    components/\n    |- TodoList.vue\n    |- TodoListItem.vue\n    |- TodoListItemButton.vue\n\n\n*   组件名应该以高级别的 (通常是一般化描述的) 单词开头，以描述性的修饰词结尾 \\&gt; 理由：可以首先知道这个组件大概是什么东西，然后知道细节，此外与自然语法相反的这种描述是为了减少连接词的数量，否则组件名会变得很长\n\n    /* 不推荐的 */\n    components/\n    |- ClearSearchButton.vue\n    |- ExcludeFromSearchInput.vue\n    |- LaunchOnStartupCheckbox.vue\n    |- RunSearchButton.vue\n    |- SearchInput.vue\n    |- TermsCheckbox.vue\n\n    /* 推荐的 */\n    components/\n    |- SearchButtonClear.vue\n    |- SearchButtonRun.vue\n    |- SearchInputQuery.vue\n    |- SearchInputExcludeGlob.vue\n    |- SettingsCheckboxTerms.vue\n    |- SettingsCheckboxLaunchOnStartup.vue\n\n\n*   对于绝大多数项目来说，在单文件组件和字符串模板中组件名应该总是 PascalCase 的——但是在 DOM 模板中总是 kebab-case 的 &gt; 理由：编辑器可以自动补全组件名，大驼峰保证了视觉的易识别性，但HTML是大小写不敏感，所以要使用横线连接式。\n\n    /* 不推荐的 */\n    &lt;!-- 在单文件组件和字符串模板中 --&gt;\n    &lt;mycomponent/&gt;\n    &lt;!-- 在单文件组件和字符串模板中 --&gt;\n    &lt;myComponent/&gt;\n    &lt;!-- 在 DOM 模板中 --&gt;\n    &lt;MyComponent&gt;&lt;/MyComponent&gt;\n\n    /* 推荐的 */\n    &lt;!-- 在单文件组件和字符串模板中 --&gt;\n    &lt;MyComponent/&gt;\n    &lt;!-- 在 DOM 模板中 --&gt;\n    &lt;my-component&gt;&lt;/my-component&gt;</code></pre><ul>\n<li><p>在声明 prop 的时候，其命名应该始终使用 camelCase，而在模板和 JSX 中应该始终使用 kebab-case（建议）</p>\n<blockquote>\n<p>理由：\b\b遵循js和html的命名习惯。</p>\n</blockquote>\n</li>\n</ul>\n<pre><code>/* 不推荐的 */\nprops: {\n  &apos;greeting-text&apos;: String\n}\n&lt;WelcomeMessage greetingText=&quot;hi&quot;/&gt;\n\n/* 推荐的 */\nprops: {\n  greetingText: String\n}\n&lt;WelcomeMessage greeting-text=&quot;hi&quot;/&gt;</code></pre><ul>\n<li><p>模板中的属性多于3个时候，分行写属性（推荐） &gt; 理由：首先太多的话分行不好读，其次这样比较好看；少的话即使在一行读起来问题不大，而且一行可以少点行数</p>\n<p>/* 不推荐的 */</p>\n<el-option v-for=\"item in options\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\">\n</el-option>\n\n<p>/* 推荐的 */<br><el-option\n  v-for=\"item in options\"\n  :key=\"item.value\"\n  :label=\"item.label\"\n  :value=\"item.value\"></p>\n</el-option>\n\n<p>  &lt;el-button plain @click=”open”&gt;可自动关闭</el-button></p>\n</li>\n</ul>\n<ul>\n<li><p>指令全部使用缩写 ，用 : 表示 v-bind: 和用 @ 表示 v-on:（推荐） &gt; 理由：一样的东西能少些为什么要多写。</p>\n<p>/* 不推荐的 */<br>  &lt;input</p>\n<pre><code>v-bind:value=&quot;newTodoText&quot;\n@focus=&quot;onFocus&quot;</code></pre><blockquote>\n</blockquote>\n<p>/* 推荐的 */<br>  &lt;input</p>\n<pre><code>:value=&quot;newTodoText&quot;\n@focus=&quot;onFocus&quot;</code></pre><blockquote>\n</blockquote>\n<p>/* 最差的 */<br>  &lt;input</p>\n<pre><code>v-on:input=&quot;onInput&quot;\n@focus=&quot;onFocus&quot;</code></pre><blockquote>\n</blockquote>\n</li>\n</ul>\n"},{"title":"前端安全小结","url":"50.html","id":"50","date":"2017-09-22T15:08:02.000Z","_content":"\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0035.jpg) 读阿里吴翰清大神《白帽子谈Web安全》的总结。 ![](http://7xqgks.com1.z0.glb.clouddn.com/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8.png)","source":"_posts/e5-89-8d-e7-ab-af-e5-ae-89-e5-85-a8-e5-b0-8f-e7-bb-93.md","raw":"---\ntitle: 前端安全小结\ntags:\n  - 安全\nurl: 50.html\nid: 50\ncategories:\n  - 前端\ndate: 2017-09-22 23:08:02\n---\n\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0035.jpg) 读阿里吴翰清大神《白帽子谈Web安全》的总结。 ![](http://7xqgks.com1.z0.glb.clouddn.com/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8.png)","slug":"e5-89-8d-e7-ab-af-e5-ae-89-e5-85-a8-e5-b0-8f-e7-bb-93","published":1,"updated":"2020-05-19T08:33:55.926Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts7y9001azmz80u5g7lkx","content":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0035.jpg\" alt=\"\"> 读阿里吴翰清大神《白帽子谈Web安全》的总结。 <img src=\"http://7xqgks.com1.z0.glb.clouddn.com/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0035.jpg\" alt=\"\"> 读阿里吴翰清大神《白帽子谈Web安全》的总结。 <img src=\"http://7xqgks.com1.z0.glb.clouddn.com/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8.png\" alt=\"\"></p>\n"},{"title":"前端日志工具logrocket入门简介","url":"103.html","id":"103","date":"2018-01-30T13:45:25.000Z","_content":"\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0067.jpg)\n\n工具简介\n====\n\nLogRocket 是一个前端日志工具，它可以让你像发生在自己的浏览器中那样重现问题。无需猜测错误发生的原因，或者要求用户截图以及日志转储，LogRocket 可以让你重现会话以便快速了解发生了什么错误。无需考虑框架，它适用于任何应用程序，也有插件可以从 Redux、Vuex和@ngrx/tore 上记录额外的上下文。 LogRocket通过从应用程序中捕获日志和会话记录来帮助您修复错误并了解用户的行为。 ![](https://files.readme.io/b38e152-developer_hero.png)\n\n开始\n==\n\n1.LogRocket开始非常简单，访问https://app.logrocket.com 获取应用程序ID。 2.通过npm安装LogRocket并且在应用中进行集成。\n\n    $ npm i --save logrocket\n    \n    // Code:\n    \n    import LogRocket from 'logrocket';\n    LogRocket.init('app/id');\n    \n\n3.添加相关中间件 可以选择添加三大框架对应的中间件，进一步提高集成度 [redux](https://docs.logrocket.com/docs/redux-middleware) [ngrx](https://docs.logrocket.com/docs/ngrx-middleware) [vuex](https://docs.logrocket.com/docs/vuex-plugin)\n\n原理\n==\n\nLogRocket是一个JavaScript SDK，通过拦截网站/应用程序中的操作（如网络请求，触摸操作和Redux事件）并将其发送到远程服务器来工作。 您的应用中的每个用户会话都与唯一的LogRocket标识符关联。这些用户会话可以加入到适当的URL，以集成方式提供给开发人员。\n\nLogRocket能做什么\n=============\n\n前端调试一向比较坑爹，LogRocket就是解决这个问题的。具体包括： **1.修复错误** ![](https://files.readme.io/325de23-Group_13.png) LogRocket向您显示影响用户的最高错误，并为您提供每个错误报告的回放与日志。观看回放与日志有助于您了解用户如何触发错误。 网络请求，JavaScript异常和代码错误都在LogRocket中捕获和重放，可以检查原始HTML / CSS以了解和重现UI错误。 **2.集成后端日志记录工具** 在对后端错误进行分类时，可能不清楚为什么前端提出了意外的请求。LogRocket集成了后端日志记录和错误报告工具，以显示每个后端错误和日志条目的相应前端会话日志。 **3.支持度** ![](https://files.readme.io/f891fbf-Group_11.png) 通常情况下，用户上报问题时，并不能给出足够的上下文来判断到底发生了什么。 如果你正在使用一个像Intercom的聊天工具，你可以直接将LogRocket整合进去，从而无论用户何时开始聊天，你都可以插入一条记录链接。 **4.依靠流量并发现用户体验问题** ![](https://files.readme.io/2b33467-Group_14.png) 由于LogRocket记录了一切，因此可以在事实之后智能地发现问题。我们可以根据事件进行搜索和过滤，例如让我们的系统自动检测到用户感到沮丧的时刻——比如愤怒点击了按钮。 LogRocket可以通过一些属性（如用户电子邮件，名称，注册日期，位置，状态，持续时间，页面访问等等）来搜索和过滤会话。如果它发生在应用程序中，可以使用LogRocket搜索来找到它。","source":"_posts/e5-89-8d-e7-ab-af-e6-97-a5-e5-bf-97-e5-b7-a5-e5-85-b7logrocket-e5-85-a5-e9-97-a8-e7-ae-80-e4-bb-8b.md","raw":"---\ntitle: 前端日志工具logrocket入门简介\ntags:\n  - 前端\n  - 前端工程化\n  - 调试\nurl: 103.html\nid: 103\ncategories:\n  - 前端\ndate: 2018-01-30 21:45:25\n---\n\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0067.jpg)\n\n工具简介\n====\n\nLogRocket 是一个前端日志工具，它可以让你像发生在自己的浏览器中那样重现问题。无需猜测错误发生的原因，或者要求用户截图以及日志转储，LogRocket 可以让你重现会话以便快速了解发生了什么错误。无需考虑框架，它适用于任何应用程序，也有插件可以从 Redux、Vuex和@ngrx/tore 上记录额外的上下文。 LogRocket通过从应用程序中捕获日志和会话记录来帮助您修复错误并了解用户的行为。 ![](https://files.readme.io/b38e152-developer_hero.png)\n\n开始\n==\n\n1.LogRocket开始非常简单，访问https://app.logrocket.com 获取应用程序ID。 2.通过npm安装LogRocket并且在应用中进行集成。\n\n    $ npm i --save logrocket\n    \n    // Code:\n    \n    import LogRocket from 'logrocket';\n    LogRocket.init('app/id');\n    \n\n3.添加相关中间件 可以选择添加三大框架对应的中间件，进一步提高集成度 [redux](https://docs.logrocket.com/docs/redux-middleware) [ngrx](https://docs.logrocket.com/docs/ngrx-middleware) [vuex](https://docs.logrocket.com/docs/vuex-plugin)\n\n原理\n==\n\nLogRocket是一个JavaScript SDK，通过拦截网站/应用程序中的操作（如网络请求，触摸操作和Redux事件）并将其发送到远程服务器来工作。 您的应用中的每个用户会话都与唯一的LogRocket标识符关联。这些用户会话可以加入到适当的URL，以集成方式提供给开发人员。\n\nLogRocket能做什么\n=============\n\n前端调试一向比较坑爹，LogRocket就是解决这个问题的。具体包括： **1.修复错误** ![](https://files.readme.io/325de23-Group_13.png) LogRocket向您显示影响用户的最高错误，并为您提供每个错误报告的回放与日志。观看回放与日志有助于您了解用户如何触发错误。 网络请求，JavaScript异常和代码错误都在LogRocket中捕获和重放，可以检查原始HTML / CSS以了解和重现UI错误。 **2.集成后端日志记录工具** 在对后端错误进行分类时，可能不清楚为什么前端提出了意外的请求。LogRocket集成了后端日志记录和错误报告工具，以显示每个后端错误和日志条目的相应前端会话日志。 **3.支持度** ![](https://files.readme.io/f891fbf-Group_11.png) 通常情况下，用户上报问题时，并不能给出足够的上下文来判断到底发生了什么。 如果你正在使用一个像Intercom的聊天工具，你可以直接将LogRocket整合进去，从而无论用户何时开始聊天，你都可以插入一条记录链接。 **4.依靠流量并发现用户体验问题** ![](https://files.readme.io/2b33467-Group_14.png) 由于LogRocket记录了一切，因此可以在事实之后智能地发现问题。我们可以根据事件进行搜索和过滤，例如让我们的系统自动检测到用户感到沮丧的时刻——比如愤怒点击了按钮。 LogRocket可以通过一些属性（如用户电子邮件，名称，注册日期，位置，状态，持续时间，页面访问等等）来搜索和过滤会话。如果它发生在应用程序中，可以使用LogRocket搜索来找到它。","slug":"e5-89-8d-e7-ab-af-e6-97-a5-e5-bf-97-e5-b7-a5-e5-85-b7logrocket-e5-85-a5-e9-97-a8-e7-ae-80-e4-bb-8b","published":1,"updated":"2020-05-19T08:33:55.926Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts7ya001ezmz8gk4l1xhl","content":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0067.jpg\" alt=\"\"></p>\n<h1 id=\"工具简介\"><a href=\"#工具简介\" class=\"headerlink\" title=\"工具简介\"></a>工具简介</h1><p>LogRocket 是一个前端日志工具，它可以让你像发生在自己的浏览器中那样重现问题。无需猜测错误发生的原因，或者要求用户截图以及日志转储，LogRocket 可以让你重现会话以便快速了解发生了什么错误。无需考虑框架，它适用于任何应用程序，也有插件可以从 Redux、Vuex和@ngrx/tore 上记录额外的上下文。 LogRocket通过从应用程序中捕获日志和会话记录来帮助您修复错误并了解用户的行为。 <img src=\"https://files.readme.io/b38e152-developer_hero.png\" alt=\"\"></p>\n<h1 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h1><p>1.LogRocket开始非常简单，访问<a href=\"https://app.logrocket.com\" target=\"_blank\" rel=\"noopener\">https://app.logrocket.com</a> 获取应用程序ID。 2.通过npm安装LogRocket并且在应用中进行集成。</p>\n<pre><code>$ npm i --save logrocket\n\n// Code:\n\nimport LogRocket from &apos;logrocket&apos;;\nLogRocket.init(&apos;app/id&apos;);</code></pre><p>3.添加相关中间件 可以选择添加三大框架对应的中间件，进一步提高集成度 <a href=\"https://docs.logrocket.com/docs/redux-middleware\" target=\"_blank\" rel=\"noopener\">redux</a> <a href=\"https://docs.logrocket.com/docs/ngrx-middleware\" target=\"_blank\" rel=\"noopener\">ngrx</a> <a href=\"https://docs.logrocket.com/docs/vuex-plugin\" target=\"_blank\" rel=\"noopener\">vuex</a></p>\n<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p>LogRocket是一个JavaScript SDK，通过拦截网站/应用程序中的操作（如网络请求，触摸操作和Redux事件）并将其发送到远程服务器来工作。 您的应用中的每个用户会话都与唯一的LogRocket标识符关联。这些用户会话可以加入到适当的URL，以集成方式提供给开发人员。</p>\n<h1 id=\"LogRocket能做什么\"><a href=\"#LogRocket能做什么\" class=\"headerlink\" title=\"LogRocket能做什么\"></a>LogRocket能做什么</h1><p>前端调试一向比较坑爹，LogRocket就是解决这个问题的。具体包括： <strong>1.修复错误</strong> <img src=\"https://files.readme.io/325de23-Group_13.png\" alt=\"\"> LogRocket向您显示影响用户的最高错误，并为您提供每个错误报告的回放与日志。观看回放与日志有助于您了解用户如何触发错误。 网络请求，JavaScript异常和代码错误都在LogRocket中捕获和重放，可以检查原始HTML / CSS以了解和重现UI错误。 <strong>2.集成后端日志记录工具</strong> 在对后端错误进行分类时，可能不清楚为什么前端提出了意外的请求。LogRocket集成了后端日志记录和错误报告工具，以显示每个后端错误和日志条目的相应前端会话日志。 <strong>3.支持度</strong> <img src=\"https://files.readme.io/f891fbf-Group_11.png\" alt=\"\"> 通常情况下，用户上报问题时，并不能给出足够的上下文来判断到底发生了什么。 如果你正在使用一个像Intercom的聊天工具，你可以直接将LogRocket整合进去，从而无论用户何时开始聊天，你都可以插入一条记录链接。 <strong>4.依靠流量并发现用户体验问题</strong> <img src=\"https://files.readme.io/2b33467-Group_14.png\" alt=\"\"> 由于LogRocket记录了一切，因此可以在事实之后智能地发现问题。我们可以根据事件进行搜索和过滤，例如让我们的系统自动检测到用户感到沮丧的时刻——比如愤怒点击了按钮。 LogRocket可以通过一些属性（如用户电子邮件，名称，注册日期，位置，状态，持续时间，页面访问等等）来搜索和过滤会话。如果它发生在应用程序中，可以使用LogRocket搜索来找到它。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0067.jpg\" alt=\"\"></p>\n<h1 id=\"工具简介\"><a href=\"#工具简介\" class=\"headerlink\" title=\"工具简介\"></a>工具简介</h1><p>LogRocket 是一个前端日志工具，它可以让你像发生在自己的浏览器中那样重现问题。无需猜测错误发生的原因，或者要求用户截图以及日志转储，LogRocket 可以让你重现会话以便快速了解发生了什么错误。无需考虑框架，它适用于任何应用程序，也有插件可以从 Redux、Vuex和@ngrx/tore 上记录额外的上下文。 LogRocket通过从应用程序中捕获日志和会话记录来帮助您修复错误并了解用户的行为。 <img src=\"https://files.readme.io/b38e152-developer_hero.png\" alt=\"\"></p>\n<h1 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h1><p>1.LogRocket开始非常简单，访问<a href=\"https://app.logrocket.com\" target=\"_blank\" rel=\"noopener\">https://app.logrocket.com</a> 获取应用程序ID。 2.通过npm安装LogRocket并且在应用中进行集成。</p>\n<pre><code>$ npm i --save logrocket\n\n// Code:\n\nimport LogRocket from &apos;logrocket&apos;;\nLogRocket.init(&apos;app/id&apos;);</code></pre><p>3.添加相关中间件 可以选择添加三大框架对应的中间件，进一步提高集成度 <a href=\"https://docs.logrocket.com/docs/redux-middleware\" target=\"_blank\" rel=\"noopener\">redux</a> <a href=\"https://docs.logrocket.com/docs/ngrx-middleware\" target=\"_blank\" rel=\"noopener\">ngrx</a> <a href=\"https://docs.logrocket.com/docs/vuex-plugin\" target=\"_blank\" rel=\"noopener\">vuex</a></p>\n<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p>LogRocket是一个JavaScript SDK，通过拦截网站/应用程序中的操作（如网络请求，触摸操作和Redux事件）并将其发送到远程服务器来工作。 您的应用中的每个用户会话都与唯一的LogRocket标识符关联。这些用户会话可以加入到适当的URL，以集成方式提供给开发人员。</p>\n<h1 id=\"LogRocket能做什么\"><a href=\"#LogRocket能做什么\" class=\"headerlink\" title=\"LogRocket能做什么\"></a>LogRocket能做什么</h1><p>前端调试一向比较坑爹，LogRocket就是解决这个问题的。具体包括： <strong>1.修复错误</strong> <img src=\"https://files.readme.io/325de23-Group_13.png\" alt=\"\"> LogRocket向您显示影响用户的最高错误，并为您提供每个错误报告的回放与日志。观看回放与日志有助于您了解用户如何触发错误。 网络请求，JavaScript异常和代码错误都在LogRocket中捕获和重放，可以检查原始HTML / CSS以了解和重现UI错误。 <strong>2.集成后端日志记录工具</strong> 在对后端错误进行分类时，可能不清楚为什么前端提出了意外的请求。LogRocket集成了后端日志记录和错误报告工具，以显示每个后端错误和日志条目的相应前端会话日志。 <strong>3.支持度</strong> <img src=\"https://files.readme.io/f891fbf-Group_11.png\" alt=\"\"> 通常情况下，用户上报问题时，并不能给出足够的上下文来判断到底发生了什么。 如果你正在使用一个像Intercom的聊天工具，你可以直接将LogRocket整合进去，从而无论用户何时开始聊天，你都可以插入一条记录链接。 <strong>4.依靠流量并发现用户体验问题</strong> <img src=\"https://files.readme.io/2b33467-Group_14.png\" alt=\"\"> 由于LogRocket记录了一切，因此可以在事实之后智能地发现问题。我们可以根据事件进行搜索和过滤，例如让我们的系统自动检测到用户感到沮丧的时刻——比如愤怒点击了按钮。 LogRocket可以通过一些属性（如用户电子邮件，名称，注册日期，位置，状态，持续时间，页面访问等等）来搜索和过滤会话。如果它发生在应用程序中，可以使用LogRocket搜索来找到它。</p>\n"},{"title":"数据挖掘——协同过滤","url":"83.html","id":"83","date":"2017-12-23T19:07:33.000Z","_content":"\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0046.jpg)\n\n协同过滤概念\n------\n\n协同过滤（collabrative filtering）是最基础的数据挖掘推荐算法，起源是亚马逊的“爱你所爱”算法，即：”A和B兴趣类似，那么A喜欢的事物也会被B习惯“的原理来推荐的。网易云音乐也采用了这个算法做了一部分。 为方便下列叙述，定义以下概念：\n\n*   1.已知喜好的用户A、他的兴趣为A.H、他喜好的事物为A.F；\n\n*   2.需要给与推荐的用户B、兴趣为B.H、喜好为B.F。\n\n\n协同过滤要点\n------\n\n# 1.寻找相似用户\n\n如果A.H与B.H相似，可以定义为相似用户。其值可能是一组数据。 对于一维数据，做差即可。 考虑简单的二维情况，假设A.H有两个数据\\[a1,b1\\]，B.H有两个数据\\[a2,b2\\]。可以通过曼哈顿距离：\n\n    |a1-a2|+|b1-b2|\n\n\n计算出两者差距进行衡量。或者通过几何距离就行衡量。 如果是复杂的N维情况，其衡量可以一般化为明式距离： ![](http://img.my.csdn.net/uploads/201211/20/1353400356_6225.png) 可以看出，当P=1，计算的是曼哈顿距离；P=2，计算的是欧氏距离；P=无穷大，计算的是上确界距离。这个公式可以被用来定义相似用户的距离。改公司的python实现算法是：\n\n    def moreMHDdis(a,b):\n        sum = 0\n        for i in range(len(a)):\n            sum += abs(a[i]-b[i])\n        return sum\n\n\n# 2.用户评级差异\n\n如果出现的数据是下列这样。 （定义满分10分，数字为给物品的评分）\n\nTables\n\n物品A\n\n物品B\n\n物品C\n\n用户A\n\n8\n\n7\n\n9\n\n用户B\n\n10\n\n2\n\n9\n\n用户C\n\n6\n\n6\n\n7\n\n可以看到用户A应该是给每项都打分接近的，用户B是给喜欢的很高，不喜欢的很低，用户C则是打分与A类似但评判标准却比较严格给的更加低一些。这种差异性如果不做处理，可能会给推荐系统带来问题。\n对差异性的处理可以利用皮尔逊相关系数解决。这个系数的理解不复杂：我们如果把上述表做成折线图，可以他们之间有线性关系，皮尔逊相关系数就是代表**两组数的线性关系程度**的一个系数，它在二维情况下就是余弦。其计算公式是：\n\n    A和B的协方差/(A的标准差∗B的标准差)\n\n\n用python实现下：\n\n    from math import sqrt\n\n    def multipl(a,b):\n        sumofab=0.0\n        for i in range(len(a)):\n            temp=a[i]*b[i]\n            sumofab+=temp\n        return sumofab\n\n    def corrcoef(x,y):\n        n=len(x)\n        sum1=sum(x)\n        sum2=sum(y)\n        sumofxy=multipl(x,y)\n        sumofx2 = sum([pow(i,2) for i in x])\n        sumofy2 = sum([pow(j,2) for j in y])\n        num=sumofxy-(float(sum1)*float(sum2)/n)\n        den=sqrt((sumofx2-float(sum1**2)/n)*(sumofy2-float(sum2**2)/n))\n        return num/den\n\n\n# 稀疏性问题\n\n协同过滤的稀疏性问题指的是，在一个超大的集合中：比如一百万本书中，A可能只读了一百本，B读了两百本，其中的交集可能绝大部分是空集。处理方案是对于稀疏度不同的数据，采用不同的距离进行计算。\n\n*   如果数据稠密，比如所有属性没有空，那么使用欧氏距离或者曼哈顿距离是合理的。\n\n*   如果数据受分数贬值（即不同用户使用不用的评级）影响，使用皮尔逊相关系数。\n\n*   如果数据稀疏，使用余弦相似度\n\n\n协同过滤应用\n------\n\n协同过滤是数据挖掘推荐算法的基础算法之一，在推荐系统中有广泛应用，计划之后补充一些demo。","source":"_posts/e5-8d-8f-e5-90-8c-e8-bf-87-e6-bb-a4-e7-ae-97-e6-b3-95.md","raw":"---\ntitle: 数据挖掘——协同过滤\ntags:\n  - 数据挖掘\n  - 算法\nurl: 83.html\nid: 83\ncategories:\n  - 数据挖掘\n  - 算法\ndate: 2017-12-24 03:07:33\n---\n\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0046.jpg)\n\n协同过滤概念\n------\n\n协同过滤（collabrative filtering）是最基础的数据挖掘推荐算法，起源是亚马逊的“爱你所爱”算法，即：”A和B兴趣类似，那么A喜欢的事物也会被B习惯“的原理来推荐的。网易云音乐也采用了这个算法做了一部分。 为方便下列叙述，定义以下概念：\n\n*   1.已知喜好的用户A、他的兴趣为A.H、他喜好的事物为A.F；\n\n*   2.需要给与推荐的用户B、兴趣为B.H、喜好为B.F。\n\n\n协同过滤要点\n------\n\n# 1.寻找相似用户\n\n如果A.H与B.H相似，可以定义为相似用户。其值可能是一组数据。 对于一维数据，做差即可。 考虑简单的二维情况，假设A.H有两个数据\\[a1,b1\\]，B.H有两个数据\\[a2,b2\\]。可以通过曼哈顿距离：\n\n    |a1-a2|+|b1-b2|\n\n\n计算出两者差距进行衡量。或者通过几何距离就行衡量。 如果是复杂的N维情况，其衡量可以一般化为明式距离： ![](http://img.my.csdn.net/uploads/201211/20/1353400356_6225.png) 可以看出，当P=1，计算的是曼哈顿距离；P=2，计算的是欧氏距离；P=无穷大，计算的是上确界距离。这个公式可以被用来定义相似用户的距离。改公司的python实现算法是：\n\n    def moreMHDdis(a,b):\n        sum = 0\n        for i in range(len(a)):\n            sum += abs(a[i]-b[i])\n        return sum\n\n\n# 2.用户评级差异\n\n如果出现的数据是下列这样。 （定义满分10分，数字为给物品的评分）\n\nTables\n\n物品A\n\n物品B\n\n物品C\n\n用户A\n\n8\n\n7\n\n9\n\n用户B\n\n10\n\n2\n\n9\n\n用户C\n\n6\n\n6\n\n7\n\n可以看到用户A应该是给每项都打分接近的，用户B是给喜欢的很高，不喜欢的很低，用户C则是打分与A类似但评判标准却比较严格给的更加低一些。这种差异性如果不做处理，可能会给推荐系统带来问题。\n对差异性的处理可以利用皮尔逊相关系数解决。这个系数的理解不复杂：我们如果把上述表做成折线图，可以他们之间有线性关系，皮尔逊相关系数就是代表**两组数的线性关系程度**的一个系数，它在二维情况下就是余弦。其计算公式是：\n\n    A和B的协方差/(A的标准差∗B的标准差)\n\n\n用python实现下：\n\n    from math import sqrt\n\n    def multipl(a,b):\n        sumofab=0.0\n        for i in range(len(a)):\n            temp=a[i]*b[i]\n            sumofab+=temp\n        return sumofab\n\n    def corrcoef(x,y):\n        n=len(x)\n        sum1=sum(x)\n        sum2=sum(y)\n        sumofxy=multipl(x,y)\n        sumofx2 = sum([pow(i,2) for i in x])\n        sumofy2 = sum([pow(j,2) for j in y])\n        num=sumofxy-(float(sum1)*float(sum2)/n)\n        den=sqrt((sumofx2-float(sum1**2)/n)*(sumofy2-float(sum2**2)/n))\n        return num/den\n\n\n# 稀疏性问题\n\n协同过滤的稀疏性问题指的是，在一个超大的集合中：比如一百万本书中，A可能只读了一百本，B读了两百本，其中的交集可能绝大部分是空集。处理方案是对于稀疏度不同的数据，采用不同的距离进行计算。\n\n*   如果数据稠密，比如所有属性没有空，那么使用欧氏距离或者曼哈顿距离是合理的。\n\n*   如果数据受分数贬值（即不同用户使用不用的评级）影响，使用皮尔逊相关系数。\n\n*   如果数据稀疏，使用余弦相似度\n\n\n协同过滤应用\n------\n\n协同过滤是数据挖掘推荐算法的基础算法之一，在推荐系统中有广泛应用，计划之后补充一些demo。","slug":"e5-8d-8f-e5-90-8c-e8-bf-87-e6-bb-a4-e7-ae-97-e6-b3-95","published":1,"updated":"2020-05-19T08:51:28.572Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts7yf001hzmz8c01r3ta7","content":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0046.jpg\" alt=\"\"></p>\n<h2 id=\"协同过滤概念\"><a href=\"#协同过滤概念\" class=\"headerlink\" title=\"协同过滤概念\"></a>协同过滤概念</h2><p>协同过滤（collabrative filtering）是最基础的数据挖掘推荐算法，起源是亚马逊的“爱你所爱”算法，即：”A和B兴趣类似，那么A喜欢的事物也会被B习惯“的原理来推荐的。网易云音乐也采用了这个算法做了一部分。 为方便下列叙述，定义以下概念：</p>\n<ul>\n<li><p>1.已知喜好的用户A、他的兴趣为A.H、他喜好的事物为A.F；</p>\n</li>\n<li><p>2.需要给与推荐的用户B、兴趣为B.H、喜好为B.F。</p>\n</li>\n</ul>\n<h2 id=\"协同过滤要点\"><a href=\"#协同过滤要点\" class=\"headerlink\" title=\"协同过滤要点\"></a>协同过滤要点</h2><h1 id=\"1-寻找相似用户\"><a href=\"#1-寻找相似用户\" class=\"headerlink\" title=\"1.寻找相似用户\"></a>1.寻找相似用户</h1><p>如果A.H与B.H相似，可以定义为相似用户。其值可能是一组数据。 对于一维数据，做差即可。 考虑简单的二维情况，假设A.H有两个数据[a1,b1]，B.H有两个数据[a2,b2]。可以通过曼哈顿距离：</p>\n<pre><code>|a1-a2|+|b1-b2|</code></pre><p>计算出两者差距进行衡量。或者通过几何距离就行衡量。 如果是复杂的N维情况，其衡量可以一般化为明式距离： <img src=\"http://img.my.csdn.net/uploads/201211/20/1353400356_6225.png\" alt=\"\"> 可以看出，当P=1，计算的是曼哈顿距离；P=2，计算的是欧氏距离；P=无穷大，计算的是上确界距离。这个公式可以被用来定义相似用户的距离。改公司的python实现算法是：</p>\n<pre><code>def moreMHDdis(a,b):\n    sum = 0\n    for i in range(len(a)):\n        sum += abs(a[i]-b[i])\n    return sum</code></pre><h1 id=\"2-用户评级差异\"><a href=\"#2-用户评级差异\" class=\"headerlink\" title=\"2.用户评级差异\"></a>2.用户评级差异</h1><p>如果出现的数据是下列这样。 （定义满分10分，数字为给物品的评分）</p>\n<p>Tables</p>\n<p>物品A</p>\n<p>物品B</p>\n<p>物品C</p>\n<p>用户A</p>\n<p>8</p>\n<p>7</p>\n<p>9</p>\n<p>用户B</p>\n<p>10</p>\n<p>2</p>\n<p>9</p>\n<p>用户C</p>\n<p>6</p>\n<p>6</p>\n<p>7</p>\n<p>可以看到用户A应该是给每项都打分接近的，用户B是给喜欢的很高，不喜欢的很低，用户C则是打分与A类似但评判标准却比较严格给的更加低一些。这种差异性如果不做处理，可能会给推荐系统带来问题。<br>对差异性的处理可以利用皮尔逊相关系数解决。这个系数的理解不复杂：我们如果把上述表做成折线图，可以他们之间有线性关系，皮尔逊相关系数就是代表<strong>两组数的线性关系程度</strong>的一个系数，它在二维情况下就是余弦。其计算公式是：</p>\n<pre><code>A和B的协方差/(A的标准差∗B的标准差)</code></pre><p>用python实现下：</p>\n<pre><code>from math import sqrt\n\ndef multipl(a,b):\n    sumofab=0.0\n    for i in range(len(a)):\n        temp=a[i]*b[i]\n        sumofab+=temp\n    return sumofab\n\ndef corrcoef(x,y):\n    n=len(x)\n    sum1=sum(x)\n    sum2=sum(y)\n    sumofxy=multipl(x,y)\n    sumofx2 = sum([pow(i,2) for i in x])\n    sumofy2 = sum([pow(j,2) for j in y])\n    num=sumofxy-(float(sum1)*float(sum2)/n)\n    den=sqrt((sumofx2-float(sum1**2)/n)*(sumofy2-float(sum2**2)/n))\n    return num/den</code></pre><h1 id=\"稀疏性问题\"><a href=\"#稀疏性问题\" class=\"headerlink\" title=\"稀疏性问题\"></a>稀疏性问题</h1><p>协同过滤的稀疏性问题指的是，在一个超大的集合中：比如一百万本书中，A可能只读了一百本，B读了两百本，其中的交集可能绝大部分是空集。处理方案是对于稀疏度不同的数据，采用不同的距离进行计算。</p>\n<ul>\n<li><p>如果数据稠密，比如所有属性没有空，那么使用欧氏距离或者曼哈顿距离是合理的。</p>\n</li>\n<li><p>如果数据受分数贬值（即不同用户使用不用的评级）影响，使用皮尔逊相关系数。</p>\n</li>\n<li><p>如果数据稀疏，使用余弦相似度</p>\n</li>\n</ul>\n<h2 id=\"协同过滤应用\"><a href=\"#协同过滤应用\" class=\"headerlink\" title=\"协同过滤应用\"></a>协同过滤应用</h2><p>协同过滤是数据挖掘推荐算法的基础算法之一，在推荐系统中有广泛应用，计划之后补充一些demo。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0046.jpg\" alt=\"\"></p>\n<h2 id=\"协同过滤概念\"><a href=\"#协同过滤概念\" class=\"headerlink\" title=\"协同过滤概念\"></a>协同过滤概念</h2><p>协同过滤（collabrative filtering）是最基础的数据挖掘推荐算法，起源是亚马逊的“爱你所爱”算法，即：”A和B兴趣类似，那么A喜欢的事物也会被B习惯“的原理来推荐的。网易云音乐也采用了这个算法做了一部分。 为方便下列叙述，定义以下概念：</p>\n<ul>\n<li><p>1.已知喜好的用户A、他的兴趣为A.H、他喜好的事物为A.F；</p>\n</li>\n<li><p>2.需要给与推荐的用户B、兴趣为B.H、喜好为B.F。</p>\n</li>\n</ul>\n<h2 id=\"协同过滤要点\"><a href=\"#协同过滤要点\" class=\"headerlink\" title=\"协同过滤要点\"></a>协同过滤要点</h2><h1 id=\"1-寻找相似用户\"><a href=\"#1-寻找相似用户\" class=\"headerlink\" title=\"1.寻找相似用户\"></a>1.寻找相似用户</h1><p>如果A.H与B.H相似，可以定义为相似用户。其值可能是一组数据。 对于一维数据，做差即可。 考虑简单的二维情况，假设A.H有两个数据[a1,b1]，B.H有两个数据[a2,b2]。可以通过曼哈顿距离：</p>\n<pre><code>|a1-a2|+|b1-b2|</code></pre><p>计算出两者差距进行衡量。或者通过几何距离就行衡量。 如果是复杂的N维情况，其衡量可以一般化为明式距离： <img src=\"http://img.my.csdn.net/uploads/201211/20/1353400356_6225.png\" alt=\"\"> 可以看出，当P=1，计算的是曼哈顿距离；P=2，计算的是欧氏距离；P=无穷大，计算的是上确界距离。这个公式可以被用来定义相似用户的距离。改公司的python实现算法是：</p>\n<pre><code>def moreMHDdis(a,b):\n    sum = 0\n    for i in range(len(a)):\n        sum += abs(a[i]-b[i])\n    return sum</code></pre><h1 id=\"2-用户评级差异\"><a href=\"#2-用户评级差异\" class=\"headerlink\" title=\"2.用户评级差异\"></a>2.用户评级差异</h1><p>如果出现的数据是下列这样。 （定义满分10分，数字为给物品的评分）</p>\n<p>Tables</p>\n<p>物品A</p>\n<p>物品B</p>\n<p>物品C</p>\n<p>用户A</p>\n<p>8</p>\n<p>7</p>\n<p>9</p>\n<p>用户B</p>\n<p>10</p>\n<p>2</p>\n<p>9</p>\n<p>用户C</p>\n<p>6</p>\n<p>6</p>\n<p>7</p>\n<p>可以看到用户A应该是给每项都打分接近的，用户B是给喜欢的很高，不喜欢的很低，用户C则是打分与A类似但评判标准却比较严格给的更加低一些。这种差异性如果不做处理，可能会给推荐系统带来问题。<br>对差异性的处理可以利用皮尔逊相关系数解决。这个系数的理解不复杂：我们如果把上述表做成折线图，可以他们之间有线性关系，皮尔逊相关系数就是代表<strong>两组数的线性关系程度</strong>的一个系数，它在二维情况下就是余弦。其计算公式是：</p>\n<pre><code>A和B的协方差/(A的标准差∗B的标准差)</code></pre><p>用python实现下：</p>\n<pre><code>from math import sqrt\n\ndef multipl(a,b):\n    sumofab=0.0\n    for i in range(len(a)):\n        temp=a[i]*b[i]\n        sumofab+=temp\n    return sumofab\n\ndef corrcoef(x,y):\n    n=len(x)\n    sum1=sum(x)\n    sum2=sum(y)\n    sumofxy=multipl(x,y)\n    sumofx2 = sum([pow(i,2) for i in x])\n    sumofy2 = sum([pow(j,2) for j in y])\n    num=sumofxy-(float(sum1)*float(sum2)/n)\n    den=sqrt((sumofx2-float(sum1**2)/n)*(sumofy2-float(sum2**2)/n))\n    return num/den</code></pre><h1 id=\"稀疏性问题\"><a href=\"#稀疏性问题\" class=\"headerlink\" title=\"稀疏性问题\"></a>稀疏性问题</h1><p>协同过滤的稀疏性问题指的是，在一个超大的集合中：比如一百万本书中，A可能只读了一百本，B读了两百本，其中的交集可能绝大部分是空集。处理方案是对于稀疏度不同的数据，采用不同的距离进行计算。</p>\n<ul>\n<li><p>如果数据稠密，比如所有属性没有空，那么使用欧氏距离或者曼哈顿距离是合理的。</p>\n</li>\n<li><p>如果数据受分数贬值（即不同用户使用不用的评级）影响，使用皮尔逊相关系数。</p>\n</li>\n<li><p>如果数据稀疏，使用余弦相似度</p>\n</li>\n</ul>\n<h2 id=\"协同过滤应用\"><a href=\"#协同过滤应用\" class=\"headerlink\" title=\"协同过滤应用\"></a>协同过滤应用</h2><p>协同过滤是数据挖掘推荐算法的基础算法之一，在推荐系统中有广泛应用，计划之后补充一些demo。</p>\n"},{"title":"哈夫曼树与哈夫曼编码器（python实现）","url":"26.html","id":"26","date":"2016-08-23T11:38:40.000Z","_content":"\n![](http://7xqgks.com1.z0.glb.clouddn.com/bd831b25b5ba1b236a4fa05e0abe01b1f3c0c68124577-hJCX6a.jpg)\n\n# 1.关于哈夫曼树\n\n哈夫曼树基于加权二叉树，其基本要素包含左右子树、双亲、权重和编码。\n\n    class Node:\n        def  __init__(self,right=None,left=None,parent=None,weight=0,charcode=None):\n        self.right = right\n        self.left = left\n        self.parent = parent\n        self.weight = weight\n        self.charcode = charcode\n\n\n# 2.哈弗曼算法\n\n哈弗曼算法属于贪心法的一种，其基本思路是：编码以字符出现的频率作为权重，每次选权重最小的两个节点作为生成最优二叉树的左右孩子，并将权重之和作为根节点的权重，自底向上生成一颗带权路径长度最短的最优二叉树。\n\n    def sort(list):\n        return sorted(list,key=lambda node:node.weight)\n\n    def Huffman(listOfNode):\n        listOfNode = sort(listOfNode)\n        while len(listOfNode) != 1:\n            a,b = listOfNode[0],listOfNode[1]\n            new = Node()\n            new.weight, new.left, new.right = a.weight + b.weight, a, b\n            a.parent, b.parent = new, new\n            listOfNode.remove(a), listOfNode.remove(b)\n            listOfNode.append(new)\n            listOfNode = sort(listOfNode)\n        return listOfNode\n\n\n# 3.导入字符-权重文件（非算法思想部分）\n\n为方便操作，将字符-权重字典保存为文本文件后，直接导入进行编码，使用Python文件曹组完成。\n\n    def inPutFile():\n        global filename\n        global listForEveryByte\n        filename = raw_input(\"请输入要编码的文件(存放在源代码目录下)：\")\n        global codeDict\n        with open(filename,'rb') as f:\n            data = f.read()\n            for Byte in data:\n                codeDict.setdefault(Byte,0) #每个字节出现的次数默认为0\n                codeDict[Byte] += 1\n                listForEveryByte.append(Byte)\n\n    def outputCompressedFile():\n        global listForEveryByte\n        fileString = \"\"\n        with open(filename.split(\".\")[0]+\".jbj\",\"wb\") as f:\n            for Byte in listForEveryByte:\n                fileString += encodeDict[Byte]  #构成一个长字符序列\n            leng = len(fileString)\n            more = 16-leng%16\n            fileString = fileString+\"0\"*more          #空位用0补齐\n\n            leng = len(fileString)\n            i,j = 0,16\n            while j <= leng:\n                k = fileString[i:j]\n                a = int(k,2)\n                print(a)\n                print(repr(struct.pack(\">H\",a)))\n                f.write(struct.pack(\">H\",a))\n                f.write(str(a))\n                i=i+16\n                j=j+16\n\n\n# 4.编码\n\n通过哈弗曼算法构造哈夫曼树后，编码过程为找到字符所在的叶子节点，以及从根节点到该叶子节点的路径，使用先序遍历的节点左树记为0，右树记为1，即可得到编码结果。\n\n    def encode(head,listOfNode):\n        global encodeDict\n        for e in listOfNode:\n            ep = e\n            encodeDict.setdefault(e.charcode,\"\")\n            while ep != head:\n\n                if ep.parent.left == ep:\n                    encodeDict[e.charcode] = \"1\"+encodeDict[e.charcode]\n                else:\n                    encodeDict[e.charcode] = \"0\"+encodeDict[e.charcode]\n                ep=ep.parent\n\n\n# 5.执行算法与所得结果\n\n    if __name__ == '__main__':\n        inPutFile()\n        listOfNode = []\n        for e in codeDict.keys():\n            listOfNode.append(Node(weight=codeDict[e],charcode=e))\n        head=Huffman(listOfNode)[0]\n        encode(head,listOfNode)\n\n        for i in encodeDict.keys():\n            print(i,encodeDict[i])","source":"_posts/e5-93-88-e5-a4-ab-e6-9b-bc-e6-a0-91-e4-b8-8e-e5-93-88-e5-a4-ab-e6-9b-bc-e7-bc-96-e7-a0-81-e5-99-a8-ef-bc-88python-e5-ae-9e-e7-8e-b0-ef-bc-89.md","raw":"---\ntitle: 哈夫曼树与哈夫曼编码器（python实现）\ntags:\n  - 数据结构\n  - 算法\nurl: 26.html\nid: 26\ncategories:\n  - 算法\ndate: 2016-08-23 19:38:40\n---\n\n![](http://7xqgks.com1.z0.glb.clouddn.com/bd831b25b5ba1b236a4fa05e0abe01b1f3c0c68124577-hJCX6a.jpg)\n\n# 1.关于哈夫曼树\n\n哈夫曼树基于加权二叉树，其基本要素包含左右子树、双亲、权重和编码。\n\n    class Node:\n        def  __init__(self,right=None,left=None,parent=None,weight=0,charcode=None):\n        self.right = right\n        self.left = left\n        self.parent = parent\n        self.weight = weight\n        self.charcode = charcode\n\n\n# 2.哈弗曼算法\n\n哈弗曼算法属于贪心法的一种，其基本思路是：编码以字符出现的频率作为权重，每次选权重最小的两个节点作为生成最优二叉树的左右孩子，并将权重之和作为根节点的权重，自底向上生成一颗带权路径长度最短的最优二叉树。\n\n    def sort(list):\n        return sorted(list,key=lambda node:node.weight)\n\n    def Huffman(listOfNode):\n        listOfNode = sort(listOfNode)\n        while len(listOfNode) != 1:\n            a,b = listOfNode[0],listOfNode[1]\n            new = Node()\n            new.weight, new.left, new.right = a.weight + b.weight, a, b\n            a.parent, b.parent = new, new\n            listOfNode.remove(a), listOfNode.remove(b)\n            listOfNode.append(new)\n            listOfNode = sort(listOfNode)\n        return listOfNode\n\n\n# 3.导入字符-权重文件（非算法思想部分）\n\n为方便操作，将字符-权重字典保存为文本文件后，直接导入进行编码，使用Python文件曹组完成。\n\n    def inPutFile():\n        global filename\n        global listForEveryByte\n        filename = raw_input(\"请输入要编码的文件(存放在源代码目录下)：\")\n        global codeDict\n        with open(filename,'rb') as f:\n            data = f.read()\n            for Byte in data:\n                codeDict.setdefault(Byte,0) #每个字节出现的次数默认为0\n                codeDict[Byte] += 1\n                listForEveryByte.append(Byte)\n\n    def outputCompressedFile():\n        global listForEveryByte\n        fileString = \"\"\n        with open(filename.split(\".\")[0]+\".jbj\",\"wb\") as f:\n            for Byte in listForEveryByte:\n                fileString += encodeDict[Byte]  #构成一个长字符序列\n            leng = len(fileString)\n            more = 16-leng%16\n            fileString = fileString+\"0\"*more          #空位用0补齐\n\n            leng = len(fileString)\n            i,j = 0,16\n            while j <= leng:\n                k = fileString[i:j]\n                a = int(k,2)\n                print(a)\n                print(repr(struct.pack(\">H\",a)))\n                f.write(struct.pack(\">H\",a))\n                f.write(str(a))\n                i=i+16\n                j=j+16\n\n\n# 4.编码\n\n通过哈弗曼算法构造哈夫曼树后，编码过程为找到字符所在的叶子节点，以及从根节点到该叶子节点的路径，使用先序遍历的节点左树记为0，右树记为1，即可得到编码结果。\n\n    def encode(head,listOfNode):\n        global encodeDict\n        for e in listOfNode:\n            ep = e\n            encodeDict.setdefault(e.charcode,\"\")\n            while ep != head:\n\n                if ep.parent.left == ep:\n                    encodeDict[e.charcode] = \"1\"+encodeDict[e.charcode]\n                else:\n                    encodeDict[e.charcode] = \"0\"+encodeDict[e.charcode]\n                ep=ep.parent\n\n\n# 5.执行算法与所得结果\n\n    if __name__ == '__main__':\n        inPutFile()\n        listOfNode = []\n        for e in codeDict.keys():\n            listOfNode.append(Node(weight=codeDict[e],charcode=e))\n        head=Huffman(listOfNode)[0]\n        encode(head,listOfNode)\n\n        for i in encodeDict.keys():\n            print(i,encodeDict[i])","slug":"e5-93-88-e5-a4-ab-e6-9b-bc-e6-a0-91-e4-b8-8e-e5-93-88-e5-a4-ab-e6-9b-bc-e7-bc-96-e7-a0-81-e5-99-a8-ef-bc-88python-e5-ae-9e-e7-8e-b0-ef-bc-89","published":1,"updated":"2020-05-19T08:51:28.807Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts7yn001lzmz84tx9g986","content":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/bd831b25b5ba1b236a4fa05e0abe01b1f3c0c68124577-hJCX6a.jpg\" alt=\"\"></p>\n<h1 id=\"1-关于哈夫曼树\"><a href=\"#1-关于哈夫曼树\" class=\"headerlink\" title=\"1.关于哈夫曼树\"></a>1.关于哈夫曼树</h1><p>哈夫曼树基于加权二叉树，其基本要素包含左右子树、双亲、权重和编码。</p>\n<pre><code>class Node:\n    def  __init__(self,right=None,left=None,parent=None,weight=0,charcode=None):\n    self.right = right\n    self.left = left\n    self.parent = parent\n    self.weight = weight\n    self.charcode = charcode</code></pre><h1 id=\"2-哈弗曼算法\"><a href=\"#2-哈弗曼算法\" class=\"headerlink\" title=\"2.哈弗曼算法\"></a>2.哈弗曼算法</h1><p>哈弗曼算法属于贪心法的一种，其基本思路是：编码以字符出现的频率作为权重，每次选权重最小的两个节点作为生成最优二叉树的左右孩子，并将权重之和作为根节点的权重，自底向上生成一颗带权路径长度最短的最优二叉树。</p>\n<pre><code>def sort(list):\n    return sorted(list,key=lambda node:node.weight)\n\ndef Huffman(listOfNode):\n    listOfNode = sort(listOfNode)\n    while len(listOfNode) != 1:\n        a,b = listOfNode[0],listOfNode[1]\n        new = Node()\n        new.weight, new.left, new.right = a.weight + b.weight, a, b\n        a.parent, b.parent = new, new\n        listOfNode.remove(a), listOfNode.remove(b)\n        listOfNode.append(new)\n        listOfNode = sort(listOfNode)\n    return listOfNode</code></pre><h1 id=\"3-导入字符-权重文件（非算法思想部分）\"><a href=\"#3-导入字符-权重文件（非算法思想部分）\" class=\"headerlink\" title=\"3.导入字符-权重文件（非算法思想部分）\"></a>3.导入字符-权重文件（非算法思想部分）</h1><p>为方便操作，将字符-权重字典保存为文本文件后，直接导入进行编码，使用Python文件曹组完成。</p>\n<pre><code>def inPutFile():\n    global filename\n    global listForEveryByte\n    filename = raw_input(&quot;请输入要编码的文件(存放在源代码目录下)：&quot;)\n    global codeDict\n    with open(filename,&apos;rb&apos;) as f:\n        data = f.read()\n        for Byte in data:\n            codeDict.setdefault(Byte,0) #每个字节出现的次数默认为0\n            codeDict[Byte] += 1\n            listForEveryByte.append(Byte)\n\ndef outputCompressedFile():\n    global listForEveryByte\n    fileString = &quot;&quot;\n    with open(filename.split(&quot;.&quot;)[0]+&quot;.jbj&quot;,&quot;wb&quot;) as f:\n        for Byte in listForEveryByte:\n            fileString += encodeDict[Byte]  #构成一个长字符序列\n        leng = len(fileString)\n        more = 16-leng%16\n        fileString = fileString+&quot;0&quot;*more          #空位用0补齐\n\n        leng = len(fileString)\n        i,j = 0,16\n        while j &lt;= leng:\n            k = fileString[i:j]\n            a = int(k,2)\n            print(a)\n            print(repr(struct.pack(&quot;&gt;H&quot;,a)))\n            f.write(struct.pack(&quot;&gt;H&quot;,a))\n            f.write(str(a))\n            i=i+16\n            j=j+16</code></pre><h1 id=\"4-编码\"><a href=\"#4-编码\" class=\"headerlink\" title=\"4.编码\"></a>4.编码</h1><p>通过哈弗曼算法构造哈夫曼树后，编码过程为找到字符所在的叶子节点，以及从根节点到该叶子节点的路径，使用先序遍历的节点左树记为0，右树记为1，即可得到编码结果。</p>\n<pre><code>def encode(head,listOfNode):\n    global encodeDict\n    for e in listOfNode:\n        ep = e\n        encodeDict.setdefault(e.charcode,&quot;&quot;)\n        while ep != head:\n\n            if ep.parent.left == ep:\n                encodeDict[e.charcode] = &quot;1&quot;+encodeDict[e.charcode]\n            else:\n                encodeDict[e.charcode] = &quot;0&quot;+encodeDict[e.charcode]\n            ep=ep.parent</code></pre><h1 id=\"5-执行算法与所得结果\"><a href=\"#5-执行算法与所得结果\" class=\"headerlink\" title=\"5.执行算法与所得结果\"></a>5.执行算法与所得结果</h1><pre><code>if __name__ == &apos;__main__&apos;:\n    inPutFile()\n    listOfNode = []\n    for e in codeDict.keys():\n        listOfNode.append(Node(weight=codeDict[e],charcode=e))\n    head=Huffman(listOfNode)[0]\n    encode(head,listOfNode)\n\n    for i in encodeDict.keys():\n        print(i,encodeDict[i])</code></pre>","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/bd831b25b5ba1b236a4fa05e0abe01b1f3c0c68124577-hJCX6a.jpg\" alt=\"\"></p>\n<h1 id=\"1-关于哈夫曼树\"><a href=\"#1-关于哈夫曼树\" class=\"headerlink\" title=\"1.关于哈夫曼树\"></a>1.关于哈夫曼树</h1><p>哈夫曼树基于加权二叉树，其基本要素包含左右子树、双亲、权重和编码。</p>\n<pre><code>class Node:\n    def  __init__(self,right=None,left=None,parent=None,weight=0,charcode=None):\n    self.right = right\n    self.left = left\n    self.parent = parent\n    self.weight = weight\n    self.charcode = charcode</code></pre><h1 id=\"2-哈弗曼算法\"><a href=\"#2-哈弗曼算法\" class=\"headerlink\" title=\"2.哈弗曼算法\"></a>2.哈弗曼算法</h1><p>哈弗曼算法属于贪心法的一种，其基本思路是：编码以字符出现的频率作为权重，每次选权重最小的两个节点作为生成最优二叉树的左右孩子，并将权重之和作为根节点的权重，自底向上生成一颗带权路径长度最短的最优二叉树。</p>\n<pre><code>def sort(list):\n    return sorted(list,key=lambda node:node.weight)\n\ndef Huffman(listOfNode):\n    listOfNode = sort(listOfNode)\n    while len(listOfNode) != 1:\n        a,b = listOfNode[0],listOfNode[1]\n        new = Node()\n        new.weight, new.left, new.right = a.weight + b.weight, a, b\n        a.parent, b.parent = new, new\n        listOfNode.remove(a), listOfNode.remove(b)\n        listOfNode.append(new)\n        listOfNode = sort(listOfNode)\n    return listOfNode</code></pre><h1 id=\"3-导入字符-权重文件（非算法思想部分）\"><a href=\"#3-导入字符-权重文件（非算法思想部分）\" class=\"headerlink\" title=\"3.导入字符-权重文件（非算法思想部分）\"></a>3.导入字符-权重文件（非算法思想部分）</h1><p>为方便操作，将字符-权重字典保存为文本文件后，直接导入进行编码，使用Python文件曹组完成。</p>\n<pre><code>def inPutFile():\n    global filename\n    global listForEveryByte\n    filename = raw_input(&quot;请输入要编码的文件(存放在源代码目录下)：&quot;)\n    global codeDict\n    with open(filename,&apos;rb&apos;) as f:\n        data = f.read()\n        for Byte in data:\n            codeDict.setdefault(Byte,0) #每个字节出现的次数默认为0\n            codeDict[Byte] += 1\n            listForEveryByte.append(Byte)\n\ndef outputCompressedFile():\n    global listForEveryByte\n    fileString = &quot;&quot;\n    with open(filename.split(&quot;.&quot;)[0]+&quot;.jbj&quot;,&quot;wb&quot;) as f:\n        for Byte in listForEveryByte:\n            fileString += encodeDict[Byte]  #构成一个长字符序列\n        leng = len(fileString)\n        more = 16-leng%16\n        fileString = fileString+&quot;0&quot;*more          #空位用0补齐\n\n        leng = len(fileString)\n        i,j = 0,16\n        while j &lt;= leng:\n            k = fileString[i:j]\n            a = int(k,2)\n            print(a)\n            print(repr(struct.pack(&quot;&gt;H&quot;,a)))\n            f.write(struct.pack(&quot;&gt;H&quot;,a))\n            f.write(str(a))\n            i=i+16\n            j=j+16</code></pre><h1 id=\"4-编码\"><a href=\"#4-编码\" class=\"headerlink\" title=\"4.编码\"></a>4.编码</h1><p>通过哈弗曼算法构造哈夫曼树后，编码过程为找到字符所在的叶子节点，以及从根节点到该叶子节点的路径，使用先序遍历的节点左树记为0，右树记为1，即可得到编码结果。</p>\n<pre><code>def encode(head,listOfNode):\n    global encodeDict\n    for e in listOfNode:\n        ep = e\n        encodeDict.setdefault(e.charcode,&quot;&quot;)\n        while ep != head:\n\n            if ep.parent.left == ep:\n                encodeDict[e.charcode] = &quot;1&quot;+encodeDict[e.charcode]\n            else:\n                encodeDict[e.charcode] = &quot;0&quot;+encodeDict[e.charcode]\n            ep=ep.parent</code></pre><h1 id=\"5-执行算法与所得结果\"><a href=\"#5-执行算法与所得结果\" class=\"headerlink\" title=\"5.执行算法与所得结果\"></a>5.执行算法与所得结果</h1><pre><code>if __name__ == &apos;__main__&apos;:\n    inPutFile()\n    listOfNode = []\n    for e in codeDict.keys():\n        listOfNode.append(Node(weight=codeDict[e],charcode=e))\n    head=Huffman(listOfNode)[0]\n    encode(head,listOfNode)\n\n    for i in encodeDict.keys():\n        print(i,encodeDict[i])</code></pre>"},{"title":"基于前端微服务的对一款监控平台的技术方案改进","url":"347.html","id":"347","date":"2019-11-01T04:04:53.000Z","_content":"\n原始方案\n----\n\n![](http://bugzhang.com/wp-content/uploads/2019/11/image.png)\n\n后端：Java框架Spring Boot整合数据库数据，推送给Grafana。 前端：完全依靠Grafana做前端，定制化很弱，无法完成大屏看板等刚需。\n\n改进方案1：完全定制化的前端\n--------------\n\n![](http://bugzhang.com/wp-content/uploads/2019/11/image-1.png)\n\n干掉Grafana，完全定制化开发前端，采用Vue框架，以及数据可视化组件库Echarts和大屏组件库iDataV完成业务开发。\n\n改进方案2：完全配置化的前端\n--------------\n\n![](http://bugzhang.com/wp-content/uploads/2019/11/image-2.png)\n\n方案1有个明显确定是复用性非常差，以后类似项目又要重头再来，不如Grafana方便。 方案2用Node.js，替代Grafana的后端功能。引入MongoDB存储业务后端推送的数据。\n\n每个页面可配置组件及其组件形式和样式，在运行时依靠配置编译出主题文件并且采用。可推送数据到不同组件实现监控。\n\n改进方案3：基于微服务的对当前方案的改进\n--------------------\n\n![](http://bugzhang.com/wp-content/uploads/2019/11/image-3.png)\n\n方案2相比之前，功能非常齐全，可维护性很佳。难度在于实施工期非常长，并且目前业务Grafana基本能支持绝大多数场景，除了大屏展示效果不佳外是勉强可用的。\n\n如果把大屏功能和Grafana数据可视化分离成两个微服务，然后用一个基座整合在一起，大屏功能和方案2一致，而Grafana完整保留，好处在于开发时间大大降低。得到方案3。\n\n# 前端微服务技术可选方案\n\n方式 | 开发成本 |  维护成本 | 可行性 | 同一框架要求 | 实现难度 | 潜在风险 |\n- | - | - | - | - | - | - |\n路由分发 | 低 | 低 | 高 | 否 | ★ | 不支持多种框架 |\niFrame | 低 | 低 | 高 | 否 | ★ | XSS风险，性能差 |\n应用微服务化 | 高 | 低 | 中 | 否 | ★★★★ | 针对每个框架做定制 |\n微件化 | 高 | 中 | 低 | 是 | ★★★★★ | 针对构建系统，如 webpack 进行 hack |\n微应用化 | 中 | 中 | 高 | 是 | ★★★ | 统一不同应用的构建规范 |\n纯 Web Components | 高 | 低 | 高 | 否 | ★★ | 新技术，浏览器的兼容问题 |\n结合 Web Components | 高 | 低 | 高 | 否 | ★★ | 新技术，浏览器的兼容问题 |\n\n\n![](http://bugzhang.com/wp-content/uploads/2019/11/image-4.png)\n\n我们的业务：Y（不限框架） -> N（不需要支持IE） -> N （不是新项目因为有Grafana了）\n\n得到选型：**WebComponent 集成应用的方式**\n\n其他关于web component是什么，怎么用，微服务是什么怎么用的。可以靠看参考文章来了解。\n\n* * *\n\n参考文章：\n\n*   前端微服务：[https://github.com/phodal/microfrontends](https://github.com/phodal/microfrontends)\n*   WebComponent入门：[http://www.ruanyifeng.com/blog/2019/08/web_components.html](http://www.ruanyifeng.com/blog/2019/08/web_components.html)\n*   vue-cli3中使用**WebComponent**：[https://www.cnblogs.com/Adiodanza/p/9641708.html](https://www.cnblogs.com/Adiodanza/p/9641708.html)","source":"_posts/e5-9f-ba-e4-ba-8e-e5-be-ae-e6-9c-8d-e5-8a-a1-e7-9a-84-e4-b8-80-e6-ac-be-e5-af-b9-e7-9b-91-e6-8e-a7-e5-b9-b3-e5-8f-b0-e7-9a-84-e6-bc-94-e8-bf-9b-trashed.md","raw":"---\ntitle: 基于前端微服务的对一款监控平台的技术方案改进\ntags:\n  - node.js\n  - 架构\nurl: 347.html\nid: 347\ncategories:\n  - node.js\n  - 前端\ndate: 2019-11-01 12:04:53\n---\n\n原始方案\n----\n\n![](http://bugzhang.com/wp-content/uploads/2019/11/image.png)\n\n后端：Java框架Spring Boot整合数据库数据，推送给Grafana。 前端：完全依靠Grafana做前端，定制化很弱，无法完成大屏看板等刚需。\n\n改进方案1：完全定制化的前端\n--------------\n\n![](http://bugzhang.com/wp-content/uploads/2019/11/image-1.png)\n\n干掉Grafana，完全定制化开发前端，采用Vue框架，以及数据可视化组件库Echarts和大屏组件库iDataV完成业务开发。\n\n改进方案2：完全配置化的前端\n--------------\n\n![](http://bugzhang.com/wp-content/uploads/2019/11/image-2.png)\n\n方案1有个明显确定是复用性非常差，以后类似项目又要重头再来，不如Grafana方便。 方案2用Node.js，替代Grafana的后端功能。引入MongoDB存储业务后端推送的数据。\n\n每个页面可配置组件及其组件形式和样式，在运行时依靠配置编译出主题文件并且采用。可推送数据到不同组件实现监控。\n\n改进方案3：基于微服务的对当前方案的改进\n--------------------\n\n![](http://bugzhang.com/wp-content/uploads/2019/11/image-3.png)\n\n方案2相比之前，功能非常齐全，可维护性很佳。难度在于实施工期非常长，并且目前业务Grafana基本能支持绝大多数场景，除了大屏展示效果不佳外是勉强可用的。\n\n如果把大屏功能和Grafana数据可视化分离成两个微服务，然后用一个基座整合在一起，大屏功能和方案2一致，而Grafana完整保留，好处在于开发时间大大降低。得到方案3。\n\n# 前端微服务技术可选方案\n\n方式 | 开发成本 |  维护成本 | 可行性 | 同一框架要求 | 实现难度 | 潜在风险 |\n- | - | - | - | - | - | - |\n路由分发 | 低 | 低 | 高 | 否 | ★ | 不支持多种框架 |\niFrame | 低 | 低 | 高 | 否 | ★ | XSS风险，性能差 |\n应用微服务化 | 高 | 低 | 中 | 否 | ★★★★ | 针对每个框架做定制 |\n微件化 | 高 | 中 | 低 | 是 | ★★★★★ | 针对构建系统，如 webpack 进行 hack |\n微应用化 | 中 | 中 | 高 | 是 | ★★★ | 统一不同应用的构建规范 |\n纯 Web Components | 高 | 低 | 高 | 否 | ★★ | 新技术，浏览器的兼容问题 |\n结合 Web Components | 高 | 低 | 高 | 否 | ★★ | 新技术，浏览器的兼容问题 |\n\n\n![](http://bugzhang.com/wp-content/uploads/2019/11/image-4.png)\n\n我们的业务：Y（不限框架） -> N（不需要支持IE） -> N （不是新项目因为有Grafana了）\n\n得到选型：**WebComponent 集成应用的方式**\n\n其他关于web component是什么，怎么用，微服务是什么怎么用的。可以靠看参考文章来了解。\n\n* * *\n\n参考文章：\n\n*   前端微服务：[https://github.com/phodal/microfrontends](https://github.com/phodal/microfrontends)\n*   WebComponent入门：[http://www.ruanyifeng.com/blog/2019/08/web_components.html](http://www.ruanyifeng.com/blog/2019/08/web_components.html)\n*   vue-cli3中使用**WebComponent**：[https://www.cnblogs.com/Adiodanza/p/9641708.html](https://www.cnblogs.com/Adiodanza/p/9641708.html)","slug":"e5-9f-ba-e4-ba-8e-e5-be-ae-e6-9c-8d-e5-8a-a1-e7-9a-84-e4-b8-80-e6-ac-be-e5-af-b9-e7-9b-91-e6-8e-a7-e5-b9-b3-e5-8f-b0-e7-9a-84-e6-bc-94-e8-bf-9b-trashed","published":1,"updated":"2020-05-21T08:37:11.019Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts7yw001ozmz8cedohs4u","content":"<h2 id=\"原始方案\"><a href=\"#原始方案\" class=\"headerlink\" title=\"原始方案\"></a>原始方案</h2><p><img src=\"http://bugzhang.com/wp-content/uploads/2019/11/image.png\" alt=\"\"></p>\n<p>后端：Java框架Spring Boot整合数据库数据，推送给Grafana。 前端：完全依靠Grafana做前端，定制化很弱，无法完成大屏看板等刚需。</p>\n<h2 id=\"改进方案1：完全定制化的前端\"><a href=\"#改进方案1：完全定制化的前端\" class=\"headerlink\" title=\"改进方案1：完全定制化的前端\"></a>改进方案1：完全定制化的前端</h2><p><img src=\"http://bugzhang.com/wp-content/uploads/2019/11/image-1.png\" alt=\"\"></p>\n<p>干掉Grafana，完全定制化开发前端，采用Vue框架，以及数据可视化组件库Echarts和大屏组件库iDataV完成业务开发。</p>\n<h2 id=\"改进方案2：完全配置化的前端\"><a href=\"#改进方案2：完全配置化的前端\" class=\"headerlink\" title=\"改进方案2：完全配置化的前端\"></a>改进方案2：完全配置化的前端</h2><p><img src=\"http://bugzhang.com/wp-content/uploads/2019/11/image-2.png\" alt=\"\"></p>\n<p>方案1有个明显确定是复用性非常差，以后类似项目又要重头再来，不如Grafana方便。 方案2用Node.js，替代Grafana的后端功能。引入MongoDB存储业务后端推送的数据。</p>\n<p>每个页面可配置组件及其组件形式和样式，在运行时依靠配置编译出主题文件并且采用。可推送数据到不同组件实现监控。</p>\n<h2 id=\"改进方案3：基于微服务的对当前方案的改进\"><a href=\"#改进方案3：基于微服务的对当前方案的改进\" class=\"headerlink\" title=\"改进方案3：基于微服务的对当前方案的改进\"></a>改进方案3：基于微服务的对当前方案的改进</h2><p><img src=\"http://bugzhang.com/wp-content/uploads/2019/11/image-3.png\" alt=\"\"></p>\n<p>方案2相比之前，功能非常齐全，可维护性很佳。难度在于实施工期非常长，并且目前业务Grafana基本能支持绝大多数场景，除了大屏展示效果不佳外是勉强可用的。</p>\n<p>如果把大屏功能和Grafana数据可视化分离成两个微服务，然后用一个基座整合在一起，大屏功能和方案2一致，而Grafana完整保留，好处在于开发时间大大降低。得到方案3。</p>\n<h1 id=\"前端微服务技术可选方案\"><a href=\"#前端微服务技术可选方案\" class=\"headerlink\" title=\"前端微服务技术可选方案\"></a>前端微服务技术可选方案</h1><table>\n<thead>\n<tr>\n<th>方式</th>\n<th>开发成本</th>\n<th>维护成本</th>\n<th>可行性</th>\n<th>同一框架要求</th>\n<th>实现难度</th>\n<th>潜在风险</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>路由分发</td>\n<td>低</td>\n<td>低</td>\n<td>高</td>\n<td>否</td>\n<td>★</td>\n<td>不支持多种框架</td>\n</tr>\n<tr>\n<td>iFrame</td>\n<td>低</td>\n<td>低</td>\n<td>高</td>\n<td>否</td>\n<td>★</td>\n<td>XSS风险，性能差</td>\n</tr>\n<tr>\n<td>应用微服务化</td>\n<td>高</td>\n<td>低</td>\n<td>中</td>\n<td>否</td>\n<td>★★★★</td>\n<td>针对每个框架做定制</td>\n</tr>\n<tr>\n<td>微件化</td>\n<td>高</td>\n<td>中</td>\n<td>低</td>\n<td>是</td>\n<td>★★★★★</td>\n<td>针对构建系统，如 webpack 进行 hack</td>\n</tr>\n<tr>\n<td>微应用化</td>\n<td>中</td>\n<td>中</td>\n<td>高</td>\n<td>是</td>\n<td>★★★</td>\n<td>统一不同应用的构建规范</td>\n</tr>\n<tr>\n<td>纯 Web Components</td>\n<td>高</td>\n<td>低</td>\n<td>高</td>\n<td>否</td>\n<td>★★</td>\n<td>新技术，浏览器的兼容问题</td>\n</tr>\n<tr>\n<td>结合 Web Components</td>\n<td>高</td>\n<td>低</td>\n<td>高</td>\n<td>否</td>\n<td>★★</td>\n<td>新技术，浏览器的兼容问题</td>\n</tr>\n</tbody></table>\n<p><img src=\"http://bugzhang.com/wp-content/uploads/2019/11/image-4.png\" alt=\"\"></p>\n<p>我们的业务：Y（不限框架） -&gt; N（不需要支持IE） -&gt; N （不是新项目因为有Grafana了）</p>\n<p>得到选型：<strong>WebComponent 集成应用的方式</strong></p>\n<p>其他关于web component是什么，怎么用，微服务是什么怎么用的。可以靠看参考文章来了解。</p>\n<hr>\n<p>参考文章：</p>\n<ul>\n<li>前端微服务：<a href=\"https://github.com/phodal/microfrontends\" target=\"_blank\" rel=\"noopener\">https://github.com/phodal/microfrontends</a></li>\n<li>WebComponent入门：<a href=\"http://www.ruanyifeng.com/blog/2019/08/web_components.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2019/08/web_components.html</a></li>\n<li>vue-cli3中使用<strong>WebComponent</strong>：<a href=\"https://www.cnblogs.com/Adiodanza/p/9641708.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/Adiodanza/p/9641708.html</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"原始方案\"><a href=\"#原始方案\" class=\"headerlink\" title=\"原始方案\"></a>原始方案</h2><p><img src=\"http://bugzhang.com/wp-content/uploads/2019/11/image.png\" alt=\"\"></p>\n<p>后端：Java框架Spring Boot整合数据库数据，推送给Grafana。 前端：完全依靠Grafana做前端，定制化很弱，无法完成大屏看板等刚需。</p>\n<h2 id=\"改进方案1：完全定制化的前端\"><a href=\"#改进方案1：完全定制化的前端\" class=\"headerlink\" title=\"改进方案1：完全定制化的前端\"></a>改进方案1：完全定制化的前端</h2><p><img src=\"http://bugzhang.com/wp-content/uploads/2019/11/image-1.png\" alt=\"\"></p>\n<p>干掉Grafana，完全定制化开发前端，采用Vue框架，以及数据可视化组件库Echarts和大屏组件库iDataV完成业务开发。</p>\n<h2 id=\"改进方案2：完全配置化的前端\"><a href=\"#改进方案2：完全配置化的前端\" class=\"headerlink\" title=\"改进方案2：完全配置化的前端\"></a>改进方案2：完全配置化的前端</h2><p><img src=\"http://bugzhang.com/wp-content/uploads/2019/11/image-2.png\" alt=\"\"></p>\n<p>方案1有个明显确定是复用性非常差，以后类似项目又要重头再来，不如Grafana方便。 方案2用Node.js，替代Grafana的后端功能。引入MongoDB存储业务后端推送的数据。</p>\n<p>每个页面可配置组件及其组件形式和样式，在运行时依靠配置编译出主题文件并且采用。可推送数据到不同组件实现监控。</p>\n<h2 id=\"改进方案3：基于微服务的对当前方案的改进\"><a href=\"#改进方案3：基于微服务的对当前方案的改进\" class=\"headerlink\" title=\"改进方案3：基于微服务的对当前方案的改进\"></a>改进方案3：基于微服务的对当前方案的改进</h2><p><img src=\"http://bugzhang.com/wp-content/uploads/2019/11/image-3.png\" alt=\"\"></p>\n<p>方案2相比之前，功能非常齐全，可维护性很佳。难度在于实施工期非常长，并且目前业务Grafana基本能支持绝大多数场景，除了大屏展示效果不佳外是勉强可用的。</p>\n<p>如果把大屏功能和Grafana数据可视化分离成两个微服务，然后用一个基座整合在一起，大屏功能和方案2一致，而Grafana完整保留，好处在于开发时间大大降低。得到方案3。</p>\n<h1 id=\"前端微服务技术可选方案\"><a href=\"#前端微服务技术可选方案\" class=\"headerlink\" title=\"前端微服务技术可选方案\"></a>前端微服务技术可选方案</h1><table>\n<thead>\n<tr>\n<th>方式</th>\n<th>开发成本</th>\n<th>维护成本</th>\n<th>可行性</th>\n<th>同一框架要求</th>\n<th>实现难度</th>\n<th>潜在风险</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>路由分发</td>\n<td>低</td>\n<td>低</td>\n<td>高</td>\n<td>否</td>\n<td>★</td>\n<td>不支持多种框架</td>\n</tr>\n<tr>\n<td>iFrame</td>\n<td>低</td>\n<td>低</td>\n<td>高</td>\n<td>否</td>\n<td>★</td>\n<td>XSS风险，性能差</td>\n</tr>\n<tr>\n<td>应用微服务化</td>\n<td>高</td>\n<td>低</td>\n<td>中</td>\n<td>否</td>\n<td>★★★★</td>\n<td>针对每个框架做定制</td>\n</tr>\n<tr>\n<td>微件化</td>\n<td>高</td>\n<td>中</td>\n<td>低</td>\n<td>是</td>\n<td>★★★★★</td>\n<td>针对构建系统，如 webpack 进行 hack</td>\n</tr>\n<tr>\n<td>微应用化</td>\n<td>中</td>\n<td>中</td>\n<td>高</td>\n<td>是</td>\n<td>★★★</td>\n<td>统一不同应用的构建规范</td>\n</tr>\n<tr>\n<td>纯 Web Components</td>\n<td>高</td>\n<td>低</td>\n<td>高</td>\n<td>否</td>\n<td>★★</td>\n<td>新技术，浏览器的兼容问题</td>\n</tr>\n<tr>\n<td>结合 Web Components</td>\n<td>高</td>\n<td>低</td>\n<td>高</td>\n<td>否</td>\n<td>★★</td>\n<td>新技术，浏览器的兼容问题</td>\n</tr>\n</tbody></table>\n<p><img src=\"http://bugzhang.com/wp-content/uploads/2019/11/image-4.png\" alt=\"\"></p>\n<p>我们的业务：Y（不限框架） -&gt; N（不需要支持IE） -&gt; N （不是新项目因为有Grafana了）</p>\n<p>得到选型：<strong>WebComponent 集成应用的方式</strong></p>\n<p>其他关于web component是什么，怎么用，微服务是什么怎么用的。可以靠看参考文章来了解。</p>\n<hr>\n<p>参考文章：</p>\n<ul>\n<li>前端微服务：<a href=\"https://github.com/phodal/microfrontends\" target=\"_blank\" rel=\"noopener\">https://github.com/phodal/microfrontends</a></li>\n<li>WebComponent入门：<a href=\"http://www.ruanyifeng.com/blog/2019/08/web_components.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2019/08/web_components.html</a></li>\n<li>vue-cli3中使用<strong>WebComponent</strong>：<a href=\"https://www.cnblogs.com/Adiodanza/p/9641708.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/Adiodanza/p/9641708.html</a></li>\n</ul>\n"},{"title":"大二小结","url":"28.html","id":"28","date":"2016-07-10T11:41:39.000Z","_content":"\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0010.jpg) 做完今天的电子设计，就是大二的结束了，感觉到时间的飞快，只剩下一年准备工作了。作为学渣一个我应该是不读研也考不上研的，不过潜意识一直认为，靠谱点的公司工作了三年的工程师技术绝对是吊打学校里读三年的研究生的，自然内心也对继续读书没有什么趋同感。虽然家里从上到下都要求让我读研，虽然无论他们还是我自己都不知道那种选择更好，不过近两年努力（挂了三科却学得了一点点技术，如果今年不重修完估计得延迟毕业了得）老爸不像之前那样觉得读研是必须的了，说能本科毕业就好。但即使如此也倍感压力之大，毕竟之前浪费了不少时间，现在得付出十二分的时间补一下技术，，按照目前进度觉得一年还是足够的还能留出来至少两个月上牛客准备刷下笔试题和面试题，看看剑指offer之类的，但愿学校大三不在有各种奇奇怪怪的事情就行（诸如这个假期近十天的课设+课设前假期让我不得不鸽掉本来准备的实习）。估计是既不擅长电子相关课程的原因，我内心对所有和电子直接相关的课程和老师都很排斥，以至于大学挂的三门课全部都是电子（数电、模电、通信原理）的，换句话说是极为讨厌硬件相关的。\n\n# 我的大二时间线\n\n2015 年9月：继续上一个项目，一个关于物流的网站开发。 2015 年10月：中南大学有色金属出版社网站开发。 2015 年11月：颓废的一个月，现在也想不起干了什么，学了什么。 2015 年12月：开始了解angular和node.js，准备走大前端，但学习遇上很多问题并且较难解决，中途暂时放弃。 2016 年1月：考试接近，复（yu）习（xi），第一次开始一天一本书，一夜一门课的玩命模式。 2016 年2月：回家，春节，购买了DO的国外服务器以免去备案的麻烦，搭建了博客准备记录以后，继续学了一段时间前端，重构了去 年的物流网站项目。 2016 年3月：返校，帮学长开发学校招聘网. 2016 年4月：补了《白色相簿2》，短短13集的动漫，却中毒颇深，后来玩了这款gal，此生无悔入白学。 2016 年5月：作为外包开发学校学生团队做的二手平台，据说后来他们拿了金奖并且基本拿下国赛，邀请我加入时候回绝了虽然知道拿下国赛意味着保研至少也是加分，但学校的那类比赛已经和我价值观冲突了许多。 2016 年6月：学了一段时间代码，月底考试，开始预习，一天一本书效果不错，基本全部过了。 2016 年7月：终于放假，准备过充电和学习为主的假期，间隔计划见高中同学。 总之这一年丧失诸多之前的热情，能力也变得平庸而没有大一的锐气，或者说我可能本来就是那种有想法没天赋和坚持的，很多本来能做好的被白白浪费，也没有勇气追求，或者说之前会的很多都是因为别人没有去学才能超越的，如果这样那下一年可能就会被更多人在技术上超越，所以必须重新继续了。","source":"_posts/e5-a4-a7-e4-ba-8c-e5-b0-8f-e7-bb-93.md","raw":"---\ntitle: 大二小结\ntags:\n  - 扯淡\nurl: 28.html\nid: 28\ncategories:\n  - 扯淡集\ndate: 2016-07-10 19:41:39\n---\n\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0010.jpg) 做完今天的电子设计，就是大二的结束了，感觉到时间的飞快，只剩下一年准备工作了。作为学渣一个我应该是不读研也考不上研的，不过潜意识一直认为，靠谱点的公司工作了三年的工程师技术绝对是吊打学校里读三年的研究生的，自然内心也对继续读书没有什么趋同感。虽然家里从上到下都要求让我读研，虽然无论他们还是我自己都不知道那种选择更好，不过近两年努力（挂了三科却学得了一点点技术，如果今年不重修完估计得延迟毕业了得）老爸不像之前那样觉得读研是必须的了，说能本科毕业就好。但即使如此也倍感压力之大，毕竟之前浪费了不少时间，现在得付出十二分的时间补一下技术，，按照目前进度觉得一年还是足够的还能留出来至少两个月上牛客准备刷下笔试题和面试题，看看剑指offer之类的，但愿学校大三不在有各种奇奇怪怪的事情就行（诸如这个假期近十天的课设+课设前假期让我不得不鸽掉本来准备的实习）。估计是既不擅长电子相关课程的原因，我内心对所有和电子直接相关的课程和老师都很排斥，以至于大学挂的三门课全部都是电子（数电、模电、通信原理）的，换句话说是极为讨厌硬件相关的。\n\n# 我的大二时间线\n\n2015 年9月：继续上一个项目，一个关于物流的网站开发。 2015 年10月：中南大学有色金属出版社网站开发。 2015 年11月：颓废的一个月，现在也想不起干了什么，学了什么。 2015 年12月：开始了解angular和node.js，准备走大前端，但学习遇上很多问题并且较难解决，中途暂时放弃。 2016 年1月：考试接近，复（yu）习（xi），第一次开始一天一本书，一夜一门课的玩命模式。 2016 年2月：回家，春节，购买了DO的国外服务器以免去备案的麻烦，搭建了博客准备记录以后，继续学了一段时间前端，重构了去 年的物流网站项目。 2016 年3月：返校，帮学长开发学校招聘网. 2016 年4月：补了《白色相簿2》，短短13集的动漫，却中毒颇深，后来玩了这款gal，此生无悔入白学。 2016 年5月：作为外包开发学校学生团队做的二手平台，据说后来他们拿了金奖并且基本拿下国赛，邀请我加入时候回绝了虽然知道拿下国赛意味着保研至少也是加分，但学校的那类比赛已经和我价值观冲突了许多。 2016 年6月：学了一段时间代码，月底考试，开始预习，一天一本书效果不错，基本全部过了。 2016 年7月：终于放假，准备过充电和学习为主的假期，间隔计划见高中同学。 总之这一年丧失诸多之前的热情，能力也变得平庸而没有大一的锐气，或者说我可能本来就是那种有想法没天赋和坚持的，很多本来能做好的被白白浪费，也没有勇气追求，或者说之前会的很多都是因为别人没有去学才能超越的，如果这样那下一年可能就会被更多人在技术上超越，所以必须重新继续了。","slug":"e5-a4-a7-e4-ba-8c-e5-b0-8f-e7-bb-93","published":1,"updated":"2020-05-19T08:51:28.807Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts7yy001szmz8gyuvdq4y","content":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0010.jpg\" alt=\"\"> 做完今天的电子设计，就是大二的结束了，感觉到时间的飞快，只剩下一年准备工作了。作为学渣一个我应该是不读研也考不上研的，不过潜意识一直认为，靠谱点的公司工作了三年的工程师技术绝对是吊打学校里读三年的研究生的，自然内心也对继续读书没有什么趋同感。虽然家里从上到下都要求让我读研，虽然无论他们还是我自己都不知道那种选择更好，不过近两年努力（挂了三科却学得了一点点技术，如果今年不重修完估计得延迟毕业了得）老爸不像之前那样觉得读研是必须的了，说能本科毕业就好。但即使如此也倍感压力之大，毕竟之前浪费了不少时间，现在得付出十二分的时间补一下技术，，按照目前进度觉得一年还是足够的还能留出来至少两个月上牛客准备刷下笔试题和面试题，看看剑指offer之类的，但愿学校大三不在有各种奇奇怪怪的事情就行（诸如这个假期近十天的课设+课设前假期让我不得不鸽掉本来准备的实习）。估计是既不擅长电子相关课程的原因，我内心对所有和电子直接相关的课程和老师都很排斥，以至于大学挂的三门课全部都是电子（数电、模电、通信原理）的，换句话说是极为讨厌硬件相关的。</p>\n<h1 id=\"我的大二时间线\"><a href=\"#我的大二时间线\" class=\"headerlink\" title=\"我的大二时间线\"></a>我的大二时间线</h1><p>2015 年9月：继续上一个项目，一个关于物流的网站开发。 2015 年10月：中南大学有色金属出版社网站开发。 2015 年11月：颓废的一个月，现在也想不起干了什么，学了什么。 2015 年12月：开始了解angular和node.js，准备走大前端，但学习遇上很多问题并且较难解决，中途暂时放弃。 2016 年1月：考试接近，复（yu）习（xi），第一次开始一天一本书，一夜一门课的玩命模式。 2016 年2月：回家，春节，购买了DO的国外服务器以免去备案的麻烦，搭建了博客准备记录以后，继续学了一段时间前端，重构了去 年的物流网站项目。 2016 年3月：返校，帮学长开发学校招聘网. 2016 年4月：补了《白色相簿2》，短短13集的动漫，却中毒颇深，后来玩了这款gal，此生无悔入白学。 2016 年5月：作为外包开发学校学生团队做的二手平台，据说后来他们拿了金奖并且基本拿下国赛，邀请我加入时候回绝了虽然知道拿下国赛意味着保研至少也是加分，但学校的那类比赛已经和我价值观冲突了许多。 2016 年6月：学了一段时间代码，月底考试，开始预习，一天一本书效果不错，基本全部过了。 2016 年7月：终于放假，准备过充电和学习为主的假期，间隔计划见高中同学。 总之这一年丧失诸多之前的热情，能力也变得平庸而没有大一的锐气，或者说我可能本来就是那种有想法没天赋和坚持的，很多本来能做好的被白白浪费，也没有勇气追求，或者说之前会的很多都是因为别人没有去学才能超越的，如果这样那下一年可能就会被更多人在技术上超越，所以必须重新继续了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0010.jpg\" alt=\"\"> 做完今天的电子设计，就是大二的结束了，感觉到时间的飞快，只剩下一年准备工作了。作为学渣一个我应该是不读研也考不上研的，不过潜意识一直认为，靠谱点的公司工作了三年的工程师技术绝对是吊打学校里读三年的研究生的，自然内心也对继续读书没有什么趋同感。虽然家里从上到下都要求让我读研，虽然无论他们还是我自己都不知道那种选择更好，不过近两年努力（挂了三科却学得了一点点技术，如果今年不重修完估计得延迟毕业了得）老爸不像之前那样觉得读研是必须的了，说能本科毕业就好。但即使如此也倍感压力之大，毕竟之前浪费了不少时间，现在得付出十二分的时间补一下技术，，按照目前进度觉得一年还是足够的还能留出来至少两个月上牛客准备刷下笔试题和面试题，看看剑指offer之类的，但愿学校大三不在有各种奇奇怪怪的事情就行（诸如这个假期近十天的课设+课设前假期让我不得不鸽掉本来准备的实习）。估计是既不擅长电子相关课程的原因，我内心对所有和电子直接相关的课程和老师都很排斥，以至于大学挂的三门课全部都是电子（数电、模电、通信原理）的，换句话说是极为讨厌硬件相关的。</p>\n<h1 id=\"我的大二时间线\"><a href=\"#我的大二时间线\" class=\"headerlink\" title=\"我的大二时间线\"></a>我的大二时间线</h1><p>2015 年9月：继续上一个项目，一个关于物流的网站开发。 2015 年10月：中南大学有色金属出版社网站开发。 2015 年11月：颓废的一个月，现在也想不起干了什么，学了什么。 2015 年12月：开始了解angular和node.js，准备走大前端，但学习遇上很多问题并且较难解决，中途暂时放弃。 2016 年1月：考试接近，复（yu）习（xi），第一次开始一天一本书，一夜一门课的玩命模式。 2016 年2月：回家，春节，购买了DO的国外服务器以免去备案的麻烦，搭建了博客准备记录以后，继续学了一段时间前端，重构了去 年的物流网站项目。 2016 年3月：返校，帮学长开发学校招聘网. 2016 年4月：补了《白色相簿2》，短短13集的动漫，却中毒颇深，后来玩了这款gal，此生无悔入白学。 2016 年5月：作为外包开发学校学生团队做的二手平台，据说后来他们拿了金奖并且基本拿下国赛，邀请我加入时候回绝了虽然知道拿下国赛意味着保研至少也是加分，但学校的那类比赛已经和我价值观冲突了许多。 2016 年6月：学了一段时间代码，月底考试，开始预习，一天一本书效果不错，基本全部过了。 2016 年7月：终于放假，准备过充电和学习为主的假期，间隔计划见高中同学。 总之这一年丧失诸多之前的热情，能力也变得平庸而没有大一的锐气，或者说我可能本来就是那种有想法没天赋和坚持的，很多本来能做好的被白白浪费，也没有勇气追求，或者说之前会的很多都是因为别人没有去学才能超越的，如果这样那下一年可能就会被更多人在技术上超越，所以必须重新继续了。</p>\n"},{"title":"搜狐大数据中心前端面试","url":"173.html","id":"173","date":"2018-03-21T12:03:35.000Z","_content":"\n一面（60分钟）\n========\n\n1.vdom原理，为什么性能好， diff算法。最后也要用dom的api，直接操作不效果更好为什么还要用v-dom 2.游览器渲染过程，重绘和回流是什么，发生在何时，那些情况引起，如何优化 3.两栏布局 4.css做一个进度条动画，进度条左右是带弧形的（不会） 5.css菱形，translate的矩阵是怎么算的（没答好） 6.原型链 7.this指向 8.作用域，对const的值修改会输出什么 9.闭包 10.堆栈、js那些在堆那些在栈、垃圾回收。给了个过程与对象分别使用两种垃圾回收机制判定。内存泄漏。能否用编译原理解释闭包与垃圾回收。 11.正则匹配一个邮箱 12.获取页面元素位置与宽高 13.对象继承\n\n二面（90分钟）\n========\n\n估计一面面试官出去告诉二面我css不好，于是二面一个css问题都没问我。 1.输出以及为什么\n\n    Function.prototype.a = 'a';\n    Object.prototype.b = 'b';\n    function Person(){};\n    var p = new Person();\n    console.log('p.a: '+ p.a); // p.a: undefined\n    console.log('p.b: '+ p.b); // p.b: b\n    \n\n2.输出以及为什么\n\n    const person = {\n      namea: 'menglinghua',\n      say: function (){\n        return function (){\n          console.log(this.namea);\n        };\n      }\n    };\n    person.say()(); // undefined\n    const person = {\n      namea: 'menglinghua',\n      say: function (){\n        return () => {\n          console.log(this.namea);\n        };\n      }\n    };\n    person.say()(); // menglinghua\n    \n\n3.输出以及为什么\n\n    setTimeout(() => console.log('a'), 0);\n    var p = new Promise((resolve) => {\n      console.log('b');\n      resolve();\n    });\n    p.then(() => console.log('c'));\n    p.then(() => console.log('d'));\n    console.log('e');\n    \n    async function async1() {\n        console.log(\"a\");\n        await  async2(); \n        console.log(\"b\");\n    \n    }\n    async function async2() {\n       console.log( 'c');\n    }\n    console.log(\"d\");\n    setTimeout(function () {\n        console.log(\"e\");\n    },0);\n    async1();\n    new Promise(function (resolve) {\n        console.log(\"f\");\n        resolve();\n    }).then(function () {\n        console.log(\"g\");\n    });\n    console.log('h');\n    \n\njs事件循环机制。node与游览器端区别。每个事件发生在何处。（区别没答好，其他ok） 2.写一个构造函数，实现class里的#开头是私有变量（说了匹配与模块模式实现私有变量，没改写get()方法所以被说有问题，经过提醒知道了，算是最大的收获）。 3.用gulp写插件编译这个语法到ES5能不能写出来。（操作AST就行了，应该没问题） 4.实现async（不会，实际是promise语法糖） 6.promise异常处理，实现promise 7.单页应用中游览器url跳转变化了，但没发请求是什么原理，怎么实现的（说了spa路由及原理） 8.http缓存机制，localStorage、sessionStorage。能不能用本地缓存实现类似http缓存机制。indexDB和webSQL。手写连接查询SQL语句。（没问题，能实现） 9.开发者工具中，关于性能的有哪些参数。怎么用。怎么计算首页时间。 10.正则匹配http://www.sohu.com/ 中的主域名（?=即可） 11.反转单链表（写了个递归的) 12.单元测试，敏捷开发与测试驱动开发 13.前端安全的了解：XSS、CSRF、点击劫持、canvas破解验证码，前端sql注入 14.PWA了解多少 15.react生命周期。你不会？会什么。vue，那vue生命周期吧。\n\n三面（20分钟）\n========\n\n1.linux文件系统（不会，一出来记起来就是ext2,ext3,fat32那些东西） 2.FIFO、LFU、LRU缓存换页算法 3.进程线程，线程通信 4.画出OSI七层，TCP/IP四层 5.TCP和UDP区别，三次握手四次断开，为什么握手三次，断开四次；TCP的可靠性如何实现；TCP重传机制怎么实现，TCP拥塞控制有哪些；能不能用udp实现tcp 6.CSMA/CA协议（不会）","source":"_posts/e6-90-9c-e7-8b-90-e5-a4-a7-e6-95-b0-e6-8d-ae-e4-b8-ad-e5-bf-83-e5-89-8d-e7-ab-af-e9-9d-a2-e8-af-95.md","raw":"---\ntitle: 搜狐大数据中心前端面试\nurl: 173.html\nid: 173\ncategories:\n  - 前端\n  - 面试\ndate: 2018-03-21 20:03:35\ntags:\n---\n\n一面（60分钟）\n========\n\n1.vdom原理，为什么性能好， diff算法。最后也要用dom的api，直接操作不效果更好为什么还要用v-dom 2.游览器渲染过程，重绘和回流是什么，发生在何时，那些情况引起，如何优化 3.两栏布局 4.css做一个进度条动画，进度条左右是带弧形的（不会） 5.css菱形，translate的矩阵是怎么算的（没答好） 6.原型链 7.this指向 8.作用域，对const的值修改会输出什么 9.闭包 10.堆栈、js那些在堆那些在栈、垃圾回收。给了个过程与对象分别使用两种垃圾回收机制判定。内存泄漏。能否用编译原理解释闭包与垃圾回收。 11.正则匹配一个邮箱 12.获取页面元素位置与宽高 13.对象继承\n\n二面（90分钟）\n========\n\n估计一面面试官出去告诉二面我css不好，于是二面一个css问题都没问我。 1.输出以及为什么\n\n    Function.prototype.a = 'a';\n    Object.prototype.b = 'b';\n    function Person(){};\n    var p = new Person();\n    console.log('p.a: '+ p.a); // p.a: undefined\n    console.log('p.b: '+ p.b); // p.b: b\n    \n\n2.输出以及为什么\n\n    const person = {\n      namea: 'menglinghua',\n      say: function (){\n        return function (){\n          console.log(this.namea);\n        };\n      }\n    };\n    person.say()(); // undefined\n    const person = {\n      namea: 'menglinghua',\n      say: function (){\n        return () => {\n          console.log(this.namea);\n        };\n      }\n    };\n    person.say()(); // menglinghua\n    \n\n3.输出以及为什么\n\n    setTimeout(() => console.log('a'), 0);\n    var p = new Promise((resolve) => {\n      console.log('b');\n      resolve();\n    });\n    p.then(() => console.log('c'));\n    p.then(() => console.log('d'));\n    console.log('e');\n    \n    async function async1() {\n        console.log(\"a\");\n        await  async2(); \n        console.log(\"b\");\n    \n    }\n    async function async2() {\n       console.log( 'c');\n    }\n    console.log(\"d\");\n    setTimeout(function () {\n        console.log(\"e\");\n    },0);\n    async1();\n    new Promise(function (resolve) {\n        console.log(\"f\");\n        resolve();\n    }).then(function () {\n        console.log(\"g\");\n    });\n    console.log('h');\n    \n\njs事件循环机制。node与游览器端区别。每个事件发生在何处。（区别没答好，其他ok） 2.写一个构造函数，实现class里的#开头是私有变量（说了匹配与模块模式实现私有变量，没改写get()方法所以被说有问题，经过提醒知道了，算是最大的收获）。 3.用gulp写插件编译这个语法到ES5能不能写出来。（操作AST就行了，应该没问题） 4.实现async（不会，实际是promise语法糖） 6.promise异常处理，实现promise 7.单页应用中游览器url跳转变化了，但没发请求是什么原理，怎么实现的（说了spa路由及原理） 8.http缓存机制，localStorage、sessionStorage。能不能用本地缓存实现类似http缓存机制。indexDB和webSQL。手写连接查询SQL语句。（没问题，能实现） 9.开发者工具中，关于性能的有哪些参数。怎么用。怎么计算首页时间。 10.正则匹配http://www.sohu.com/ 中的主域名（?=即可） 11.反转单链表（写了个递归的) 12.单元测试，敏捷开发与测试驱动开发 13.前端安全的了解：XSS、CSRF、点击劫持、canvas破解验证码，前端sql注入 14.PWA了解多少 15.react生命周期。你不会？会什么。vue，那vue生命周期吧。\n\n三面（20分钟）\n========\n\n1.linux文件系统（不会，一出来记起来就是ext2,ext3,fat32那些东西） 2.FIFO、LFU、LRU缓存换页算法 3.进程线程，线程通信 4.画出OSI七层，TCP/IP四层 5.TCP和UDP区别，三次握手四次断开，为什么握手三次，断开四次；TCP的可靠性如何实现；TCP重传机制怎么实现，TCP拥塞控制有哪些；能不能用udp实现tcp 6.CSMA/CA协议（不会）","slug":"e6-90-9c-e7-8b-90-e5-a4-a7-e6-95-b0-e6-8d-ae-e4-b8-ad-e5-bf-83-e5-89-8d-e7-ab-af-e9-9d-a2-e8-af-95","published":1,"updated":"2020-05-19T08:33:55.929Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts7yz001vzmz8fzms44l5","content":"<h1 id=\"一面（60分钟）\"><a href=\"#一面（60分钟）\" class=\"headerlink\" title=\"一面（60分钟）\"></a>一面（60分钟）</h1><p>1.vdom原理，为什么性能好， diff算法。最后也要用dom的api，直接操作不效果更好为什么还要用v-dom 2.游览器渲染过程，重绘和回流是什么，发生在何时，那些情况引起，如何优化 3.两栏布局 4.css做一个进度条动画，进度条左右是带弧形的（不会） 5.css菱形，translate的矩阵是怎么算的（没答好） 6.原型链 7.this指向 8.作用域，对const的值修改会输出什么 9.闭包 10.堆栈、js那些在堆那些在栈、垃圾回收。给了个过程与对象分别使用两种垃圾回收机制判定。内存泄漏。能否用编译原理解释闭包与垃圾回收。 11.正则匹配一个邮箱 12.获取页面元素位置与宽高 13.对象继承</p>\n<h1 id=\"二面（90分钟）\"><a href=\"#二面（90分钟）\" class=\"headerlink\" title=\"二面（90分钟）\"></a>二面（90分钟）</h1><p>估计一面面试官出去告诉二面我css不好，于是二面一个css问题都没问我。 1.输出以及为什么</p>\n<pre><code>Function.prototype.a = &apos;a&apos;;\nObject.prototype.b = &apos;b&apos;;\nfunction Person(){};\nvar p = new Person();\nconsole.log(&apos;p.a: &apos;+ p.a); // p.a: undefined\nconsole.log(&apos;p.b: &apos;+ p.b); // p.b: b</code></pre><p>2.输出以及为什么</p>\n<pre><code>const person = {\n  namea: &apos;menglinghua&apos;,\n  say: function (){\n    return function (){\n      console.log(this.namea);\n    };\n  }\n};\nperson.say()(); // undefined\nconst person = {\n  namea: &apos;menglinghua&apos;,\n  say: function (){\n    return () =&gt; {\n      console.log(this.namea);\n    };\n  }\n};\nperson.say()(); // menglinghua</code></pre><p>3.输出以及为什么</p>\n<pre><code>setTimeout(() =&gt; console.log(&apos;a&apos;), 0);\nvar p = new Promise((resolve) =&gt; {\n  console.log(&apos;b&apos;);\n  resolve();\n});\np.then(() =&gt; console.log(&apos;c&apos;));\np.then(() =&gt; console.log(&apos;d&apos;));\nconsole.log(&apos;e&apos;);\n\nasync function async1() {\n    console.log(&quot;a&quot;);\n    await  async2(); \n    console.log(&quot;b&quot;);\n\n}\nasync function async2() {\n   console.log( &apos;c&apos;);\n}\nconsole.log(&quot;d&quot;);\nsetTimeout(function () {\n    console.log(&quot;e&quot;);\n},0);\nasync1();\nnew Promise(function (resolve) {\n    console.log(&quot;f&quot;);\n    resolve();\n}).then(function () {\n    console.log(&quot;g&quot;);\n});\nconsole.log(&apos;h&apos;);</code></pre><p>js事件循环机制。node与游览器端区别。每个事件发生在何处。（区别没答好，其他ok） 2.写一个构造函数，实现class里的#开头是私有变量（说了匹配与模块模式实现私有变量，没改写get()方法所以被说有问题，经过提醒知道了，算是最大的收获）。 3.用gulp写插件编译这个语法到ES5能不能写出来。（操作AST就行了，应该没问题） 4.实现async（不会，实际是promise语法糖） 6.promise异常处理，实现promise 7.单页应用中游览器url跳转变化了，但没发请求是什么原理，怎么实现的（说了spa路由及原理） 8.http缓存机制，localStorage、sessionStorage。能不能用本地缓存实现类似http缓存机制。indexDB和webSQL。手写连接查询SQL语句。（没问题，能实现） 9.开发者工具中，关于性能的有哪些参数。怎么用。怎么计算首页时间。 10.正则匹配<a href=\"http://www.sohu.com/\" target=\"_blank\" rel=\"noopener\">http://www.sohu.com/</a> 中的主域名（?=即可） 11.反转单链表（写了个递归的) 12.单元测试，敏捷开发与测试驱动开发 13.前端安全的了解：XSS、CSRF、点击劫持、canvas破解验证码，前端sql注入 14.PWA了解多少 15.react生命周期。你不会？会什么。vue，那vue生命周期吧。</p>\n<h1 id=\"三面（20分钟）\"><a href=\"#三面（20分钟）\" class=\"headerlink\" title=\"三面（20分钟）\"></a>三面（20分钟）</h1><p>1.linux文件系统（不会，一出来记起来就是ext2,ext3,fat32那些东西） 2.FIFO、LFU、LRU缓存换页算法 3.进程线程，线程通信 4.画出OSI七层，TCP/IP四层 5.TCP和UDP区别，三次握手四次断开，为什么握手三次，断开四次；TCP的可靠性如何实现；TCP重传机制怎么实现，TCP拥塞控制有哪些；能不能用udp实现tcp 6.CSMA/CA协议（不会）</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一面（60分钟）\"><a href=\"#一面（60分钟）\" class=\"headerlink\" title=\"一面（60分钟）\"></a>一面（60分钟）</h1><p>1.vdom原理，为什么性能好， diff算法。最后也要用dom的api，直接操作不效果更好为什么还要用v-dom 2.游览器渲染过程，重绘和回流是什么，发生在何时，那些情况引起，如何优化 3.两栏布局 4.css做一个进度条动画，进度条左右是带弧形的（不会） 5.css菱形，translate的矩阵是怎么算的（没答好） 6.原型链 7.this指向 8.作用域，对const的值修改会输出什么 9.闭包 10.堆栈、js那些在堆那些在栈、垃圾回收。给了个过程与对象分别使用两种垃圾回收机制判定。内存泄漏。能否用编译原理解释闭包与垃圾回收。 11.正则匹配一个邮箱 12.获取页面元素位置与宽高 13.对象继承</p>\n<h1 id=\"二面（90分钟）\"><a href=\"#二面（90分钟）\" class=\"headerlink\" title=\"二面（90分钟）\"></a>二面（90分钟）</h1><p>估计一面面试官出去告诉二面我css不好，于是二面一个css问题都没问我。 1.输出以及为什么</p>\n<pre><code>Function.prototype.a = &apos;a&apos;;\nObject.prototype.b = &apos;b&apos;;\nfunction Person(){};\nvar p = new Person();\nconsole.log(&apos;p.a: &apos;+ p.a); // p.a: undefined\nconsole.log(&apos;p.b: &apos;+ p.b); // p.b: b</code></pre><p>2.输出以及为什么</p>\n<pre><code>const person = {\n  namea: &apos;menglinghua&apos;,\n  say: function (){\n    return function (){\n      console.log(this.namea);\n    };\n  }\n};\nperson.say()(); // undefined\nconst person = {\n  namea: &apos;menglinghua&apos;,\n  say: function (){\n    return () =&gt; {\n      console.log(this.namea);\n    };\n  }\n};\nperson.say()(); // menglinghua</code></pre><p>3.输出以及为什么</p>\n<pre><code>setTimeout(() =&gt; console.log(&apos;a&apos;), 0);\nvar p = new Promise((resolve) =&gt; {\n  console.log(&apos;b&apos;);\n  resolve();\n});\np.then(() =&gt; console.log(&apos;c&apos;));\np.then(() =&gt; console.log(&apos;d&apos;));\nconsole.log(&apos;e&apos;);\n\nasync function async1() {\n    console.log(&quot;a&quot;);\n    await  async2(); \n    console.log(&quot;b&quot;);\n\n}\nasync function async2() {\n   console.log( &apos;c&apos;);\n}\nconsole.log(&quot;d&quot;);\nsetTimeout(function () {\n    console.log(&quot;e&quot;);\n},0);\nasync1();\nnew Promise(function (resolve) {\n    console.log(&quot;f&quot;);\n    resolve();\n}).then(function () {\n    console.log(&quot;g&quot;);\n});\nconsole.log(&apos;h&apos;);</code></pre><p>js事件循环机制。node与游览器端区别。每个事件发生在何处。（区别没答好，其他ok） 2.写一个构造函数，实现class里的#开头是私有变量（说了匹配与模块模式实现私有变量，没改写get()方法所以被说有问题，经过提醒知道了，算是最大的收获）。 3.用gulp写插件编译这个语法到ES5能不能写出来。（操作AST就行了，应该没问题） 4.实现async（不会，实际是promise语法糖） 6.promise异常处理，实现promise 7.单页应用中游览器url跳转变化了，但没发请求是什么原理，怎么实现的（说了spa路由及原理） 8.http缓存机制，localStorage、sessionStorage。能不能用本地缓存实现类似http缓存机制。indexDB和webSQL。手写连接查询SQL语句。（没问题，能实现） 9.开发者工具中，关于性能的有哪些参数。怎么用。怎么计算首页时间。 10.正则匹配<a href=\"http://www.sohu.com/\" target=\"_blank\" rel=\"noopener\">http://www.sohu.com/</a> 中的主域名（?=即可） 11.反转单链表（写了个递归的) 12.单元测试，敏捷开发与测试驱动开发 13.前端安全的了解：XSS、CSRF、点击劫持、canvas破解验证码，前端sql注入 14.PWA了解多少 15.react生命周期。你不会？会什么。vue，那vue生命周期吧。</p>\n<h1 id=\"三面（20分钟）\"><a href=\"#三面（20分钟）\" class=\"headerlink\" title=\"三面（20分钟）\"></a>三面（20分钟）</h1><p>1.linux文件系统（不会，一出来记起来就是ext2,ext3,fat32那些东西） 2.FIFO、LFU、LRU缓存换页算法 3.进程线程，线程通信 4.画出OSI七层，TCP/IP四层 5.TCP和UDP区别，三次握手四次断开，为什么握手三次，断开四次；TCP的可靠性如何实现；TCP重传机制怎么实现，TCP拥塞控制有哪些；能不能用udp实现tcp 6.CSMA/CA协议（不会）</p>\n"},{"title":"Egg.js操作日志模块开发一二","url":"223.html","id":"223","date":"2018-12-02T17:40:09.000Z","_content":"\n# 操作日志的意义\n\n操作日志顾名思义，就是记录所有对系统的操作，使得系统运行者对系统的运行了如指掌。 对于toB端或者内部管理系统而言，操作日志可以朔源，清楚找到问题所在，从而解决并且为以后避免提供经验。 对于toC端而言，操作日志可以了解用户行为，提供数据分析可以让公司与开发者开发出更加符合用户体验具有用户粘性的产品。\n\n# 界面展示\n\n主要展示内容是 用户 | 模块 | 操作类型 | 何种操作 | 操作前内容 | 操作后内容 | :------| ------: | ------: | ------: | ------: | :------: | admin | 用户管理 | 修改 | 修改bugzhang权限 | 运维管理员 | 超级管理员\n\n# 存储设计\n\n存储比较灵活，数据库与文件存储可以结合使用，我为了提升数据库性能，将部分敏感操作存入数据库，将次要操作存储入文件。 **操作日志表设计**\n\n字段名\n\n说明描述\n\n数据类型\n\nid\n\nid\n\nINTEGER primaryKey autoIncrement\n\nip\n\nip地址\n\nVARCHAR(255)\n\nuserId\n\n用户id\n\nINTEGER\n\nuser\n\n用户名\n\nVARCHAR(255)\n\ntype\n\n操作类型： 1\\. 添加 2.修改 3. 删除 4.查询\n\nINTEGER\n\ntarget\n\n操作目标，根据页面的menu页区分： 用户管理、公司业务管理、Doc管理、日志系统、PMU在线模型、监控系统、IDC管理、Wiki文档\n\nVARCHAR(255)\n\nbefore\n\n操作前内容\n\nVARCHAR(1024)\n\nafter\n\n操作后内容\n\nVARCHAR(1024)\n\ncontent\n\n描述\n\nVARCHAR(255)\n\nremarks\n\n备注信息\n\nVARCHAR(255)\n\n**文件存储** 前端有页面可以查文件的尾部多少行的页面，类似tail命令。\n\n# 实现\n\n*   获取IP地址 node.js可以轻松获取ip地址。代码如下：\n\n    function getClientIP(req) {\n        return req.headers['x-forwarded-for'] || // 判断是否有反向代理 IP\n            req.connection.remoteAddress || // 判断 connection 的远程 IP\n            req.socket.remoteAddress || // 判断后端的 socket 的 IP\n            req.connection.socket.remoteAddress;\n    };\n\n\n*   添加日志\n\n日志具有添加的核心方法，该方法用于\n\n    * create ({ type, target, content, after, remarks = '' }) {\n      const { ctx } = this\n      try {\n        // 这里有一些属于定时任务的操作，并没有用户状态，所以需要特殊处理\n        yield ctx.model.LogOperation.create({\n          userId: ctx.user ? ctx.user.id : 0,\n          user: ctx.user ? ctx.user.name : '定时任务',\n          ip: getClientIP() ? getClientIP : '未知ip'\n          type,\n          target,\n          after,\n          content,\n          remarks\n        })\n      } catch (err) {\n        ctx.logger.error(err)\n      }\n    }\n\n\n*   展示日志 日志可以被展示在某个页面中，方法非常简单\n\n      * getList ({ limit, offset, where }) {\n        const result = yield this.ctx.model.LogOperation.findAndCountAll({\n          raw: true,\n          offset,\n          limit,\n          attributes: ['id', 'userId', 'user', 'type', 'content', 'target', 'remarks', ['created_at', 'createdAt']],\n          order: [['created_at', 'DESC']],\n          where\n        })\n        return result\n      }\n\n\n# 装饰器模式\n\n日志记录实际是一种装饰器模式。 装饰器模式是一种用于代替继承的技术，无需通过继承增加子类就能扩展对象的新功能，就增加功能来说，装饰器模式相比生成子类更为灵活。 关键实现是： 1、Component 类充当抽象角色，不应该具体实现。 2、修饰类引用和继承 Component 类，具体扩展类重写父类方法。 在日志系统中：日志类就是抽象角色，不具体实现；操作类被日志类修饰，从而实现了本来没有的日志记录功能。","source":"_posts/e6-93-8d-e4-bd-9c-e6-97-a5-e5-bf-97-e7-9a-84-e6-84-8f-e4-b9-89.md","raw":"---\ntitle: Egg.js操作日志模块开发一二\ntags:\n  - egg.js\n  - node.js\nurl: 223.html\nid: 223\ncategories:\n  - node.js\ndate: 2018-12-03 01:40:09\n---\n\n# 操作日志的意义\n\n操作日志顾名思义，就是记录所有对系统的操作，使得系统运行者对系统的运行了如指掌。 对于toB端或者内部管理系统而言，操作日志可以朔源，清楚找到问题所在，从而解决并且为以后避免提供经验。 对于toC端而言，操作日志可以了解用户行为，提供数据分析可以让公司与开发者开发出更加符合用户体验具有用户粘性的产品。\n\n# 界面展示\n\n主要展示内容是 用户 | 模块 | 操作类型 | 何种操作 | 操作前内容 | 操作后内容 | :------| ------: | ------: | ------: | ------: | :------: | admin | 用户管理 | 修改 | 修改bugzhang权限 | 运维管理员 | 超级管理员\n\n# 存储设计\n\n存储比较灵活，数据库与文件存储可以结合使用，我为了提升数据库性能，将部分敏感操作存入数据库，将次要操作存储入文件。 **操作日志表设计**\n\n字段名\n\n说明描述\n\n数据类型\n\nid\n\nid\n\nINTEGER primaryKey autoIncrement\n\nip\n\nip地址\n\nVARCHAR(255)\n\nuserId\n\n用户id\n\nINTEGER\n\nuser\n\n用户名\n\nVARCHAR(255)\n\ntype\n\n操作类型： 1\\. 添加 2.修改 3. 删除 4.查询\n\nINTEGER\n\ntarget\n\n操作目标，根据页面的menu页区分： 用户管理、公司业务管理、Doc管理、日志系统、PMU在线模型、监控系统、IDC管理、Wiki文档\n\nVARCHAR(255)\n\nbefore\n\n操作前内容\n\nVARCHAR(1024)\n\nafter\n\n操作后内容\n\nVARCHAR(1024)\n\ncontent\n\n描述\n\nVARCHAR(255)\n\nremarks\n\n备注信息\n\nVARCHAR(255)\n\n**文件存储** 前端有页面可以查文件的尾部多少行的页面，类似tail命令。\n\n# 实现\n\n*   获取IP地址 node.js可以轻松获取ip地址。代码如下：\n\n    function getClientIP(req) {\n        return req.headers['x-forwarded-for'] || // 判断是否有反向代理 IP\n            req.connection.remoteAddress || // 判断 connection 的远程 IP\n            req.socket.remoteAddress || // 判断后端的 socket 的 IP\n            req.connection.socket.remoteAddress;\n    };\n\n\n*   添加日志\n\n日志具有添加的核心方法，该方法用于\n\n    * create ({ type, target, content, after, remarks = '' }) {\n      const { ctx } = this\n      try {\n        // 这里有一些属于定时任务的操作，并没有用户状态，所以需要特殊处理\n        yield ctx.model.LogOperation.create({\n          userId: ctx.user ? ctx.user.id : 0,\n          user: ctx.user ? ctx.user.name : '定时任务',\n          ip: getClientIP() ? getClientIP : '未知ip'\n          type,\n          target,\n          after,\n          content,\n          remarks\n        })\n      } catch (err) {\n        ctx.logger.error(err)\n      }\n    }\n\n\n*   展示日志 日志可以被展示在某个页面中，方法非常简单\n\n      * getList ({ limit, offset, where }) {\n        const result = yield this.ctx.model.LogOperation.findAndCountAll({\n          raw: true,\n          offset,\n          limit,\n          attributes: ['id', 'userId', 'user', 'type', 'content', 'target', 'remarks', ['created_at', 'createdAt']],\n          order: [['created_at', 'DESC']],\n          where\n        })\n        return result\n      }\n\n\n# 装饰器模式\n\n日志记录实际是一种装饰器模式。 装饰器模式是一种用于代替继承的技术，无需通过继承增加子类就能扩展对象的新功能，就增加功能来说，装饰器模式相比生成子类更为灵活。 关键实现是： 1、Component 类充当抽象角色，不应该具体实现。 2、修饰类引用和继承 Component 类，具体扩展类重写父类方法。 在日志系统中：日志类就是抽象角色，不具体实现；操作类被日志类修饰，从而实现了本来没有的日志记录功能。","slug":"e6-93-8d-e4-bd-9c-e6-97-a5-e5-bf-97-e7-9a-84-e6-84-8f-e4-b9-89","published":1,"updated":"2020-05-19T08:51:28.807Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts7z1001zzmz891sqdl7x","content":"<h1 id=\"操作日志的意义\"><a href=\"#操作日志的意义\" class=\"headerlink\" title=\"操作日志的意义\"></a>操作日志的意义</h1><p>操作日志顾名思义，就是记录所有对系统的操作，使得系统运行者对系统的运行了如指掌。 对于toB端或者内部管理系统而言，操作日志可以朔源，清楚找到问题所在，从而解决并且为以后避免提供经验。 对于toC端而言，操作日志可以了解用户行为，提供数据分析可以让公司与开发者开发出更加符合用户体验具有用户粘性的产品。</p>\n<h1 id=\"界面展示\"><a href=\"#界面展示\" class=\"headerlink\" title=\"界面展示\"></a>界面展示</h1><p>主要展示内容是 用户 | 模块 | 操作类型 | 何种操作 | 操作前内容 | 操作后内容 | :——| ——: | ——: | ——: | ——: | :——: | admin | 用户管理 | 修改 | 修改bugzhang权限 | 运维管理员 | 超级管理员</p>\n<h1 id=\"存储设计\"><a href=\"#存储设计\" class=\"headerlink\" title=\"存储设计\"></a>存储设计</h1><p>存储比较灵活，数据库与文件存储可以结合使用，我为了提升数据库性能，将部分敏感操作存入数据库，将次要操作存储入文件。 <strong>操作日志表设计</strong></p>\n<p>字段名</p>\n<p>说明描述</p>\n<p>数据类型</p>\n<p>id</p>\n<p>id</p>\n<p>INTEGER primaryKey autoIncrement</p>\n<p>ip</p>\n<p>ip地址</p>\n<p>VARCHAR(255)</p>\n<p>userId</p>\n<p>用户id</p>\n<p>INTEGER</p>\n<p>user</p>\n<p>用户名</p>\n<p>VARCHAR(255)</p>\n<p>type</p>\n<p>操作类型： 1. 添加 2.修改 3. 删除 4.查询</p>\n<p>INTEGER</p>\n<p>target</p>\n<p>操作目标，根据页面的menu页区分： 用户管理、公司业务管理、Doc管理、日志系统、PMU在线模型、监控系统、IDC管理、Wiki文档</p>\n<p>VARCHAR(255)</p>\n<p>before</p>\n<p>操作前内容</p>\n<p>VARCHAR(1024)</p>\n<p>after</p>\n<p>操作后内容</p>\n<p>VARCHAR(1024)</p>\n<p>content</p>\n<p>描述</p>\n<p>VARCHAR(255)</p>\n<p>remarks</p>\n<p>备注信息</p>\n<p>VARCHAR(255)</p>\n<p><strong>文件存储</strong> 前端有页面可以查文件的尾部多少行的页面，类似tail命令。</p>\n<h1 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h1><ul>\n<li><p>获取IP地址 node.js可以轻松获取ip地址。代码如下：</p>\n<p>function getClientIP(req) {</p>\n<pre><code>return req.headers[&apos;x-forwarded-for&apos;] || // 判断是否有反向代理 IP\n    req.connection.remoteAddress || // 判断 connection 的远程 IP\n    req.socket.remoteAddress || // 判断后端的 socket 的 IP\n    req.connection.socket.remoteAddress;</code></pre><p>};</p>\n</li>\n</ul>\n<ul>\n<li>添加日志</li>\n</ul>\n<p>日志具有添加的核心方法，该方法用于</p>\n<pre><code>* create ({ type, target, content, after, remarks = &apos;&apos; }) {\n  const { ctx } = this\n  try {\n    // 这里有一些属于定时任务的操作，并没有用户状态，所以需要特殊处理\n    yield ctx.model.LogOperation.create({\n      userId: ctx.user ? ctx.user.id : 0,\n      user: ctx.user ? ctx.user.name : &apos;定时任务&apos;,\n      ip: getClientIP() ? getClientIP : &apos;未知ip&apos;\n      type,\n      target,\n      after,\n      content,\n      remarks\n    })\n  } catch (err) {\n    ctx.logger.error(err)\n  }\n}</code></pre><ul>\n<li><p>展示日志 日志可以被展示在某个页面中，方法非常简单</p>\n<ul>\n<li>getList ({ limit, offset, where }) {<br>const result = yield this.ctx.model.LogOperation.findAndCountAll({<br>  raw: true,<br>  offset,<br>  limit,<br>  attributes: [‘id’, ‘userId’, ‘user’, ‘type’, ‘content’, ‘target’, ‘remarks’, [‘created_at’, ‘createdAt’]],<br>  order: [[‘created_at’, ‘DESC’]],<br>  where<br>})<br>return result<br>}</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"装饰器模式\"><a href=\"#装饰器模式\" class=\"headerlink\" title=\"装饰器模式\"></a>装饰器模式</h1><p>日志记录实际是一种装饰器模式。 装饰器模式是一种用于代替继承的技术，无需通过继承增加子类就能扩展对象的新功能，就增加功能来说，装饰器模式相比生成子类更为灵活。 关键实现是： 1、Component 类充当抽象角色，不应该具体实现。 2、修饰类引用和继承 Component 类，具体扩展类重写父类方法。 在日志系统中：日志类就是抽象角色，不具体实现；操作类被日志类修饰，从而实现了本来没有的日志记录功能。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"操作日志的意义\"><a href=\"#操作日志的意义\" class=\"headerlink\" title=\"操作日志的意义\"></a>操作日志的意义</h1><p>操作日志顾名思义，就是记录所有对系统的操作，使得系统运行者对系统的运行了如指掌。 对于toB端或者内部管理系统而言，操作日志可以朔源，清楚找到问题所在，从而解决并且为以后避免提供经验。 对于toC端而言，操作日志可以了解用户行为，提供数据分析可以让公司与开发者开发出更加符合用户体验具有用户粘性的产品。</p>\n<h1 id=\"界面展示\"><a href=\"#界面展示\" class=\"headerlink\" title=\"界面展示\"></a>界面展示</h1><p>主要展示内容是 用户 | 模块 | 操作类型 | 何种操作 | 操作前内容 | 操作后内容 | :——| ——: | ——: | ——: | ——: | :——: | admin | 用户管理 | 修改 | 修改bugzhang权限 | 运维管理员 | 超级管理员</p>\n<h1 id=\"存储设计\"><a href=\"#存储设计\" class=\"headerlink\" title=\"存储设计\"></a>存储设计</h1><p>存储比较灵活，数据库与文件存储可以结合使用，我为了提升数据库性能，将部分敏感操作存入数据库，将次要操作存储入文件。 <strong>操作日志表设计</strong></p>\n<p>字段名</p>\n<p>说明描述</p>\n<p>数据类型</p>\n<p>id</p>\n<p>id</p>\n<p>INTEGER primaryKey autoIncrement</p>\n<p>ip</p>\n<p>ip地址</p>\n<p>VARCHAR(255)</p>\n<p>userId</p>\n<p>用户id</p>\n<p>INTEGER</p>\n<p>user</p>\n<p>用户名</p>\n<p>VARCHAR(255)</p>\n<p>type</p>\n<p>操作类型： 1. 添加 2.修改 3. 删除 4.查询</p>\n<p>INTEGER</p>\n<p>target</p>\n<p>操作目标，根据页面的menu页区分： 用户管理、公司业务管理、Doc管理、日志系统、PMU在线模型、监控系统、IDC管理、Wiki文档</p>\n<p>VARCHAR(255)</p>\n<p>before</p>\n<p>操作前内容</p>\n<p>VARCHAR(1024)</p>\n<p>after</p>\n<p>操作后内容</p>\n<p>VARCHAR(1024)</p>\n<p>content</p>\n<p>描述</p>\n<p>VARCHAR(255)</p>\n<p>remarks</p>\n<p>备注信息</p>\n<p>VARCHAR(255)</p>\n<p><strong>文件存储</strong> 前端有页面可以查文件的尾部多少行的页面，类似tail命令。</p>\n<h1 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h1><ul>\n<li><p>获取IP地址 node.js可以轻松获取ip地址。代码如下：</p>\n<p>function getClientIP(req) {</p>\n<pre><code>return req.headers[&apos;x-forwarded-for&apos;] || // 判断是否有反向代理 IP\n    req.connection.remoteAddress || // 判断 connection 的远程 IP\n    req.socket.remoteAddress || // 判断后端的 socket 的 IP\n    req.connection.socket.remoteAddress;</code></pre><p>};</p>\n</li>\n</ul>\n<ul>\n<li>添加日志</li>\n</ul>\n<p>日志具有添加的核心方法，该方法用于</p>\n<pre><code>* create ({ type, target, content, after, remarks = &apos;&apos; }) {\n  const { ctx } = this\n  try {\n    // 这里有一些属于定时任务的操作，并没有用户状态，所以需要特殊处理\n    yield ctx.model.LogOperation.create({\n      userId: ctx.user ? ctx.user.id : 0,\n      user: ctx.user ? ctx.user.name : &apos;定时任务&apos;,\n      ip: getClientIP() ? getClientIP : &apos;未知ip&apos;\n      type,\n      target,\n      after,\n      content,\n      remarks\n    })\n  } catch (err) {\n    ctx.logger.error(err)\n  }\n}</code></pre><ul>\n<li><p>展示日志 日志可以被展示在某个页面中，方法非常简单</p>\n<ul>\n<li>getList ({ limit, offset, where }) {<br>const result = yield this.ctx.model.LogOperation.findAndCountAll({<br>  raw: true,<br>  offset,<br>  limit,<br>  attributes: [‘id’, ‘userId’, ‘user’, ‘type’, ‘content’, ‘target’, ‘remarks’, [‘created_at’, ‘createdAt’]],<br>  order: [[‘created_at’, ‘DESC’]],<br>  where<br>})<br>return result<br>}</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"装饰器模式\"><a href=\"#装饰器模式\" class=\"headerlink\" title=\"装饰器模式\"></a>装饰器模式</h1><p>日志记录实际是一种装饰器模式。 装饰器模式是一种用于代替继承的技术，无需通过继承增加子类就能扩展对象的新功能，就增加功能来说，装饰器模式相比生成子类更为灵活。 关键实现是： 1、Component 类充当抽象角色，不应该具体实现。 2、修饰类引用和继承 Component 类，具体扩展类重写父类方法。 在日志系统中：日志类就是抽象角色，不具体实现；操作类被日志类修饰，从而实现了本来没有的日志记录功能。</p>\n"},{"title":"操作系统——处理器调度笔记","url":"23.html","id":"23","date":"2016-01-13T11:33:44.000Z","_content":"\n![](//7xqgks.com1.z0.glb.clouddn.com/870ec29801bdebb797b218c205659bb391b19ce8e5db-euBILP.jpeg)\n\n# 一、基本概念\n\n1 作业：比程序更为广泛，不仅包含了通常的程序和数据，还包含了一份作业说明书，系统通过说明书对程序进行控制。 2 作业步：在作业运行期间，每个作业需要的顺序运行步骤。编译、连续装配、运行。 3 作业流：多个在内存存放的作业是输入作业刘；在操作系统控制，逐个进行处理的作业是处理作业流。 4 队列中的记录通常是进程的进程控制块 5 CPU的调度决策可在如下四种环境下发生 {a 当一个进程从运行状态切换到等待状态 b 当一个进程从运行状态切换到就绪状态 c 当一个进程从等待状态切换到就绪状态 d 当一个进程终止} 当调度只能发生在第一和第四种情况时，称调度方案是非抢占的，否则调度方案是可抢占的 采用非抢占调度，一旦CPU被分配给一个进程，那么该进程会一直使用CPU直到进程终止或切换到等待状态时释放CPU\n\n# 二 调度准侧\n\n1 CPU使用率：40 % 到90 % 2 吞吐量：一个单元时间内所完成进程的数量 3 周转时间：从进程提交到进程完成的时间间隔称为周转时间，周转时间是所有时间段之和，包括等待进入内存、在就绪队列中等待，在CPU上执行和I / O执行 4 等待时间：CPU调度算法并影响进程运行和执行I / O的时间量。只影响进程在就绪队列中等待所花费的时间 5 响应时间：从提交请求到产生第一响应的时间。是开始相应所需要的时间，而不是输出该响应所需要的时间 6 调度准则：对于系统，CPU使用率和吞吐量最大化，各类资源平衡利用；对于用户，周转时间、等待时间和相应时间最小，遵循优先权准则\n\n# 三 CPU调度算法\n\n1 先到先服务调度算法 FCFS 2 短作业有限调度算法 3 高优先权优先调度算法 每个进程都有一个优先权与其关联，具有最高优先权的进程会被最先分配到CPU资源，具有相同优先权的采用FCFS调度 优先权可以通过内部或外部方式来定义 优先权调度可以是抢占的或者非抢占的 优先权调度算法的一个主要问题是无穷阻塞。解决办法是老化，老化是一种技术，以逐渐增加在系统中等待很长时间的进程的优先权。 4 轮转法调度算法 专门为分时系统设计的，定义一个小时间单元，称为时间量或时间片。时间片通常为10ms到100ms。就绪队列作为循环队列处理。CPU调度程序循环就绪队列，为每个进程分配不超过一个时间片间隔的CPU。 如果上下文切换时间约为时间片的10 % ，那么约10 % 的CPU时间会浪费在上下文转换上。","source":"_posts/e6-93-8d-e4-bd-9c-e7-b3-bb-e7-bb-9f-e5-a4-84-e7-90-86-e5-99-a8-e8-b0-83-e5-ba-a6-e7-ac-94-e8-ae-b0.md","raw":"---\ntitle: 操作系统——处理器调度笔记\ntags:\n  - 操作系统\nurl: 23.html\nid: 23\ncategories:\n  - 操作系统\ndate: 2016-01-13 19:33:44\n---\n\n![](//7xqgks.com1.z0.glb.clouddn.com/870ec29801bdebb797b218c205659bb391b19ce8e5db-euBILP.jpeg)\n\n# 一、基本概念\n\n1 作业：比程序更为广泛，不仅包含了通常的程序和数据，还包含了一份作业说明书，系统通过说明书对程序进行控制。 2 作业步：在作业运行期间，每个作业需要的顺序运行步骤。编译、连续装配、运行。 3 作业流：多个在内存存放的作业是输入作业刘；在操作系统控制，逐个进行处理的作业是处理作业流。 4 队列中的记录通常是进程的进程控制块 5 CPU的调度决策可在如下四种环境下发生 {a 当一个进程从运行状态切换到等待状态 b 当一个进程从运行状态切换到就绪状态 c 当一个进程从等待状态切换到就绪状态 d 当一个进程终止} 当调度只能发生在第一和第四种情况时，称调度方案是非抢占的，否则调度方案是可抢占的 采用非抢占调度，一旦CPU被分配给一个进程，那么该进程会一直使用CPU直到进程终止或切换到等待状态时释放CPU\n\n# 二 调度准侧\n\n1 CPU使用率：40 % 到90 % 2 吞吐量：一个单元时间内所完成进程的数量 3 周转时间：从进程提交到进程完成的时间间隔称为周转时间，周转时间是所有时间段之和，包括等待进入内存、在就绪队列中等待，在CPU上执行和I / O执行 4 等待时间：CPU调度算法并影响进程运行和执行I / O的时间量。只影响进程在就绪队列中等待所花费的时间 5 响应时间：从提交请求到产生第一响应的时间。是开始相应所需要的时间，而不是输出该响应所需要的时间 6 调度准则：对于系统，CPU使用率和吞吐量最大化，各类资源平衡利用；对于用户，周转时间、等待时间和相应时间最小，遵循优先权准则\n\n# 三 CPU调度算法\n\n1 先到先服务调度算法 FCFS 2 短作业有限调度算法 3 高优先权优先调度算法 每个进程都有一个优先权与其关联，具有最高优先权的进程会被最先分配到CPU资源，具有相同优先权的采用FCFS调度 优先权可以通过内部或外部方式来定义 优先权调度可以是抢占的或者非抢占的 优先权调度算法的一个主要问题是无穷阻塞。解决办法是老化，老化是一种技术，以逐渐增加在系统中等待很长时间的进程的优先权。 4 轮转法调度算法 专门为分时系统设计的，定义一个小时间单元，称为时间量或时间片。时间片通常为10ms到100ms。就绪队列作为循环队列处理。CPU调度程序循环就绪队列，为每个进程分配不超过一个时间片间隔的CPU。 如果上下文切换时间约为时间片的10 % ，那么约10 % 的CPU时间会浪费在上下文转换上。","slug":"e6-93-8d-e4-bd-9c-e7-b3-bb-e7-bb-9f-e5-a4-84-e7-90-86-e5-99-a8-e8-b0-83-e5-ba-a6-e7-ac-94-e8-ae-b0","published":1,"updated":"2020-05-19T08:51:28.569Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts7z30022zmz81zwk0aqy","content":"<p><img src=\"//7xqgks.com1.z0.glb.clouddn.com/870ec29801bdebb797b218c205659bb391b19ce8e5db-euBILP.jpeg\" alt=\"\"></p>\n<h1 id=\"一、基本概念\"><a href=\"#一、基本概念\" class=\"headerlink\" title=\"一、基本概念\"></a>一、基本概念</h1><p>1 作业：比程序更为广泛，不仅包含了通常的程序和数据，还包含了一份作业说明书，系统通过说明书对程序进行控制。 2 作业步：在作业运行期间，每个作业需要的顺序运行步骤。编译、连续装配、运行。 3 作业流：多个在内存存放的作业是输入作业刘；在操作系统控制，逐个进行处理的作业是处理作业流。 4 队列中的记录通常是进程的进程控制块 5 CPU的调度决策可在如下四种环境下发生 {a 当一个进程从运行状态切换到等待状态 b 当一个进程从运行状态切换到就绪状态 c 当一个进程从等待状态切换到就绪状态 d 当一个进程终止} 当调度只能发生在第一和第四种情况时，称调度方案是非抢占的，否则调度方案是可抢占的 采用非抢占调度，一旦CPU被分配给一个进程，那么该进程会一直使用CPU直到进程终止或切换到等待状态时释放CPU</p>\n<h1 id=\"二-调度准侧\"><a href=\"#二-调度准侧\" class=\"headerlink\" title=\"二 调度准侧\"></a>二 调度准侧</h1><p>1 CPU使用率：40 % 到90 % 2 吞吐量：一个单元时间内所完成进程的数量 3 周转时间：从进程提交到进程完成的时间间隔称为周转时间，周转时间是所有时间段之和，包括等待进入内存、在就绪队列中等待，在CPU上执行和I / O执行 4 等待时间：CPU调度算法并影响进程运行和执行I / O的时间量。只影响进程在就绪队列中等待所花费的时间 5 响应时间：从提交请求到产生第一响应的时间。是开始相应所需要的时间，而不是输出该响应所需要的时间 6 调度准则：对于系统，CPU使用率和吞吐量最大化，各类资源平衡利用；对于用户，周转时间、等待时间和相应时间最小，遵循优先权准则</p>\n<h1 id=\"三-CPU调度算法\"><a href=\"#三-CPU调度算法\" class=\"headerlink\" title=\"三 CPU调度算法\"></a>三 CPU调度算法</h1><p>1 先到先服务调度算法 FCFS 2 短作业有限调度算法 3 高优先权优先调度算法 每个进程都有一个优先权与其关联，具有最高优先权的进程会被最先分配到CPU资源，具有相同优先权的采用FCFS调度 优先权可以通过内部或外部方式来定义 优先权调度可以是抢占的或者非抢占的 优先权调度算法的一个主要问题是无穷阻塞。解决办法是老化，老化是一种技术，以逐渐增加在系统中等待很长时间的进程的优先权。 4 轮转法调度算法 专门为分时系统设计的，定义一个小时间单元，称为时间量或时间片。时间片通常为10ms到100ms。就绪队列作为循环队列处理。CPU调度程序循环就绪队列，为每个进程分配不超过一个时间片间隔的CPU。 如果上下文切换时间约为时间片的10 % ，那么约10 % 的CPU时间会浪费在上下文转换上。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"//7xqgks.com1.z0.glb.clouddn.com/870ec29801bdebb797b218c205659bb391b19ce8e5db-euBILP.jpeg\" alt=\"\"></p>\n<h1 id=\"一、基本概念\"><a href=\"#一、基本概念\" class=\"headerlink\" title=\"一、基本概念\"></a>一、基本概念</h1><p>1 作业：比程序更为广泛，不仅包含了通常的程序和数据，还包含了一份作业说明书，系统通过说明书对程序进行控制。 2 作业步：在作业运行期间，每个作业需要的顺序运行步骤。编译、连续装配、运行。 3 作业流：多个在内存存放的作业是输入作业刘；在操作系统控制，逐个进行处理的作业是处理作业流。 4 队列中的记录通常是进程的进程控制块 5 CPU的调度决策可在如下四种环境下发生 {a 当一个进程从运行状态切换到等待状态 b 当一个进程从运行状态切换到就绪状态 c 当一个进程从等待状态切换到就绪状态 d 当一个进程终止} 当调度只能发生在第一和第四种情况时，称调度方案是非抢占的，否则调度方案是可抢占的 采用非抢占调度，一旦CPU被分配给一个进程，那么该进程会一直使用CPU直到进程终止或切换到等待状态时释放CPU</p>\n<h1 id=\"二-调度准侧\"><a href=\"#二-调度准侧\" class=\"headerlink\" title=\"二 调度准侧\"></a>二 调度准侧</h1><p>1 CPU使用率：40 % 到90 % 2 吞吐量：一个单元时间内所完成进程的数量 3 周转时间：从进程提交到进程完成的时间间隔称为周转时间，周转时间是所有时间段之和，包括等待进入内存、在就绪队列中等待，在CPU上执行和I / O执行 4 等待时间：CPU调度算法并影响进程运行和执行I / O的时间量。只影响进程在就绪队列中等待所花费的时间 5 响应时间：从提交请求到产生第一响应的时间。是开始相应所需要的时间，而不是输出该响应所需要的时间 6 调度准则：对于系统，CPU使用率和吞吐量最大化，各类资源平衡利用；对于用户，周转时间、等待时间和相应时间最小，遵循优先权准则</p>\n<h1 id=\"三-CPU调度算法\"><a href=\"#三-CPU调度算法\" class=\"headerlink\" title=\"三 CPU调度算法\"></a>三 CPU调度算法</h1><p>1 先到先服务调度算法 FCFS 2 短作业有限调度算法 3 高优先权优先调度算法 每个进程都有一个优先权与其关联，具有最高优先权的进程会被最先分配到CPU资源，具有相同优先权的采用FCFS调度 优先权可以通过内部或外部方式来定义 优先权调度可以是抢占的或者非抢占的 优先权调度算法的一个主要问题是无穷阻塞。解决办法是老化，老化是一种技术，以逐渐增加在系统中等待很长时间的进程的优先权。 4 轮转法调度算法 专门为分时系统设计的，定义一个小时间单元，称为时间量或时间片。时间片通常为10ms到100ms。就绪队列作为循环队列处理。CPU调度程序循环就绪队列，为每个进程分配不超过一个时间片间隔的CPU。 如果上下文切换时间约为时间片的10 % ，那么约10 % 的CPU时间会浪费在上下文转换上。</p>\n"},{"title":"数据库范式小结","url":"143.html","id":"143","date":"2018-02-16T10:57:30.000Z","_content":"\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0059.jpg)\n\n> 曾经学过一边数据库原理，但学的程度仅限于考个试，特别是对范式这部分的论述，课本上简直是学术的不能再学术，完全处于背概念和看不懂的坑爹状态。甚至当时对其理解都是觉得这种看上去高大上的东西没必要深究，一心只记得去学crud是sql语句去了，以至于后来接触了sqlserver,mysql,mongodb,redis等好几种数据库了，却对原理一知半解，所以这段时间打算重学一遍数据库原理。今天看了范式相关，自己用自己意思理解总结，好更适合应用一些。\n\n范式概念与目标\n-------\n\n简单的说范式就是一种设计数据库时遵循的模式，其主要为了： 1.减少冗余（主要原因） 2.消除异常（次要包括插入异常，更新异常，删除异常） 之后我们以一个老生常谈的电商数据表来分别为其实现三大范式。该数据表如下：\n\n商品编号\n\n商品名\n\n数量\n\n产地\n\n经销商编号\n\n经销商名\n\n经销商地址\n\n0001\n\n香蕉\n\n110\n\n海南\n\n003\n\nA公司\n\n南京路11号\n\n0002\n\n苹果\n\n80\n\n陕西\n\n006\n\nB公司\n\n青年路82号\n\n0003\n\n草莓\n\n90\n\n山东\n\n002\n\nC公司\n\n新华路20号\n\n0004\n\n荔枝\n\n50\n\n海南\n\n003\n\nA公司\n\n南京路11号\n\n此外需要注意的是，每个上级范式都是层层递进的：即第二范式需要先满足第一范式，第三范式需要先满足第二范式。\n\n第一范式\n----\n\n第一范式：字段是最小的的单元不可再分（所谓满足原子性） 如原始表就是一个满足第一范式的数据表：\n\n> 商品表\n\n商品编号\n\n商品名\n\n数量\n\n产地\n\n经销商编号\n\n经销商名\n\n经销商地址\n\n0001\n\n香蕉\n\n110\n\n海南\n\n003\n\nA公司\n\n南京路11号\n\n0002\n\n苹果\n\n80\n\n陕西\n\n006\n\nB公司\n\n青年路82号\n\n0003\n\n草莓\n\n90\n\n山东\n\n002\n\nC公司\n\n新华路20号\n\n0004\n\n荔枝\n\n50\n\n海南\n\n003\n\nA公司\n\n南京路11号\n\n第二范式\n----\n\n第二范式：表中的字段必须完全依赖于全部主键而非部分主键 对此要求的话，对于上述表：如果以商品编号为主键，如第一列中的0001的A公司和第四列0004的A公司冲突，不满足第二范式，故我们需要对上表进行拆分成这样两个表：\n\n> 商品表\n\n商品编号\n\n商品名\n\n数量\n\n产地\n\n经销商编号\n\n0001\n\n香蕉\n\n110\n\n海南\n\n003\n\n0002\n\n苹果\n\n80\n\n陕西\n\n006\n\n0003\n\n草莓\n\n90\n\n山东\n\n002\n\n0004\n\n荔枝\n\n50\n\n海南\n\n003\n\n> 经销商表\n\n经销商编号\n\n经销商名\n\n经销商地址\n\n003\n\nA公司\n\n南京路11号\n\n006\n\nB公司\n\n青年路82号\n\n002\n\nC公司\n\n新华路20号\n\n第三范式\n----\n\n第三范式：每列都和主键直接相关，而不是间接相关。 以下数据库表也满足了第三范式。\n\n> 商品表\n\n商品编号\n\n商品名\n\n数量\n\n产地\n\n经销商编号\n\n0001\n\n香蕉\n\n110\n\n海南\n\n003\n\n0002\n\n苹果\n\n80\n\n陕西\n\n006\n\n0003\n\n草莓\n\n90\n\n山东\n\n002\n\n0004\n\n荔枝\n\n50\n\n海南\n\n003\n\n> 经销商表\n\n经销商编号\n\n经销商名\n\n经销商地址\n\n003\n\nA公司\n\n南京路11号\n\n006\n\nB公司\n\n青年路82号\n\n002\n\nC公司\n\n新华路20号\n\nBC范式\n----\n\nBC范式：BC范式是第三范式的一种特殊情况，即每个表中只有一个候选主键。上面商品图中：商品编号和商品名同时可以作为主键；经销商表中：所有字段都不同，故都可以作为主键。所以上面数据库设计不满足BC范式。\n\n总结\n--\n\n一般情况下，应用范式越高，则数据库表越多，在数据库表多的情况下，带来的问题主要是查询时要连接多个表增加了查询复杂度。 所以需要在降低查询性能的前提下，适量的应用范式以降低冗余即可。一般情况下第二到第三范式就足够，可以按照查询复杂度与冗余度选择适合的范式设计数据库。","source":"_posts/e6-95-b0-e6-8d-ae-e5-ba-93-e8-8c-83-e5-bc-8f.md","raw":"---\ntitle: 数据库范式小结\ntags:\n  - 后端\n  - 数据库\nurl: 143.html\nid: 143\ncategories:\n  - 数据库\ndate: 2018-02-16 18:57:30\n---\n\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0059.jpg)\n\n> 曾经学过一边数据库原理，但学的程度仅限于考个试，特别是对范式这部分的论述，课本上简直是学术的不能再学术，完全处于背概念和看不懂的坑爹状态。甚至当时对其理解都是觉得这种看上去高大上的东西没必要深究，一心只记得去学crud是sql语句去了，以至于后来接触了sqlserver,mysql,mongodb,redis等好几种数据库了，却对原理一知半解，所以这段时间打算重学一遍数据库原理。今天看了范式相关，自己用自己意思理解总结，好更适合应用一些。\n\n范式概念与目标\n-------\n\n简单的说范式就是一种设计数据库时遵循的模式，其主要为了： 1.减少冗余（主要原因） 2.消除异常（次要包括插入异常，更新异常，删除异常） 之后我们以一个老生常谈的电商数据表来分别为其实现三大范式。该数据表如下：\n\n商品编号\n\n商品名\n\n数量\n\n产地\n\n经销商编号\n\n经销商名\n\n经销商地址\n\n0001\n\n香蕉\n\n110\n\n海南\n\n003\n\nA公司\n\n南京路11号\n\n0002\n\n苹果\n\n80\n\n陕西\n\n006\n\nB公司\n\n青年路82号\n\n0003\n\n草莓\n\n90\n\n山东\n\n002\n\nC公司\n\n新华路20号\n\n0004\n\n荔枝\n\n50\n\n海南\n\n003\n\nA公司\n\n南京路11号\n\n此外需要注意的是，每个上级范式都是层层递进的：即第二范式需要先满足第一范式，第三范式需要先满足第二范式。\n\n第一范式\n----\n\n第一范式：字段是最小的的单元不可再分（所谓满足原子性） 如原始表就是一个满足第一范式的数据表：\n\n> 商品表\n\n商品编号\n\n商品名\n\n数量\n\n产地\n\n经销商编号\n\n经销商名\n\n经销商地址\n\n0001\n\n香蕉\n\n110\n\n海南\n\n003\n\nA公司\n\n南京路11号\n\n0002\n\n苹果\n\n80\n\n陕西\n\n006\n\nB公司\n\n青年路82号\n\n0003\n\n草莓\n\n90\n\n山东\n\n002\n\nC公司\n\n新华路20号\n\n0004\n\n荔枝\n\n50\n\n海南\n\n003\n\nA公司\n\n南京路11号\n\n第二范式\n----\n\n第二范式：表中的字段必须完全依赖于全部主键而非部分主键 对此要求的话，对于上述表：如果以商品编号为主键，如第一列中的0001的A公司和第四列0004的A公司冲突，不满足第二范式，故我们需要对上表进行拆分成这样两个表：\n\n> 商品表\n\n商品编号\n\n商品名\n\n数量\n\n产地\n\n经销商编号\n\n0001\n\n香蕉\n\n110\n\n海南\n\n003\n\n0002\n\n苹果\n\n80\n\n陕西\n\n006\n\n0003\n\n草莓\n\n90\n\n山东\n\n002\n\n0004\n\n荔枝\n\n50\n\n海南\n\n003\n\n> 经销商表\n\n经销商编号\n\n经销商名\n\n经销商地址\n\n003\n\nA公司\n\n南京路11号\n\n006\n\nB公司\n\n青年路82号\n\n002\n\nC公司\n\n新华路20号\n\n第三范式\n----\n\n第三范式：每列都和主键直接相关，而不是间接相关。 以下数据库表也满足了第三范式。\n\n> 商品表\n\n商品编号\n\n商品名\n\n数量\n\n产地\n\n经销商编号\n\n0001\n\n香蕉\n\n110\n\n海南\n\n003\n\n0002\n\n苹果\n\n80\n\n陕西\n\n006\n\n0003\n\n草莓\n\n90\n\n山东\n\n002\n\n0004\n\n荔枝\n\n50\n\n海南\n\n003\n\n> 经销商表\n\n经销商编号\n\n经销商名\n\n经销商地址\n\n003\n\nA公司\n\n南京路11号\n\n006\n\nB公司\n\n青年路82号\n\n002\n\nC公司\n\n新华路20号\n\nBC范式\n----\n\nBC范式：BC范式是第三范式的一种特殊情况，即每个表中只有一个候选主键。上面商品图中：商品编号和商品名同时可以作为主键；经销商表中：所有字段都不同，故都可以作为主键。所以上面数据库设计不满足BC范式。\n\n总结\n--\n\n一般情况下，应用范式越高，则数据库表越多，在数据库表多的情况下，带来的问题主要是查询时要连接多个表增加了查询复杂度。 所以需要在降低查询性能的前提下，适量的应用范式以降低冗余即可。一般情况下第二到第三范式就足够，可以按照查询复杂度与冗余度选择适合的范式设计数据库。","slug":"e6-95-b0-e6-8d-ae-e5-ba-93-e8-8c-83-e5-bc-8f","published":1,"updated":"2020-05-19T08:33:55.926Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts7z60025zmz8dz60gvgq","content":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0059.jpg\" alt=\"\"></p>\n<blockquote>\n<p>曾经学过一边数据库原理，但学的程度仅限于考个试，特别是对范式这部分的论述，课本上简直是学术的不能再学术，完全处于背概念和看不懂的坑爹状态。甚至当时对其理解都是觉得这种看上去高大上的东西没必要深究，一心只记得去学crud是sql语句去了，以至于后来接触了sqlserver,mysql,mongodb,redis等好几种数据库了，却对原理一知半解，所以这段时间打算重学一遍数据库原理。今天看了范式相关，自己用自己意思理解总结，好更适合应用一些。</p>\n</blockquote>\n<h2 id=\"范式概念与目标\"><a href=\"#范式概念与目标\" class=\"headerlink\" title=\"范式概念与目标\"></a>范式概念与目标</h2><p>简单的说范式就是一种设计数据库时遵循的模式，其主要为了： 1.减少冗余（主要原因） 2.消除异常（次要包括插入异常，更新异常，删除异常） 之后我们以一个老生常谈的电商数据表来分别为其实现三大范式。该数据表如下：</p>\n<p>商品编号</p>\n<p>商品名</p>\n<p>数量</p>\n<p>产地</p>\n<p>经销商编号</p>\n<p>经销商名</p>\n<p>经销商地址</p>\n<p>0001</p>\n<p>香蕉</p>\n<p>110</p>\n<p>海南</p>\n<p>003</p>\n<p>A公司</p>\n<p>南京路11号</p>\n<p>0002</p>\n<p>苹果</p>\n<p>80</p>\n<p>陕西</p>\n<p>006</p>\n<p>B公司</p>\n<p>青年路82号</p>\n<p>0003</p>\n<p>草莓</p>\n<p>90</p>\n<p>山东</p>\n<p>002</p>\n<p>C公司</p>\n<p>新华路20号</p>\n<p>0004</p>\n<p>荔枝</p>\n<p>50</p>\n<p>海南</p>\n<p>003</p>\n<p>A公司</p>\n<p>南京路11号</p>\n<p>此外需要注意的是，每个上级范式都是层层递进的：即第二范式需要先满足第一范式，第三范式需要先满足第二范式。</p>\n<h2 id=\"第一范式\"><a href=\"#第一范式\" class=\"headerlink\" title=\"第一范式\"></a>第一范式</h2><p>第一范式：字段是最小的的单元不可再分（所谓满足原子性） 如原始表就是一个满足第一范式的数据表：</p>\n<blockquote>\n<p>商品表</p>\n</blockquote>\n<p>商品编号</p>\n<p>商品名</p>\n<p>数量</p>\n<p>产地</p>\n<p>经销商编号</p>\n<p>经销商名</p>\n<p>经销商地址</p>\n<p>0001</p>\n<p>香蕉</p>\n<p>110</p>\n<p>海南</p>\n<p>003</p>\n<p>A公司</p>\n<p>南京路11号</p>\n<p>0002</p>\n<p>苹果</p>\n<p>80</p>\n<p>陕西</p>\n<p>006</p>\n<p>B公司</p>\n<p>青年路82号</p>\n<p>0003</p>\n<p>草莓</p>\n<p>90</p>\n<p>山东</p>\n<p>002</p>\n<p>C公司</p>\n<p>新华路20号</p>\n<p>0004</p>\n<p>荔枝</p>\n<p>50</p>\n<p>海南</p>\n<p>003</p>\n<p>A公司</p>\n<p>南京路11号</p>\n<h2 id=\"第二范式\"><a href=\"#第二范式\" class=\"headerlink\" title=\"第二范式\"></a>第二范式</h2><p>第二范式：表中的字段必须完全依赖于全部主键而非部分主键 对此要求的话，对于上述表：如果以商品编号为主键，如第一列中的0001的A公司和第四列0004的A公司冲突，不满足第二范式，故我们需要对上表进行拆分成这样两个表：</p>\n<blockquote>\n<p>商品表</p>\n</blockquote>\n<p>商品编号</p>\n<p>商品名</p>\n<p>数量</p>\n<p>产地</p>\n<p>经销商编号</p>\n<p>0001</p>\n<p>香蕉</p>\n<p>110</p>\n<p>海南</p>\n<p>003</p>\n<p>0002</p>\n<p>苹果</p>\n<p>80</p>\n<p>陕西</p>\n<p>006</p>\n<p>0003</p>\n<p>草莓</p>\n<p>90</p>\n<p>山东</p>\n<p>002</p>\n<p>0004</p>\n<p>荔枝</p>\n<p>50</p>\n<p>海南</p>\n<p>003</p>\n<blockquote>\n<p>经销商表</p>\n</blockquote>\n<p>经销商编号</p>\n<p>经销商名</p>\n<p>经销商地址</p>\n<p>003</p>\n<p>A公司</p>\n<p>南京路11号</p>\n<p>006</p>\n<p>B公司</p>\n<p>青年路82号</p>\n<p>002</p>\n<p>C公司</p>\n<p>新华路20号</p>\n<h2 id=\"第三范式\"><a href=\"#第三范式\" class=\"headerlink\" title=\"第三范式\"></a>第三范式</h2><p>第三范式：每列都和主键直接相关，而不是间接相关。 以下数据库表也满足了第三范式。</p>\n<blockquote>\n<p>商品表</p>\n</blockquote>\n<p>商品编号</p>\n<p>商品名</p>\n<p>数量</p>\n<p>产地</p>\n<p>经销商编号</p>\n<p>0001</p>\n<p>香蕉</p>\n<p>110</p>\n<p>海南</p>\n<p>003</p>\n<p>0002</p>\n<p>苹果</p>\n<p>80</p>\n<p>陕西</p>\n<p>006</p>\n<p>0003</p>\n<p>草莓</p>\n<p>90</p>\n<p>山东</p>\n<p>002</p>\n<p>0004</p>\n<p>荔枝</p>\n<p>50</p>\n<p>海南</p>\n<p>003</p>\n<blockquote>\n<p>经销商表</p>\n</blockquote>\n<p>经销商编号</p>\n<p>经销商名</p>\n<p>经销商地址</p>\n<p>003</p>\n<p>A公司</p>\n<p>南京路11号</p>\n<p>006</p>\n<p>B公司</p>\n<p>青年路82号</p>\n<p>002</p>\n<p>C公司</p>\n<p>新华路20号</p>\n<h2 id=\"BC范式\"><a href=\"#BC范式\" class=\"headerlink\" title=\"BC范式\"></a>BC范式</h2><p>BC范式：BC范式是第三范式的一种特殊情况，即每个表中只有一个候选主键。上面商品图中：商品编号和商品名同时可以作为主键；经销商表中：所有字段都不同，故都可以作为主键。所以上面数据库设计不满足BC范式。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>一般情况下，应用范式越高，则数据库表越多，在数据库表多的情况下，带来的问题主要是查询时要连接多个表增加了查询复杂度。 所以需要在降低查询性能的前提下，适量的应用范式以降低冗余即可。一般情况下第二到第三范式就足够，可以按照查询复杂度与冗余度选择适合的范式设计数据库。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0059.jpg\" alt=\"\"></p>\n<blockquote>\n<p>曾经学过一边数据库原理，但学的程度仅限于考个试，特别是对范式这部分的论述，课本上简直是学术的不能再学术，完全处于背概念和看不懂的坑爹状态。甚至当时对其理解都是觉得这种看上去高大上的东西没必要深究，一心只记得去学crud是sql语句去了，以至于后来接触了sqlserver,mysql,mongodb,redis等好几种数据库了，却对原理一知半解，所以这段时间打算重学一遍数据库原理。今天看了范式相关，自己用自己意思理解总结，好更适合应用一些。</p>\n</blockquote>\n<h2 id=\"范式概念与目标\"><a href=\"#范式概念与目标\" class=\"headerlink\" title=\"范式概念与目标\"></a>范式概念与目标</h2><p>简单的说范式就是一种设计数据库时遵循的模式，其主要为了： 1.减少冗余（主要原因） 2.消除异常（次要包括插入异常，更新异常，删除异常） 之后我们以一个老生常谈的电商数据表来分别为其实现三大范式。该数据表如下：</p>\n<p>商品编号</p>\n<p>商品名</p>\n<p>数量</p>\n<p>产地</p>\n<p>经销商编号</p>\n<p>经销商名</p>\n<p>经销商地址</p>\n<p>0001</p>\n<p>香蕉</p>\n<p>110</p>\n<p>海南</p>\n<p>003</p>\n<p>A公司</p>\n<p>南京路11号</p>\n<p>0002</p>\n<p>苹果</p>\n<p>80</p>\n<p>陕西</p>\n<p>006</p>\n<p>B公司</p>\n<p>青年路82号</p>\n<p>0003</p>\n<p>草莓</p>\n<p>90</p>\n<p>山东</p>\n<p>002</p>\n<p>C公司</p>\n<p>新华路20号</p>\n<p>0004</p>\n<p>荔枝</p>\n<p>50</p>\n<p>海南</p>\n<p>003</p>\n<p>A公司</p>\n<p>南京路11号</p>\n<p>此外需要注意的是，每个上级范式都是层层递进的：即第二范式需要先满足第一范式，第三范式需要先满足第二范式。</p>\n<h2 id=\"第一范式\"><a href=\"#第一范式\" class=\"headerlink\" title=\"第一范式\"></a>第一范式</h2><p>第一范式：字段是最小的的单元不可再分（所谓满足原子性） 如原始表就是一个满足第一范式的数据表：</p>\n<blockquote>\n<p>商品表</p>\n</blockquote>\n<p>商品编号</p>\n<p>商品名</p>\n<p>数量</p>\n<p>产地</p>\n<p>经销商编号</p>\n<p>经销商名</p>\n<p>经销商地址</p>\n<p>0001</p>\n<p>香蕉</p>\n<p>110</p>\n<p>海南</p>\n<p>003</p>\n<p>A公司</p>\n<p>南京路11号</p>\n<p>0002</p>\n<p>苹果</p>\n<p>80</p>\n<p>陕西</p>\n<p>006</p>\n<p>B公司</p>\n<p>青年路82号</p>\n<p>0003</p>\n<p>草莓</p>\n<p>90</p>\n<p>山东</p>\n<p>002</p>\n<p>C公司</p>\n<p>新华路20号</p>\n<p>0004</p>\n<p>荔枝</p>\n<p>50</p>\n<p>海南</p>\n<p>003</p>\n<p>A公司</p>\n<p>南京路11号</p>\n<h2 id=\"第二范式\"><a href=\"#第二范式\" class=\"headerlink\" title=\"第二范式\"></a>第二范式</h2><p>第二范式：表中的字段必须完全依赖于全部主键而非部分主键 对此要求的话，对于上述表：如果以商品编号为主键，如第一列中的0001的A公司和第四列0004的A公司冲突，不满足第二范式，故我们需要对上表进行拆分成这样两个表：</p>\n<blockquote>\n<p>商品表</p>\n</blockquote>\n<p>商品编号</p>\n<p>商品名</p>\n<p>数量</p>\n<p>产地</p>\n<p>经销商编号</p>\n<p>0001</p>\n<p>香蕉</p>\n<p>110</p>\n<p>海南</p>\n<p>003</p>\n<p>0002</p>\n<p>苹果</p>\n<p>80</p>\n<p>陕西</p>\n<p>006</p>\n<p>0003</p>\n<p>草莓</p>\n<p>90</p>\n<p>山东</p>\n<p>002</p>\n<p>0004</p>\n<p>荔枝</p>\n<p>50</p>\n<p>海南</p>\n<p>003</p>\n<blockquote>\n<p>经销商表</p>\n</blockquote>\n<p>经销商编号</p>\n<p>经销商名</p>\n<p>经销商地址</p>\n<p>003</p>\n<p>A公司</p>\n<p>南京路11号</p>\n<p>006</p>\n<p>B公司</p>\n<p>青年路82号</p>\n<p>002</p>\n<p>C公司</p>\n<p>新华路20号</p>\n<h2 id=\"第三范式\"><a href=\"#第三范式\" class=\"headerlink\" title=\"第三范式\"></a>第三范式</h2><p>第三范式：每列都和主键直接相关，而不是间接相关。 以下数据库表也满足了第三范式。</p>\n<blockquote>\n<p>商品表</p>\n</blockquote>\n<p>商品编号</p>\n<p>商品名</p>\n<p>数量</p>\n<p>产地</p>\n<p>经销商编号</p>\n<p>0001</p>\n<p>香蕉</p>\n<p>110</p>\n<p>海南</p>\n<p>003</p>\n<p>0002</p>\n<p>苹果</p>\n<p>80</p>\n<p>陕西</p>\n<p>006</p>\n<p>0003</p>\n<p>草莓</p>\n<p>90</p>\n<p>山东</p>\n<p>002</p>\n<p>0004</p>\n<p>荔枝</p>\n<p>50</p>\n<p>海南</p>\n<p>003</p>\n<blockquote>\n<p>经销商表</p>\n</blockquote>\n<p>经销商编号</p>\n<p>经销商名</p>\n<p>经销商地址</p>\n<p>003</p>\n<p>A公司</p>\n<p>南京路11号</p>\n<p>006</p>\n<p>B公司</p>\n<p>青年路82号</p>\n<p>002</p>\n<p>C公司</p>\n<p>新华路20号</p>\n<h2 id=\"BC范式\"><a href=\"#BC范式\" class=\"headerlink\" title=\"BC范式\"></a>BC范式</h2><p>BC范式：BC范式是第三范式的一种特殊情况，即每个表中只有一个候选主键。上面商品图中：商品编号和商品名同时可以作为主键；经销商表中：所有字段都不同，故都可以作为主键。所以上面数据库设计不满足BC范式。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>一般情况下，应用范式越高，则数据库表越多，在数据库表多的情况下，带来的问题主要是查询时要连接多个表增加了查询复杂度。 所以需要在降低查询性能的前提下，适量的应用范式以降低冗余即可。一般情况下第二到第三范式就足够，可以按照查询复杂度与冗余度选择适合的范式设计数据库。</p>\n"},{"title":"数据挖掘——内容过滤","url":"96.html","id":"96","date":"2018-01-23T11:10:50.000Z","_content":"\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0049.jpg) 协同过滤是基于社交网络的推荐系统，内容过滤则是依靠物品属性进行推荐的系统。即根据所有用户对物品或者信息的评价，发现物品和物品之间的相似度，然后根据用户的历史偏好信息将类似的物品推荐给该用户。\n\n归一化\n---\n\n## 概念\n\nname\n\nage\n\nsalary\n\na\n\n22\n\n14000\n\nb\n\n28\n\n20000\n\nc\n\n25\n\n16000\n\n在实际的情况中，我们通常会接受到的是上图类似的数据，有很大的取值范围，对此类数据，一般采用的方案是归一化，即将特征数据转换到0到1之间。 比较常用的归一化公式是： 标准分数=（每个值-均值）/标准差\n\n## 标准分数的问题\n\n采用标准分数容易受到极值影响，故在某些时候，可以用中位数代替均值得到绝对标准分数。\n\n## 应该采用归一化的情况\n\n*   所用的数据挖掘方法基于特征的值计算两个对象的距离\n*   不同特征的尺度不同","source":"_posts/e6-95-b0-e6-8d-ae-e6-8c-96-e6-8e-98-e5-86-85-e5-ae-b9-e8-bf-87-e6-bb-a4.md","raw":"---\ntitle: 数据挖掘——内容过滤\ntags:\n  - 推荐系统\n  - 数据挖掘\nurl: 96.html\nid: 96\ncategories:\n  - 数据挖掘\ndate: 2018-01-23 19:10:50\n---\n\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0049.jpg) 协同过滤是基于社交网络的推荐系统，内容过滤则是依靠物品属性进行推荐的系统。即根据所有用户对物品或者信息的评价，发现物品和物品之间的相似度，然后根据用户的历史偏好信息将类似的物品推荐给该用户。\n\n归一化\n---\n\n## 概念\n\nname\n\nage\n\nsalary\n\na\n\n22\n\n14000\n\nb\n\n28\n\n20000\n\nc\n\n25\n\n16000\n\n在实际的情况中，我们通常会接受到的是上图类似的数据，有很大的取值范围，对此类数据，一般采用的方案是归一化，即将特征数据转换到0到1之间。 比较常用的归一化公式是： 标准分数=（每个值-均值）/标准差\n\n## 标准分数的问题\n\n采用标准分数容易受到极值影响，故在某些时候，可以用中位数代替均值得到绝对标准分数。\n\n## 应该采用归一化的情况\n\n*   所用的数据挖掘方法基于特征的值计算两个对象的距离\n*   不同特征的尺度不同","slug":"e6-95-b0-e6-8d-ae-e6-8c-96-e6-8e-98-e5-86-85-e5-ae-b9-e8-bf-87-e6-bb-a4","published":1,"updated":"2020-05-19T08:50:14.391Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts7z8002azmz8f06naqw4","content":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0049.jpg\" alt=\"\"> 协同过滤是基于社交网络的推荐系统，内容过滤则是依靠物品属性进行推荐的系统。即根据所有用户对物品或者信息的评价，发现物品和物品之间的相似度，然后根据用户的历史偏好信息将类似的物品推荐给该用户。</p>\n<h2 id=\"归一化\"><a href=\"#归一化\" class=\"headerlink\" title=\"归一化\"></a>归一化</h2><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>name</p>\n<p>age</p>\n<p>salary</p>\n<p>a</p>\n<p>22</p>\n<p>14000</p>\n<p>b</p>\n<p>28</p>\n<p>20000</p>\n<p>c</p>\n<p>25</p>\n<p>16000</p>\n<p>在实际的情况中，我们通常会接受到的是上图类似的数据，有很大的取值范围，对此类数据，一般采用的方案是归一化，即将特征数据转换到0到1之间。 比较常用的归一化公式是： 标准分数=（每个值-均值）/标准差</p>\n<h2 id=\"标准分数的问题\"><a href=\"#标准分数的问题\" class=\"headerlink\" title=\"标准分数的问题\"></a>标准分数的问题</h2><p>采用标准分数容易受到极值影响，故在某些时候，可以用中位数代替均值得到绝对标准分数。</p>\n<h2 id=\"应该采用归一化的情况\"><a href=\"#应该采用归一化的情况\" class=\"headerlink\" title=\"应该采用归一化的情况\"></a>应该采用归一化的情况</h2><ul>\n<li>所用的数据挖掘方法基于特征的值计算两个对象的距离</li>\n<li>不同特征的尺度不同</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0049.jpg\" alt=\"\"> 协同过滤是基于社交网络的推荐系统，内容过滤则是依靠物品属性进行推荐的系统。即根据所有用户对物品或者信息的评价，发现物品和物品之间的相似度，然后根据用户的历史偏好信息将类似的物品推荐给该用户。</p>\n<h2 id=\"归一化\"><a href=\"#归一化\" class=\"headerlink\" title=\"归一化\"></a>归一化</h2><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>name</p>\n<p>age</p>\n<p>salary</p>\n<p>a</p>\n<p>22</p>\n<p>14000</p>\n<p>b</p>\n<p>28</p>\n<p>20000</p>\n<p>c</p>\n<p>25</p>\n<p>16000</p>\n<p>在实际的情况中，我们通常会接受到的是上图类似的数据，有很大的取值范围，对此类数据，一般采用的方案是归一化，即将特征数据转换到0到1之间。 比较常用的归一化公式是： 标准分数=（每个值-均值）/标准差</p>\n<h2 id=\"标准分数的问题\"><a href=\"#标准分数的问题\" class=\"headerlink\" title=\"标准分数的问题\"></a>标准分数的问题</h2><p>采用标准分数容易受到极值影响，故在某些时候，可以用中位数代替均值得到绝对标准分数。</p>\n<h2 id=\"应该采用归一化的情况\"><a href=\"#应该采用归一化的情况\" class=\"headerlink\" title=\"应该采用归一化的情况\"></a>应该采用归一化的情况</h2><ul>\n<li>所用的数据挖掘方法基于特征的值计算两个对象的距离</li>\n<li>不同特征的尺度不同</li>\n</ul>\n"},{"title":"时序数据库Influxdb入门","url":"313.html","id":"313","comments":0,"date":"2019-09-12T12:06:37.000Z","_content":"\n简介\n==\n\nInfluxDB是一个时间序列数据库，旨在处理高写入和查询负载。它是TICK堆栈的组成部分。InfluxDB旨在用作涉及大量带时间戳数据的任何用例的后备存储，包括DevOps监控，应用程序指标，物联网传感器数据和实时数据分析。\n\n特点\n==\n\nInfluxDB具备以下特点：\n\n*   专为时间序列数据编写的自定义高性能数据存储。TSM引擎允许高摄取速度和数据压缩\n*   完全写在Go。它编译成单个二进制文件，没有外部依赖项。\n*   简单，高性能的写入和查询HTTP API。\n*   插件支持其他数据提取协议，如Graphite，collectd和OpenTSDB。\n*   为类似SQL的查询语言量身定制，可轻松查询聚合数据。\n*   标签允许对系列进行索引以实现快速有效的查询。\n*   保留策略有效地自动使过时数据过期。\n*   连续查询自动计算聚合数据，以提高频繁查询的效率。\n\n安装\n==\n\n在mac上的安装使用brew\n\n```sh\n    brew update\n    brew install influxdb\n    ln -sfv /usr/local/opt/influxdb/*.plist ~/Library/LaunchAgents\n\n    # 配置文件在/etc/influxdb/influxdb.conf ，如果没有就将/usr/local/etc/influxdb.conf 拷一个过去\n    配置缓存：cache-max-memory-size\n\n    #启动服务\n    launchctl load ~/Library/LaunchAgents/homebrew.mxcl.influxdb.plist\n\n    #停止服务\n    launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.influxdb.plist\n\n    #前台启动\n    influxd -config /usr/local/etc/influxdb.conf\n\n    #查看influxdb运行配置\n    influxd config\n\n    #启动交互式客户端\n    influx -precision rfc3339\n```\n\n\n基本概念\n====\n\n\n**time**是时间(time)，具体格式必须是一个时间戳或者RFC3339时间。 **butterflies**、**honeybees**是字段（field），包括字段键（表头）和字段值（表格内容）。 、**location**、**scientist**是标签（tag），同样包括了标签建（表头）和标签值（表格内容）。注意标签和字段第一眼看上去非常相似，其区别是标签是一个类似枚举的结构，只有几种可选的标签值。这与字段不同，标记是索引的。这意味着标签上的查询更快，并且该标签非常适合存储常用查询元数据。 在influxDB中，有个叫做series的概念，这个series是数据可视化中的数据，是通过tags排列组合出来的。一般在echarts等库中也可以看到相似的概念。\n\n基本操作\n====\n\n数据库操作\n-----\n```sql\n    /*创建数据库*/\n    CREATE DATABASE mydb\n\n    /*使用数据库*/\n    use DATABASE mydb\n\n    /*删除数据库*/\n    drop DATABASE mydb\n```\n\n数据measurement的操作\n----------------\n\n```sql\n    /*插入数据：插入了一条数据*/\n    insert testTable<表名字>, butterflies=3 ,honeybees=28 , location=1 ,scientist=perpetua<内容>\n    /*查询数据：查询最近的3条数据*/\n    SELECT * FROM weather ORDER BY time DESC LIMIT 3\n```\n\nHTTP接口\n------\n\nInfluxDB直接提供了一套HTTP接口，部分操作如下：\n\n```sql\n    # 插入数据：插入了一条数据\n    curl -i -XPOST 'http://localhost:8086/write?db=myDB' --data-binary 'testTable, butterflies=3 ,honeybees=28 , location=1 ,scientist=perpetua'\n\n    # 查询数据：查询最近的3条数据\n    curl -G 'http://localhost:8086/query?pretty=true' --data-urlencode \"db=myDB\" --data-urlencode \"q=SELECT * FROM testTable ORDER BY time DESC LIMIT 3\"\n```\n\nnode.js中的实用\n-----------\n\n目前已经有第三方的npm包，所以在node.js中也非常方便\n\n```js\n    /**@type InfluxDB*/\n    var influx = require('influx')\n    var async = require(\"async\")\n    var ut = require(\"./../../util/util.js\")\n    var dbName = \"mydb\"\n    var tableName = \"testTable\"\n    var client = influx({\n        host : '0.0.0.0',\n        port : 8086, // optional, default 8086\n        protocol : 'http', // optional, default 'http'\n        username : '',\n        password : '',\n        database : mydb\n    })\n    var altitudes = [1000, 5000]\n    var areas = [\"北\", \"上\", \"广\", \"深\"]\n    async.waterfall([\n            function(cb){ // 创建数据库\n                client.createDatabase(dbName, function(err,result){\n                    ut.log(\"createDatabase\", result)\n                    cb(err, null)\n                } )\n            },\n            function(result, cb){ // 获取数据库名字\n                client.getDatabaseNames( function(err, result){\n                    ut.log(\"getDatabaseNames\", result)\n                    cb(err, null)\n                } )\n            },\n            function(result, cb){ // 写入数据\n                var points = [\n                    [\n                        {\n                            temperature: ut.RandByRange(0, 100), humidity : ut.RandByRange(-15, 30)\n                        },\n                        {\n                            altitude: altitudes[ut.RandByRange(0, altitudes.length)], area : areas[0]\n                        },\n                    ],\n                    [\n                        {\n                            temperature: ut.RandByRange(0, 100), humidity : ut.RandByRange(-15, 30)\n                        },\n                        {\n                            altitude: altitudes[ut.RandByRange(0, altitudes.length)], area : areas[1]\n                        },\n                    ],\n                ]\n                client.writePoints(tableName, points, function(err, result){\n                    ut.log(\"writePoint\", result)\n                    cb(err, null)\n                } )\n            },\n            function(result, cb){ // 查询数据\n                client.query( 'SELECT * FROM weather ORDER BY time DESC LIMIT 3', function(err,result){\n                    ut.log(\"query\", result)\n                    cb(err, null)\n                } )\n            },\n            function(result, cb){\n                client.getMeasurements( function(err,result){\n                    ut.log(\"getMeasurements\", JSON.stringify(result))\n                    cb(err, null)\n                })\n            }\n        ]\n        , function(err, result){\n            ut.log(\"finish...\", err, result)\n        }\n    )\n```","source":"_posts/e6-97-b6-e5-ba-8f-e6-95-b0-e6-8d-ae-e5-ba-93influxdb-e5-85-a5-e9-97-a8.md","raw":"---\ntitle: 时序数据库Influxdb入门\nurl: 313.html\nid: 313\ncomments: false\ncategories:\n  - node.js\n  - 后端\n  - 数据库\ndate: 2019-09-12 20:06:37\ntags:\n---\n\n简介\n==\n\nInfluxDB是一个时间序列数据库，旨在处理高写入和查询负载。它是TICK堆栈的组成部分。InfluxDB旨在用作涉及大量带时间戳数据的任何用例的后备存储，包括DevOps监控，应用程序指标，物联网传感器数据和实时数据分析。\n\n特点\n==\n\nInfluxDB具备以下特点：\n\n*   专为时间序列数据编写的自定义高性能数据存储。TSM引擎允许高摄取速度和数据压缩\n*   完全写在Go。它编译成单个二进制文件，没有外部依赖项。\n*   简单，高性能的写入和查询HTTP API。\n*   插件支持其他数据提取协议，如Graphite，collectd和OpenTSDB。\n*   为类似SQL的查询语言量身定制，可轻松查询聚合数据。\n*   标签允许对系列进行索引以实现快速有效的查询。\n*   保留策略有效地自动使过时数据过期。\n*   连续查询自动计算聚合数据，以提高频繁查询的效率。\n\n安装\n==\n\n在mac上的安装使用brew\n\n```sh\n    brew update\n    brew install influxdb\n    ln -sfv /usr/local/opt/influxdb/*.plist ~/Library/LaunchAgents\n\n    # 配置文件在/etc/influxdb/influxdb.conf ，如果没有就将/usr/local/etc/influxdb.conf 拷一个过去\n    配置缓存：cache-max-memory-size\n\n    #启动服务\n    launchctl load ~/Library/LaunchAgents/homebrew.mxcl.influxdb.plist\n\n    #停止服务\n    launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.influxdb.plist\n\n    #前台启动\n    influxd -config /usr/local/etc/influxdb.conf\n\n    #查看influxdb运行配置\n    influxd config\n\n    #启动交互式客户端\n    influx -precision rfc3339\n```\n\n\n基本概念\n====\n\n\n**time**是时间(time)，具体格式必须是一个时间戳或者RFC3339时间。 **butterflies**、**honeybees**是字段（field），包括字段键（表头）和字段值（表格内容）。 、**location**、**scientist**是标签（tag），同样包括了标签建（表头）和标签值（表格内容）。注意标签和字段第一眼看上去非常相似，其区别是标签是一个类似枚举的结构，只有几种可选的标签值。这与字段不同，标记是索引的。这意味着标签上的查询更快，并且该标签非常适合存储常用查询元数据。 在influxDB中，有个叫做series的概念，这个series是数据可视化中的数据，是通过tags排列组合出来的。一般在echarts等库中也可以看到相似的概念。\n\n基本操作\n====\n\n数据库操作\n-----\n```sql\n    /*创建数据库*/\n    CREATE DATABASE mydb\n\n    /*使用数据库*/\n    use DATABASE mydb\n\n    /*删除数据库*/\n    drop DATABASE mydb\n```\n\n数据measurement的操作\n----------------\n\n```sql\n    /*插入数据：插入了一条数据*/\n    insert testTable<表名字>, butterflies=3 ,honeybees=28 , location=1 ,scientist=perpetua<内容>\n    /*查询数据：查询最近的3条数据*/\n    SELECT * FROM weather ORDER BY time DESC LIMIT 3\n```\n\nHTTP接口\n------\n\nInfluxDB直接提供了一套HTTP接口，部分操作如下：\n\n```sql\n    # 插入数据：插入了一条数据\n    curl -i -XPOST 'http://localhost:8086/write?db=myDB' --data-binary 'testTable, butterflies=3 ,honeybees=28 , location=1 ,scientist=perpetua'\n\n    # 查询数据：查询最近的3条数据\n    curl -G 'http://localhost:8086/query?pretty=true' --data-urlencode \"db=myDB\" --data-urlencode \"q=SELECT * FROM testTable ORDER BY time DESC LIMIT 3\"\n```\n\nnode.js中的实用\n-----------\n\n目前已经有第三方的npm包，所以在node.js中也非常方便\n\n```js\n    /**@type InfluxDB*/\n    var influx = require('influx')\n    var async = require(\"async\")\n    var ut = require(\"./../../util/util.js\")\n    var dbName = \"mydb\"\n    var tableName = \"testTable\"\n    var client = influx({\n        host : '0.0.0.0',\n        port : 8086, // optional, default 8086\n        protocol : 'http', // optional, default 'http'\n        username : '',\n        password : '',\n        database : mydb\n    })\n    var altitudes = [1000, 5000]\n    var areas = [\"北\", \"上\", \"广\", \"深\"]\n    async.waterfall([\n            function(cb){ // 创建数据库\n                client.createDatabase(dbName, function(err,result){\n                    ut.log(\"createDatabase\", result)\n                    cb(err, null)\n                } )\n            },\n            function(result, cb){ // 获取数据库名字\n                client.getDatabaseNames( function(err, result){\n                    ut.log(\"getDatabaseNames\", result)\n                    cb(err, null)\n                } )\n            },\n            function(result, cb){ // 写入数据\n                var points = [\n                    [\n                        {\n                            temperature: ut.RandByRange(0, 100), humidity : ut.RandByRange(-15, 30)\n                        },\n                        {\n                            altitude: altitudes[ut.RandByRange(0, altitudes.length)], area : areas[0]\n                        },\n                    ],\n                    [\n                        {\n                            temperature: ut.RandByRange(0, 100), humidity : ut.RandByRange(-15, 30)\n                        },\n                        {\n                            altitude: altitudes[ut.RandByRange(0, altitudes.length)], area : areas[1]\n                        },\n                    ],\n                ]\n                client.writePoints(tableName, points, function(err, result){\n                    ut.log(\"writePoint\", result)\n                    cb(err, null)\n                } )\n            },\n            function(result, cb){ // 查询数据\n                client.query( 'SELECT * FROM weather ORDER BY time DESC LIMIT 3', function(err,result){\n                    ut.log(\"query\", result)\n                    cb(err, null)\n                } )\n            },\n            function(result, cb){\n                client.getMeasurements( function(err,result){\n                    ut.log(\"getMeasurements\", JSON.stringify(result))\n                    cb(err, null)\n                })\n            }\n        ]\n        , function(err, result){\n            ut.log(\"finish...\", err, result)\n        }\n    )\n```","slug":"e6-97-b6-e5-ba-8f-e6-95-b0-e6-8d-ae-e5-ba-93influxdb-e5-85-a5-e9-97-a8","published":1,"updated":"2020-05-21T08:16:28.570Z","layout":"post","photos":[],"link":"","_id":"ckahts7z9002czmz8gsms7nlo","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>InfluxDB是一个时间序列数据库，旨在处理高写入和查询负载。它是TICK堆栈的组成部分。InfluxDB旨在用作涉及大量带时间戳数据的任何用例的后备存储，包括DevOps监控，应用程序指标，物联网传感器数据和实时数据分析。</p>\n<h1 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h1><p>InfluxDB具备以下特点：</p>\n<ul>\n<li>专为时间序列数据编写的自定义高性能数据存储。TSM引擎允许高摄取速度和数据压缩</li>\n<li>完全写在Go。它编译成单个二进制文件，没有外部依赖项。</li>\n<li>简单，高性能的写入和查询HTTP API。</li>\n<li>插件支持其他数据提取协议，如Graphite，collectd和OpenTSDB。</li>\n<li>为类似SQL的查询语言量身定制，可轻松查询聚合数据。</li>\n<li>标签允许对系列进行索引以实现快速有效的查询。</li>\n<li>保留策略有效地自动使过时数据过期。</li>\n<li>连续查询自动计算聚合数据，以提高频繁查询的效率。</li>\n</ul>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>在mac上的安装使用brew</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">brew update<br>brew install influxdb<br>ln -sfv /usr/<span class=\"hljs-built_in\">local</span>/opt/influxdb/*.plist ~/Library/LaunchAgents<br><br><span class=\"hljs-comment\"># 配置文件在/etc/influxdb/influxdb.conf ，如果没有就将/usr/local/etc/influxdb.conf 拷一个过去</span><br>配置缓存：cache-max-memory-size<br><br><span class=\"hljs-comment\">#启动服务</span><br>launchctl load ~/Library/LaunchAgents/homebrew.mxcl.influxdb.plist<br><br><span class=\"hljs-comment\">#停止服务</span><br>launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.influxdb.plist<br><br><span class=\"hljs-comment\">#前台启动</span><br>influxd -config /usr/<span class=\"hljs-built_in\">local</span>/etc/influxdb.conf<br><br><span class=\"hljs-comment\">#查看influxdb运行配置</span><br>influxd config<br><br><span class=\"hljs-comment\">#启动交互式客户端</span><br>influx -precision rfc3339<br></code></pre></td></tr></table></figure>\n\n\n<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><p><strong>time</strong>是时间(time)，具体格式必须是一个时间戳或者RFC3339时间。 <strong>butterflies</strong>、<strong>honeybees</strong>是字段（field），包括字段键（表头）和字段值（表格内容）。 、<strong>location</strong>、<strong>scientist</strong>是标签（tag），同样包括了标签建（表头）和标签值（表格内容）。注意标签和字段第一眼看上去非常相似，其区别是标签是一个类似枚举的结构，只有几种可选的标签值。这与字段不同，标记是索引的。这意味着标签上的查询更快，并且该标签非常适合存储常用查询元数据。 在influxDB中，有个叫做series的概念，这个series是数据可视化中的数据，是通过tags排列组合出来的。一般在echarts等库中也可以看到相似的概念。</p>\n<h1 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h1><h2 id=\"数据库操作\"><a href=\"#数据库操作\" class=\"headerlink\" title=\"数据库操作\"></a>数据库操作</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-comment\">/*创建数据库*/</span><br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">DATABASE</span> mydb<br><br><span class=\"hljs-comment\">/*使用数据库*/</span><br><span class=\"hljs-keyword\">use</span> <span class=\"hljs-keyword\">DATABASE</span> mydb<br><br><span class=\"hljs-comment\">/*删除数据库*/</span><br><span class=\"hljs-keyword\">drop</span> <span class=\"hljs-keyword\">DATABASE</span> mydb<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"数据measurement的操作\"><a href=\"#数据measurement的操作\" class=\"headerlink\" title=\"数据measurement的操作\"></a>数据measurement的操作</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-comment\">/*插入数据：插入了一条数据*/</span><br><span class=\"hljs-keyword\">insert</span> testTable&lt;表名字&gt;, butterflies=<span class=\"hljs-number\">3</span> ,honeybees=<span class=\"hljs-number\">28</span> , location=<span class=\"hljs-number\">1</span> ,scientist=perpetua&lt;内容&gt;<br><span class=\"hljs-comment\">/*查询数据：查询最近的3条数据*/</span><br><span class=\"hljs-keyword\">SELECT</span> * <span class=\"hljs-keyword\">FROM</span> weather <span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-built_in\">time</span> <span class=\"hljs-keyword\">DESC</span> <span class=\"hljs-keyword\">LIMIT</span> <span class=\"hljs-number\">3</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"HTTP接口\"><a href=\"#HTTP接口\" class=\"headerlink\" title=\"HTTP接口\"></a>HTTP接口</h2><p>InfluxDB直接提供了一套HTTP接口，部分操作如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-comment\"># 插入数据：插入了一条数据</span><br>curl -i -XPOST 'http://localhost:8086/write?db=myDB' <span class=\"hljs-comment\">--data-binary 'testTable, butterflies=3 ,honeybees=28 , location=1 ,scientist=perpetua'</span><br><br><span class=\"hljs-comment\"># 查询数据：查询最近的3条数据</span><br>curl -G 'http://localhost:8086/query?pretty=true' <span class=\"hljs-comment\">--data-urlencode \"db=myDB\" --data-urlencode \"q=SELECT * FROM testTable ORDER BY time DESC LIMIT 3\"</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"node-js中的实用\"><a href=\"#node-js中的实用\" class=\"headerlink\" title=\"node.js中的实用\"></a>node.js中的实用</h2><p>目前已经有第三方的npm包，所以在node.js中也非常方便</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">/**<span class=\"hljs-doctag\">@type </span>InfluxDB*/</span><br><span class=\"hljs-keyword\">var</span> influx = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'influx'</span>)<br><span class=\"hljs-keyword\">var</span> <span class=\"hljs-keyword\">async</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"async\"</span>)<br><span class=\"hljs-keyword\">var</span> ut = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"./../../util/util.js\"</span>)<br><span class=\"hljs-keyword\">var</span> dbName = <span class=\"hljs-string\">\"mydb\"</span><br><span class=\"hljs-keyword\">var</span> tableName = <span class=\"hljs-string\">\"testTable\"</span><br><span class=\"hljs-keyword\">var</span> client = influx(&#123;<br>    host : <span class=\"hljs-string\">'0.0.0.0'</span>,<br>    port : <span class=\"hljs-number\">8086</span>, <span class=\"hljs-comment\">// optional, default 8086</span><br>    protocol : <span class=\"hljs-string\">'http'</span>, <span class=\"hljs-comment\">// optional, default 'http'</span><br>    username : <span class=\"hljs-string\">''</span>,<br>    password : <span class=\"hljs-string\">''</span>,<br>    database : mydb<br>&#125;)<br><span class=\"hljs-keyword\">var</span> altitudes = [<span class=\"hljs-number\">1000</span>, <span class=\"hljs-number\">5000</span>]<br><span class=\"hljs-keyword\">var</span> areas = [<span class=\"hljs-string\">\"北\"</span>, <span class=\"hljs-string\">\"上\"</span>, <span class=\"hljs-string\">\"广\"</span>, <span class=\"hljs-string\">\"深\"</span>]<br><span class=\"hljs-keyword\">async</span>.waterfall([<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">cb</span>)</span>&#123; <span class=\"hljs-comment\">// 创建数据库</span><br>            client.createDatabase(dbName, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err,result</span>)</span>&#123;<br>                ut.log(<span class=\"hljs-string\">\"createDatabase\"</span>, result)<br>                cb(err, <span class=\"hljs-literal\">null</span>)<br>            &#125; )<br>        &#125;,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">result, cb</span>)</span>&#123; <span class=\"hljs-comment\">// 获取数据库名字</span><br>            client.getDatabaseNames( <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, result</span>)</span>&#123;<br>                ut.log(<span class=\"hljs-string\">\"getDatabaseNames\"</span>, result)<br>                cb(err, <span class=\"hljs-literal\">null</span>)<br>            &#125; )<br>        &#125;,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">result, cb</span>)</span>&#123; <span class=\"hljs-comment\">// 写入数据</span><br>            <span class=\"hljs-keyword\">var</span> points = [<br>                [<br>                    &#123;<br>                        temperature: ut.RandByRange(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>), <span class=\"hljs-attr\">humidity</span> : ut.RandByRange(<span class=\"hljs-number\">-15</span>, <span class=\"hljs-number\">30</span>)<br>                    &#125;,<br>                    &#123;<br>                        altitude: altitudes[ut.RandByRange(<span class=\"hljs-number\">0</span>, altitudes.length)], <span class=\"hljs-attr\">area</span> : areas[<span class=\"hljs-number\">0</span>]<br>                    &#125;,<br>                ],<br>                [<br>                    &#123;<br>                        temperature: ut.RandByRange(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>), <span class=\"hljs-attr\">humidity</span> : ut.RandByRange(<span class=\"hljs-number\">-15</span>, <span class=\"hljs-number\">30</span>)<br>                    &#125;,<br>                    &#123;<br>                        altitude: altitudes[ut.RandByRange(<span class=\"hljs-number\">0</span>, altitudes.length)], <span class=\"hljs-attr\">area</span> : areas[<span class=\"hljs-number\">1</span>]<br>                    &#125;,<br>                ],<br>            ]<br>            client.writePoints(tableName, points, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, result</span>)</span>&#123;<br>                ut.log(<span class=\"hljs-string\">\"writePoint\"</span>, result)<br>                cb(err, <span class=\"hljs-literal\">null</span>)<br>            &#125; )<br>        &#125;,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">result, cb</span>)</span>&#123; <span class=\"hljs-comment\">// 查询数据</span><br>            client.query( <span class=\"hljs-string\">'SELECT * FROM weather ORDER BY time DESC LIMIT 3'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err,result</span>)</span>&#123;<br>                ut.log(<span class=\"hljs-string\">\"query\"</span>, result)<br>                cb(err, <span class=\"hljs-literal\">null</span>)<br>            &#125; )<br>        &#125;,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">result, cb</span>)</span>&#123;<br>            client.getMeasurements( <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err,result</span>)</span>&#123;<br>                ut.log(<span class=\"hljs-string\">\"getMeasurements\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(result))<br>                cb(err, <span class=\"hljs-literal\">null</span>)<br>            &#125;)<br>        &#125;<br>    ]<br>    , <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, result</span>)</span>&#123;<br>        ut.log(<span class=\"hljs-string\">\"finish...\"</span>, err, result)<br>    &#125;<br>)<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>InfluxDB是一个时间序列数据库，旨在处理高写入和查询负载。它是TICK堆栈的组成部分。InfluxDB旨在用作涉及大量带时间戳数据的任何用例的后备存储，包括DevOps监控，应用程序指标，物联网传感器数据和实时数据分析。</p>\n<h1 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h1><p>InfluxDB具备以下特点：</p>\n<ul>\n<li>专为时间序列数据编写的自定义高性能数据存储。TSM引擎允许高摄取速度和数据压缩</li>\n<li>完全写在Go。它编译成单个二进制文件，没有外部依赖项。</li>\n<li>简单，高性能的写入和查询HTTP API。</li>\n<li>插件支持其他数据提取协议，如Graphite，collectd和OpenTSDB。</li>\n<li>为类似SQL的查询语言量身定制，可轻松查询聚合数据。</li>\n<li>标签允许对系列进行索引以实现快速有效的查询。</li>\n<li>保留策略有效地自动使过时数据过期。</li>\n<li>连续查询自动计算聚合数据，以提高频繁查询的效率。</li>\n</ul>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>在mac上的安装使用brew</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">brew update<br>brew install influxdb<br>ln -sfv /usr/<span class=\"hljs-built_in\">local</span>/opt/influxdb/*.plist ~/Library/LaunchAgents<br><br><span class=\"hljs-comment\"># 配置文件在/etc/influxdb/influxdb.conf ，如果没有就将/usr/local/etc/influxdb.conf 拷一个过去</span><br>配置缓存：cache-max-memory-size<br><br><span class=\"hljs-comment\">#启动服务</span><br>launchctl load ~/Library/LaunchAgents/homebrew.mxcl.influxdb.plist<br><br><span class=\"hljs-comment\">#停止服务</span><br>launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.influxdb.plist<br><br><span class=\"hljs-comment\">#前台启动</span><br>influxd -config /usr/<span class=\"hljs-built_in\">local</span>/etc/influxdb.conf<br><br><span class=\"hljs-comment\">#查看influxdb运行配置</span><br>influxd config<br><br><span class=\"hljs-comment\">#启动交互式客户端</span><br>influx -precision rfc3339<br></code></pre></td></tr></table></figure>\n\n\n<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><p><strong>time</strong>是时间(time)，具体格式必须是一个时间戳或者RFC3339时间。 <strong>butterflies</strong>、<strong>honeybees</strong>是字段（field），包括字段键（表头）和字段值（表格内容）。 、<strong>location</strong>、<strong>scientist</strong>是标签（tag），同样包括了标签建（表头）和标签值（表格内容）。注意标签和字段第一眼看上去非常相似，其区别是标签是一个类似枚举的结构，只有几种可选的标签值。这与字段不同，标记是索引的。这意味着标签上的查询更快，并且该标签非常适合存储常用查询元数据。 在influxDB中，有个叫做series的概念，这个series是数据可视化中的数据，是通过tags排列组合出来的。一般在echarts等库中也可以看到相似的概念。</p>\n<h1 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h1><h2 id=\"数据库操作\"><a href=\"#数据库操作\" class=\"headerlink\" title=\"数据库操作\"></a>数据库操作</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-comment\">/*创建数据库*/</span><br><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">DATABASE</span> mydb<br><br><span class=\"hljs-comment\">/*使用数据库*/</span><br><span class=\"hljs-keyword\">use</span> <span class=\"hljs-keyword\">DATABASE</span> mydb<br><br><span class=\"hljs-comment\">/*删除数据库*/</span><br><span class=\"hljs-keyword\">drop</span> <span class=\"hljs-keyword\">DATABASE</span> mydb<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"数据measurement的操作\"><a href=\"#数据measurement的操作\" class=\"headerlink\" title=\"数据measurement的操作\"></a>数据measurement的操作</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-comment\">/*插入数据：插入了一条数据*/</span><br><span class=\"hljs-keyword\">insert</span> testTable&lt;表名字&gt;, butterflies=<span class=\"hljs-number\">3</span> ,honeybees=<span class=\"hljs-number\">28</span> , location=<span class=\"hljs-number\">1</span> ,scientist=perpetua&lt;内容&gt;<br><span class=\"hljs-comment\">/*查询数据：查询最近的3条数据*/</span><br><span class=\"hljs-keyword\">SELECT</span> * <span class=\"hljs-keyword\">FROM</span> weather <span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-built_in\">time</span> <span class=\"hljs-keyword\">DESC</span> <span class=\"hljs-keyword\">LIMIT</span> <span class=\"hljs-number\">3</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"HTTP接口\"><a href=\"#HTTP接口\" class=\"headerlink\" title=\"HTTP接口\"></a>HTTP接口</h2><p>InfluxDB直接提供了一套HTTP接口，部分操作如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-comment\"># 插入数据：插入了一条数据</span><br>curl -i -XPOST 'http://localhost:8086/write?db=myDB' <span class=\"hljs-comment\">--data-binary 'testTable, butterflies=3 ,honeybees=28 , location=1 ,scientist=perpetua'</span><br><br><span class=\"hljs-comment\"># 查询数据：查询最近的3条数据</span><br>curl -G 'http://localhost:8086/query?pretty=true' <span class=\"hljs-comment\">--data-urlencode \"db=myDB\" --data-urlencode \"q=SELECT * FROM testTable ORDER BY time DESC LIMIT 3\"</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"node-js中的实用\"><a href=\"#node-js中的实用\" class=\"headerlink\" title=\"node.js中的实用\"></a>node.js中的实用</h2><p>目前已经有第三方的npm包，所以在node.js中也非常方便</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">/**<span class=\"hljs-doctag\">@type </span>InfluxDB*/</span><br><span class=\"hljs-keyword\">var</span> influx = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'influx'</span>)<br><span class=\"hljs-keyword\">var</span> <span class=\"hljs-keyword\">async</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"async\"</span>)<br><span class=\"hljs-keyword\">var</span> ut = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"./../../util/util.js\"</span>)<br><span class=\"hljs-keyword\">var</span> dbName = <span class=\"hljs-string\">\"mydb\"</span><br><span class=\"hljs-keyword\">var</span> tableName = <span class=\"hljs-string\">\"testTable\"</span><br><span class=\"hljs-keyword\">var</span> client = influx(&#123;<br>    host : <span class=\"hljs-string\">'0.0.0.0'</span>,<br>    port : <span class=\"hljs-number\">8086</span>, <span class=\"hljs-comment\">// optional, default 8086</span><br>    protocol : <span class=\"hljs-string\">'http'</span>, <span class=\"hljs-comment\">// optional, default 'http'</span><br>    username : <span class=\"hljs-string\">''</span>,<br>    password : <span class=\"hljs-string\">''</span>,<br>    database : mydb<br>&#125;)<br><span class=\"hljs-keyword\">var</span> altitudes = [<span class=\"hljs-number\">1000</span>, <span class=\"hljs-number\">5000</span>]<br><span class=\"hljs-keyword\">var</span> areas = [<span class=\"hljs-string\">\"北\"</span>, <span class=\"hljs-string\">\"上\"</span>, <span class=\"hljs-string\">\"广\"</span>, <span class=\"hljs-string\">\"深\"</span>]<br><span class=\"hljs-keyword\">async</span>.waterfall([<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">cb</span>)</span>&#123; <span class=\"hljs-comment\">// 创建数据库</span><br>            client.createDatabase(dbName, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err,result</span>)</span>&#123;<br>                ut.log(<span class=\"hljs-string\">\"createDatabase\"</span>, result)<br>                cb(err, <span class=\"hljs-literal\">null</span>)<br>            &#125; )<br>        &#125;,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">result, cb</span>)</span>&#123; <span class=\"hljs-comment\">// 获取数据库名字</span><br>            client.getDatabaseNames( <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, result</span>)</span>&#123;<br>                ut.log(<span class=\"hljs-string\">\"getDatabaseNames\"</span>, result)<br>                cb(err, <span class=\"hljs-literal\">null</span>)<br>            &#125; )<br>        &#125;,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">result, cb</span>)</span>&#123; <span class=\"hljs-comment\">// 写入数据</span><br>            <span class=\"hljs-keyword\">var</span> points = [<br>                [<br>                    &#123;<br>                        temperature: ut.RandByRange(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>), <span class=\"hljs-attr\">humidity</span> : ut.RandByRange(<span class=\"hljs-number\">-15</span>, <span class=\"hljs-number\">30</span>)<br>                    &#125;,<br>                    &#123;<br>                        altitude: altitudes[ut.RandByRange(<span class=\"hljs-number\">0</span>, altitudes.length)], <span class=\"hljs-attr\">area</span> : areas[<span class=\"hljs-number\">0</span>]<br>                    &#125;,<br>                ],<br>                [<br>                    &#123;<br>                        temperature: ut.RandByRange(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>), <span class=\"hljs-attr\">humidity</span> : ut.RandByRange(<span class=\"hljs-number\">-15</span>, <span class=\"hljs-number\">30</span>)<br>                    &#125;,<br>                    &#123;<br>                        altitude: altitudes[ut.RandByRange(<span class=\"hljs-number\">0</span>, altitudes.length)], <span class=\"hljs-attr\">area</span> : areas[<span class=\"hljs-number\">1</span>]<br>                    &#125;,<br>                ],<br>            ]<br>            client.writePoints(tableName, points, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, result</span>)</span>&#123;<br>                ut.log(<span class=\"hljs-string\">\"writePoint\"</span>, result)<br>                cb(err, <span class=\"hljs-literal\">null</span>)<br>            &#125; )<br>        &#125;,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">result, cb</span>)</span>&#123; <span class=\"hljs-comment\">// 查询数据</span><br>            client.query( <span class=\"hljs-string\">'SELECT * FROM weather ORDER BY time DESC LIMIT 3'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err,result</span>)</span>&#123;<br>                ut.log(<span class=\"hljs-string\">\"query\"</span>, result)<br>                cb(err, <span class=\"hljs-literal\">null</span>)<br>            &#125; )<br>        &#125;,<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">result, cb</span>)</span>&#123;<br>            client.getMeasurements( <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err,result</span>)</span>&#123;<br>                ut.log(<span class=\"hljs-string\">\"getMeasurements\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(result))<br>                cb(err, <span class=\"hljs-literal\">null</span>)<br>            &#125;)<br>        &#125;<br>    ]<br>    , <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, result</span>)</span>&#123;<br>        ut.log(<span class=\"hljs-string\">\"finish...\"</span>, err, result)<br>    &#125;<br>)<br></code></pre></td></tr></table></figure>"},{"title":"模板引擎原理及部分实现","url":"54.html","id":"54","date":"2017-09-14T15:10:40.000Z","_content":"\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0045.jpg)\n\n> 模板引擎，是前端MV*架构中view的重要组成部分，是为了使用户界面与业务数据（内容）分离而产生的，它可以生成特定格式的文档，用于网站的模板引擎就会生成一个标准的HTML文档。多数前端框架都用到了前端模板引擎。\n\n# 前端模板引擎类型\n\n前端模板引擎主要分三类：\n\n*   string-based模板，基于字符串的parse和compile，如ejs、hbs；\n*   dom-based模板，基于dom的link或compile，如angular、vue的模板；\n*   虚拟dom模板，基于v-dom和ast，如React的模板jsx。\n\n# 字符串模板引擎\n\n## 1.String-based模板原理\n\n字符串模板引擎主要依赖一下这几个dom API：`createElement，appendChild，innerHTML`。 在这些api中，`innerHTML`有最佳的可读性与实用性，成为事实上的主要标准，虽然其他API可能在性能上更胜一筹，但原生js的字符串生成方案中，最常用的还是`innerHTML`。 构建过程如下： ![](http://ogw2109sg.bkt.clouddn.com/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E.png) 1.把整个文档作为字符串输入。 2.通过一个带正则的函数，将模板按照标记分为js表达式、模板语法、正常HTML语法。 3.合并成一个js表达式，这个可以接受数据作为输入。 4.输入数据后，输出字符串。 5.该字符串即可拼接为html代码。\n\n## 2.String-based模板实现demo\n\n大概实现下，约定一个语法，以经典的双大括号`{ {}}`作为模板插值。模板如下：\n\n    <div id=\"app\"></div>\n    <script type=\"text/tpl\" id=\"template\">\n        <p>name: { {name}}</p>\n        <p>age: { {age}}</p>\n    </script>\n\n\n插入的数据：\n\n    var info = [\n        {\n            name: 'bugzhang',\n            age: 22\n        }, {\n            name: 'justzht',\n            age: 20\n        }, {\n            name: 'zp',\n            age: 20\n        }\n    ];\n\n\n最重要的模板解析：\n\n    //解析模板\n    function template(tpl, data) {\n        //定义解析模式\n        var re = /{ {(.+?)}}/g,\n            cursor = 0\n        reExp = /(^( )?(var|if|for|else|switch|case|break|{|}|;))(.*)?/g,\n            code = 'var r=[];\\n';\n\n        // 解析html\n        function parsehtml(line) {\n            // 单双引号转义，换行符替换为空格,去掉前后的空格\n            line = line.replace(/('|\")/g, '\\\\$1').replace(/\\n/g, ' ').replace(/(^\\s+)|(\\s+$)/g, \"\");\n            code += 'r.push(\"' + line + '\");\\n';\n        }\n\n    // 解析js代码\n        function parsejs(line) {\n            // 去掉前后的空格\n            line = line.replace(/(^\\s+)|(\\s+$)/g, \"\");\n            code += line.match(reExp) ? line + '\\n' : 'r.push(' + line + ');\\n';\n        }\n\n        while ((match = re.exec(tpl)) !== null) {\n            // 开始标签  { { 前的内容和结束标签 }} 后的内容\n            parsehtml(tpl.slice(cursor, match.index))\n            // 开始标签  { { 和 结束标签 }} 之间的内容\n            parsejs(match[1])\n            // 每一次匹配完成移动指针\n            cursor = match.index + match[0].length;\n        }\n        // 最后一次匹配完的内容\n        parsehtml(tpl.substr(cursor, tpl.length - cursor));\n        code += 'return r.join(\"\");';\n        return new Function(code.replace(/[\\r\\t\\n]/g, '')).apply(data);\n    }\n    //把生成的字符串插入app节点\n    var tpl = document.getElementById(\"app\").innerHTML.toString();\n    document.getElementById(\"content\").innerHTML = template(tpl, info);\n\n\n## 3.String-based模板优点与缺点\n\n优点主要有：\n\n*   快速的初始化时间\n*   同时适用于服务器端与客户端，对SSR有最好的支持度\n*   语法支持好\n\n缺点也很明显：\n\n*   存在安全隐患\n*   性能较低下\n*   渲染后与数据断开联系\n\n# dom模板引擎\n\n## 1.原理概述\n\ndom-based模板引擎，输出的直接是dom，很多著名框架的模板都是采用了dom-based模板，如angular.js，vue.js，avalon.js，regular.js。 构建过程如下： ![](http://7xqgks.com1.z0.glb.clouddn.com/dom%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E.png) 1.从字符串中生成不带数据的无状态模板； 2.从无状态模板编译成动态模板； 3.动态模板与model进行绑定，完成插值的功能。\n\n## 2.优缺点\n\n优点主要有：\n\n*   与数据绑定，可以不需要操作dom更改view\n*   运行高效\n*   指令带来的声明式开发\n\n缺点：\n\n*   安全问题\n*   信息冗余度高\n*   初次进入dom的内容不是最终想要的内容\n\n# V-dom模板\n\n目前了解不多，而且v-dom内容比较多，以后再单独写这块。 参考：https://segmentfault.com/a/1190000004420078，http://blog.csdn.net/yczz/article/details/49585381","source":"_posts/e6-a8-a1-e6-9d-bf-e5-bc-95-e6-93-8e-e5-8e-9f-e7-90-86-e5-8f-8a-e9-83-a8-e5-88-86-e5-ae-9e-e7-8e-b0.md","raw":"---\ntitle: 模板引擎原理及部分实现\ntags:\n  - 前端底层\nurl: 54.html\nid: 54\ncategories:\n  - 前端\ndate: 2017-09-14 23:10:40\n---\n\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0045.jpg)\n\n> 模板引擎，是前端MV*架构中view的重要组成部分，是为了使用户界面与业务数据（内容）分离而产生的，它可以生成特定格式的文档，用于网站的模板引擎就会生成一个标准的HTML文档。多数前端框架都用到了前端模板引擎。\n\n# 前端模板引擎类型\n\n前端模板引擎主要分三类：\n\n*   string-based模板，基于字符串的parse和compile，如ejs、hbs；\n*   dom-based模板，基于dom的link或compile，如angular、vue的模板；\n*   虚拟dom模板，基于v-dom和ast，如React的模板jsx。\n\n# 字符串模板引擎\n\n## 1.String-based模板原理\n\n字符串模板引擎主要依赖一下这几个dom API：`createElement，appendChild，innerHTML`。 在这些api中，`innerHTML`有最佳的可读性与实用性，成为事实上的主要标准，虽然其他API可能在性能上更胜一筹，但原生js的字符串生成方案中，最常用的还是`innerHTML`。 构建过程如下： ![](http://ogw2109sg.bkt.clouddn.com/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E.png) 1.把整个文档作为字符串输入。 2.通过一个带正则的函数，将模板按照标记分为js表达式、模板语法、正常HTML语法。 3.合并成一个js表达式，这个可以接受数据作为输入。 4.输入数据后，输出字符串。 5.该字符串即可拼接为html代码。\n\n## 2.String-based模板实现demo\n\n大概实现下，约定一个语法，以经典的双大括号`{ {}}`作为模板插值。模板如下：\n\n    <div id=\"app\"></div>\n    <script type=\"text/tpl\" id=\"template\">\n        <p>name: { {name}}</p>\n        <p>age: { {age}}</p>\n    </script>\n\n\n插入的数据：\n\n    var info = [\n        {\n            name: 'bugzhang',\n            age: 22\n        }, {\n            name: 'justzht',\n            age: 20\n        }, {\n            name: 'zp',\n            age: 20\n        }\n    ];\n\n\n最重要的模板解析：\n\n    //解析模板\n    function template(tpl, data) {\n        //定义解析模式\n        var re = /{ {(.+?)}}/g,\n            cursor = 0\n        reExp = /(^( )?(var|if|for|else|switch|case|break|{|}|;))(.*)?/g,\n            code = 'var r=[];\\n';\n\n        // 解析html\n        function parsehtml(line) {\n            // 单双引号转义，换行符替换为空格,去掉前后的空格\n            line = line.replace(/('|\")/g, '\\\\$1').replace(/\\n/g, ' ').replace(/(^\\s+)|(\\s+$)/g, \"\");\n            code += 'r.push(\"' + line + '\");\\n';\n        }\n\n    // 解析js代码\n        function parsejs(line) {\n            // 去掉前后的空格\n            line = line.replace(/(^\\s+)|(\\s+$)/g, \"\");\n            code += line.match(reExp) ? line + '\\n' : 'r.push(' + line + ');\\n';\n        }\n\n        while ((match = re.exec(tpl)) !== null) {\n            // 开始标签  { { 前的内容和结束标签 }} 后的内容\n            parsehtml(tpl.slice(cursor, match.index))\n            // 开始标签  { { 和 结束标签 }} 之间的内容\n            parsejs(match[1])\n            // 每一次匹配完成移动指针\n            cursor = match.index + match[0].length;\n        }\n        // 最后一次匹配完的内容\n        parsehtml(tpl.substr(cursor, tpl.length - cursor));\n        code += 'return r.join(\"\");';\n        return new Function(code.replace(/[\\r\\t\\n]/g, '')).apply(data);\n    }\n    //把生成的字符串插入app节点\n    var tpl = document.getElementById(\"app\").innerHTML.toString();\n    document.getElementById(\"content\").innerHTML = template(tpl, info);\n\n\n## 3.String-based模板优点与缺点\n\n优点主要有：\n\n*   快速的初始化时间\n*   同时适用于服务器端与客户端，对SSR有最好的支持度\n*   语法支持好\n\n缺点也很明显：\n\n*   存在安全隐患\n*   性能较低下\n*   渲染后与数据断开联系\n\n# dom模板引擎\n\n## 1.原理概述\n\ndom-based模板引擎，输出的直接是dom，很多著名框架的模板都是采用了dom-based模板，如angular.js，vue.js，avalon.js，regular.js。 构建过程如下： ![](http://7xqgks.com1.z0.glb.clouddn.com/dom%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E.png) 1.从字符串中生成不带数据的无状态模板； 2.从无状态模板编译成动态模板； 3.动态模板与model进行绑定，完成插值的功能。\n\n## 2.优缺点\n\n优点主要有：\n\n*   与数据绑定，可以不需要操作dom更改view\n*   运行高效\n*   指令带来的声明式开发\n\n缺点：\n\n*   安全问题\n*   信息冗余度高\n*   初次进入dom的内容不是最终想要的内容\n\n# V-dom模板\n\n目前了解不多，而且v-dom内容比较多，以后再单独写这块。 参考：https://segmentfault.com/a/1190000004420078，http://blog.csdn.net/yczz/article/details/49585381","slug":"e6-a8-a1-e6-9d-bf-e5-bc-95-e6-93-8e-e5-8e-9f-e7-90-86-e5-8f-8a-e9-83-a8-e5-88-86-e5-ae-9e-e7-8e-b0","published":1,"updated":"2020-05-19T08:51:28.570Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts7za002fzmz8hrkh4rk6","content":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0045.jpg\" alt=\"\"></p>\n<blockquote>\n<p>模板引擎，是前端MV*架构中view的重要组成部分，是为了使用户界面与业务数据（内容）分离而产生的，它可以生成特定格式的文档，用于网站的模板引擎就会生成一个标准的HTML文档。多数前端框架都用到了前端模板引擎。</p>\n</blockquote>\n<h1 id=\"前端模板引擎类型\"><a href=\"#前端模板引擎类型\" class=\"headerlink\" title=\"前端模板引擎类型\"></a>前端模板引擎类型</h1><p>前端模板引擎主要分三类：</p>\n<ul>\n<li>string-based模板，基于字符串的parse和compile，如ejs、hbs；</li>\n<li>dom-based模板，基于dom的link或compile，如angular、vue的模板；</li>\n<li>虚拟dom模板，基于v-dom和ast，如React的模板jsx。</li>\n</ul>\n<h1 id=\"字符串模板引擎\"><a href=\"#字符串模板引擎\" class=\"headerlink\" title=\"字符串模板引擎\"></a>字符串模板引擎</h1><h2 id=\"1-String-based模板原理\"><a href=\"#1-String-based模板原理\" class=\"headerlink\" title=\"1.String-based模板原理\"></a>1.String-based模板原理</h2><p>字符串模板引擎主要依赖一下这几个dom API：<code>createElement，appendChild，innerHTML</code>。 在这些api中，<code>innerHTML</code>有最佳的可读性与实用性，成为事实上的主要标准，虽然其他API可能在性能上更胜一筹，但原生js的字符串生成方案中，最常用的还是<code>innerHTML</code>。 构建过程如下： <img src=\"http://ogw2109sg.bkt.clouddn.com/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E.png\" alt=\"\"> 1.把整个文档作为字符串输入。 2.通过一个带正则的函数，将模板按照标记分为js表达式、模板语法、正常HTML语法。 3.合并成一个js表达式，这个可以接受数据作为输入。 4.输入数据后，输出字符串。 5.该字符串即可拼接为html代码。</p>\n<h2 id=\"2-String-based模板实现demo\"><a href=\"#2-String-based模板实现demo\" class=\"headerlink\" title=\"2.String-based模板实现demo\"></a>2.String-based模板实现demo</h2><p>大概实现下，约定一个语法，以经典的双大括号<code>{ {}}</code>作为模板插值。模板如下：</p>\n<pre><code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;\n&lt;script type=&quot;text/tpl&quot; id=&quot;template&quot;&gt;\n    &lt;p&gt;name: { {name}}&lt;/p&gt;\n    &lt;p&gt;age: { {age}}&lt;/p&gt;\n&lt;/script&gt;</code></pre><p>插入的数据：</p>\n<pre><code>var info = [\n    {\n        name: &apos;bugzhang&apos;,\n        age: 22\n    }, {\n        name: &apos;justzht&apos;,\n        age: 20\n    }, {\n        name: &apos;zp&apos;,\n        age: 20\n    }\n];</code></pre><p>最重要的模板解析：</p>\n<pre><code>//解析模板\nfunction template(tpl, data) {\n    //定义解析模式\n    var re = /{ {(.+?)}}/g,\n        cursor = 0\n    reExp = /(^( )?(var|if|for|else|switch|case|break|{|}|;))(.*)?/g,\n        code = &apos;var r=[];\\n&apos;;\n\n    // 解析html\n    function parsehtml(line) {\n        // 单双引号转义，换行符替换为空格,去掉前后的空格\n        line = line.replace(/(&apos;|&quot;)/g, &apos;\\\\$1&apos;).replace(/\\n/g, &apos; &apos;).replace(/(^\\s+)|(\\s+$)/g, &quot;&quot;);\n        code += &apos;r.push(&quot;&apos; + line + &apos;&quot;);\\n&apos;;\n    }\n\n// 解析js代码\n    function parsejs(line) {\n        // 去掉前后的空格\n        line = line.replace(/(^\\s+)|(\\s+$)/g, &quot;&quot;);\n        code += line.match(reExp) ? line + &apos;\\n&apos; : &apos;r.push(&apos; + line + &apos;);\\n&apos;;\n    }\n\n    while ((match = re.exec(tpl)) !== null) {\n        // 开始标签  { { 前的内容和结束标签 }} 后的内容\n        parsehtml(tpl.slice(cursor, match.index))\n        // 开始标签  { { 和 结束标签 }} 之间的内容\n        parsejs(match[1])\n        // 每一次匹配完成移动指针\n        cursor = match.index + match[0].length;\n    }\n    // 最后一次匹配完的内容\n    parsehtml(tpl.substr(cursor, tpl.length - cursor));\n    code += &apos;return r.join(&quot;&quot;);&apos;;\n    return new Function(code.replace(/[\\r\\t\\n]/g, &apos;&apos;)).apply(data);\n}\n//把生成的字符串插入app节点\nvar tpl = document.getElementById(&quot;app&quot;).innerHTML.toString();\ndocument.getElementById(&quot;content&quot;).innerHTML = template(tpl, info);</code></pre><h2 id=\"3-String-based模板优点与缺点\"><a href=\"#3-String-based模板优点与缺点\" class=\"headerlink\" title=\"3.String-based模板优点与缺点\"></a>3.String-based模板优点与缺点</h2><p>优点主要有：</p>\n<ul>\n<li>快速的初始化时间</li>\n<li>同时适用于服务器端与客户端，对SSR有最好的支持度</li>\n<li>语法支持好</li>\n</ul>\n<p>缺点也很明显：</p>\n<ul>\n<li>存在安全隐患</li>\n<li>性能较低下</li>\n<li>渲染后与数据断开联系</li>\n</ul>\n<h1 id=\"dom模板引擎\"><a href=\"#dom模板引擎\" class=\"headerlink\" title=\"dom模板引擎\"></a>dom模板引擎</h1><h2 id=\"1-原理概述\"><a href=\"#1-原理概述\" class=\"headerlink\" title=\"1.原理概述\"></a>1.原理概述</h2><p>dom-based模板引擎，输出的直接是dom，很多著名框架的模板都是采用了dom-based模板，如angular.js，vue.js，avalon.js，regular.js。 构建过程如下： <img src=\"http://7xqgks.com1.z0.glb.clouddn.com/dom%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E.png\" alt=\"\"> 1.从字符串中生成不带数据的无状态模板； 2.从无状态模板编译成动态模板； 3.动态模板与model进行绑定，完成插值的功能。</p>\n<h2 id=\"2-优缺点\"><a href=\"#2-优缺点\" class=\"headerlink\" title=\"2.优缺点\"></a>2.优缺点</h2><p>优点主要有：</p>\n<ul>\n<li>与数据绑定，可以不需要操作dom更改view</li>\n<li>运行高效</li>\n<li>指令带来的声明式开发</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>安全问题</li>\n<li>信息冗余度高</li>\n<li>初次进入dom的内容不是最终想要的内容</li>\n</ul>\n<h1 id=\"V-dom模板\"><a href=\"#V-dom模板\" class=\"headerlink\" title=\"V-dom模板\"></a>V-dom模板</h1><p>目前了解不多，而且v-dom内容比较多，以后再单独写这块。 参考：<a href=\"https://segmentfault.com/a/1190000004420078，http://blog.csdn.net/yczz/article/details/49585381\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000004420078，http://blog.csdn.net/yczz/article/details/49585381</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0045.jpg\" alt=\"\"></p>\n<blockquote>\n<p>模板引擎，是前端MV*架构中view的重要组成部分，是为了使用户界面与业务数据（内容）分离而产生的，它可以生成特定格式的文档，用于网站的模板引擎就会生成一个标准的HTML文档。多数前端框架都用到了前端模板引擎。</p>\n</blockquote>\n<h1 id=\"前端模板引擎类型\"><a href=\"#前端模板引擎类型\" class=\"headerlink\" title=\"前端模板引擎类型\"></a>前端模板引擎类型</h1><p>前端模板引擎主要分三类：</p>\n<ul>\n<li>string-based模板，基于字符串的parse和compile，如ejs、hbs；</li>\n<li>dom-based模板，基于dom的link或compile，如angular、vue的模板；</li>\n<li>虚拟dom模板，基于v-dom和ast，如React的模板jsx。</li>\n</ul>\n<h1 id=\"字符串模板引擎\"><a href=\"#字符串模板引擎\" class=\"headerlink\" title=\"字符串模板引擎\"></a>字符串模板引擎</h1><h2 id=\"1-String-based模板原理\"><a href=\"#1-String-based模板原理\" class=\"headerlink\" title=\"1.String-based模板原理\"></a>1.String-based模板原理</h2><p>字符串模板引擎主要依赖一下这几个dom API：<code>createElement，appendChild，innerHTML</code>。 在这些api中，<code>innerHTML</code>有最佳的可读性与实用性，成为事实上的主要标准，虽然其他API可能在性能上更胜一筹，但原生js的字符串生成方案中，最常用的还是<code>innerHTML</code>。 构建过程如下： <img src=\"http://ogw2109sg.bkt.clouddn.com/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E.png\" alt=\"\"> 1.把整个文档作为字符串输入。 2.通过一个带正则的函数，将模板按照标记分为js表达式、模板语法、正常HTML语法。 3.合并成一个js表达式，这个可以接受数据作为输入。 4.输入数据后，输出字符串。 5.该字符串即可拼接为html代码。</p>\n<h2 id=\"2-String-based模板实现demo\"><a href=\"#2-String-based模板实现demo\" class=\"headerlink\" title=\"2.String-based模板实现demo\"></a>2.String-based模板实现demo</h2><p>大概实现下，约定一个语法，以经典的双大括号<code>{ {}}</code>作为模板插值。模板如下：</p>\n<pre><code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;\n&lt;script type=&quot;text/tpl&quot; id=&quot;template&quot;&gt;\n    &lt;p&gt;name: { {name}}&lt;/p&gt;\n    &lt;p&gt;age: { {age}}&lt;/p&gt;\n&lt;/script&gt;</code></pre><p>插入的数据：</p>\n<pre><code>var info = [\n    {\n        name: &apos;bugzhang&apos;,\n        age: 22\n    }, {\n        name: &apos;justzht&apos;,\n        age: 20\n    }, {\n        name: &apos;zp&apos;,\n        age: 20\n    }\n];</code></pre><p>最重要的模板解析：</p>\n<pre><code>//解析模板\nfunction template(tpl, data) {\n    //定义解析模式\n    var re = /{ {(.+?)}}/g,\n        cursor = 0\n    reExp = /(^( )?(var|if|for|else|switch|case|break|{|}|;))(.*)?/g,\n        code = &apos;var r=[];\\n&apos;;\n\n    // 解析html\n    function parsehtml(line) {\n        // 单双引号转义，换行符替换为空格,去掉前后的空格\n        line = line.replace(/(&apos;|&quot;)/g, &apos;\\\\$1&apos;).replace(/\\n/g, &apos; &apos;).replace(/(^\\s+)|(\\s+$)/g, &quot;&quot;);\n        code += &apos;r.push(&quot;&apos; + line + &apos;&quot;);\\n&apos;;\n    }\n\n// 解析js代码\n    function parsejs(line) {\n        // 去掉前后的空格\n        line = line.replace(/(^\\s+)|(\\s+$)/g, &quot;&quot;);\n        code += line.match(reExp) ? line + &apos;\\n&apos; : &apos;r.push(&apos; + line + &apos;);\\n&apos;;\n    }\n\n    while ((match = re.exec(tpl)) !== null) {\n        // 开始标签  { { 前的内容和结束标签 }} 后的内容\n        parsehtml(tpl.slice(cursor, match.index))\n        // 开始标签  { { 和 结束标签 }} 之间的内容\n        parsejs(match[1])\n        // 每一次匹配完成移动指针\n        cursor = match.index + match[0].length;\n    }\n    // 最后一次匹配完的内容\n    parsehtml(tpl.substr(cursor, tpl.length - cursor));\n    code += &apos;return r.join(&quot;&quot;);&apos;;\n    return new Function(code.replace(/[\\r\\t\\n]/g, &apos;&apos;)).apply(data);\n}\n//把生成的字符串插入app节点\nvar tpl = document.getElementById(&quot;app&quot;).innerHTML.toString();\ndocument.getElementById(&quot;content&quot;).innerHTML = template(tpl, info);</code></pre><h2 id=\"3-String-based模板优点与缺点\"><a href=\"#3-String-based模板优点与缺点\" class=\"headerlink\" title=\"3.String-based模板优点与缺点\"></a>3.String-based模板优点与缺点</h2><p>优点主要有：</p>\n<ul>\n<li>快速的初始化时间</li>\n<li>同时适用于服务器端与客户端，对SSR有最好的支持度</li>\n<li>语法支持好</li>\n</ul>\n<p>缺点也很明显：</p>\n<ul>\n<li>存在安全隐患</li>\n<li>性能较低下</li>\n<li>渲染后与数据断开联系</li>\n</ul>\n<h1 id=\"dom模板引擎\"><a href=\"#dom模板引擎\" class=\"headerlink\" title=\"dom模板引擎\"></a>dom模板引擎</h1><h2 id=\"1-原理概述\"><a href=\"#1-原理概述\" class=\"headerlink\" title=\"1.原理概述\"></a>1.原理概述</h2><p>dom-based模板引擎，输出的直接是dom，很多著名框架的模板都是采用了dom-based模板，如angular.js，vue.js，avalon.js，regular.js。 构建过程如下： <img src=\"http://7xqgks.com1.z0.glb.clouddn.com/dom%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E.png\" alt=\"\"> 1.从字符串中生成不带数据的无状态模板； 2.从无状态模板编译成动态模板； 3.动态模板与model进行绑定，完成插值的功能。</p>\n<h2 id=\"2-优缺点\"><a href=\"#2-优缺点\" class=\"headerlink\" title=\"2.优缺点\"></a>2.优缺点</h2><p>优点主要有：</p>\n<ul>\n<li>与数据绑定，可以不需要操作dom更改view</li>\n<li>运行高效</li>\n<li>指令带来的声明式开发</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>安全问题</li>\n<li>信息冗余度高</li>\n<li>初次进入dom的内容不是最终想要的内容</li>\n</ul>\n<h1 id=\"V-dom模板\"><a href=\"#V-dom模板\" class=\"headerlink\" title=\"V-dom模板\"></a>V-dom模板</h1><p>目前了解不多，而且v-dom内容比较多，以后再单独写这块。 参考：<a href=\"https://segmentfault.com/a/1190000004420078，http://blog.csdn.net/yczz/article/details/49585381\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000004420078，http://blog.csdn.net/yczz/article/details/49585381</a></p>\n"},{"title":"正则表达式总结","url":"30.html","id":"30","date":"2017-08-16T14:48:31.000Z","_content":"\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0011.jpg)\n\n## 常规\n\n*   .：任意字符，行结束符除外，要匹配行结束符，使用\\[\\\\s\\\\S\\]\n*   \\\\d：任意数字，\\\\D任意非数字\n*   \\\\w：字母数字类字符，\\\\W任意非字母数字\n*   \\\\s：空白字符（空格、制表符、换行符、回车符、翻页符），\\\\S任意不是空白符的字符\n*   \\\\b：匹配单词的开始或结束，\\\\B 匹配不是单词开头或结束的位置\n*   ^：匹配字符串的开始\n*   $：匹配字符串的结束\n\n## 量词\n\n*   *：重复零次或更多次\n*   +：重复一次或更多次\n*   ?：重复零次或一次\n*   {n}：重复n次\n*   {n,}：重复n次或更多次\n*   {n,m}：重复n到m次\n\n## 分组\n\n*   (<< pattern >>)：捕获组，反向引用访问或者匹配操作的结果\n*   (?:<< pattern >>)：非捕获组，不保存捕获内容\n\n## 断言\n\n*   (?=exp)：匹配exp前面的位置\n*   (?<=exp)：匹配exp后面的位置\n*   (?!exp)：匹配后面跟的不是exp的位置\n*   (?< !exp)：匹配前面不是exp的位置\n\n## 注释\n\n*   (?#comment)：这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释","source":"_posts/e6-ad-a3-e5-88-99-e8-a1-a8-e8-be-be-e5-bc-8f-e6-80-bb-e7-bb-93.md","raw":"---\ntitle: 正则表达式总结\ntags:\n  - JavaScript\n  - 前端\nurl: 30.html\nid: 30\ncategories:\n  - 前端\ndate: 2017-08-16 22:48:31\n---\n\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0011.jpg)\n\n## 常规\n\n*   .：任意字符，行结束符除外，要匹配行结束符，使用\\[\\\\s\\\\S\\]\n*   \\\\d：任意数字，\\\\D任意非数字\n*   \\\\w：字母数字类字符，\\\\W任意非字母数字\n*   \\\\s：空白字符（空格、制表符、换行符、回车符、翻页符），\\\\S任意不是空白符的字符\n*   \\\\b：匹配单词的开始或结束，\\\\B 匹配不是单词开头或结束的位置\n*   ^：匹配字符串的开始\n*   $：匹配字符串的结束\n\n## 量词\n\n*   *：重复零次或更多次\n*   +：重复一次或更多次\n*   ?：重复零次或一次\n*   {n}：重复n次\n*   {n,}：重复n次或更多次\n*   {n,m}：重复n到m次\n\n## 分组\n\n*   (<< pattern >>)：捕获组，反向引用访问或者匹配操作的结果\n*   (?:<< pattern >>)：非捕获组，不保存捕获内容\n\n## 断言\n\n*   (?=exp)：匹配exp前面的位置\n*   (?<=exp)：匹配exp后面的位置\n*   (?!exp)：匹配后面跟的不是exp的位置\n*   (?< !exp)：匹配前面不是exp的位置\n\n## 注释\n\n*   (?#comment)：这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释","slug":"e6-ad-a3-e5-88-99-e8-a1-a8-e8-be-be-e5-bc-8f-e6-80-bb-e7-bb-93","published":1,"updated":"2020-05-19T08:50:14.391Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts7zc002jzmz8fytu48cj","content":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0011.jpg\" alt=\"\"></p>\n<h2 id=\"常规\"><a href=\"#常规\" class=\"headerlink\" title=\"常规\"></a>常规</h2><ul>\n<li>.：任意字符，行结束符除外，要匹配行结束符，使用[\\s\\S]</li>\n<li>\\d：任意数字，\\D任意非数字</li>\n<li>\\w：字母数字类字符，\\W任意非字母数字</li>\n<li>\\s：空白字符（空格、制表符、换行符、回车符、翻页符），\\S任意不是空白符的字符</li>\n<li>\\b：匹配单词的开始或结束，\\B 匹配不是单词开头或结束的位置</li>\n<li>^：匹配字符串的开始</li>\n<li>$：匹配字符串的结束</li>\n</ul>\n<h2 id=\"量词\"><a href=\"#量词\" class=\"headerlink\" title=\"量词\"></a>量词</h2><ul>\n<li>*：重复零次或更多次</li>\n<li>+：重复一次或更多次</li>\n<li>?：重复零次或一次</li>\n<li>{n}：重复n次</li>\n<li>{n,}：重复n次或更多次</li>\n<li>{n,m}：重复n到m次</li>\n</ul>\n<h2 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h2><ul>\n<li>(&lt;&lt; pattern &gt;&gt;)：捕获组，反向引用访问或者匹配操作的结果</li>\n<li>(?:&lt;&lt; pattern &gt;&gt;)：非捕获组，不保存捕获内容</li>\n</ul>\n<h2 id=\"断言\"><a href=\"#断言\" class=\"headerlink\" title=\"断言\"></a>断言</h2><ul>\n<li>(?=exp)：匹配exp前面的位置</li>\n<li>(?&lt;=exp)：匹配exp后面的位置</li>\n<li>(?!exp)：匹配后面跟的不是exp的位置</li>\n<li>(?&lt; !exp)：匹配前面不是exp的位置</li>\n</ul>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><ul>\n<li>(?#comment)：这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0011.jpg\" alt=\"\"></p>\n<h2 id=\"常规\"><a href=\"#常规\" class=\"headerlink\" title=\"常规\"></a>常规</h2><ul>\n<li>.：任意字符，行结束符除外，要匹配行结束符，使用[\\s\\S]</li>\n<li>\\d：任意数字，\\D任意非数字</li>\n<li>\\w：字母数字类字符，\\W任意非字母数字</li>\n<li>\\s：空白字符（空格、制表符、换行符、回车符、翻页符），\\S任意不是空白符的字符</li>\n<li>\\b：匹配单词的开始或结束，\\B 匹配不是单词开头或结束的位置</li>\n<li>^：匹配字符串的开始</li>\n<li>$：匹配字符串的结束</li>\n</ul>\n<h2 id=\"量词\"><a href=\"#量词\" class=\"headerlink\" title=\"量词\"></a>量词</h2><ul>\n<li>*：重复零次或更多次</li>\n<li>+：重复一次或更多次</li>\n<li>?：重复零次或一次</li>\n<li>{n}：重复n次</li>\n<li>{n,}：重复n次或更多次</li>\n<li>{n,m}：重复n到m次</li>\n</ul>\n<h2 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h2><ul>\n<li>(&lt;&lt; pattern &gt;&gt;)：捕获组，反向引用访问或者匹配操作的结果</li>\n<li>(?:&lt;&lt; pattern &gt;&gt;)：非捕获组，不保存捕获内容</li>\n</ul>\n<h2 id=\"断言\"><a href=\"#断言\" class=\"headerlink\" title=\"断言\"></a>断言</h2><ul>\n<li>(?=exp)：匹配exp前面的位置</li>\n<li>(?&lt;=exp)：匹配exp后面的位置</li>\n<li>(?!exp)：匹配后面跟的不是exp的位置</li>\n<li>(?&lt; !exp)：匹配前面不是exp的位置</li>\n</ul>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><ul>\n<li>(?#comment)：这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释</li>\n</ul>\n"},{"title":"深信服实习面试","url":"36.html","id":"36","date":"2017-04-05T07:22:51.000Z","_content":"\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0021.jpg)\n\n# 一面\n\n1.介绍自己，介绍项目，重点介绍项目里所用技术（angular.js，vue.js，bootstrapt，npm，glup），项目过程中遇上的问题以及解决方案，因为参与开发的网站都上线运行，所以这块很顺利。 2.面试官根据简历内容提问，重点在计算机基础知识。 3.简历写了熟悉vue了解ng：询问前端三大框架对比，前端路由（vue-route）。 4.简历写了了解node和express框架：询问Node.js的异步非阻塞，牵扯到操作系统（进程线程、异步同步、阻塞非阻塞）。 5.简历写了了解nginx：说下正向代理与反向代理区别（本来知道的，当时紧张两次说成一样了，被反问后也没反应过来然后就被问了下一个）。 6.简历写了熟悉linux下开发：询问改变权限命令，具体说到421规则和RWX。 7.简历写了熟悉Git版本控制：问用的GUI还是命令行？我说命令行，询问了拉取，提交和创建分支的命令。 8.简历写了了解mongo和mysql数据库：问说明这两个数据库区别，分别适用于那种情况 9.问我专业？计算机科学与技术。学了那些课程？数据结构与算法学了吧？学了。写一个希尔排序（不会），写一个堆排序（不会），写一个快速排序。 10.TCP三次握手。 后来知道一面面试官是服务器和VPN领域比较有名的一个技术专家，写过好几本相关的书。\n\n# 二面（60分钟）\n\n一面结束后，面试官让我稍等，因为一面问题比较简单所以觉得应该能稳过。果然面试官出去大概十分钟后，二面面试官进来开始二面，期间和gay平聊了下q。 1.HTTP协议：HTTP请求头，HTTP请求方式哪几种以及区别，cookie在哪里，什么特点，服务器那边对应的是什么，除了cookie还有那些常见的客户端存储。HTTP相应头，状态码。 2.HTTPS协议：说完SSL与TLS后自己又拓展把细节介绍了下，对称密钥与非对称密钥，https优缺点，https证书cname配置。 3.background实现一个简单效果，我一直试图用svg和iconfont实现，后来才知道人家只问background，然后我解释用svg和iconfont可以减少请求与大小优化性能 4.盒子模型，margin负值实现简单效果，position属性 5.水平垂直居中一个div。 6.三栏布局，我说了flex布局然后拓展说了bootstrapt的原理（3代以前媒体查询+浮动+绝对定位，四代开始用flex） 7.js基本类型，说完六种后我说还有symbol，常见的引用类型 8.Array api 9.dom实际操作：生成子元素并赋予id，修改css，删除一些节点等等类似简单问题 10.看到我会数据库，打算让我设计一个系统的数据库，因为我怕被问到不擅长的地方，直接说不是很擅长数据库设计，然后他给我画了几张表。问我相关sql语句。 11.一个页面到一个数据库中间会发生一种安全隐患，是什么：sql注入，解决方案转义、存储过程、检查类型，危害。又告诉他xss也可以被发生，只要有input就可以xss，之后介绍xss分类，解决方案与危害13.因为xss说道跨域，解释了游览器同源策略，前端跨域解决方案，cors，jsonp，图像p 12.你的数据库经常用的什么做主键？自增。我指的是数据类型？Number，我用mongo。会关系型吧？会，mysql用int之类，和number一样的。连外键后主键冲突怎么解决？uuid()，mongo有默认主键_id不会冲突，生成和时间进程机器有关。 13.用什么游览器？chrome。调试怎么调试？console.log和断点具体细节以及为何不用alert。有没有用过抓包工具？没有用过专门的，前端性能优化靠chrome自带的开发者工具就够了\n\n# 三面（20分钟）\n\n十几分钟后，一面面试官回来，告诉我还有一个三面，三面是深圳那边电面，明天早上来电话。 一早上没来电话，下午三点我在实验室沙发睡觉，来了一个深圳电话，晕晕乎乎接了电话，面试官解释早上有些忙不好意思，我同时找眼镜找了半天最后还是没找到（八百度近视的我只有和我差不多的人才能体会不戴眼镜的痛苦）。开始三面，从自我介绍开始一直卡到项目介绍。好在问的很水。 1.自我介绍 2.项目介绍，技术选型，上线了没，现在就能访问，给了地址 3.你大三实习不方便吧，能解决不 4.感觉你对新技术关注度很高，技术选型比较新，平时怎么学这些，上那些网站，看了那些书，网站关于什么，书关于什么 5.写博客么？我给了我博客地址，写了多少篇？从15年1月写到现在，大概30多篇。自己写的还是的转载别人的？有一些是学习笔记，大多数是算自己写的吧。 6.参与过开源项目么，没有。虽然我有四年使用的github，但只是作为个人项目的一个代码托管工具以及方便部署项目，目前技术太水没有做开源的能力，以后有能力会尽量参与。 7.聊人生 8.怎么知道公司的 9.有没有其他问题问他","source":"_posts/e6-b7-b1-e4-bf-a1-e6-9c-8d-e5-ae-9e-e4-b9-a0-e9-9d-a2-e8-af-95.md","raw":"---\ntitle: 深信服实习面试\ntags:\n  - 面试\nurl: 36.html\nid: 36\ncategories:\n  - 面试\ndate: 2017-04-05 15:22:51\n---\n\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0021.jpg)\n\n# 一面\n\n1.介绍自己，介绍项目，重点介绍项目里所用技术（angular.js，vue.js，bootstrapt，npm，glup），项目过程中遇上的问题以及解决方案，因为参与开发的网站都上线运行，所以这块很顺利。 2.面试官根据简历内容提问，重点在计算机基础知识。 3.简历写了熟悉vue了解ng：询问前端三大框架对比，前端路由（vue-route）。 4.简历写了了解node和express框架：询问Node.js的异步非阻塞，牵扯到操作系统（进程线程、异步同步、阻塞非阻塞）。 5.简历写了了解nginx：说下正向代理与反向代理区别（本来知道的，当时紧张两次说成一样了，被反问后也没反应过来然后就被问了下一个）。 6.简历写了熟悉linux下开发：询问改变权限命令，具体说到421规则和RWX。 7.简历写了熟悉Git版本控制：问用的GUI还是命令行？我说命令行，询问了拉取，提交和创建分支的命令。 8.简历写了了解mongo和mysql数据库：问说明这两个数据库区别，分别适用于那种情况 9.问我专业？计算机科学与技术。学了那些课程？数据结构与算法学了吧？学了。写一个希尔排序（不会），写一个堆排序（不会），写一个快速排序。 10.TCP三次握手。 后来知道一面面试官是服务器和VPN领域比较有名的一个技术专家，写过好几本相关的书。\n\n# 二面（60分钟）\n\n一面结束后，面试官让我稍等，因为一面问题比较简单所以觉得应该能稳过。果然面试官出去大概十分钟后，二面面试官进来开始二面，期间和gay平聊了下q。 1.HTTP协议：HTTP请求头，HTTP请求方式哪几种以及区别，cookie在哪里，什么特点，服务器那边对应的是什么，除了cookie还有那些常见的客户端存储。HTTP相应头，状态码。 2.HTTPS协议：说完SSL与TLS后自己又拓展把细节介绍了下，对称密钥与非对称密钥，https优缺点，https证书cname配置。 3.background实现一个简单效果，我一直试图用svg和iconfont实现，后来才知道人家只问background，然后我解释用svg和iconfont可以减少请求与大小优化性能 4.盒子模型，margin负值实现简单效果，position属性 5.水平垂直居中一个div。 6.三栏布局，我说了flex布局然后拓展说了bootstrapt的原理（3代以前媒体查询+浮动+绝对定位，四代开始用flex） 7.js基本类型，说完六种后我说还有symbol，常见的引用类型 8.Array api 9.dom实际操作：生成子元素并赋予id，修改css，删除一些节点等等类似简单问题 10.看到我会数据库，打算让我设计一个系统的数据库，因为我怕被问到不擅长的地方，直接说不是很擅长数据库设计，然后他给我画了几张表。问我相关sql语句。 11.一个页面到一个数据库中间会发生一种安全隐患，是什么：sql注入，解决方案转义、存储过程、检查类型，危害。又告诉他xss也可以被发生，只要有input就可以xss，之后介绍xss分类，解决方案与危害13.因为xss说道跨域，解释了游览器同源策略，前端跨域解决方案，cors，jsonp，图像p 12.你的数据库经常用的什么做主键？自增。我指的是数据类型？Number，我用mongo。会关系型吧？会，mysql用int之类，和number一样的。连外键后主键冲突怎么解决？uuid()，mongo有默认主键_id不会冲突，生成和时间进程机器有关。 13.用什么游览器？chrome。调试怎么调试？console.log和断点具体细节以及为何不用alert。有没有用过抓包工具？没有用过专门的，前端性能优化靠chrome自带的开发者工具就够了\n\n# 三面（20分钟）\n\n十几分钟后，一面面试官回来，告诉我还有一个三面，三面是深圳那边电面，明天早上来电话。 一早上没来电话，下午三点我在实验室沙发睡觉，来了一个深圳电话，晕晕乎乎接了电话，面试官解释早上有些忙不好意思，我同时找眼镜找了半天最后还是没找到（八百度近视的我只有和我差不多的人才能体会不戴眼镜的痛苦）。开始三面，从自我介绍开始一直卡到项目介绍。好在问的很水。 1.自我介绍 2.项目介绍，技术选型，上线了没，现在就能访问，给了地址 3.你大三实习不方便吧，能解决不 4.感觉你对新技术关注度很高，技术选型比较新，平时怎么学这些，上那些网站，看了那些书，网站关于什么，书关于什么 5.写博客么？我给了我博客地址，写了多少篇？从15年1月写到现在，大概30多篇。自己写的还是的转载别人的？有一些是学习笔记，大多数是算自己写的吧。 6.参与过开源项目么，没有。虽然我有四年使用的github，但只是作为个人项目的一个代码托管工具以及方便部署项目，目前技术太水没有做开源的能力，以后有能力会尽量参与。 7.聊人生 8.怎么知道公司的 9.有没有其他问题问他","slug":"e6-b7-b1-e4-bf-a1-e6-9c-8d-e5-ae-9e-e4-b9-a0-e9-9d-a2-e8-af-95","published":1,"updated":"2020-05-19T08:51:28.572Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts7zd002nzmz82cet7vca","content":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0021.jpg\" alt=\"\"></p>\n<h1 id=\"一面\"><a href=\"#一面\" class=\"headerlink\" title=\"一面\"></a>一面</h1><p>1.介绍自己，介绍项目，重点介绍项目里所用技术（angular.js，vue.js，bootstrapt，npm，glup），项目过程中遇上的问题以及解决方案，因为参与开发的网站都上线运行，所以这块很顺利。 2.面试官根据简历内容提问，重点在计算机基础知识。 3.简历写了熟悉vue了解ng：询问前端三大框架对比，前端路由（vue-route）。 4.简历写了了解node和express框架：询问Node.js的异步非阻塞，牵扯到操作系统（进程线程、异步同步、阻塞非阻塞）。 5.简历写了了解nginx：说下正向代理与反向代理区别（本来知道的，当时紧张两次说成一样了，被反问后也没反应过来然后就被问了下一个）。 6.简历写了熟悉linux下开发：询问改变权限命令，具体说到421规则和RWX。 7.简历写了熟悉Git版本控制：问用的GUI还是命令行？我说命令行，询问了拉取，提交和创建分支的命令。 8.简历写了了解mongo和mysql数据库：问说明这两个数据库区别，分别适用于那种情况 9.问我专业？计算机科学与技术。学了那些课程？数据结构与算法学了吧？学了。写一个希尔排序（不会），写一个堆排序（不会），写一个快速排序。 10.TCP三次握手。 后来知道一面面试官是服务器和VPN领域比较有名的一个技术专家，写过好几本相关的书。</p>\n<h1 id=\"二面（60分钟）\"><a href=\"#二面（60分钟）\" class=\"headerlink\" title=\"二面（60分钟）\"></a>二面（60分钟）</h1><p>一面结束后，面试官让我稍等，因为一面问题比较简单所以觉得应该能稳过。果然面试官出去大概十分钟后，二面面试官进来开始二面，期间和gay平聊了下q。 1.HTTP协议：HTTP请求头，HTTP请求方式哪几种以及区别，cookie在哪里，什么特点，服务器那边对应的是什么，除了cookie还有那些常见的客户端存储。HTTP相应头，状态码。 2.HTTPS协议：说完SSL与TLS后自己又拓展把细节介绍了下，对称密钥与非对称密钥，https优缺点，https证书cname配置。 3.background实现一个简单效果，我一直试图用svg和iconfont实现，后来才知道人家只问background，然后我解释用svg和iconfont可以减少请求与大小优化性能 4.盒子模型，margin负值实现简单效果，position属性 5.水平垂直居中一个div。 6.三栏布局，我说了flex布局然后拓展说了bootstrapt的原理（3代以前媒体查询+浮动+绝对定位，四代开始用flex） 7.js基本类型，说完六种后我说还有symbol，常见的引用类型 8.Array api 9.dom实际操作：生成子元素并赋予id，修改css，删除一些节点等等类似简单问题 10.看到我会数据库，打算让我设计一个系统的数据库，因为我怕被问到不擅长的地方，直接说不是很擅长数据库设计，然后他给我画了几张表。问我相关sql语句。 11.一个页面到一个数据库中间会发生一种安全隐患，是什么：sql注入，解决方案转义、存储过程、检查类型，危害。又告诉他xss也可以被发生，只要有input就可以xss，之后介绍xss分类，解决方案与危害13.因为xss说道跨域，解释了游览器同源策略，前端跨域解决方案，cors，jsonp，图像p 12.你的数据库经常用的什么做主键？自增。我指的是数据类型？Number，我用mongo。会关系型吧？会，mysql用int之类，和number一样的。连外键后主键冲突怎么解决？uuid()，mongo有默认主键_id不会冲突，生成和时间进程机器有关。 13.用什么游览器？chrome。调试怎么调试？console.log和断点具体细节以及为何不用alert。有没有用过抓包工具？没有用过专门的，前端性能优化靠chrome自带的开发者工具就够了</p>\n<h1 id=\"三面（20分钟）\"><a href=\"#三面（20分钟）\" class=\"headerlink\" title=\"三面（20分钟）\"></a>三面（20分钟）</h1><p>十几分钟后，一面面试官回来，告诉我还有一个三面，三面是深圳那边电面，明天早上来电话。 一早上没来电话，下午三点我在实验室沙发睡觉，来了一个深圳电话，晕晕乎乎接了电话，面试官解释早上有些忙不好意思，我同时找眼镜找了半天最后还是没找到（八百度近视的我只有和我差不多的人才能体会不戴眼镜的痛苦）。开始三面，从自我介绍开始一直卡到项目介绍。好在问的很水。 1.自我介绍 2.项目介绍，技术选型，上线了没，现在就能访问，给了地址 3.你大三实习不方便吧，能解决不 4.感觉你对新技术关注度很高，技术选型比较新，平时怎么学这些，上那些网站，看了那些书，网站关于什么，书关于什么 5.写博客么？我给了我博客地址，写了多少篇？从15年1月写到现在，大概30多篇。自己写的还是的转载别人的？有一些是学习笔记，大多数是算自己写的吧。 6.参与过开源项目么，没有。虽然我有四年使用的github，但只是作为个人项目的一个代码托管工具以及方便部署项目，目前技术太水没有做开源的能力，以后有能力会尽量参与。 7.聊人生 8.怎么知道公司的 9.有没有其他问题问他</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0021.jpg\" alt=\"\"></p>\n<h1 id=\"一面\"><a href=\"#一面\" class=\"headerlink\" title=\"一面\"></a>一面</h1><p>1.介绍自己，介绍项目，重点介绍项目里所用技术（angular.js，vue.js，bootstrapt，npm，glup），项目过程中遇上的问题以及解决方案，因为参与开发的网站都上线运行，所以这块很顺利。 2.面试官根据简历内容提问，重点在计算机基础知识。 3.简历写了熟悉vue了解ng：询问前端三大框架对比，前端路由（vue-route）。 4.简历写了了解node和express框架：询问Node.js的异步非阻塞，牵扯到操作系统（进程线程、异步同步、阻塞非阻塞）。 5.简历写了了解nginx：说下正向代理与反向代理区别（本来知道的，当时紧张两次说成一样了，被反问后也没反应过来然后就被问了下一个）。 6.简历写了熟悉linux下开发：询问改变权限命令，具体说到421规则和RWX。 7.简历写了熟悉Git版本控制：问用的GUI还是命令行？我说命令行，询问了拉取，提交和创建分支的命令。 8.简历写了了解mongo和mysql数据库：问说明这两个数据库区别，分别适用于那种情况 9.问我专业？计算机科学与技术。学了那些课程？数据结构与算法学了吧？学了。写一个希尔排序（不会），写一个堆排序（不会），写一个快速排序。 10.TCP三次握手。 后来知道一面面试官是服务器和VPN领域比较有名的一个技术专家，写过好几本相关的书。</p>\n<h1 id=\"二面（60分钟）\"><a href=\"#二面（60分钟）\" class=\"headerlink\" title=\"二面（60分钟）\"></a>二面（60分钟）</h1><p>一面结束后，面试官让我稍等，因为一面问题比较简单所以觉得应该能稳过。果然面试官出去大概十分钟后，二面面试官进来开始二面，期间和gay平聊了下q。 1.HTTP协议：HTTP请求头，HTTP请求方式哪几种以及区别，cookie在哪里，什么特点，服务器那边对应的是什么，除了cookie还有那些常见的客户端存储。HTTP相应头，状态码。 2.HTTPS协议：说完SSL与TLS后自己又拓展把细节介绍了下，对称密钥与非对称密钥，https优缺点，https证书cname配置。 3.background实现一个简单效果，我一直试图用svg和iconfont实现，后来才知道人家只问background，然后我解释用svg和iconfont可以减少请求与大小优化性能 4.盒子模型，margin负值实现简单效果，position属性 5.水平垂直居中一个div。 6.三栏布局，我说了flex布局然后拓展说了bootstrapt的原理（3代以前媒体查询+浮动+绝对定位，四代开始用flex） 7.js基本类型，说完六种后我说还有symbol，常见的引用类型 8.Array api 9.dom实际操作：生成子元素并赋予id，修改css，删除一些节点等等类似简单问题 10.看到我会数据库，打算让我设计一个系统的数据库，因为我怕被问到不擅长的地方，直接说不是很擅长数据库设计，然后他给我画了几张表。问我相关sql语句。 11.一个页面到一个数据库中间会发生一种安全隐患，是什么：sql注入，解决方案转义、存储过程、检查类型，危害。又告诉他xss也可以被发生，只要有input就可以xss，之后介绍xss分类，解决方案与危害13.因为xss说道跨域，解释了游览器同源策略，前端跨域解决方案，cors，jsonp，图像p 12.你的数据库经常用的什么做主键？自增。我指的是数据类型？Number，我用mongo。会关系型吧？会，mysql用int之类，和number一样的。连外键后主键冲突怎么解决？uuid()，mongo有默认主键_id不会冲突，生成和时间进程机器有关。 13.用什么游览器？chrome。调试怎么调试？console.log和断点具体细节以及为何不用alert。有没有用过抓包工具？没有用过专门的，前端性能优化靠chrome自带的开发者工具就够了</p>\n<h1 id=\"三面（20分钟）\"><a href=\"#三面（20分钟）\" class=\"headerlink\" title=\"三面（20分钟）\"></a>三面（20分钟）</h1><p>十几分钟后，一面面试官回来，告诉我还有一个三面，三面是深圳那边电面，明天早上来电话。 一早上没来电话，下午三点我在实验室沙发睡觉，来了一个深圳电话，晕晕乎乎接了电话，面试官解释早上有些忙不好意思，我同时找眼镜找了半天最后还是没找到（八百度近视的我只有和我差不多的人才能体会不戴眼镜的痛苦）。开始三面，从自我介绍开始一直卡到项目介绍。好在问的很水。 1.自我介绍 2.项目介绍，技术选型，上线了没，现在就能访问，给了地址 3.你大三实习不方便吧，能解决不 4.感觉你对新技术关注度很高，技术选型比较新，平时怎么学这些，上那些网站，看了那些书，网站关于什么，书关于什么 5.写博客么？我给了我博客地址，写了多少篇？从15年1月写到现在，大概30多篇。自己写的还是的转载别人的？有一些是学习笔记，大多数是算自己写的吧。 6.参与过开源项目么，没有。虽然我有四年使用的github，但只是作为个人项目的一个代码托管工具以及方便部署项目，目前技术太水没有做开源的能力，以后有能力会尽量参与。 7.聊人生 8.怎么知道公司的 9.有没有其他问题问他</p>\n"},{"title":"游览器工作原理：CSS的渲染","url":"310.html","id":"310","date":"2019-09-08T16:42:25.000Z","_content":"\nCSS样式规则\n=======\n```html\n    <html>\n    <head>\n        <style>\n            div {\n                positon: absolute;\n                top: 200px;\n                left: 200px;\n                width: 200px;\n                height: 200px;\n                border: 2px solod black;\n                padding:20px;\n                background-color: blue;\n                color: green;\n                opacity: 0.8;\n            }\n        </style>\n    </head>\n    <body>\n        <div id=\"simple\"></div>\n    </body>\n    </html>\n```\n\n上边是一个使用CSS的简单例子，所有的CSS都是按照以下规则书写的： **\\[选择器\\] { \\[样式名\\]: \\[样式值\\], \\[样式名\\]: \\[样式值\\], ...}**\n\n位置计算\n====\n\nCSS的位置计算包含了两大部分，一部分是众所周知的 盒子模型，另外一部分是比较小众的 包含块模型。对于盒子模型，因为比较简单，本篇博文略过，重点讲 包含块模型。 当游览器计算元素的盒子的位置和大小时，webkit需要计算该元素和另外一个矩形区域的相对位置，这个矩形区域称为该元素的包含块。盒模型就是在包含块内计算和确定各个元素的。\n\n*   根元素的包含块称为初试包含块，大小就是可视区域。\n*   对于static和relative布局的元素，包含块是最佳父级元素盒子模型的content区域。\n*   对于fixed布局的元素，包含块脱离html流，固定值整个游览器可视区域的一个位置。\n*   对于absolute布局的元素，包含块由最近含有absolute、relative、fixed的祖先决定：如果一个元素具有inline属性，元素的包含块是包含该祖先的第一个和最后一个内联元素的内边距的区域；否则，包含块是该祖先的内边距的区域。\n\nCSSOM：CSS对象模型\n=============\n\n可能所有人都知道HTML对应的文档对象模型的DOM，但没多少听过CSS对应CSS对象模型 CSSOM 。实际当游览器要解析外联或者内联的CSS时，为了可以解析这种文档，使之可以用于样式排布和绘制。这种数据结构就是 CSSOM。它的思想是在DOM的一些节点接口中，加入获取和操作CSS属性或者接口的javascript接口，因而实现让javascript可以动态操作CSS样式。 对于样式表，CSSOM提供了一个接口，这个接口在webkit定义是：\n```java\n    partial interface Document {\n        readonly attribute StyleSheetList styleSheetLists;\n        attribute DOMString ? sekectedStyleSheetSet;\n        readonly attribute DOMString ? lastStyleSheetSet;\n        readonly attribute DOMString ? preferredStyleSheetSet;\n        readonly attribute DOMString ? StyleSheeSetsList styleSheetLists;\n        void enableStyleSheetsForSet(DOMString ? name);\n    }\n```\n\n通过这些属性，可以动态选择使用哪些样式表。 这个接口可以获取样式表的各种信息，例如css的'href'、css类型'type'、css规则'cssRules'。使用方法是document.stylesheets，可以得到如下结果： ![CSSOM](http://img.bugzhang.com/DOMStringDOMString.jpg)\n\nCSS解释器与匹配规则\n===========\n\nCSS的解释分为三个过程 词法分析： 在上一章节第一节中，简单说了样式规则，在webkit内部， 样式类型有以下几个Class：\n\n*   Style：基本类型，绝大多数属于这个类型\n*   Import：引入CSS用\n*   Media：对应 @media 类型\n*   Fontface：CSS3中自定义字体的类型\n*   Keyframes：对应css3中 @keyframes 类型\n*   Page：对应 @page 类型\n\n这些样式和值对应的 CSSValue 这个类组成了一个样式规则——被叫做CSSProperly，同一个选择器 CSSSelector 多个样式规则一起组成了 CSSPropertySet。于是形成了如下结构： ![](http://img.bugzhang.com/CSSProperly.jpg) 这些结构的每个节点就是 **token** 语法分析：由 CSSParser 类完成，但这个类是一个代理模式，实际完成的是 CSSGrammer 类完成，这个类可以解析startSelector, endSelector, startRuleBody, startProperty, parseValue, endRuleBody。 结果这两步，就生成样式规则StyleRule，会被放入 StyleSheetContents 对象中。\n\nCSS布局计算\n=======\n\n布局计算是一个递归的过程，每一个节点的大小都要计算其子女的位置和大小。布局计算依靠内部类 RenderObject 进行计算。整个过程如下： ![](http://img.bugzhang.com/webkitLayout) 对于以下几种情况会触发重新布局：\n\n*   当网页首次被打开的时候，游览器设置网页的可视区域，并调用计算布局的方法；\n*   网页的动画会触发布局计算，因为动画可能改变样式属性；\n*   JavaScript代码通过CSSOM等直接修改样式信息；\n*   用户的交互，例如翻滚网页。 重新布局就是所谓的回流，因为不能依靠修改单纯内存中的CSSValues然后调用渲染器实现修改，必须经过布局计算全部计算并渲染，因此非常消耗时间，也是前端老生常谈的优化项之一。\n\n游览器在进行完布局计算后，还会进行布局测试，布局测试是对游览器最重要的测试，它会测试整个网页的渲染结果，包括网页的加载和渲染两个过程。方法是预先准备大量运用测试渲染结果的单元测试用例，然后把得到的结果和已有的用例进行比对检测准确性。","source":"_posts/e6-b8-b8-e8-a7-88-e5-99-a8-e5-b7-a5-e4-bd-9c-e5-8e-9f-e7-90-86-ef-bc-9acss-e7-9a-84-e6-b8-b2-e6-9f-93.md","raw":"---\ntitle: 游览器工作原理：CSS的渲染\ntags:\n  - 游览器\nurl: 310.html\nid: 310\ncategories:\n  - 前端\ndate: 2019-09-09 00:42:25\n---\n\nCSS样式规则\n=======\n```html\n    <html>\n    <head>\n        <style>\n            div {\n                positon: absolute;\n                top: 200px;\n                left: 200px;\n                width: 200px;\n                height: 200px;\n                border: 2px solod black;\n                padding:20px;\n                background-color: blue;\n                color: green;\n                opacity: 0.8;\n            }\n        </style>\n    </head>\n    <body>\n        <div id=\"simple\"></div>\n    </body>\n    </html>\n```\n\n上边是一个使用CSS的简单例子，所有的CSS都是按照以下规则书写的： **\\[选择器\\] { \\[样式名\\]: \\[样式值\\], \\[样式名\\]: \\[样式值\\], ...}**\n\n位置计算\n====\n\nCSS的位置计算包含了两大部分，一部分是众所周知的 盒子模型，另外一部分是比较小众的 包含块模型。对于盒子模型，因为比较简单，本篇博文略过，重点讲 包含块模型。 当游览器计算元素的盒子的位置和大小时，webkit需要计算该元素和另外一个矩形区域的相对位置，这个矩形区域称为该元素的包含块。盒模型就是在包含块内计算和确定各个元素的。\n\n*   根元素的包含块称为初试包含块，大小就是可视区域。\n*   对于static和relative布局的元素，包含块是最佳父级元素盒子模型的content区域。\n*   对于fixed布局的元素，包含块脱离html流，固定值整个游览器可视区域的一个位置。\n*   对于absolute布局的元素，包含块由最近含有absolute、relative、fixed的祖先决定：如果一个元素具有inline属性，元素的包含块是包含该祖先的第一个和最后一个内联元素的内边距的区域；否则，包含块是该祖先的内边距的区域。\n\nCSSOM：CSS对象模型\n=============\n\n可能所有人都知道HTML对应的文档对象模型的DOM，但没多少听过CSS对应CSS对象模型 CSSOM 。实际当游览器要解析外联或者内联的CSS时，为了可以解析这种文档，使之可以用于样式排布和绘制。这种数据结构就是 CSSOM。它的思想是在DOM的一些节点接口中，加入获取和操作CSS属性或者接口的javascript接口，因而实现让javascript可以动态操作CSS样式。 对于样式表，CSSOM提供了一个接口，这个接口在webkit定义是：\n```java\n    partial interface Document {\n        readonly attribute StyleSheetList styleSheetLists;\n        attribute DOMString ? sekectedStyleSheetSet;\n        readonly attribute DOMString ? lastStyleSheetSet;\n        readonly attribute DOMString ? preferredStyleSheetSet;\n        readonly attribute DOMString ? StyleSheeSetsList styleSheetLists;\n        void enableStyleSheetsForSet(DOMString ? name);\n    }\n```\n\n通过这些属性，可以动态选择使用哪些样式表。 这个接口可以获取样式表的各种信息，例如css的'href'、css类型'type'、css规则'cssRules'。使用方法是document.stylesheets，可以得到如下结果： ![CSSOM](http://img.bugzhang.com/DOMStringDOMString.jpg)\n\nCSS解释器与匹配规则\n===========\n\nCSS的解释分为三个过程 词法分析： 在上一章节第一节中，简单说了样式规则，在webkit内部， 样式类型有以下几个Class：\n\n*   Style：基本类型，绝大多数属于这个类型\n*   Import：引入CSS用\n*   Media：对应 @media 类型\n*   Fontface：CSS3中自定义字体的类型\n*   Keyframes：对应css3中 @keyframes 类型\n*   Page：对应 @page 类型\n\n这些样式和值对应的 CSSValue 这个类组成了一个样式规则——被叫做CSSProperly，同一个选择器 CSSSelector 多个样式规则一起组成了 CSSPropertySet。于是形成了如下结构： ![](http://img.bugzhang.com/CSSProperly.jpg) 这些结构的每个节点就是 **token** 语法分析：由 CSSParser 类完成，但这个类是一个代理模式，实际完成的是 CSSGrammer 类完成，这个类可以解析startSelector, endSelector, startRuleBody, startProperty, parseValue, endRuleBody。 结果这两步，就生成样式规则StyleRule，会被放入 StyleSheetContents 对象中。\n\nCSS布局计算\n=======\n\n布局计算是一个递归的过程，每一个节点的大小都要计算其子女的位置和大小。布局计算依靠内部类 RenderObject 进行计算。整个过程如下： ![](http://img.bugzhang.com/webkitLayout) 对于以下几种情况会触发重新布局：\n\n*   当网页首次被打开的时候，游览器设置网页的可视区域，并调用计算布局的方法；\n*   网页的动画会触发布局计算，因为动画可能改变样式属性；\n*   JavaScript代码通过CSSOM等直接修改样式信息；\n*   用户的交互，例如翻滚网页。 重新布局就是所谓的回流，因为不能依靠修改单纯内存中的CSSValues然后调用渲染器实现修改，必须经过布局计算全部计算并渲染，因此非常消耗时间，也是前端老生常谈的优化项之一。\n\n游览器在进行完布局计算后，还会进行布局测试，布局测试是对游览器最重要的测试，它会测试整个网页的渲染结果，包括网页的加载和渲染两个过程。方法是预先准备大量运用测试渲染结果的单元测试用例，然后把得到的结果和已有的用例进行比对检测准确性。","slug":"e6-b8-b8-e8-a7-88-e5-99-a8-e5-b7-a5-e4-bd-9c-e5-8e-9f-e7-90-86-ef-bc-9acss-e7-9a-84-e6-b8-b2-e6-9f-93","published":1,"updated":"2020-05-21T08:29:08.273Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts7zf002rzmz89zsufi3p","content":"<h1 id=\"CSS样式规则\"><a href=\"#CSS样式规则\" class=\"headerlink\" title=\"CSS样式规则\"></a>CSS样式规则</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><br>        div &#123;<br>            positon: absolute;<br>            top: 200px;<br>            left: 200px;<br>            width: 200px;<br>            height: 200px;<br>            border: 2px solod black;<br><span class=\"css\">            <span class=\"hljs-selector-tag\">padding</span><span class=\"hljs-selector-pseudo\">:20px</span>;</span><br>            background-color: blue;<br>            color: green;<br><span class=\"css\">            <span class=\"hljs-selector-tag\">opacity</span>: 0<span class=\"hljs-selector-class\">.8</span>;</span><br>        &#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"simple\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>上边是一个使用CSS的简单例子，所有的CSS都是按照以下规则书写的： <strong>[选择器] { [样式名]: [样式值], [样式名]: [样式值], …}</strong></p>\n<h1 id=\"位置计算\"><a href=\"#位置计算\" class=\"headerlink\" title=\"位置计算\"></a>位置计算</h1><p>CSS的位置计算包含了两大部分，一部分是众所周知的 盒子模型，另外一部分是比较小众的 包含块模型。对于盒子模型，因为比较简单，本篇博文略过，重点讲 包含块模型。 当游览器计算元素的盒子的位置和大小时，webkit需要计算该元素和另外一个矩形区域的相对位置，这个矩形区域称为该元素的包含块。盒模型就是在包含块内计算和确定各个元素的。</p>\n<ul>\n<li>根元素的包含块称为初试包含块，大小就是可视区域。</li>\n<li>对于static和relative布局的元素，包含块是最佳父级元素盒子模型的content区域。</li>\n<li>对于fixed布局的元素，包含块脱离html流，固定值整个游览器可视区域的一个位置。</li>\n<li>对于absolute布局的元素，包含块由最近含有absolute、relative、fixed的祖先决定：如果一个元素具有inline属性，元素的包含块是包含该祖先的第一个和最后一个内联元素的内边距的区域；否则，包含块是该祖先的内边距的区域。</li>\n</ul>\n<h1 id=\"CSSOM：CSS对象模型\"><a href=\"#CSSOM：CSS对象模型\" class=\"headerlink\" title=\"CSSOM：CSS对象模型\"></a>CSSOM：CSS对象模型</h1><p>可能所有人都知道HTML对应的文档对象模型的DOM，但没多少听过CSS对应CSS对象模型 CSSOM 。实际当游览器要解析外联或者内联的CSS时，为了可以解析这种文档，使之可以用于样式排布和绘制。这种数据结构就是 CSSOM。它的思想是在DOM的一些节点接口中，加入获取和操作CSS属性或者接口的javascript接口，因而实现让javascript可以动态操作CSS样式。 对于样式表，CSSOM提供了一个接口，这个接口在webkit定义是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">partial <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">Document</span> </span>&#123;<br>    readonly attribute StyleSheetList styleSheetLists;<br>    attribute DOMString ? sekectedStyleSheetSet;<br>    readonly attribute DOMString ? lastStyleSheetSet;<br>    readonly attribute DOMString ? preferredStyleSheetSet;<br>    readonly attribute DOMString ? StyleSheeSetsList styleSheetLists;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">enableStyleSheetsForSet</span><span class=\"hljs-params\">(DOMString ? name)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>通过这些属性，可以动态选择使用哪些样式表。 这个接口可以获取样式表的各种信息，例如css的’href’、css类型’type’、css规则’cssRules’。使用方法是document.stylesheets，可以得到如下结果： <img src=\"http://img.bugzhang.com/DOMStringDOMString.jpg\" alt=\"CSSOM\"></p>\n<h1 id=\"CSS解释器与匹配规则\"><a href=\"#CSS解释器与匹配规则\" class=\"headerlink\" title=\"CSS解释器与匹配规则\"></a>CSS解释器与匹配规则</h1><p>CSS的解释分为三个过程 词法分析： 在上一章节第一节中，简单说了样式规则，在webkit内部， 样式类型有以下几个Class：</p>\n<ul>\n<li>Style：基本类型，绝大多数属于这个类型</li>\n<li>Import：引入CSS用</li>\n<li>Media：对应 @media 类型</li>\n<li>Fontface：CSS3中自定义字体的类型</li>\n<li>Keyframes：对应css3中 @keyframes 类型</li>\n<li>Page：对应 @page 类型</li>\n</ul>\n<p>这些样式和值对应的 CSSValue 这个类组成了一个样式规则——被叫做CSSProperly，同一个选择器 CSSSelector 多个样式规则一起组成了 CSSPropertySet。于是形成了如下结构： <img src=\"http://img.bugzhang.com/CSSProperly.jpg\" alt=\"\"> 这些结构的每个节点就是 <strong>token</strong> 语法分析：由 CSSParser 类完成，但这个类是一个代理模式，实际完成的是 CSSGrammer 类完成，这个类可以解析startSelector, endSelector, startRuleBody, startProperty, parseValue, endRuleBody。 结果这两步，就生成样式规则StyleRule，会被放入 StyleSheetContents 对象中。</p>\n<h1 id=\"CSS布局计算\"><a href=\"#CSS布局计算\" class=\"headerlink\" title=\"CSS布局计算\"></a>CSS布局计算</h1><p>布局计算是一个递归的过程，每一个节点的大小都要计算其子女的位置和大小。布局计算依靠内部类 RenderObject 进行计算。整个过程如下： <img src=\"http://img.bugzhang.com/webkitLayout\" alt=\"\"> 对于以下几种情况会触发重新布局：</p>\n<ul>\n<li>当网页首次被打开的时候，游览器设置网页的可视区域，并调用计算布局的方法；</li>\n<li>网页的动画会触发布局计算，因为动画可能改变样式属性；</li>\n<li>JavaScript代码通过CSSOM等直接修改样式信息；</li>\n<li>用户的交互，例如翻滚网页。 重新布局就是所谓的回流，因为不能依靠修改单纯内存中的CSSValues然后调用渲染器实现修改，必须经过布局计算全部计算并渲染，因此非常消耗时间，也是前端老生常谈的优化项之一。</li>\n</ul>\n<p>游览器在进行完布局计算后，还会进行布局测试，布局测试是对游览器最重要的测试，它会测试整个网页的渲染结果，包括网页的加载和渲染两个过程。方法是预先准备大量运用测试渲染结果的单元测试用例，然后把得到的结果和已有的用例进行比对检测准确性。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"CSS样式规则\"><a href=\"#CSS样式规则\" class=\"headerlink\" title=\"CSS样式规则\"></a>CSS样式规则</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><br>        div &#123;<br>            positon: absolute;<br>            top: 200px;<br>            left: 200px;<br>            width: 200px;<br>            height: 200px;<br>            border: 2px solod black;<br><span class=\"css\">            <span class=\"hljs-selector-tag\">padding</span><span class=\"hljs-selector-pseudo\">:20px</span>;</span><br>            background-color: blue;<br>            color: green;<br><span class=\"css\">            <span class=\"hljs-selector-tag\">opacity</span>: 0<span class=\"hljs-selector-class\">.8</span>;</span><br>        &#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"simple\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>上边是一个使用CSS的简单例子，所有的CSS都是按照以下规则书写的： <strong>[选择器] { [样式名]: [样式值], [样式名]: [样式值], …}</strong></p>\n<h1 id=\"位置计算\"><a href=\"#位置计算\" class=\"headerlink\" title=\"位置计算\"></a>位置计算</h1><p>CSS的位置计算包含了两大部分，一部分是众所周知的 盒子模型，另外一部分是比较小众的 包含块模型。对于盒子模型，因为比较简单，本篇博文略过，重点讲 包含块模型。 当游览器计算元素的盒子的位置和大小时，webkit需要计算该元素和另外一个矩形区域的相对位置，这个矩形区域称为该元素的包含块。盒模型就是在包含块内计算和确定各个元素的。</p>\n<ul>\n<li>根元素的包含块称为初试包含块，大小就是可视区域。</li>\n<li>对于static和relative布局的元素，包含块是最佳父级元素盒子模型的content区域。</li>\n<li>对于fixed布局的元素，包含块脱离html流，固定值整个游览器可视区域的一个位置。</li>\n<li>对于absolute布局的元素，包含块由最近含有absolute、relative、fixed的祖先决定：如果一个元素具有inline属性，元素的包含块是包含该祖先的第一个和最后一个内联元素的内边距的区域；否则，包含块是该祖先的内边距的区域。</li>\n</ul>\n<h1 id=\"CSSOM：CSS对象模型\"><a href=\"#CSSOM：CSS对象模型\" class=\"headerlink\" title=\"CSSOM：CSS对象模型\"></a>CSSOM：CSS对象模型</h1><p>可能所有人都知道HTML对应的文档对象模型的DOM，但没多少听过CSS对应CSS对象模型 CSSOM 。实际当游览器要解析外联或者内联的CSS时，为了可以解析这种文档，使之可以用于样式排布和绘制。这种数据结构就是 CSSOM。它的思想是在DOM的一些节点接口中，加入获取和操作CSS属性或者接口的javascript接口，因而实现让javascript可以动态操作CSS样式。 对于样式表，CSSOM提供了一个接口，这个接口在webkit定义是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">partial <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">Document</span> </span>&#123;<br>    readonly attribute StyleSheetList styleSheetLists;<br>    attribute DOMString ? sekectedStyleSheetSet;<br>    readonly attribute DOMString ? lastStyleSheetSet;<br>    readonly attribute DOMString ? preferredStyleSheetSet;<br>    readonly attribute DOMString ? StyleSheeSetsList styleSheetLists;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">enableStyleSheetsForSet</span><span class=\"hljs-params\">(DOMString ? name)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>通过这些属性，可以动态选择使用哪些样式表。 这个接口可以获取样式表的各种信息，例如css的’href’、css类型’type’、css规则’cssRules’。使用方法是document.stylesheets，可以得到如下结果： <img src=\"http://img.bugzhang.com/DOMStringDOMString.jpg\" alt=\"CSSOM\"></p>\n<h1 id=\"CSS解释器与匹配规则\"><a href=\"#CSS解释器与匹配规则\" class=\"headerlink\" title=\"CSS解释器与匹配规则\"></a>CSS解释器与匹配规则</h1><p>CSS的解释分为三个过程 词法分析： 在上一章节第一节中，简单说了样式规则，在webkit内部， 样式类型有以下几个Class：</p>\n<ul>\n<li>Style：基本类型，绝大多数属于这个类型</li>\n<li>Import：引入CSS用</li>\n<li>Media：对应 @media 类型</li>\n<li>Fontface：CSS3中自定义字体的类型</li>\n<li>Keyframes：对应css3中 @keyframes 类型</li>\n<li>Page：对应 @page 类型</li>\n</ul>\n<p>这些样式和值对应的 CSSValue 这个类组成了一个样式规则——被叫做CSSProperly，同一个选择器 CSSSelector 多个样式规则一起组成了 CSSPropertySet。于是形成了如下结构： <img src=\"http://img.bugzhang.com/CSSProperly.jpg\" alt=\"\"> 这些结构的每个节点就是 <strong>token</strong> 语法分析：由 CSSParser 类完成，但这个类是一个代理模式，实际完成的是 CSSGrammer 类完成，这个类可以解析startSelector, endSelector, startRuleBody, startProperty, parseValue, endRuleBody。 结果这两步，就生成样式规则StyleRule，会被放入 StyleSheetContents 对象中。</p>\n<h1 id=\"CSS布局计算\"><a href=\"#CSS布局计算\" class=\"headerlink\" title=\"CSS布局计算\"></a>CSS布局计算</h1><p>布局计算是一个递归的过程，每一个节点的大小都要计算其子女的位置和大小。布局计算依靠内部类 RenderObject 进行计算。整个过程如下： <img src=\"http://img.bugzhang.com/webkitLayout\" alt=\"\"> 对于以下几种情况会触发重新布局：</p>\n<ul>\n<li>当网页首次被打开的时候，游览器设置网页的可视区域，并调用计算布局的方法；</li>\n<li>网页的动画会触发布局计算，因为动画可能改变样式属性；</li>\n<li>JavaScript代码通过CSSOM等直接修改样式信息；</li>\n<li>用户的交互，例如翻滚网页。 重新布局就是所谓的回流，因为不能依靠修改单纯内存中的CSSValues然后调用渲染器实现修改，必须经过布局计算全部计算并渲染，因此非常消耗时间，也是前端老生常谈的优化项之一。</li>\n</ul>\n<p>游览器在进行完布局计算后，还会进行布局测试，布局测试是对游览器最重要的测试，它会测试整个网页的渲染结果，包括网页的加载和渲染两个过程。方法是预先准备大量运用测试渲染结果的单元测试用例，然后把得到的结果和已有的用例进行比对检测准确性。</p>\n"},{"title":"游览器工作原理：HTML的渲染","url":"272.html","id":"272","date":"2019-08-14T15:36:14.000Z","_content":"\n> 我们已经熟悉JavaScript提供的一套Dom模型和接口来操作网页元素。这篇文章主要解释作为游览器核心的dom部分如何被表示、渲染和处理。\n\nDOM模型\n-----\n\nDOM 是文档对象模型 (Document Object Model) 的缩写。它是 HTML 文档的对象表示，同时也是外部内容（例如 JavaScript）与 HTML 元素之间的接口。 解析树的根节点是“Document”对象。HTML中的Tag也是一种节点，称为元素节点；此外，主要的节点还有属性节点、注释节点等。 DOM 与节点之间几乎是一一对应的关系。比如下面这段HTML：\n\n    <html>\n      <body>\n        <p>\n          Hello World\n        </p>\n        <div> <img src=\"example.png\"/></div>\n      </body>\n    </html>\n\n\n被转移为DOM树的结果是：\n\n                      +---------------------+\n                      |   HTMLHtmlElement   |\n                      +---------+-----------+\n                                |\n                                |\n                                |\n                      +---------+-----------+\n                      |   HTMLBodyElement   |\n                      +---------------------+\n                                X\n                               X X\n                              X   X\n                             X     X\n    +------------------------+      +--------------------+\n    |  HTMLParagraphElement  |      |   HTMLDivElement   |\n    +-------------+----------+      +----------+---------+\n                  |                            |\n                  |                            |\n                  |                            |\n            +-----+----+            +----------+---------+\n            |   Text   |            |  HTMLImageElement  |\n            +----------+            +--------------------+\n\n\n\nHTML解释器\n-------\n\n游览器获取到HTML资源后的整体处理过程如下： ![](http://img.bugzhang.com/20190813234838.png)\n\n# 词法分析\n\n词法解析主要是将字符流转换为词语（tokens）。在webkit内部有一个HTMLTokenizer的类完成词法分析的工作。主要提供一个nextToken方法，这个方法非常复杂，简单描述一下： 这个算法相对于一个状态机。每一个状态接收来自输入信息流的一个或多个字符，并根据这些字符更新下一个状态。当前的标记化状态和树结构状态会影响进入下一状态的决定。这意味着，即使接收的字符相同，对于下一个正确的状态也会产生不同的结果，具体取决于当前的状态。最终输出结果是 HTML Token。 对于以下的一段HTML代码：\n\n    <html>\n      <body>\n        Hello world\n      </body>\n    </html>\n\n\n1.初始状态是**数据状态**。 2.遇到字符 < 时，状态更改为**标记打开状态**。 3.接收一个 a-z 字符会创建**起始标记**，状态更改为**标记名称状态**。这个状态会一直保持到接收 \\> 字符。在此期间接收的每个字符都会附加到新的标记名称上。 4.遇到 > 标记时，会发送当前的标记，状态改回**数据状态**。`<body>` 标记也会进行同样的处理 5.接收到 Hello world 中的 H 字符时，将创建并发送字符标记，直到接收 `</body>` 中的 <。我们将为 Hello world 中的每个字符都发送一个字符标记。 6.接收下一个输入字符 / 时，会创建 end tag token 并改为**标记名称状态**。我们会再次保持这个状态，直到接收 >。然后将发送新的标记，并回到**数据状态**。`</html>` 输入也会进行同样的处理。 ![](http://img.bugzhang.com/20190814152158.png)\n\n# 语法分析\n\n在创建解析器的同时，也会创建 Document 对象。在树构建阶段，以 Document 为根节点的 DOM 树也会不断进行修改，向其中添加各种元素。标记生成器发送的每个节点都会由树构建器进行处理。规范中定义了每个标记所对应的 DOM 元素，这些元素会在接收到相应的标记时创建。这些元素不仅会添加到 DOM 树中，还会添加到开放元素的堆栈中。此堆栈用于纠正嵌套错误和处理未关闭的标记。其算法也可以用状态机来描述。这些状态称为**插入模式**。 然后状态将改为**before head**。此时我们接收`body`标签。即使我们的示例中没有`head`标记，系统也会隐式创建一个 HTMLHeadElement，并将其添加到树中。 现在进入了**in head**模式，然后转入**after head**模式。系统对 body 标记进行重新处理，创建并插入 HTMLBodyElement，同时模式转变为**in body**。 现在，接收由**Hello world** 字符串生成的一系列字符标记。接收第一个字符时会创建并插入**Text**节点，而其他字符也将附加到该节点。 接收 body 结束标记会触发**after body**模式。现在我们将接收 HTML 结束标记，然后进入**after after body**模式。接收到文件结束标记后，解析过程就此结束。 ![](http://img.bugzhang.com/20190814152026.png)\n\n浏览器的容错机制\n--------\n\n在早些年写html的过程中，我经常纳闷为什么我写的很多并不规范，也被正常解析，例如只写了一个`<br>`和`</br>`，用错了标准的标记等等。HTML 网页时从来不会有语法无效的错误。这是因为浏览器会纠正任何无效内容，然后继续工作。 例如以下HTML代码：\n\n    <html>\n      <mytag>\n      </mytag>\n      <div>\n      <p>\n      </div>\n        Really lousy HTML\n      </p>\n    </html>\n\n\n这段代码已经违反了很多语法规则：“mytag”不是标准的标记，“p”和“div”元素之间的嵌套有误等等。但是因为容错机制的存在，浏览器仍然会正确地显示这些内容。 解析器对标记化输入内容进行解析，以构建文档树。如果文档的格式正确，就直接进行解析。 遗憾的是，我们不得不处理很多格式错误的 HTML 文档，所以解析器必须具备一定的容错性。 我们至少要能够处理以下错误情况： 1.明显不能在某些外部标记中添加的元素。在此情况下，我们应该关闭所有标记，直到出现禁止添加的元素，然后再加入该元素。 2.我们不能直接添加的元素。这很可能是网页作者忘记添加了其中的一些标记（或者其中的标记是可选的）。这些标签可能包括：HTML HEAD BODY TBODY TR TD LI（还有遗漏的吗？）。 3.向 inline 元素内添加 block 元素。关闭所有 inline 元素，直到出现下一个较高级的 block 元素。 4.如果这样仍然无效，可关闭所有元素，直到可以添加元素为止，或者忽略该标记。\n\n线程化的解释器\n-------\n\n线程化的解释器就是利用单独的线程来解释 HTML 文档。因为在WebKit中，网络资源的字节流自IO线程传递给渲染线程之后，后面的解释、布局、渲染都工作在该线程。 DOM树必须是单独的线程，但从字节流到tokens的阶段可以由单独的线程去做这个工作，为了提升性能。\n\n* * *\n\n参考： http://www.w3.org/TR/html5/syntax.html#html-parser https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#The\\_HTML\\_grammar_definition","source":"_posts/e6-b8-b8-e8-a7-88-e5-99-a8-e5-b7-a5-e4-bd-9c-e5-8e-9f-e7-90-86-ef-bc-9ahtml-e7-9a-84-e6-b8-b2-e6-9f-93.md","raw":"---\ntitle: 游览器工作原理：HTML的渲染\ntags:\n  - webkit\n  - 游览器\nurl: 272.html\nid: 272\ncategories:\n  - 前端\ndate: 2019-08-14 23:36:14\n---\n\n> 我们已经熟悉JavaScript提供的一套Dom模型和接口来操作网页元素。这篇文章主要解释作为游览器核心的dom部分如何被表示、渲染和处理。\n\nDOM模型\n-----\n\nDOM 是文档对象模型 (Document Object Model) 的缩写。它是 HTML 文档的对象表示，同时也是外部内容（例如 JavaScript）与 HTML 元素之间的接口。 解析树的根节点是“Document”对象。HTML中的Tag也是一种节点，称为元素节点；此外，主要的节点还有属性节点、注释节点等。 DOM 与节点之间几乎是一一对应的关系。比如下面这段HTML：\n\n    <html>\n      <body>\n        <p>\n          Hello World\n        </p>\n        <div> <img src=\"example.png\"/></div>\n      </body>\n    </html>\n\n\n被转移为DOM树的结果是：\n\n                      +---------------------+\n                      |   HTMLHtmlElement   |\n                      +---------+-----------+\n                                |\n                                |\n                                |\n                      +---------+-----------+\n                      |   HTMLBodyElement   |\n                      +---------------------+\n                                X\n                               X X\n                              X   X\n                             X     X\n    +------------------------+      +--------------------+\n    |  HTMLParagraphElement  |      |   HTMLDivElement   |\n    +-------------+----------+      +----------+---------+\n                  |                            |\n                  |                            |\n                  |                            |\n            +-----+----+            +----------+---------+\n            |   Text   |            |  HTMLImageElement  |\n            +----------+            +--------------------+\n\n\n\nHTML解释器\n-------\n\n游览器获取到HTML资源后的整体处理过程如下： ![](http://img.bugzhang.com/20190813234838.png)\n\n# 词法分析\n\n词法解析主要是将字符流转换为词语（tokens）。在webkit内部有一个HTMLTokenizer的类完成词法分析的工作。主要提供一个nextToken方法，这个方法非常复杂，简单描述一下： 这个算法相对于一个状态机。每一个状态接收来自输入信息流的一个或多个字符，并根据这些字符更新下一个状态。当前的标记化状态和树结构状态会影响进入下一状态的决定。这意味着，即使接收的字符相同，对于下一个正确的状态也会产生不同的结果，具体取决于当前的状态。最终输出结果是 HTML Token。 对于以下的一段HTML代码：\n\n    <html>\n      <body>\n        Hello world\n      </body>\n    </html>\n\n\n1.初始状态是**数据状态**。 2.遇到字符 < 时，状态更改为**标记打开状态**。 3.接收一个 a-z 字符会创建**起始标记**，状态更改为**标记名称状态**。这个状态会一直保持到接收 \\> 字符。在此期间接收的每个字符都会附加到新的标记名称上。 4.遇到 > 标记时，会发送当前的标记，状态改回**数据状态**。`<body>` 标记也会进行同样的处理 5.接收到 Hello world 中的 H 字符时，将创建并发送字符标记，直到接收 `</body>` 中的 <。我们将为 Hello world 中的每个字符都发送一个字符标记。 6.接收下一个输入字符 / 时，会创建 end tag token 并改为**标记名称状态**。我们会再次保持这个状态，直到接收 >。然后将发送新的标记，并回到**数据状态**。`</html>` 输入也会进行同样的处理。 ![](http://img.bugzhang.com/20190814152158.png)\n\n# 语法分析\n\n在创建解析器的同时，也会创建 Document 对象。在树构建阶段，以 Document 为根节点的 DOM 树也会不断进行修改，向其中添加各种元素。标记生成器发送的每个节点都会由树构建器进行处理。规范中定义了每个标记所对应的 DOM 元素，这些元素会在接收到相应的标记时创建。这些元素不仅会添加到 DOM 树中，还会添加到开放元素的堆栈中。此堆栈用于纠正嵌套错误和处理未关闭的标记。其算法也可以用状态机来描述。这些状态称为**插入模式**。 然后状态将改为**before head**。此时我们接收`body`标签。即使我们的示例中没有`head`标记，系统也会隐式创建一个 HTMLHeadElement，并将其添加到树中。 现在进入了**in head**模式，然后转入**after head**模式。系统对 body 标记进行重新处理，创建并插入 HTMLBodyElement，同时模式转变为**in body**。 现在，接收由**Hello world** 字符串生成的一系列字符标记。接收第一个字符时会创建并插入**Text**节点，而其他字符也将附加到该节点。 接收 body 结束标记会触发**after body**模式。现在我们将接收 HTML 结束标记，然后进入**after after body**模式。接收到文件结束标记后，解析过程就此结束。 ![](http://img.bugzhang.com/20190814152026.png)\n\n浏览器的容错机制\n--------\n\n在早些年写html的过程中，我经常纳闷为什么我写的很多并不规范，也被正常解析，例如只写了一个`<br>`和`</br>`，用错了标准的标记等等。HTML 网页时从来不会有语法无效的错误。这是因为浏览器会纠正任何无效内容，然后继续工作。 例如以下HTML代码：\n\n    <html>\n      <mytag>\n      </mytag>\n      <div>\n      <p>\n      </div>\n        Really lousy HTML\n      </p>\n    </html>\n\n\n这段代码已经违反了很多语法规则：“mytag”不是标准的标记，“p”和“div”元素之间的嵌套有误等等。但是因为容错机制的存在，浏览器仍然会正确地显示这些内容。 解析器对标记化输入内容进行解析，以构建文档树。如果文档的格式正确，就直接进行解析。 遗憾的是，我们不得不处理很多格式错误的 HTML 文档，所以解析器必须具备一定的容错性。 我们至少要能够处理以下错误情况： 1.明显不能在某些外部标记中添加的元素。在此情况下，我们应该关闭所有标记，直到出现禁止添加的元素，然后再加入该元素。 2.我们不能直接添加的元素。这很可能是网页作者忘记添加了其中的一些标记（或者其中的标记是可选的）。这些标签可能包括：HTML HEAD BODY TBODY TR TD LI（还有遗漏的吗？）。 3.向 inline 元素内添加 block 元素。关闭所有 inline 元素，直到出现下一个较高级的 block 元素。 4.如果这样仍然无效，可关闭所有元素，直到可以添加元素为止，或者忽略该标记。\n\n线程化的解释器\n-------\n\n线程化的解释器就是利用单独的线程来解释 HTML 文档。因为在WebKit中，网络资源的字节流自IO线程传递给渲染线程之后，后面的解释、布局、渲染都工作在该线程。 DOM树必须是单独的线程，但从字节流到tokens的阶段可以由单独的线程去做这个工作，为了提升性能。\n\n* * *\n\n参考： http://www.w3.org/TR/html5/syntax.html#html-parser https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#The\\_HTML\\_grammar_definition","slug":"e6-b8-b8-e8-a7-88-e5-99-a8-e5-b7-a5-e4-bd-9c-e5-8e-9f-e7-90-86-ef-bc-9ahtml-e7-9a-84-e6-b8-b2-e6-9f-93","published":1,"updated":"2020-05-19T08:51:28.571Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts7zg002vzmz8bvcn8p8v","content":"<blockquote>\n<p>我们已经熟悉JavaScript提供的一套Dom模型和接口来操作网页元素。这篇文章主要解释作为游览器核心的dom部分如何被表示、渲染和处理。</p>\n</blockquote>\n<h2 id=\"DOM模型\"><a href=\"#DOM模型\" class=\"headerlink\" title=\"DOM模型\"></a>DOM模型</h2><p>DOM 是文档对象模型 (Document Object Model) 的缩写。它是 HTML 文档的对象表示，同时也是外部内容（例如 JavaScript）与 HTML 元素之间的接口。 解析树的根节点是“Document”对象。HTML中的Tag也是一种节点，称为元素节点；此外，主要的节点还有属性节点、注释节点等。 DOM 与节点之间几乎是一一对应的关系。比如下面这段HTML：</p>\n<pre><code>&lt;html&gt;\n  &lt;body&gt;\n    &lt;p&gt;\n      Hello World\n    &lt;/p&gt;\n    &lt;div&gt; &lt;img src=&quot;example.png&quot;/&gt;&lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre><p>被转移为DOM树的结果是：</p>\n<pre><code>                  +---------------------+\n                  |   HTMLHtmlElement   |\n                  +---------+-----------+\n                            |\n                            |\n                            |\n                  +---------+-----------+\n                  |   HTMLBodyElement   |\n                  +---------------------+\n                            X\n                           X X\n                          X   X\n                         X     X\n+------------------------+      +--------------------+\n|  HTMLParagraphElement  |      |   HTMLDivElement   |\n+-------------+----------+      +----------+---------+\n              |                            |\n              |                            |\n              |                            |\n        +-----+----+            +----------+---------+\n        |   Text   |            |  HTMLImageElement  |\n        +----------+            +--------------------+</code></pre><h2 id=\"HTML解释器\"><a href=\"#HTML解释器\" class=\"headerlink\" title=\"HTML解释器\"></a>HTML解释器</h2><p>游览器获取到HTML资源后的整体处理过程如下： <img src=\"http://img.bugzhang.com/20190813234838.png\" alt=\"\"></p>\n<h1 id=\"词法分析\"><a href=\"#词法分析\" class=\"headerlink\" title=\"词法分析\"></a>词法分析</h1><p>词法解析主要是将字符流转换为词语（tokens）。在webkit内部有一个HTMLTokenizer的类完成词法分析的工作。主要提供一个nextToken方法，这个方法非常复杂，简单描述一下： 这个算法相对于一个状态机。每一个状态接收来自输入信息流的一个或多个字符，并根据这些字符更新下一个状态。当前的标记化状态和树结构状态会影响进入下一状态的决定。这意味着，即使接收的字符相同，对于下一个正确的状态也会产生不同的结果，具体取决于当前的状态。最终输出结果是 HTML Token。 对于以下的一段HTML代码：</p>\n<pre><code>&lt;html&gt;\n  &lt;body&gt;\n    Hello world\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre><p>1.初始状态是<strong>数据状态</strong>。 2.遇到字符 &lt; 时，状态更改为<strong>标记打开状态</strong>。 3.接收一个 a-z 字符会创建<strong>起始标记</strong>，状态更改为<strong>标记名称状态</strong>。这个状态会一直保持到接收 &gt; 字符。在此期间接收的每个字符都会附加到新的标记名称上。 4.遇到 &gt; 标记时，会发送当前的标记，状态改回<strong>数据状态</strong>。<code>&lt;body&gt;</code> 标记也会进行同样的处理 5.接收到 Hello world 中的 H 字符时，将创建并发送字符标记，直到接收 <code>&lt;/body&gt;</code> 中的 &lt;。我们将为 Hello world 中的每个字符都发送一个字符标记。 6.接收下一个输入字符 / 时，会创建 end tag token 并改为<strong>标记名称状态</strong>。我们会再次保持这个状态，直到接收 &gt;。然后将发送新的标记，并回到<strong>数据状态</strong>。<code>&lt;/html&gt;</code> 输入也会进行同样的处理。 <img src=\"http://img.bugzhang.com/20190814152158.png\" alt=\"\"></p>\n<h1 id=\"语法分析\"><a href=\"#语法分析\" class=\"headerlink\" title=\"语法分析\"></a>语法分析</h1><p>在创建解析器的同时，也会创建 Document 对象。在树构建阶段，以 Document 为根节点的 DOM 树也会不断进行修改，向其中添加各种元素。标记生成器发送的每个节点都会由树构建器进行处理。规范中定义了每个标记所对应的 DOM 元素，这些元素会在接收到相应的标记时创建。这些元素不仅会添加到 DOM 树中，还会添加到开放元素的堆栈中。此堆栈用于纠正嵌套错误和处理未关闭的标记。其算法也可以用状态机来描述。这些状态称为<strong>插入模式</strong>。 然后状态将改为<strong>before head</strong>。此时我们接收<code>body</code>标签。即使我们的示例中没有<code>head</code>标记，系统也会隐式创建一个 HTMLHeadElement，并将其添加到树中。 现在进入了<strong>in head</strong>模式，然后转入<strong>after head</strong>模式。系统对 body 标记进行重新处理，创建并插入 HTMLBodyElement，同时模式转变为<strong>in body</strong>。 现在，接收由<strong>Hello world</strong> 字符串生成的一系列字符标记。接收第一个字符时会创建并插入<strong>Text</strong>节点，而其他字符也将附加到该节点。 接收 body 结束标记会触发<strong>after body</strong>模式。现在我们将接收 HTML 结束标记，然后进入<strong>after after body</strong>模式。接收到文件结束标记后，解析过程就此结束。 <img src=\"http://img.bugzhang.com/20190814152026.png\" alt=\"\"></p>\n<h2 id=\"浏览器的容错机制\"><a href=\"#浏览器的容错机制\" class=\"headerlink\" title=\"浏览器的容错机制\"></a>浏览器的容错机制</h2><p>在早些年写html的过程中，我经常纳闷为什么我写的很多并不规范，也被正常解析，例如只写了一个<code>&lt;br&gt;</code>和<code>&lt;/br&gt;</code>，用错了标准的标记等等。HTML 网页时从来不会有语法无效的错误。这是因为浏览器会纠正任何无效内容，然后继续工作。 例如以下HTML代码：</p>\n<pre><code>&lt;html&gt;\n  &lt;mytag&gt;\n  &lt;/mytag&gt;\n  &lt;div&gt;\n  &lt;p&gt;\n  &lt;/div&gt;\n    Really lousy HTML\n  &lt;/p&gt;\n&lt;/html&gt;</code></pre><p>这段代码已经违反了很多语法规则：“mytag”不是标准的标记，“p”和“div”元素之间的嵌套有误等等。但是因为容错机制的存在，浏览器仍然会正确地显示这些内容。 解析器对标记化输入内容进行解析，以构建文档树。如果文档的格式正确，就直接进行解析。 遗憾的是，我们不得不处理很多格式错误的 HTML 文档，所以解析器必须具备一定的容错性。 我们至少要能够处理以下错误情况： 1.明显不能在某些外部标记中添加的元素。在此情况下，我们应该关闭所有标记，直到出现禁止添加的元素，然后再加入该元素。 2.我们不能直接添加的元素。这很可能是网页作者忘记添加了其中的一些标记（或者其中的标记是可选的）。这些标签可能包括：HTML HEAD BODY TBODY TR TD LI（还有遗漏的吗？）。 3.向 inline 元素内添加 block 元素。关闭所有 inline 元素，直到出现下一个较高级的 block 元素。 4.如果这样仍然无效，可关闭所有元素，直到可以添加元素为止，或者忽略该标记。</p>\n<h2 id=\"线程化的解释器\"><a href=\"#线程化的解释器\" class=\"headerlink\" title=\"线程化的解释器\"></a>线程化的解释器</h2><p>线程化的解释器就是利用单独的线程来解释 HTML 文档。因为在WebKit中，网络资源的字节流自IO线程传递给渲染线程之后，后面的解释、布局、渲染都工作在该线程。 DOM树必须是单独的线程，但从字节流到tokens的阶段可以由单独的线程去做这个工作，为了提升性能。</p>\n<hr>\n<p>参考： <a href=\"http://www.w3.org/TR/html5/syntax.html#html-parser\" target=\"_blank\" rel=\"noopener\">http://www.w3.org/TR/html5/syntax.html#html-parser</a> <a href=\"https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#The\\_HTML\\_grammar_definition\" target=\"_blank\" rel=\"noopener\">https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#The\\_HTML\\_grammar_definition</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>我们已经熟悉JavaScript提供的一套Dom模型和接口来操作网页元素。这篇文章主要解释作为游览器核心的dom部分如何被表示、渲染和处理。</p>\n</blockquote>\n<h2 id=\"DOM模型\"><a href=\"#DOM模型\" class=\"headerlink\" title=\"DOM模型\"></a>DOM模型</h2><p>DOM 是文档对象模型 (Document Object Model) 的缩写。它是 HTML 文档的对象表示，同时也是外部内容（例如 JavaScript）与 HTML 元素之间的接口。 解析树的根节点是“Document”对象。HTML中的Tag也是一种节点，称为元素节点；此外，主要的节点还有属性节点、注释节点等。 DOM 与节点之间几乎是一一对应的关系。比如下面这段HTML：</p>\n<pre><code>&lt;html&gt;\n  &lt;body&gt;\n    &lt;p&gt;\n      Hello World\n    &lt;/p&gt;\n    &lt;div&gt; &lt;img src=&quot;example.png&quot;/&gt;&lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre><p>被转移为DOM树的结果是：</p>\n<pre><code>                  +---------------------+\n                  |   HTMLHtmlElement   |\n                  +---------+-----------+\n                            |\n                            |\n                            |\n                  +---------+-----------+\n                  |   HTMLBodyElement   |\n                  +---------------------+\n                            X\n                           X X\n                          X   X\n                         X     X\n+------------------------+      +--------------------+\n|  HTMLParagraphElement  |      |   HTMLDivElement   |\n+-------------+----------+      +----------+---------+\n              |                            |\n              |                            |\n              |                            |\n        +-----+----+            +----------+---------+\n        |   Text   |            |  HTMLImageElement  |\n        +----------+            +--------------------+</code></pre><h2 id=\"HTML解释器\"><a href=\"#HTML解释器\" class=\"headerlink\" title=\"HTML解释器\"></a>HTML解释器</h2><p>游览器获取到HTML资源后的整体处理过程如下： <img src=\"http://img.bugzhang.com/20190813234838.png\" alt=\"\"></p>\n<h1 id=\"词法分析\"><a href=\"#词法分析\" class=\"headerlink\" title=\"词法分析\"></a>词法分析</h1><p>词法解析主要是将字符流转换为词语（tokens）。在webkit内部有一个HTMLTokenizer的类完成词法分析的工作。主要提供一个nextToken方法，这个方法非常复杂，简单描述一下： 这个算法相对于一个状态机。每一个状态接收来自输入信息流的一个或多个字符，并根据这些字符更新下一个状态。当前的标记化状态和树结构状态会影响进入下一状态的决定。这意味着，即使接收的字符相同，对于下一个正确的状态也会产生不同的结果，具体取决于当前的状态。最终输出结果是 HTML Token。 对于以下的一段HTML代码：</p>\n<pre><code>&lt;html&gt;\n  &lt;body&gt;\n    Hello world\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre><p>1.初始状态是<strong>数据状态</strong>。 2.遇到字符 &lt; 时，状态更改为<strong>标记打开状态</strong>。 3.接收一个 a-z 字符会创建<strong>起始标记</strong>，状态更改为<strong>标记名称状态</strong>。这个状态会一直保持到接收 &gt; 字符。在此期间接收的每个字符都会附加到新的标记名称上。 4.遇到 &gt; 标记时，会发送当前的标记，状态改回<strong>数据状态</strong>。<code>&lt;body&gt;</code> 标记也会进行同样的处理 5.接收到 Hello world 中的 H 字符时，将创建并发送字符标记，直到接收 <code>&lt;/body&gt;</code> 中的 &lt;。我们将为 Hello world 中的每个字符都发送一个字符标记。 6.接收下一个输入字符 / 时，会创建 end tag token 并改为<strong>标记名称状态</strong>。我们会再次保持这个状态，直到接收 &gt;。然后将发送新的标记，并回到<strong>数据状态</strong>。<code>&lt;/html&gt;</code> 输入也会进行同样的处理。 <img src=\"http://img.bugzhang.com/20190814152158.png\" alt=\"\"></p>\n<h1 id=\"语法分析\"><a href=\"#语法分析\" class=\"headerlink\" title=\"语法分析\"></a>语法分析</h1><p>在创建解析器的同时，也会创建 Document 对象。在树构建阶段，以 Document 为根节点的 DOM 树也会不断进行修改，向其中添加各种元素。标记生成器发送的每个节点都会由树构建器进行处理。规范中定义了每个标记所对应的 DOM 元素，这些元素会在接收到相应的标记时创建。这些元素不仅会添加到 DOM 树中，还会添加到开放元素的堆栈中。此堆栈用于纠正嵌套错误和处理未关闭的标记。其算法也可以用状态机来描述。这些状态称为<strong>插入模式</strong>。 然后状态将改为<strong>before head</strong>。此时我们接收<code>body</code>标签。即使我们的示例中没有<code>head</code>标记，系统也会隐式创建一个 HTMLHeadElement，并将其添加到树中。 现在进入了<strong>in head</strong>模式，然后转入<strong>after head</strong>模式。系统对 body 标记进行重新处理，创建并插入 HTMLBodyElement，同时模式转变为<strong>in body</strong>。 现在，接收由<strong>Hello world</strong> 字符串生成的一系列字符标记。接收第一个字符时会创建并插入<strong>Text</strong>节点，而其他字符也将附加到该节点。 接收 body 结束标记会触发<strong>after body</strong>模式。现在我们将接收 HTML 结束标记，然后进入<strong>after after body</strong>模式。接收到文件结束标记后，解析过程就此结束。 <img src=\"http://img.bugzhang.com/20190814152026.png\" alt=\"\"></p>\n<h2 id=\"浏览器的容错机制\"><a href=\"#浏览器的容错机制\" class=\"headerlink\" title=\"浏览器的容错机制\"></a>浏览器的容错机制</h2><p>在早些年写html的过程中，我经常纳闷为什么我写的很多并不规范，也被正常解析，例如只写了一个<code>&lt;br&gt;</code>和<code>&lt;/br&gt;</code>，用错了标准的标记等等。HTML 网页时从来不会有语法无效的错误。这是因为浏览器会纠正任何无效内容，然后继续工作。 例如以下HTML代码：</p>\n<pre><code>&lt;html&gt;\n  &lt;mytag&gt;\n  &lt;/mytag&gt;\n  &lt;div&gt;\n  &lt;p&gt;\n  &lt;/div&gt;\n    Really lousy HTML\n  &lt;/p&gt;\n&lt;/html&gt;</code></pre><p>这段代码已经违反了很多语法规则：“mytag”不是标准的标记，“p”和“div”元素之间的嵌套有误等等。但是因为容错机制的存在，浏览器仍然会正确地显示这些内容。 解析器对标记化输入内容进行解析，以构建文档树。如果文档的格式正确，就直接进行解析。 遗憾的是，我们不得不处理很多格式错误的 HTML 文档，所以解析器必须具备一定的容错性。 我们至少要能够处理以下错误情况： 1.明显不能在某些外部标记中添加的元素。在此情况下，我们应该关闭所有标记，直到出现禁止添加的元素，然后再加入该元素。 2.我们不能直接添加的元素。这很可能是网页作者忘记添加了其中的一些标记（或者其中的标记是可选的）。这些标签可能包括：HTML HEAD BODY TBODY TR TD LI（还有遗漏的吗？）。 3.向 inline 元素内添加 block 元素。关闭所有 inline 元素，直到出现下一个较高级的 block 元素。 4.如果这样仍然无效，可关闭所有元素，直到可以添加元素为止，或者忽略该标记。</p>\n<h2 id=\"线程化的解释器\"><a href=\"#线程化的解释器\" class=\"headerlink\" title=\"线程化的解释器\"></a>线程化的解释器</h2><p>线程化的解释器就是利用单独的线程来解释 HTML 文档。因为在WebKit中，网络资源的字节流自IO线程传递给渲染线程之后，后面的解释、布局、渲染都工作在该线程。 DOM树必须是单独的线程，但从字节流到tokens的阶段可以由单独的线程去做这个工作，为了提升性能。</p>\n<hr>\n<p>参考： <a href=\"http://www.w3.org/TR/html5/syntax.html#html-parser\" target=\"_blank\" rel=\"noopener\">http://www.w3.org/TR/html5/syntax.html#html-parser</a> <a href=\"https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#The\\_HTML\\_grammar_definition\" target=\"_blank\" rel=\"noopener\">https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#The\\_HTML\\_grammar_definition</a></p>\n"},{"title":"留言板","url":"152.html","id":"152","date":"2014-02-17T17:02:48.000Z","_content":"\n大家随意，晚安。","source":"_posts/e7-95-99-e8-a8-80-e6-9d-bf.md","raw":"---\ntitle: 留言板\nurl: 152.html\nid: 152\ncategories:\n  - 未分类\ndate: 2014-02-18 01:02:48\ntags:\n---\n\n大家随意，晚安。","slug":"e7-95-99-e8-a8-80-e6-9d-bf","published":1,"updated":"2020-05-19T08:33:55.922Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts7zj002zzmz897wq550r","content":"<p>大家随意，晚安。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>大家随意，晚安。</p>\n"},{"title":"网易面试","url":"60.html","id":"60","date":"2017-09-23T15:15:06.000Z","_content":"\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0042.jpg)\n\n# 一面（1小时）\n\n1.自我介绍。 2.问项目，问实习。 3.indexDB，cookie,localStorage,sessionStorage区别。 4.游览器缓存机制。就是HTTP相关字段的解释。 6.js合并后与合并前哪个快，也就是一个`&lt;script&gt;`标签与两个情况下，哪个更快。第一反应合并后，说合并后减少http请求，后边反应过来说不一定，看script位置，如果在head里优先于css与dom加载了的话，会阻塞影响的，同时还说了游览器引擎渲染过程这些分析了，然后提到了defer异步，被问除了defer还有什么，说了async，被问区别。然后面试官说只考虑理想情况，都是正常些都在Body底部，那个快？我坚持的认为合并后快，但面试官说http是同步多线程的，所以多个请求。 7.HTTP请求报文结构，当年腾讯实习生招聘问我这个没答好，回去看了HTTP权威指南，所以说了一部分后追问真实HTTP是怎么区分各个字段的，我说换行，那冒号呢？这个不懂了。 8.事件绑定的原理，冒泡与捕获概念以及API。 9.手写代码，封装一个事件处理函数。 10.点击input事件传播的全过程，除了focus,blur,click想不起来了。 11.简单定位问题，修改后的定位，思考几秒后没想出来（其实很简单），然后面试官问你是不是CSS不好，我说是的不擅长CSS。 12.CSS画三角形。 13.box-sizing。 14.z-index，追问了何时生效，我说我用的时候position是absolute的，只知道肯定有定位条件具体什么不清楚。后来查了是被定位了的元素才会生效。 15.看过那些前端书籍。听完面试官说你一本css都没看过，怪不得css不好。 16.面试结束，有没有问题问。我问网易智能与感知中心做什么工作，期间聊到了对人工智能，VR、AR的认知。面试官建议学好JS基础同时也适当注重下CSS，找本书看看。\n\n# 二面（30分钟）\n\n1.自我介绍。 2.项目介绍。 3.SEO。第一次遇上问SEO，大概说了一些SEO基础后，聊到SPA的SEO怎么优化，结果自己带了个坑说了SSR，然后被问有没有做过SSR，没做过。 4.前端跨域，从同源机制聊到六种跨域方法基本全了。提了CSRF与XSS没讲细节。 5.又问了一次游览器缓存机制。比第一次说的全了一些。 6.谈谈前端工程化理解，答得挺全的，遗憾忘记提ES6，其实我倒是希望被问ES6的问题，前段时间一直写ES6除了个别不常见api外，ES6很熟悉了。 7.又问了一次box-sizing。 8.看了那些书。 9.啥时候学前端的，怎么学的。 10.解释下原型链，两句话说完我感觉说的有点少，然后重说了一次还是两句话。 11.有没有问题要问。我表示惊讶的说这么快。然后问了部门用技术栈，用的工具，人工智能团队前端的业务。后来面试官还给出建议，说我知道的已经很全面，但表述上存在问题，首先声音太小虽然我听的懂，此外说的太快中间不停顿，无法get重点，建议增加下表述条理性。然后面试官介绍说他们用自己开发的regular框架.","source":"_posts/e7-bd-91-e6-98-93-e9-9d-a2-e8-af-95.md","raw":"---\ntitle: 网易面试\ntags:\n  - 面试\nurl: 60.html\nid: 60\ncategories:\n  - 面试\ndate: 2017-09-23 23:15:06\n---\n\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0042.jpg)\n\n# 一面（1小时）\n\n1.自我介绍。 2.问项目，问实习。 3.indexDB，cookie,localStorage,sessionStorage区别。 4.游览器缓存机制。就是HTTP相关字段的解释。 6.js合并后与合并前哪个快，也就是一个`&lt;script&gt;`标签与两个情况下，哪个更快。第一反应合并后，说合并后减少http请求，后边反应过来说不一定，看script位置，如果在head里优先于css与dom加载了的话，会阻塞影响的，同时还说了游览器引擎渲染过程这些分析了，然后提到了defer异步，被问除了defer还有什么，说了async，被问区别。然后面试官说只考虑理想情况，都是正常些都在Body底部，那个快？我坚持的认为合并后快，但面试官说http是同步多线程的，所以多个请求。 7.HTTP请求报文结构，当年腾讯实习生招聘问我这个没答好，回去看了HTTP权威指南，所以说了一部分后追问真实HTTP是怎么区分各个字段的，我说换行，那冒号呢？这个不懂了。 8.事件绑定的原理，冒泡与捕获概念以及API。 9.手写代码，封装一个事件处理函数。 10.点击input事件传播的全过程，除了focus,blur,click想不起来了。 11.简单定位问题，修改后的定位，思考几秒后没想出来（其实很简单），然后面试官问你是不是CSS不好，我说是的不擅长CSS。 12.CSS画三角形。 13.box-sizing。 14.z-index，追问了何时生效，我说我用的时候position是absolute的，只知道肯定有定位条件具体什么不清楚。后来查了是被定位了的元素才会生效。 15.看过那些前端书籍。听完面试官说你一本css都没看过，怪不得css不好。 16.面试结束，有没有问题问。我问网易智能与感知中心做什么工作，期间聊到了对人工智能，VR、AR的认知。面试官建议学好JS基础同时也适当注重下CSS，找本书看看。\n\n# 二面（30分钟）\n\n1.自我介绍。 2.项目介绍。 3.SEO。第一次遇上问SEO，大概说了一些SEO基础后，聊到SPA的SEO怎么优化，结果自己带了个坑说了SSR，然后被问有没有做过SSR，没做过。 4.前端跨域，从同源机制聊到六种跨域方法基本全了。提了CSRF与XSS没讲细节。 5.又问了一次游览器缓存机制。比第一次说的全了一些。 6.谈谈前端工程化理解，答得挺全的，遗憾忘记提ES6，其实我倒是希望被问ES6的问题，前段时间一直写ES6除了个别不常见api外，ES6很熟悉了。 7.又问了一次box-sizing。 8.看了那些书。 9.啥时候学前端的，怎么学的。 10.解释下原型链，两句话说完我感觉说的有点少，然后重说了一次还是两句话。 11.有没有问题要问。我表示惊讶的说这么快。然后问了部门用技术栈，用的工具，人工智能团队前端的业务。后来面试官还给出建议，说我知道的已经很全面，但表述上存在问题，首先声音太小虽然我听的懂，此外说的太快中间不停顿，无法get重点，建议增加下表述条理性。然后面试官介绍说他们用自己开发的regular框架.","slug":"e7-bd-91-e6-98-93-e9-9d-a2-e8-af-95","published":1,"updated":"2020-05-19T08:51:28.569Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts7zk0032zmz80pr80clq","content":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0042.jpg\" alt=\"\"></p>\n<h1 id=\"一面（1小时）\"><a href=\"#一面（1小时）\" class=\"headerlink\" title=\"一面（1小时）\"></a>一面（1小时）</h1><p>1.自我介绍。 2.问项目，问实习。 3.indexDB，cookie,localStorage,sessionStorage区别。 4.游览器缓存机制。就是HTTP相关字段的解释。 6.js合并后与合并前哪个快，也就是一个<code>&amp;lt;script&amp;gt;</code>标签与两个情况下，哪个更快。第一反应合并后，说合并后减少http请求，后边反应过来说不一定，看script位置，如果在head里优先于css与dom加载了的话，会阻塞影响的，同时还说了游览器引擎渲染过程这些分析了，然后提到了defer异步，被问除了defer还有什么，说了async，被问区别。然后面试官说只考虑理想情况，都是正常些都在Body底部，那个快？我坚持的认为合并后快，但面试官说http是同步多线程的，所以多个请求。 7.HTTP请求报文结构，当年腾讯实习生招聘问我这个没答好，回去看了HTTP权威指南，所以说了一部分后追问真实HTTP是怎么区分各个字段的，我说换行，那冒号呢？这个不懂了。 8.事件绑定的原理，冒泡与捕获概念以及API。 9.手写代码，封装一个事件处理函数。 10.点击input事件传播的全过程，除了focus,blur,click想不起来了。 11.简单定位问题，修改后的定位，思考几秒后没想出来（其实很简单），然后面试官问你是不是CSS不好，我说是的不擅长CSS。 12.CSS画三角形。 13.box-sizing。 14.z-index，追问了何时生效，我说我用的时候position是absolute的，只知道肯定有定位条件具体什么不清楚。后来查了是被定位了的元素才会生效。 15.看过那些前端书籍。听完面试官说你一本css都没看过，怪不得css不好。 16.面试结束，有没有问题问。我问网易智能与感知中心做什么工作，期间聊到了对人工智能，VR、AR的认知。面试官建议学好JS基础同时也适当注重下CSS，找本书看看。</p>\n<h1 id=\"二面（30分钟）\"><a href=\"#二面（30分钟）\" class=\"headerlink\" title=\"二面（30分钟）\"></a>二面（30分钟）</h1><p>1.自我介绍。 2.项目介绍。 3.SEO。第一次遇上问SEO，大概说了一些SEO基础后，聊到SPA的SEO怎么优化，结果自己带了个坑说了SSR，然后被问有没有做过SSR，没做过。 4.前端跨域，从同源机制聊到六种跨域方法基本全了。提了CSRF与XSS没讲细节。 5.又问了一次游览器缓存机制。比第一次说的全了一些。 6.谈谈前端工程化理解，答得挺全的，遗憾忘记提ES6，其实我倒是希望被问ES6的问题，前段时间一直写ES6除了个别不常见api外，ES6很熟悉了。 7.又问了一次box-sizing。 8.看了那些书。 9.啥时候学前端的，怎么学的。 10.解释下原型链，两句话说完我感觉说的有点少，然后重说了一次还是两句话。 11.有没有问题要问。我表示惊讶的说这么快。然后问了部门用技术栈，用的工具，人工智能团队前端的业务。后来面试官还给出建议，说我知道的已经很全面，但表述上存在问题，首先声音太小虽然我听的懂，此外说的太快中间不停顿，无法get重点，建议增加下表述条理性。然后面试官介绍说他们用自己开发的regular框架.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0042.jpg\" alt=\"\"></p>\n<h1 id=\"一面（1小时）\"><a href=\"#一面（1小时）\" class=\"headerlink\" title=\"一面（1小时）\"></a>一面（1小时）</h1><p>1.自我介绍。 2.问项目，问实习。 3.indexDB，cookie,localStorage,sessionStorage区别。 4.游览器缓存机制。就是HTTP相关字段的解释。 6.js合并后与合并前哪个快，也就是一个<code>&amp;lt;script&amp;gt;</code>标签与两个情况下，哪个更快。第一反应合并后，说合并后减少http请求，后边反应过来说不一定，看script位置，如果在head里优先于css与dom加载了的话，会阻塞影响的，同时还说了游览器引擎渲染过程这些分析了，然后提到了defer异步，被问除了defer还有什么，说了async，被问区别。然后面试官说只考虑理想情况，都是正常些都在Body底部，那个快？我坚持的认为合并后快，但面试官说http是同步多线程的，所以多个请求。 7.HTTP请求报文结构，当年腾讯实习生招聘问我这个没答好，回去看了HTTP权威指南，所以说了一部分后追问真实HTTP是怎么区分各个字段的，我说换行，那冒号呢？这个不懂了。 8.事件绑定的原理，冒泡与捕获概念以及API。 9.手写代码，封装一个事件处理函数。 10.点击input事件传播的全过程，除了focus,blur,click想不起来了。 11.简单定位问题，修改后的定位，思考几秒后没想出来（其实很简单），然后面试官问你是不是CSS不好，我说是的不擅长CSS。 12.CSS画三角形。 13.box-sizing。 14.z-index，追问了何时生效，我说我用的时候position是absolute的，只知道肯定有定位条件具体什么不清楚。后来查了是被定位了的元素才会生效。 15.看过那些前端书籍。听完面试官说你一本css都没看过，怪不得css不好。 16.面试结束，有没有问题问。我问网易智能与感知中心做什么工作，期间聊到了对人工智能，VR、AR的认知。面试官建议学好JS基础同时也适当注重下CSS，找本书看看。</p>\n<h1 id=\"二面（30分钟）\"><a href=\"#二面（30分钟）\" class=\"headerlink\" title=\"二面（30分钟）\"></a>二面（30分钟）</h1><p>1.自我介绍。 2.项目介绍。 3.SEO。第一次遇上问SEO，大概说了一些SEO基础后，聊到SPA的SEO怎么优化，结果自己带了个坑说了SSR，然后被问有没有做过SSR，没做过。 4.前端跨域，从同源机制聊到六种跨域方法基本全了。提了CSRF与XSS没讲细节。 5.又问了一次游览器缓存机制。比第一次说的全了一些。 6.谈谈前端工程化理解，答得挺全的，遗憾忘记提ES6，其实我倒是希望被问ES6的问题，前段时间一直写ES6除了个别不常见api外，ES6很熟悉了。 7.又问了一次box-sizing。 8.看了那些书。 9.啥时候学前端的，怎么学的。 10.解释下原型链，两句话说完我感觉说的有点少，然后重说了一次还是两句话。 11.有没有问题要问。我表示惊讶的说这么快。然后问了部门用技术栈，用的工具，人工智能团队前端的业务。后来面试官还给出建议，说我知道的已经很全面，但表述上存在问题，首先声音太小虽然我听的懂，此外说的太快中间不停顿，无法get重点，建议增加下表述条理性。然后面试官介绍说他们用自己开发的regular框架.</p>\n"},{"title":"美团校招面试","url":"85.html","id":"85","date":"2017-10-15T12:11:46.000Z","_content":"\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0050.jpg)\n\n一面\n==\n\n1.vue组件通信 2.spa应用，v-dom，diff算法，mvvm，组件化开发 3.水平垂直居中 4.margin坍塌 5.事件模型，捕获与冒泡，哪些事件没有冒泡，没有冒泡的原因是什么 6.事件代理，中间一个不需要事件怎么办，代理的元素内部还有元素怎么办 7.input事件传播 8.tcp过程，http过程，两者啥关系 9.http报文组成，讲了大概二十个字段，很多被问的很细，比如cookie设置哪些，生命周期，http-only，又追问xss。connection取值。缓存机制相关的，哪些字段是游览器缓存哪些是代理服务器缓存优先级如何。（当年实习招聘腾讯问我这个问题，我答得很烂葬送了腾讯实习机会，后来把HTTP弄了个熟，看了遍HTTP权威指南） 10.node的Stream和Buffer区别。 11.跨域问题。手写jsonp。说说代理服务器具体那种。 12.原型链，当时没讲太清楚，面试官没理解，后边面试官说，算了，我觉得你应该搞懂原型链是啥，你讲讲{},\\[\\],Array,Object这死者啥关系吧 12.原型A，原型B，让C继承A也继承B。 13.咋学习的\n\n二面\n==\n\n就三个问题面了一个小时 1.怼了半天项目。具体问了项目里的前端优化，然后我说完方案后问原理，问websocket原理，lasyload组件咋设计，考虑哪些因素，你最后优化了多少，首屏加载时间怎么算出来的。最后你这个内部方法单元测试用例怎么写。这个被怼的很惨。 2.网页上边出现广告的现象见没见过，什么原因。我说不知道，面试官说XSS可以实现不，我说肯定可以的。又问了问xss的东西，后来他说是不是XSS，我说肯定不是，之后引导我思考url全过程，会在哪一步出现问题，就猜想是改DNS，然后说运营商搞的。DNS,UDP,HTTP,HTTPS,IP等一系列网络协议从原理到作用和细节问了个遍。我说是不是DNS劫持，后面试官说你推测是对的，想想怎么解决这个问题，不会。回去你可以查一查。 3.给了个作用域和this的题","source":"_posts/e7-be-8e-e5-9b-a2-e6-a0-a1-e6-8b-9b-e9-9d-a2-e8-af-95.md","raw":"---\ntitle: 美团校招面试\ntags:\n  - 面试\nurl: 85.html\nid: 85\ncategories:\n  - 面试\ndate: 2017-10-15 20:11:46\n---\n\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0050.jpg)\n\n一面\n==\n\n1.vue组件通信 2.spa应用，v-dom，diff算法，mvvm，组件化开发 3.水平垂直居中 4.margin坍塌 5.事件模型，捕获与冒泡，哪些事件没有冒泡，没有冒泡的原因是什么 6.事件代理，中间一个不需要事件怎么办，代理的元素内部还有元素怎么办 7.input事件传播 8.tcp过程，http过程，两者啥关系 9.http报文组成，讲了大概二十个字段，很多被问的很细，比如cookie设置哪些，生命周期，http-only，又追问xss。connection取值。缓存机制相关的，哪些字段是游览器缓存哪些是代理服务器缓存优先级如何。（当年实习招聘腾讯问我这个问题，我答得很烂葬送了腾讯实习机会，后来把HTTP弄了个熟，看了遍HTTP权威指南） 10.node的Stream和Buffer区别。 11.跨域问题。手写jsonp。说说代理服务器具体那种。 12.原型链，当时没讲太清楚，面试官没理解，后边面试官说，算了，我觉得你应该搞懂原型链是啥，你讲讲{},\\[\\],Array,Object这死者啥关系吧 12.原型A，原型B，让C继承A也继承B。 13.咋学习的\n\n二面\n==\n\n就三个问题面了一个小时 1.怼了半天项目。具体问了项目里的前端优化，然后我说完方案后问原理，问websocket原理，lasyload组件咋设计，考虑哪些因素，你最后优化了多少，首屏加载时间怎么算出来的。最后你这个内部方法单元测试用例怎么写。这个被怼的很惨。 2.网页上边出现广告的现象见没见过，什么原因。我说不知道，面试官说XSS可以实现不，我说肯定可以的。又问了问xss的东西，后来他说是不是XSS，我说肯定不是，之后引导我思考url全过程，会在哪一步出现问题，就猜想是改DNS，然后说运营商搞的。DNS,UDP,HTTP,HTTPS,IP等一系列网络协议从原理到作用和细节问了个遍。我说是不是DNS劫持，后面试官说你推测是对的，想想怎么解决这个问题，不会。回去你可以查一查。 3.给了个作用域和this的题","slug":"e7-be-8e-e5-9b-a2-e6-a0-a1-e6-8b-9b-e9-9d-a2-e8-af-95","published":1,"updated":"2020-05-19T08:33:55.926Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts7zm0036zmz8bi3w5ljj","content":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0050.jpg\" alt=\"\"></p>\n<h1 id=\"一面\"><a href=\"#一面\" class=\"headerlink\" title=\"一面\"></a>一面</h1><p>1.vue组件通信 2.spa应用，v-dom，diff算法，mvvm，组件化开发 3.水平垂直居中 4.margin坍塌 5.事件模型，捕获与冒泡，哪些事件没有冒泡，没有冒泡的原因是什么 6.事件代理，中间一个不需要事件怎么办，代理的元素内部还有元素怎么办 7.input事件传播 8.tcp过程，http过程，两者啥关系 9.http报文组成，讲了大概二十个字段，很多被问的很细，比如cookie设置哪些，生命周期，http-only，又追问xss。connection取值。缓存机制相关的，哪些字段是游览器缓存哪些是代理服务器缓存优先级如何。（当年实习招聘腾讯问我这个问题，我答得很烂葬送了腾讯实习机会，后来把HTTP弄了个熟，看了遍HTTP权威指南） 10.node的Stream和Buffer区别。 11.跨域问题。手写jsonp。说说代理服务器具体那种。 12.原型链，当时没讲太清楚，面试官没理解，后边面试官说，算了，我觉得你应该搞懂原型链是啥，你讲讲{},[],Array,Object这死者啥关系吧 12.原型A，原型B，让C继承A也继承B。 13.咋学习的</p>\n<h1 id=\"二面\"><a href=\"#二面\" class=\"headerlink\" title=\"二面\"></a>二面</h1><p>就三个问题面了一个小时 1.怼了半天项目。具体问了项目里的前端优化，然后我说完方案后问原理，问websocket原理，lasyload组件咋设计，考虑哪些因素，你最后优化了多少，首屏加载时间怎么算出来的。最后你这个内部方法单元测试用例怎么写。这个被怼的很惨。 2.网页上边出现广告的现象见没见过，什么原因。我说不知道，面试官说XSS可以实现不，我说肯定可以的。又问了问xss的东西，后来他说是不是XSS，我说肯定不是，之后引导我思考url全过程，会在哪一步出现问题，就猜想是改DNS，然后说运营商搞的。DNS,UDP,HTTP,HTTPS,IP等一系列网络协议从原理到作用和细节问了个遍。我说是不是DNS劫持，后面试官说你推测是对的，想想怎么解决这个问题，不会。回去你可以查一查。 3.给了个作用域和this的题</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0050.jpg\" alt=\"\"></p>\n<h1 id=\"一面\"><a href=\"#一面\" class=\"headerlink\" title=\"一面\"></a>一面</h1><p>1.vue组件通信 2.spa应用，v-dom，diff算法，mvvm，组件化开发 3.水平垂直居中 4.margin坍塌 5.事件模型，捕获与冒泡，哪些事件没有冒泡，没有冒泡的原因是什么 6.事件代理，中间一个不需要事件怎么办，代理的元素内部还有元素怎么办 7.input事件传播 8.tcp过程，http过程，两者啥关系 9.http报文组成，讲了大概二十个字段，很多被问的很细，比如cookie设置哪些，生命周期，http-only，又追问xss。connection取值。缓存机制相关的，哪些字段是游览器缓存哪些是代理服务器缓存优先级如何。（当年实习招聘腾讯问我这个问题，我答得很烂葬送了腾讯实习机会，后来把HTTP弄了个熟，看了遍HTTP权威指南） 10.node的Stream和Buffer区别。 11.跨域问题。手写jsonp。说说代理服务器具体那种。 12.原型链，当时没讲太清楚，面试官没理解，后边面试官说，算了，我觉得你应该搞懂原型链是啥，你讲讲{},[],Array,Object这死者啥关系吧 12.原型A，原型B，让C继承A也继承B。 13.咋学习的</p>\n<h1 id=\"二面\"><a href=\"#二面\" class=\"headerlink\" title=\"二面\"></a>二面</h1><p>就三个问题面了一个小时 1.怼了半天项目。具体问了项目里的前端优化，然后我说完方案后问原理，问websocket原理，lasyload组件咋设计，考虑哪些因素，你最后优化了多少，首屏加载时间怎么算出来的。最后你这个内部方法单元测试用例怎么写。这个被怼的很惨。 2.网页上边出现广告的现象见没见过，什么原因。我说不知道，面试官说XSS可以实现不，我说肯定可以的。又问了问xss的东西，后来他说是不是XSS，我说肯定不是，之后引导我思考url全过程，会在哪一步出现问题，就猜想是改DNS，然后说运营商搞的。DNS,UDP,HTTP,HTTPS,IP等一系列网络协议从原理到作用和细节问了个遍。我说是不是DNS劫持，后面试官说你推测是对的，想想怎么解决这个问题，不会。回去你可以查一查。 3.给了个作用域和this的题</p>\n"},{"title":"迅雷、微众银行面试","url":"107.html","id":"107","date":"2017-10-14T17:27:02.000Z","_content":"\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0053.jpg)\n\n# 一面\n\n1.自我介绍和实习经历\n\n2.闭包作用域\n\n3.vue向绑定原理\n\n4.api设计\n\n5.读过的书\n\n6.对后端的了解，着重问了node的一些特性\n\n7.http的理解\n\n8.react单向数据流的理解\n\n9.nginx异步非阻塞特性\n\n10.对象的访问器与数据属性\n\n11.前端安全的理解\n\n12.冻结对象、不可拓展对象、密封对象\n\n13.看过那些书，对现代前端怎么看，你认为那种人是很强的前端和很强的工程师\n一面还是很基础的，我基本全部答上了，面试官当场就说进入二面了，明天面试。\n\n# 二面\n\n面试官说自己以前是我实习公司深信服的前端。\n\n1.实现一个场景，其中有短视频、允许平移的弹幕、实时聊天，兼容ie9以上。 我提出的解决方案是：css动画完成弹幕；短视频用html5的vedio比如flv.js这种开源方案；实时通信有几种解决方案：websocket、短轮询、长轮询。 里边问的比较深，具体到Http协议和api的使用，自己很多地方没有实现过所以经验不足但这块总体答的还行。弹幕的一个匀速动画问题，被搞的很难受，我真是不擅长写动画。\n\n2.es6的一堆语法：生成器，迭代器，元编程。嗯，都是es6里比较晦涩的部分。\n\n3.for...in...、for()循环、forEach循环的区别，为什么有了前两个还要加forEach。\n\n# 微众银行面试\n\n微众银行很坑爹，全场谈人生一个技术问题都没问。 话说我还是很喜欢腾讯系公司的，结果腾讯捞了我简历没面我，富途证券终面挂，微众银行谈人生挂","source":"_posts/e8-bf-85-e9-9b-b7-e9-9d-a2-e8-af-95.md","raw":"---\ntitle: 迅雷、微众银行面试\nurl: 107.html\nid: 107\ncategories:\n  - 前端\n  - 面试\ndate: 2017-10-15 01:27:02\ntags:\n---\n\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0053.jpg)\n\n# 一面\n\n1.自我介绍和实习经历\n\n2.闭包作用域\n\n3.vue向绑定原理\n\n4.api设计\n\n5.读过的书\n\n6.对后端的了解，着重问了node的一些特性\n\n7.http的理解\n\n8.react单向数据流的理解\n\n9.nginx异步非阻塞特性\n\n10.对象的访问器与数据属性\n\n11.前端安全的理解\n\n12.冻结对象、不可拓展对象、密封对象\n\n13.看过那些书，对现代前端怎么看，你认为那种人是很强的前端和很强的工程师\n一面还是很基础的，我基本全部答上了，面试官当场就说进入二面了，明天面试。\n\n# 二面\n\n面试官说自己以前是我实习公司深信服的前端。\n\n1.实现一个场景，其中有短视频、允许平移的弹幕、实时聊天，兼容ie9以上。 我提出的解决方案是：css动画完成弹幕；短视频用html5的vedio比如flv.js这种开源方案；实时通信有几种解决方案：websocket、短轮询、长轮询。 里边问的比较深，具体到Http协议和api的使用，自己很多地方没有实现过所以经验不足但这块总体答的还行。弹幕的一个匀速动画问题，被搞的很难受，我真是不擅长写动画。\n\n2.es6的一堆语法：生成器，迭代器，元编程。嗯，都是es6里比较晦涩的部分。\n\n3.for...in...、for()循环、forEach循环的区别，为什么有了前两个还要加forEach。\n\n# 微众银行面试\n\n微众银行很坑爹，全场谈人生一个技术问题都没问。 话说我还是很喜欢腾讯系公司的，结果腾讯捞了我简历没面我，富途证券终面挂，微众银行谈人生挂","slug":"e8-bf-85-e9-9b-b7-e9-9d-a2-e8-af-95","published":1,"updated":"2020-05-19T09:07:49.410Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts7zn0039zmz87jx7494u","content":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0053.jpg\" alt=\"\"></p>\n<h1 id=\"一面\"><a href=\"#一面\" class=\"headerlink\" title=\"一面\"></a>一面</h1><p>1.自我介绍和实习经历</p>\n<p>2.闭包作用域</p>\n<p>3.vue向绑定原理</p>\n<p>4.api设计</p>\n<p>5.读过的书</p>\n<p>6.对后端的了解，着重问了node的一些特性</p>\n<p>7.http的理解</p>\n<p>8.react单向数据流的理解</p>\n<p>9.nginx异步非阻塞特性</p>\n<p>10.对象的访问器与数据属性</p>\n<p>11.前端安全的理解</p>\n<p>12.冻结对象、不可拓展对象、密封对象</p>\n<p>13.看过那些书，对现代前端怎么看，你认为那种人是很强的前端和很强的工程师<br>一面还是很基础的，我基本全部答上了，面试官当场就说进入二面了，明天面试。</p>\n<h1 id=\"二面\"><a href=\"#二面\" class=\"headerlink\" title=\"二面\"></a>二面</h1><p>面试官说自己以前是我实习公司深信服的前端。</p>\n<p>1.实现一个场景，其中有短视频、允许平移的弹幕、实时聊天，兼容ie9以上。 我提出的解决方案是：css动画完成弹幕；短视频用html5的vedio比如flv.js这种开源方案；实时通信有几种解决方案：websocket、短轮询、长轮询。 里边问的比较深，具体到Http协议和api的使用，自己很多地方没有实现过所以经验不足但这块总体答的还行。弹幕的一个匀速动画问题，被搞的很难受，我真是不擅长写动画。</p>\n<p>2.es6的一堆语法：生成器，迭代器，元编程。嗯，都是es6里比较晦涩的部分。</p>\n<p>3.for…in…、for()循环、forEach循环的区别，为什么有了前两个还要加forEach。</p>\n<h1 id=\"微众银行面试\"><a href=\"#微众银行面试\" class=\"headerlink\" title=\"微众银行面试\"></a>微众银行面试</h1><p>微众银行很坑爹，全场谈人生一个技术问题都没问。 话说我还是很喜欢腾讯系公司的，结果腾讯捞了我简历没面我，富途证券终面挂，微众银行谈人生挂</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0053.jpg\" alt=\"\"></p>\n<h1 id=\"一面\"><a href=\"#一面\" class=\"headerlink\" title=\"一面\"></a>一面</h1><p>1.自我介绍和实习经历</p>\n<p>2.闭包作用域</p>\n<p>3.vue向绑定原理</p>\n<p>4.api设计</p>\n<p>5.读过的书</p>\n<p>6.对后端的了解，着重问了node的一些特性</p>\n<p>7.http的理解</p>\n<p>8.react单向数据流的理解</p>\n<p>9.nginx异步非阻塞特性</p>\n<p>10.对象的访问器与数据属性</p>\n<p>11.前端安全的理解</p>\n<p>12.冻结对象、不可拓展对象、密封对象</p>\n<p>13.看过那些书，对现代前端怎么看，你认为那种人是很强的前端和很强的工程师<br>一面还是很基础的，我基本全部答上了，面试官当场就说进入二面了，明天面试。</p>\n<h1 id=\"二面\"><a href=\"#二面\" class=\"headerlink\" title=\"二面\"></a>二面</h1><p>面试官说自己以前是我实习公司深信服的前端。</p>\n<p>1.实现一个场景，其中有短视频、允许平移的弹幕、实时聊天，兼容ie9以上。 我提出的解决方案是：css动画完成弹幕；短视频用html5的vedio比如flv.js这种开源方案；实时通信有几种解决方案：websocket、短轮询、长轮询。 里边问的比较深，具体到Http协议和api的使用，自己很多地方没有实现过所以经验不足但这块总体答的还行。弹幕的一个匀速动画问题，被搞的很难受，我真是不擅长写动画。</p>\n<p>2.es6的一堆语法：生成器，迭代器，元编程。嗯，都是es6里比较晦涩的部分。</p>\n<p>3.for…in…、for()循环、forEach循环的区别，为什么有了前两个还要加forEach。</p>\n<h1 id=\"微众银行面试\"><a href=\"#微众银行面试\" class=\"headerlink\" title=\"微众银行面试\"></a>微众银行面试</h1><p>微众银行很坑爹，全场谈人生一个技术问题都没问。 话说我还是很喜欢腾讯系公司的，结果腾讯捞了我简历没面我，富途证券终面挂，微众银行谈人生挂</p>\n"},{"title":"重绘和回流","url":"38.html","id":"38","date":"2017-05-11T14:39:56.000Z","_content":"\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0023.jpg)\n\n# 游览器渲染过程\n\n渲染过程发生在通过http得到资源后的游览器内部，其过程如下： ![](http://7xqgks.com1.z0.glb.clouddn.com/domRender.png)\n\n*   游览器首先对HTML进行解析，这部分由游览器的HTML文档引擎实现，如KHTML（其细节与原理以后有时间会分析源码后再写一篇），这时得到dom元素并生产DOM树（dom tree），每一个HTML标签<Tag>都会在DOM树有对应的节点，根节点就是document对象，对应<html></html>元素。\n\n*   于此同时，游览器会对CSS进行解析，其解析优先级为：以style属性书写的CSS -> 用户link引入的CSS -> 用户import引入的CSS -> 游览器默认的CSS规则，并且考虑CSS覆盖于优先级，忽略不能被解析的错误CSS与无意义的前缀名，保留有意义的可被正确解析的CSS。\n\n*   CSS解析完毕后，通过之前生成的渲染树加上解析完毕后的CSS，就能构建一课渲染树（render tree），每一个元素一般会对应一个节点，不一般的情况大家也能想到就是通过`display:none`进行修饰的元素就不会出现先渲染树中（敲黑板：因此也就不会有物理空间了，笔试常考），以及某些可以换行的块级元素`&lt;p&gt;`是一行一个节点。\n\n*   完成渲染树后，游览器开始绘制页面。\n\n\n* * *\n\n# 重绘和回流\n\n*   重绘：当渲染树中的元素样式改变**不影响**布局时，发生重绘，重绘不会改变整课渲染树，只会改变部分渲染树的节点属性，如颜色，风格，字体样式，阴影，模糊，背景等。\n*   回流：当渲染树种元素的样式改变**影响了**布局时，发生回流，回流会让页面重新构造，并让受到影响的部分失效，完成回流后，游览器会重新展示受影响的部分，这个过程也是重绘。所以发生回流是一定会发生重绘的。引起回流的样式改变有：\n    *   添加或删除可见的dom元素；\n    *   修改了可见dom元素的大小、位置、布局、隐藏（`display:none`会回流，`visibility: hidden`不会回流）；\n    *   修改了可见元素的内容，需要重新计算，如改变图片的src，改变文字的数量；\n    *   游览器的窗口变化，改变缩放比例，改变字号，滚动；\n    *   页面渲染初始化；\n    *   添加了一个样式表其中有引起回流的样式;\n\n* * *\n\n# 前端优化之减少重绘与回流\n\n通过上面分析，已经熟悉了重绘与回流的概念和过程，那么其优化无非就是减少引起重绘和回流的样式改变。\n\n*   使用改变类名的方式改变样式，可以一次性将多个样式改变，从而减少重绘和回流的产生次数，同时也增加了页面的可维护性。\n*   使用`display:none`隐藏元素\n*   尽量不要计算元素\n*   能用重绘解决的就不要用回流解决","source":"_posts/e9-87-8d-e7-bb-98-e5-92-8c-e5-9b-9e-e6-b5-81.md","raw":"---\ntitle: 重绘和回流\ntags:\n  - CSS\n  - 前端\n  - 性能优化\nurl: 38.html\nid: 38\ncategories:\n  - 前端\ndate: 2017-05-11 22:39:56\n---\n\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0023.jpg)\n\n# 游览器渲染过程\n\n渲染过程发生在通过http得到资源后的游览器内部，其过程如下： ![](http://7xqgks.com1.z0.glb.clouddn.com/domRender.png)\n\n*   游览器首先对HTML进行解析，这部分由游览器的HTML文档引擎实现，如KHTML（其细节与原理以后有时间会分析源码后再写一篇），这时得到dom元素并生产DOM树（dom tree），每一个HTML标签<Tag>都会在DOM树有对应的节点，根节点就是document对象，对应<html></html>元素。\n\n*   于此同时，游览器会对CSS进行解析，其解析优先级为：以style属性书写的CSS -> 用户link引入的CSS -> 用户import引入的CSS -> 游览器默认的CSS规则，并且考虑CSS覆盖于优先级，忽略不能被解析的错误CSS与无意义的前缀名，保留有意义的可被正确解析的CSS。\n\n*   CSS解析完毕后，通过之前生成的渲染树加上解析完毕后的CSS，就能构建一课渲染树（render tree），每一个元素一般会对应一个节点，不一般的情况大家也能想到就是通过`display:none`进行修饰的元素就不会出现先渲染树中（敲黑板：因此也就不会有物理空间了，笔试常考），以及某些可以换行的块级元素`&lt;p&gt;`是一行一个节点。\n\n*   完成渲染树后，游览器开始绘制页面。\n\n\n* * *\n\n# 重绘和回流\n\n*   重绘：当渲染树中的元素样式改变**不影响**布局时，发生重绘，重绘不会改变整课渲染树，只会改变部分渲染树的节点属性，如颜色，风格，字体样式，阴影，模糊，背景等。\n*   回流：当渲染树种元素的样式改变**影响了**布局时，发生回流，回流会让页面重新构造，并让受到影响的部分失效，完成回流后，游览器会重新展示受影响的部分，这个过程也是重绘。所以发生回流是一定会发生重绘的。引起回流的样式改变有：\n    *   添加或删除可见的dom元素；\n    *   修改了可见dom元素的大小、位置、布局、隐藏（`display:none`会回流，`visibility: hidden`不会回流）；\n    *   修改了可见元素的内容，需要重新计算，如改变图片的src，改变文字的数量；\n    *   游览器的窗口变化，改变缩放比例，改变字号，滚动；\n    *   页面渲染初始化；\n    *   添加了一个样式表其中有引起回流的样式;\n\n* * *\n\n# 前端优化之减少重绘与回流\n\n通过上面分析，已经熟悉了重绘与回流的概念和过程，那么其优化无非就是减少引起重绘和回流的样式改变。\n\n*   使用改变类名的方式改变样式，可以一次性将多个样式改变，从而减少重绘和回流的产生次数，同时也增加了页面的可维护性。\n*   使用`display:none`隐藏元素\n*   尽量不要计算元素\n*   能用重绘解决的就不要用回流解决","slug":"e9-87-8d-e7-bb-98-e5-92-8c-e5-9b-9e-e6-b5-81","published":1,"updated":"2020-05-19T08:51:28.807Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts7zp003ezmz88kn657rk","content":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0023.jpg\" alt=\"\"></p>\n<h1 id=\"游览器渲染过程\"><a href=\"#游览器渲染过程\" class=\"headerlink\" title=\"游览器渲染过程\"></a>游览器渲染过程</h1><p>渲染过程发生在通过http得到资源后的游览器内部，其过程如下： <img src=\"http://7xqgks.com1.z0.glb.clouddn.com/domRender.png\" alt=\"\"></p>\n<ul>\n<li><p>游览器首先对HTML进行解析，这部分由游览器的HTML文档引擎实现，如KHTML（其细节与原理以后有时间会分析源码后再写一篇），这时得到dom元素并生产DOM树（dom tree），每一个HTML标签<Tag>都会在DOM树有对应的节点，根节点就是document对象，对应<html></html>元素。</p>\n</li>\n<li><p>于此同时，游览器会对CSS进行解析，其解析优先级为：以style属性书写的CSS -&gt; 用户link引入的CSS -&gt; 用户import引入的CSS -&gt; 游览器默认的CSS规则，并且考虑CSS覆盖于优先级，忽略不能被解析的错误CSS与无意义的前缀名，保留有意义的可被正确解析的CSS。</p>\n</li>\n<li><p>CSS解析完毕后，通过之前生成的渲染树加上解析完毕后的CSS，就能构建一课渲染树（render tree），每一个元素一般会对应一个节点，不一般的情况大家也能想到就是通过<code>display:none</code>进行修饰的元素就不会出现先渲染树中（敲黑板：因此也就不会有物理空间了，笔试常考），以及某些可以换行的块级元素<code>&amp;lt;p&amp;gt;</code>是一行一个节点。</p>\n</li>\n<li><p>完成渲染树后，游览器开始绘制页面。</p>\n</li>\n</ul>\n<hr>\n<h1 id=\"重绘和回流\"><a href=\"#重绘和回流\" class=\"headerlink\" title=\"重绘和回流\"></a>重绘和回流</h1><ul>\n<li>重绘：当渲染树中的元素样式改变<strong>不影响</strong>布局时，发生重绘，重绘不会改变整课渲染树，只会改变部分渲染树的节点属性，如颜色，风格，字体样式，阴影，模糊，背景等。</li>\n<li>回流：当渲染树种元素的样式改变<strong>影响了</strong>布局时，发生回流，回流会让页面重新构造，并让受到影响的部分失效，完成回流后，游览器会重新展示受影响的部分，这个过程也是重绘。所以发生回流是一定会发生重绘的。引起回流的样式改变有：<ul>\n<li>添加或删除可见的dom元素；</li>\n<li>修改了可见dom元素的大小、位置、布局、隐藏（<code>display:none</code>会回流，<code>visibility: hidden</code>不会回流）；</li>\n<li>修改了可见元素的内容，需要重新计算，如改变图片的src，改变文字的数量；</li>\n<li>游览器的窗口变化，改变缩放比例，改变字号，滚动；</li>\n<li>页面渲染初始化；</li>\n<li>添加了一个样式表其中有引起回流的样式;</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"前端优化之减少重绘与回流\"><a href=\"#前端优化之减少重绘与回流\" class=\"headerlink\" title=\"前端优化之减少重绘与回流\"></a>前端优化之减少重绘与回流</h1><p>通过上面分析，已经熟悉了重绘与回流的概念和过程，那么其优化无非就是减少引起重绘和回流的样式改变。</p>\n<ul>\n<li>使用改变类名的方式改变样式，可以一次性将多个样式改变，从而减少重绘和回流的产生次数，同时也增加了页面的可维护性。</li>\n<li>使用<code>display:none</code>隐藏元素</li>\n<li>尽量不要计算元素</li>\n<li>能用重绘解决的就不要用回流解决</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0023.jpg\" alt=\"\"></p>\n<h1 id=\"游览器渲染过程\"><a href=\"#游览器渲染过程\" class=\"headerlink\" title=\"游览器渲染过程\"></a>游览器渲染过程</h1><p>渲染过程发生在通过http得到资源后的游览器内部，其过程如下： <img src=\"http://7xqgks.com1.z0.glb.clouddn.com/domRender.png\" alt=\"\"></p>\n<ul>\n<li><p>游览器首先对HTML进行解析，这部分由游览器的HTML文档引擎实现，如KHTML（其细节与原理以后有时间会分析源码后再写一篇），这时得到dom元素并生产DOM树（dom tree），每一个HTML标签<Tag>都会在DOM树有对应的节点，根节点就是document对象，对应<html></html>元素。</p>\n</li>\n<li><p>于此同时，游览器会对CSS进行解析，其解析优先级为：以style属性书写的CSS -&gt; 用户link引入的CSS -&gt; 用户import引入的CSS -&gt; 游览器默认的CSS规则，并且考虑CSS覆盖于优先级，忽略不能被解析的错误CSS与无意义的前缀名，保留有意义的可被正确解析的CSS。</p>\n</li>\n<li><p>CSS解析完毕后，通过之前生成的渲染树加上解析完毕后的CSS，就能构建一课渲染树（render tree），每一个元素一般会对应一个节点，不一般的情况大家也能想到就是通过<code>display:none</code>进行修饰的元素就不会出现先渲染树中（敲黑板：因此也就不会有物理空间了，笔试常考），以及某些可以换行的块级元素<code>&amp;lt;p&amp;gt;</code>是一行一个节点。</p>\n</li>\n<li><p>完成渲染树后，游览器开始绘制页面。</p>\n</li>\n</ul>\n<hr>\n<h1 id=\"重绘和回流\"><a href=\"#重绘和回流\" class=\"headerlink\" title=\"重绘和回流\"></a>重绘和回流</h1><ul>\n<li>重绘：当渲染树中的元素样式改变<strong>不影响</strong>布局时，发生重绘，重绘不会改变整课渲染树，只会改变部分渲染树的节点属性，如颜色，风格，字体样式，阴影，模糊，背景等。</li>\n<li>回流：当渲染树种元素的样式改变<strong>影响了</strong>布局时，发生回流，回流会让页面重新构造，并让受到影响的部分失效，完成回流后，游览器会重新展示受影响的部分，这个过程也是重绘。所以发生回流是一定会发生重绘的。引起回流的样式改变有：<ul>\n<li>添加或删除可见的dom元素；</li>\n<li>修改了可见dom元素的大小、位置、布局、隐藏（<code>display:none</code>会回流，<code>visibility: hidden</code>不会回流）；</li>\n<li>修改了可见元素的内容，需要重新计算，如改变图片的src，改变文字的数量；</li>\n<li>游览器的窗口变化，改变缩放比例，改变字号，滚动；</li>\n<li>页面渲染初始化；</li>\n<li>添加了一个样式表其中有引起回流的样式;</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"前端优化之减少重绘与回流\"><a href=\"#前端优化之减少重绘与回流\" class=\"headerlink\" title=\"前端优化之减少重绘与回流\"></a>前端优化之减少重绘与回流</h1><p>通过上面分析，已经熟悉了重绘与回流的概念和过程，那么其优化无非就是减少引起重绘和回流的样式改变。</p>\n<ul>\n<li>使用改变类名的方式改变样式，可以一次性将多个样式改变，从而减少重绘和回流的产生次数，同时也增加了页面的可维护性。</li>\n<li>使用<code>display:none</code>隐藏元素</li>\n<li>尽量不要计算元素</li>\n<li>能用重绘解决的就不要用回流解决</li>\n</ul>\n"},{"title":"egg.js原理剖析：egg-cluster","url":"331.html","id":"331","comments":0,"date":"2019-10-19T08:51:01.000Z","_content":"\n本文主要是egg-cluster的原理理解，包括了一些前置知识：操作系统进程同学、node创建进程、node进程通信。我对这些前置知识只会略讲，如果看到后没有任何印象或者之前不掌握，请阅读本文最后参考文档中的文章来熟悉这些前置知识再阅读本文。\n\nnode-cluster 简介\n===============\n\n「cluster」意为“集群”，顾名思义，就是增加node.js这种单进程单线程的有效利用多核系统的能力。 「cluster」 模块可以创建共享服务器端口的子进程。\n\nnode.js 进程创建方式\n==============\n\n通信方式与进程产生方式有关，而Node有4种创建进程的方式： spawn() ， exec() ， execFile() 和 fork()。\n\n*   spawn：spawn() 方法默认不会创建shell去执行传入的命令，性能相对较好\n*   exec：exec() 方法会创建一个shell，完全支持shell语法 ，可以直接传入任意shell脚本，故可以调用shell脚本\n*   execFile：execFile() 相比 exec() 是不会通过shell，而是接受一个可执行文件\n*   fork：fork() 是 spawn() 的变体，用来创建Node进程，最大的特点是父子进程自带通信机制——管道\n\n操作系统 进程通信\n=========\n\n*   共享内存：不同进程共享同一段内存空间。通常还需要引入信号量机制，来实现同步与互斥。这种方式性能极高，但实现困难。\n*   消息传递：这种模式下，进程间通过发送、接收消息来实现信息的同步。\n*   信号量：信号量简单说就是系统赋予进程的一个状态值，未得到控制权的进程会在特定地方被强迫停下来，等待可以继续进行的信号到来。如果信号量只有 0 或者 1 两个值的话，又被称作“互斥锁”。这个机制也被广泛用于各种编程模式中。\n*   管道：管道本身也是一个进程，它用于连接两个进程，将一个进程的输出作为另一个进程的输入。可以用 pipe 系统调用来创建管道。我们经常用的“ | ”命令行就是利用了管道机制。\n*   socket：网络通信，不仅能跨进程（端口与端口），还能跨机器（IP与IP）\n\nnode.js 进程通信\n============\n\n*   通过stdin/stdout传递消息：属于操作系统进程通信方式的消息传递法。拿到子进程的handle后，可以访问其 stdio 流，然后约定一种 message 格式通信。\n*   IPC管道：默认通信方式，父进程与process.on('message') 收 | child.send() 发，子进程process.on('message') 收 | process.send() 发，和\n*   socket：借助socket网络通信，不仅能跨进程（端口与端口），还能跨机器（IP与IP）。\n\nnode-cluster 工作原理\n=================\n\n通常，\b一个集群由主从架构组成，就是一个「master」主进程和多个「worker」子进程来组成一个集群。 工作进程由「child_process.fork」方法创建，这些「worker」可以用IPC管道和父进程通信。子进程和父进程具有相同的代码段、数据段、堆栈，但是它们的内存空间不共享。父进程「master」负责监听端口，接收到新的请求派发给下面的「worker」进程。\n\negg-cluster 架构模型\n================\n\negg-cluster把进程分为三类： master：主进程，负责 agent 的启动、退出、重启；各个 worker 进程调度；负责 agent 和各个 worker 之间的通信；负责各个 worker 之间的通信 agent：「master」 的子进程，可以理解为「master」的“助理”，帮「master」打杂做一些派发之类的工作：处理公共资源的访问，如文件监听，或者帮 「worker」 处理一些公共事务，如一些事情是不需要每个 「worker」 都做一次的，「agent」 帮忙做完之后通知它们执行之后的操作 worker：「master」 的子进程，一般是根据服务器有多少个 CPU 启动多少个这样的 「worker」 进程，主要用于对外服务，处理各种业务层面的事情\n\n进程顺序\n====\n\n*   master 启动后先启动 agent 进程\n*   agent 初始化成功后，通过 IPC 通道通知 master\n*   master 根据 CPU 的个数启动相同数目的 worker 进程\n*   worker 进程初始化成功后，通过 IPC 通道通知 master\n*   所有的进程初始化成功后，master 通知 agent 和各个 worker 进程应用启动成功\n\n进程通信\n====\n\nmaster 和 agent/worker 是 直接通信的，因为 master 是 agent/worker fork()后的父进程，拥有IPC管道进行通信 agent 和 worker 之间以及各个 worker 之间是 间接通信的，依靠master做中转 https://github.com/eggjs/egg-cluster#readme\n\n参考：\n《现代操作系统》\n进程间的五种通信方式介绍： https://blog.csdn.net/wh_sjc/article/details/70283843\nnode.js的cluster文档：http://nodejs.cn/api/cluster.html\nNodejs进程间通信： https://www.cnblogs.com/rubyxie/articles/8949417.html\negg-cluster：https://github.com/eggjs/egg-cluster#readme\nEgg 源码解析之 egg-cluster：https://zhuanlan.zhihu.com/p/29374045#","source":"_posts/egg-js-e5-8e-9f-e7-90-86-e5-89-96-e6-9e-90-ef-bc-9aegg-cluster.md","raw":"---\ntitle: egg.js原理剖析：egg-cluster\ntags:\n  - egg.js\n  - node.js\nurl: 331.html\nid: 331\ncomments: false\ncategories:\n  - node.js\ndate: 2019-10-19 16:51:01\n---\n\n本文主要是egg-cluster的原理理解，包括了一些前置知识：操作系统进程同学、node创建进程、node进程通信。我对这些前置知识只会略讲，如果看到后没有任何印象或者之前不掌握，请阅读本文最后参考文档中的文章来熟悉这些前置知识再阅读本文。\n\nnode-cluster 简介\n===============\n\n「cluster」意为“集群”，顾名思义，就是增加node.js这种单进程单线程的有效利用多核系统的能力。 「cluster」 模块可以创建共享服务器端口的子进程。\n\nnode.js 进程创建方式\n==============\n\n通信方式与进程产生方式有关，而Node有4种创建进程的方式： spawn() ， exec() ， execFile() 和 fork()。\n\n*   spawn：spawn() 方法默认不会创建shell去执行传入的命令，性能相对较好\n*   exec：exec() 方法会创建一个shell，完全支持shell语法 ，可以直接传入任意shell脚本，故可以调用shell脚本\n*   execFile：execFile() 相比 exec() 是不会通过shell，而是接受一个可执行文件\n*   fork：fork() 是 spawn() 的变体，用来创建Node进程，最大的特点是父子进程自带通信机制——管道\n\n操作系统 进程通信\n=========\n\n*   共享内存：不同进程共享同一段内存空间。通常还需要引入信号量机制，来实现同步与互斥。这种方式性能极高，但实现困难。\n*   消息传递：这种模式下，进程间通过发送、接收消息来实现信息的同步。\n*   信号量：信号量简单说就是系统赋予进程的一个状态值，未得到控制权的进程会在特定地方被强迫停下来，等待可以继续进行的信号到来。如果信号量只有 0 或者 1 两个值的话，又被称作“互斥锁”。这个机制也被广泛用于各种编程模式中。\n*   管道：管道本身也是一个进程，它用于连接两个进程，将一个进程的输出作为另一个进程的输入。可以用 pipe 系统调用来创建管道。我们经常用的“ | ”命令行就是利用了管道机制。\n*   socket：网络通信，不仅能跨进程（端口与端口），还能跨机器（IP与IP）\n\nnode.js 进程通信\n============\n\n*   通过stdin/stdout传递消息：属于操作系统进程通信方式的消息传递法。拿到子进程的handle后，可以访问其 stdio 流，然后约定一种 message 格式通信。\n*   IPC管道：默认通信方式，父进程与process.on('message') 收 | child.send() 发，子进程process.on('message') 收 | process.send() 发，和\n*   socket：借助socket网络通信，不仅能跨进程（端口与端口），还能跨机器（IP与IP）。\n\nnode-cluster 工作原理\n=================\n\n通常，\b一个集群由主从架构组成，就是一个「master」主进程和多个「worker」子进程来组成一个集群。 工作进程由「child_process.fork」方法创建，这些「worker」可以用IPC管道和父进程通信。子进程和父进程具有相同的代码段、数据段、堆栈，但是它们的内存空间不共享。父进程「master」负责监听端口，接收到新的请求派发给下面的「worker」进程。\n\negg-cluster 架构模型\n================\n\negg-cluster把进程分为三类： master：主进程，负责 agent 的启动、退出、重启；各个 worker 进程调度；负责 agent 和各个 worker 之间的通信；负责各个 worker 之间的通信 agent：「master」 的子进程，可以理解为「master」的“助理”，帮「master」打杂做一些派发之类的工作：处理公共资源的访问，如文件监听，或者帮 「worker」 处理一些公共事务，如一些事情是不需要每个 「worker」 都做一次的，「agent」 帮忙做完之后通知它们执行之后的操作 worker：「master」 的子进程，一般是根据服务器有多少个 CPU 启动多少个这样的 「worker」 进程，主要用于对外服务，处理各种业务层面的事情\n\n进程顺序\n====\n\n*   master 启动后先启动 agent 进程\n*   agent 初始化成功后，通过 IPC 通道通知 master\n*   master 根据 CPU 的个数启动相同数目的 worker 进程\n*   worker 进程初始化成功后，通过 IPC 通道通知 master\n*   所有的进程初始化成功后，master 通知 agent 和各个 worker 进程应用启动成功\n\n进程通信\n====\n\nmaster 和 agent/worker 是 直接通信的，因为 master 是 agent/worker fork()后的父进程，拥有IPC管道进行通信 agent 和 worker 之间以及各个 worker 之间是 间接通信的，依靠master做中转 https://github.com/eggjs/egg-cluster#readme\n\n参考：\n《现代操作系统》\n进程间的五种通信方式介绍： https://blog.csdn.net/wh_sjc/article/details/70283843\nnode.js的cluster文档：http://nodejs.cn/api/cluster.html\nNodejs进程间通信： https://www.cnblogs.com/rubyxie/articles/8949417.html\negg-cluster：https://github.com/eggjs/egg-cluster#readme\nEgg 源码解析之 egg-cluster：https://zhuanlan.zhihu.com/p/29374045#","slug":"egg-js-e5-8e-9f-e7-90-86-e5-89-96-e6-9e-90-ef-bc-9aegg-cluster","published":1,"updated":"2020-05-19T09:01:17.092Z","layout":"post","photos":[],"link":"","_id":"ckahts7zq003hzmz89nze7f5c","content":"<p>本文主要是egg-cluster的原理理解，包括了一些前置知识：操作系统进程同学、node创建进程、node进程通信。我对这些前置知识只会略讲，如果看到后没有任何印象或者之前不掌握，请阅读本文最后参考文档中的文章来熟悉这些前置知识再阅读本文。</p>\n<h1 id=\"node-cluster-简介\"><a href=\"#node-cluster-简介\" class=\"headerlink\" title=\"node-cluster 简介\"></a>node-cluster 简介</h1><p>「cluster」意为“集群”，顾名思义，就是增加node.js这种单进程单线程的有效利用多核系统的能力。 「cluster」 模块可以创建共享服务器端口的子进程。</p>\n<h1 id=\"node-js-进程创建方式\"><a href=\"#node-js-进程创建方式\" class=\"headerlink\" title=\"node.js 进程创建方式\"></a>node.js 进程创建方式</h1><p>通信方式与进程产生方式有关，而Node有4种创建进程的方式： spawn() ， exec() ， execFile() 和 fork()。</p>\n<ul>\n<li>spawn：spawn() 方法默认不会创建shell去执行传入的命令，性能相对较好</li>\n<li>exec：exec() 方法会创建一个shell，完全支持shell语法 ，可以直接传入任意shell脚本，故可以调用shell脚本</li>\n<li>execFile：execFile() 相比 exec() 是不会通过shell，而是接受一个可执行文件</li>\n<li>fork：fork() 是 spawn() 的变体，用来创建Node进程，最大的特点是父子进程自带通信机制——管道</li>\n</ul>\n<h1 id=\"操作系统-进程通信\"><a href=\"#操作系统-进程通信\" class=\"headerlink\" title=\"操作系统 进程通信\"></a>操作系统 进程通信</h1><ul>\n<li>共享内存：不同进程共享同一段内存空间。通常还需要引入信号量机制，来实现同步与互斥。这种方式性能极高，但实现困难。</li>\n<li>消息传递：这种模式下，进程间通过发送、接收消息来实现信息的同步。</li>\n<li>信号量：信号量简单说就是系统赋予进程的一个状态值，未得到控制权的进程会在特定地方被强迫停下来，等待可以继续进行的信号到来。如果信号量只有 0 或者 1 两个值的话，又被称作“互斥锁”。这个机制也被广泛用于各种编程模式中。</li>\n<li>管道：管道本身也是一个进程，它用于连接两个进程，将一个进程的输出作为另一个进程的输入。可以用 pipe 系统调用来创建管道。我们经常用的“ | ”命令行就是利用了管道机制。</li>\n<li>socket：网络通信，不仅能跨进程（端口与端口），还能跨机器（IP与IP）</li>\n</ul>\n<h1 id=\"node-js-进程通信\"><a href=\"#node-js-进程通信\" class=\"headerlink\" title=\"node.js 进程通信\"></a>node.js 进程通信</h1><ul>\n<li>通过stdin/stdout传递消息：属于操作系统进程通信方式的消息传递法。拿到子进程的handle后，可以访问其 stdio 流，然后约定一种 message 格式通信。</li>\n<li>IPC管道：默认通信方式，父进程与process.on(‘message’) 收 | child.send() 发，子进程process.on(‘message’) 收 | process.send() 发，和</li>\n<li>socket：借助socket网络通信，不仅能跨进程（端口与端口），还能跨机器（IP与IP）。</li>\n</ul>\n<h1 id=\"node-cluster-工作原理\"><a href=\"#node-cluster-工作原理\" class=\"headerlink\" title=\"node-cluster 工作原理\"></a>node-cluster 工作原理</h1><p>通常，\b一个集群由主从架构组成，就是一个「master」主进程和多个「worker」子进程来组成一个集群。 工作进程由「child_process.fork」方法创建，这些「worker」可以用IPC管道和父进程通信。子进程和父进程具有相同的代码段、数据段、堆栈，但是它们的内存空间不共享。父进程「master」负责监听端口，接收到新的请求派发给下面的「worker」进程。</p>\n<h1 id=\"egg-cluster-架构模型\"><a href=\"#egg-cluster-架构模型\" class=\"headerlink\" title=\"egg-cluster 架构模型\"></a>egg-cluster 架构模型</h1><p>egg-cluster把进程分为三类： master：主进程，负责 agent 的启动、退出、重启；各个 worker 进程调度；负责 agent 和各个 worker 之间的通信；负责各个 worker 之间的通信 agent：「master」 的子进程，可以理解为「master」的“助理”，帮「master」打杂做一些派发之类的工作：处理公共资源的访问，如文件监听，或者帮 「worker」 处理一些公共事务，如一些事情是不需要每个 「worker」 都做一次的，「agent」 帮忙做完之后通知它们执行之后的操作 worker：「master」 的子进程，一般是根据服务器有多少个 CPU 启动多少个这样的 「worker」 进程，主要用于对外服务，处理各种业务层面的事情</p>\n<h1 id=\"进程顺序\"><a href=\"#进程顺序\" class=\"headerlink\" title=\"进程顺序\"></a>进程顺序</h1><ul>\n<li>master 启动后先启动 agent 进程</li>\n<li>agent 初始化成功后，通过 IPC 通道通知 master</li>\n<li>master 根据 CPU 的个数启动相同数目的 worker 进程</li>\n<li>worker 进程初始化成功后，通过 IPC 通道通知 master</li>\n<li>所有的进程初始化成功后，master 通知 agent 和各个 worker 进程应用启动成功</li>\n</ul>\n<h1 id=\"进程通信\"><a href=\"#进程通信\" class=\"headerlink\" title=\"进程通信\"></a>进程通信</h1><p>master 和 agent/worker 是 直接通信的，因为 master 是 agent/worker fork()后的父进程，拥有IPC管道进行通信 agent 和 worker 之间以及各个 worker 之间是 间接通信的，依靠master做中转 <a href=\"https://github.com/eggjs/egg-cluster#readme\" target=\"_blank\" rel=\"noopener\">https://github.com/eggjs/egg-cluster#readme</a></p>\n<p>参考：<br>《现代操作系统》<br>进程间的五种通信方式介绍： <a href=\"https://blog.csdn.net/wh_sjc/article/details/70283843\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/wh_sjc/article/details/70283843</a><br>node.js的cluster文档：<a href=\"http://nodejs.cn/api/cluster.html\" target=\"_blank\" rel=\"noopener\">http://nodejs.cn/api/cluster.html</a><br>Nodejs进程间通信： <a href=\"https://www.cnblogs.com/rubyxie/articles/8949417.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/rubyxie/articles/8949417.html</a><br>egg-cluster：<a href=\"https://github.com/eggjs/egg-cluster#readme\" target=\"_blank\" rel=\"noopener\">https://github.com/eggjs/egg-cluster#readme</a><br>Egg 源码解析之 egg-cluster：<a href=\"https://zhuanlan.zhihu.com/p/29374045#\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/29374045#</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文主要是egg-cluster的原理理解，包括了一些前置知识：操作系统进程同学、node创建进程、node进程通信。我对这些前置知识只会略讲，如果看到后没有任何印象或者之前不掌握，请阅读本文最后参考文档中的文章来熟悉这些前置知识再阅读本文。</p>\n<h1 id=\"node-cluster-简介\"><a href=\"#node-cluster-简介\" class=\"headerlink\" title=\"node-cluster 简介\"></a>node-cluster 简介</h1><p>「cluster」意为“集群”，顾名思义，就是增加node.js这种单进程单线程的有效利用多核系统的能力。 「cluster」 模块可以创建共享服务器端口的子进程。</p>\n<h1 id=\"node-js-进程创建方式\"><a href=\"#node-js-进程创建方式\" class=\"headerlink\" title=\"node.js 进程创建方式\"></a>node.js 进程创建方式</h1><p>通信方式与进程产生方式有关，而Node有4种创建进程的方式： spawn() ， exec() ， execFile() 和 fork()。</p>\n<ul>\n<li>spawn：spawn() 方法默认不会创建shell去执行传入的命令，性能相对较好</li>\n<li>exec：exec() 方法会创建一个shell，完全支持shell语法 ，可以直接传入任意shell脚本，故可以调用shell脚本</li>\n<li>execFile：execFile() 相比 exec() 是不会通过shell，而是接受一个可执行文件</li>\n<li>fork：fork() 是 spawn() 的变体，用来创建Node进程，最大的特点是父子进程自带通信机制——管道</li>\n</ul>\n<h1 id=\"操作系统-进程通信\"><a href=\"#操作系统-进程通信\" class=\"headerlink\" title=\"操作系统 进程通信\"></a>操作系统 进程通信</h1><ul>\n<li>共享内存：不同进程共享同一段内存空间。通常还需要引入信号量机制，来实现同步与互斥。这种方式性能极高，但实现困难。</li>\n<li>消息传递：这种模式下，进程间通过发送、接收消息来实现信息的同步。</li>\n<li>信号量：信号量简单说就是系统赋予进程的一个状态值，未得到控制权的进程会在特定地方被强迫停下来，等待可以继续进行的信号到来。如果信号量只有 0 或者 1 两个值的话，又被称作“互斥锁”。这个机制也被广泛用于各种编程模式中。</li>\n<li>管道：管道本身也是一个进程，它用于连接两个进程，将一个进程的输出作为另一个进程的输入。可以用 pipe 系统调用来创建管道。我们经常用的“ | ”命令行就是利用了管道机制。</li>\n<li>socket：网络通信，不仅能跨进程（端口与端口），还能跨机器（IP与IP）</li>\n</ul>\n<h1 id=\"node-js-进程通信\"><a href=\"#node-js-进程通信\" class=\"headerlink\" title=\"node.js 进程通信\"></a>node.js 进程通信</h1><ul>\n<li>通过stdin/stdout传递消息：属于操作系统进程通信方式的消息传递法。拿到子进程的handle后，可以访问其 stdio 流，然后约定一种 message 格式通信。</li>\n<li>IPC管道：默认通信方式，父进程与process.on(‘message’) 收 | child.send() 发，子进程process.on(‘message’) 收 | process.send() 发，和</li>\n<li>socket：借助socket网络通信，不仅能跨进程（端口与端口），还能跨机器（IP与IP）。</li>\n</ul>\n<h1 id=\"node-cluster-工作原理\"><a href=\"#node-cluster-工作原理\" class=\"headerlink\" title=\"node-cluster 工作原理\"></a>node-cluster 工作原理</h1><p>通常，\b一个集群由主从架构组成，就是一个「master」主进程和多个「worker」子进程来组成一个集群。 工作进程由「child_process.fork」方法创建，这些「worker」可以用IPC管道和父进程通信。子进程和父进程具有相同的代码段、数据段、堆栈，但是它们的内存空间不共享。父进程「master」负责监听端口，接收到新的请求派发给下面的「worker」进程。</p>\n<h1 id=\"egg-cluster-架构模型\"><a href=\"#egg-cluster-架构模型\" class=\"headerlink\" title=\"egg-cluster 架构模型\"></a>egg-cluster 架构模型</h1><p>egg-cluster把进程分为三类： master：主进程，负责 agent 的启动、退出、重启；各个 worker 进程调度；负责 agent 和各个 worker 之间的通信；负责各个 worker 之间的通信 agent：「master」 的子进程，可以理解为「master」的“助理”，帮「master」打杂做一些派发之类的工作：处理公共资源的访问，如文件监听，或者帮 「worker」 处理一些公共事务，如一些事情是不需要每个 「worker」 都做一次的，「agent」 帮忙做完之后通知它们执行之后的操作 worker：「master」 的子进程，一般是根据服务器有多少个 CPU 启动多少个这样的 「worker」 进程，主要用于对外服务，处理各种业务层面的事情</p>\n<h1 id=\"进程顺序\"><a href=\"#进程顺序\" class=\"headerlink\" title=\"进程顺序\"></a>进程顺序</h1><ul>\n<li>master 启动后先启动 agent 进程</li>\n<li>agent 初始化成功后，通过 IPC 通道通知 master</li>\n<li>master 根据 CPU 的个数启动相同数目的 worker 进程</li>\n<li>worker 进程初始化成功后，通过 IPC 通道通知 master</li>\n<li>所有的进程初始化成功后，master 通知 agent 和各个 worker 进程应用启动成功</li>\n</ul>\n<h1 id=\"进程通信\"><a href=\"#进程通信\" class=\"headerlink\" title=\"进程通信\"></a>进程通信</h1><p>master 和 agent/worker 是 直接通信的，因为 master 是 agent/worker fork()后的父进程，拥有IPC管道进行通信 agent 和 worker 之间以及各个 worker 之间是 间接通信的，依靠master做中转 <a href=\"https://github.com/eggjs/egg-cluster#readme\" target=\"_blank\" rel=\"noopener\">https://github.com/eggjs/egg-cluster#readme</a></p>\n<p>参考：<br>《现代操作系统》<br>进程间的五种通信方式介绍： <a href=\"https://blog.csdn.net/wh_sjc/article/details/70283843\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/wh_sjc/article/details/70283843</a><br>node.js的cluster文档：<a href=\"http://nodejs.cn/api/cluster.html\" target=\"_blank\" rel=\"noopener\">http://nodejs.cn/api/cluster.html</a><br>Nodejs进程间通信： <a href=\"https://www.cnblogs.com/rubyxie/articles/8949417.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/rubyxie/articles/8949417.html</a><br>egg-cluster：<a href=\"https://github.com/eggjs/egg-cluster#readme\" target=\"_blank\" rel=\"noopener\">https://github.com/eggjs/egg-cluster#readme</a><br>Egg 源码解析之 egg-cluster：<a href=\"https://zhuanlan.zhihu.com/p/29374045#\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/29374045#</a></p>\n"},{"title":"学什么编程语言","url":"1.html","id":"1","date":"2016-12-23T09:19:50.000Z","_content":"\n该学什么编程语言。[点击查看大图](http://7xqgks.com1.z0.glb.clouddn.com/bugzhangwhat-language-should-i-study.png) ![](http://7xqgks.com1.z0.glb.clouddn.com/what-language-should-i-study.jpg)","source":"_posts/hello-world-1.md","raw":"---\ntitle: 学什么编程语言\ntags:\n  - 扯淡\nurl: 1.html\nid: 1\ncategories:\n  - 扯淡集\ndate: 2016-12-23 17:19:50\n---\n\n该学什么编程语言。[点击查看大图](http://7xqgks.com1.z0.glb.clouddn.com/bugzhangwhat-language-should-i-study.png) ![](http://7xqgks.com1.z0.glb.clouddn.com/what-language-should-i-study.jpg)","slug":"hello-world-1","published":1,"updated":"2020-05-19T08:33:55.922Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts7zt003mzmz8dtaj3ax6","content":"<p>该学什么编程语言。<a href=\"http://7xqgks.com1.z0.glb.clouddn.com/bugzhangwhat-language-should-i-study.png\" target=\"_blank\" rel=\"noopener\">点击查看大图</a> <img src=\"http://7xqgks.com1.z0.glb.clouddn.com/what-language-should-i-study.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>该学什么编程语言。<a href=\"http://7xqgks.com1.z0.glb.clouddn.com/bugzhangwhat-language-should-i-study.png\" target=\"_blank\" rel=\"noopener\">点击查看大图</a> <img src=\"http://7xqgks.com1.z0.glb.clouddn.com/what-language-should-i-study.jpg\" alt=\"\"></p>\n"},{"title":"HTTP认证机制","url":"168.html","id":"168","date":"2017-12-10T05:42:45.000Z","_content":"\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0068.jpg)\n\n简介HTTP认证\n========\n\n如果对某个页面有一定要求，只允许部分用户可见，就需要一个认证功能。 认证主要可以通过核对以下信息实现：\n\n*   口令：只有本人知道的一串字符串信息\n*   令牌：仅本人设备产生的一次性密码\n*   证书：仅本人持有的一个信息\n\n通过验证核对上述信息，就可以实现认证，对HTTP协议来说，认证主要有以下几种实现：\n\n*   basic认证\n*   digsic认证\n*   ssl客户端认证\n*   基于表单的认证\n\n下面分别论述这几种认证方式。\n\nBASIC认证\n=======\n\nbasic认证主要利用的是http中的Authorization字段。主要步骤是：\n\n1.  当请求的资源需要 BASIC 认证时，服务器会随状态码 401 Authorization Required，返回带 WWW- Authenticate 首部字段的响应。该字段内包含认证的方式(BASIC) 及 Request-URI 安全域字符串 (realm)。\n2.  接收到状态码 401 的客户端为了通过 BASIC 认证，需要将用户 ID 及密码发送给服务器。发送的字 符串内容是由用户 ID 和密码构成，两者中间以冒号(:)连接后，再经过 Base64 编码处理。 假设用户 ID 为 guest，密码是 guest，连接起来就会形成 guest:guest 这样的字符串。然后经过 Base64 编 码，最后的结果即是 Z3Vlc3Q6Z3Vlc3Q=。把这串字符串写入首部字段 Authorization 后，发送请求。 当用户代理为浏览器时，用户仅需输入用户 ID 和密码即可，之后，浏览器会自动完成到 Base64 编码的转换 工作。\n3.  接收到包含首部字段 Authorization 请求的服务器，会对认证信息的正确性进行验证。如验证通过， 则返回一条包含 Request-URI 资源的响应。\n\nBASIC 认证虽然采用 Base64 编码方式，但这不是加密处理。不需要任何附加信息即可对其解码。换言之， 由于明文解码后就是用户 ID 和密码，在 HTTP 等非加密通信的线路上进行 BASIC 认证的过程中，如果被人 窃听，被盗的可能性极高。 另外，除此之外想再进行一次 BASIC 认证时，一般的浏览器却无法实现认证注销操作，这也是问题之一。 BASIC 认证使用上不够便捷灵活，且达不到多数 Web 网站期望的安全性等级，因此它并不常用。\n\nDIGEST认证(又叫摘要认证)\n================\n\n为弥补 BASIC 认证存在的弱点，从 HTTP/1.1 起就有了 DIGEST 认证。 DIGEST 认证同样使用质询 / 响应的 方式，但不会像 BASIC 认证那样直接发送明文密码。\n\n1.  请求需认证的资源时，服务器会随着状态码 401 Authorization Required，返 回带 WWW- Authenticate 首部字段的响应。该字段内包含质问响应方式认证所需的临时质询码(随机数，nonce)\n    \n2.  接收到 401 状态码的客户端，返回的响应中包含 DIGEST 认证必须的首部字段 Authorization 信息。\n    \n3.  接收到包含首部字段 Authorization 请求的服务器，会确认认证信息的正确性。认证通过后则返回包 含 Request-URI 资源的响应。\n    \n\nDIGEST 认证提供了高于 BASIC 认证的安全等级，但是和 HTTPS 的客户端认证相比仍旧很弱。DIGEST 认 证提供防止密码被窃听的保护机制，但并不存在防止用户伪装的保护机制。 DIGEST 认证和 BASIC 认证一样，使用上不那么便捷灵活，且仍达不到多数 Web 网站对高度安全等级的追 求标准。因此它的适用范围也有所受限。\n\nSSL客户端认证\n========\n\nSSL 客户端认证是借由 HTTPS 的客户端证书完成认证的方式。凭借客户端证书认证，服务器可确认访问是否来自已登录的客户端。\n\n1.  接收到需要认证资源的请求，服务器会发送 Certificate Request 报文，要求客户端提供客户端证 书。\n2.  用户选择将发送的客户端证书后，客户端会把客户端证书信息以 Client Certificate 报文方式发送给 服务器。\n3.  服务器验证客户端证书验证通过后方可领取证书内客户端的公开密钥，然后开始 HTTPS 加密通 信。\n\n基于表单认证\n======\n\n基于表单的认证，是利用表单控件中的数据，进行认证。比较有意思的是，基于表单的认证是http协议中未被规范的一种认证方式，但因其方便与良好的用户体验，成为了绝大多数web应用采用的认证方式。 表单认证可以借助cookie，以及加密实现一定的安全机制。\n\n1.  客户端把用户 ID 和密码等登录信息放入报文的实体部分，通常是以 POST 方法把请求发送给服务 器。而这时，会使用 HTTPS 通信来进行 HTML 表单画面的显示和用户输入数据的发送。\n2.  服务器会发放用以识别用户的 Session ID。通过验证从客户端发送过来的登录信息进行身份认证， 然后把用户的认证状态与 Session ID 绑定后记录在服务器端。\n3.  客户端接收到从服务器端发来的 Session ID 后，会将其作为 Cookie 保存在本地。下次向服务器发 送请求时，浏览器会自动发送 Cookie，所以 Session ID 也随之发送到服务器。服务器端可通过验证接收到的 Session ID 识别用户和其认证状态。","source":"_posts/http-e8-ae-a4-e8-af-81-e6-9c-ba-e5-88-b6.md","raw":"---\ntitle: HTTP认证机制\ntags:\n  - HTTP\n  - 前端\n  - 后端\n  - 安全\nurl: 168.html\nid: 168\ncategories:\n  - HTTP\n  - 前端\n  - 后端\ndate: 2017-12-10 13:42:45\n---\n\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0068.jpg)\n\n简介HTTP认证\n========\n\n如果对某个页面有一定要求，只允许部分用户可见，就需要一个认证功能。 认证主要可以通过核对以下信息实现：\n\n*   口令：只有本人知道的一串字符串信息\n*   令牌：仅本人设备产生的一次性密码\n*   证书：仅本人持有的一个信息\n\n通过验证核对上述信息，就可以实现认证，对HTTP协议来说，认证主要有以下几种实现：\n\n*   basic认证\n*   digsic认证\n*   ssl客户端认证\n*   基于表单的认证\n\n下面分别论述这几种认证方式。\n\nBASIC认证\n=======\n\nbasic认证主要利用的是http中的Authorization字段。主要步骤是：\n\n1.  当请求的资源需要 BASIC 认证时，服务器会随状态码 401 Authorization Required，返回带 WWW- Authenticate 首部字段的响应。该字段内包含认证的方式(BASIC) 及 Request-URI 安全域字符串 (realm)。\n2.  接收到状态码 401 的客户端为了通过 BASIC 认证，需要将用户 ID 及密码发送给服务器。发送的字 符串内容是由用户 ID 和密码构成，两者中间以冒号(:)连接后，再经过 Base64 编码处理。 假设用户 ID 为 guest，密码是 guest，连接起来就会形成 guest:guest 这样的字符串。然后经过 Base64 编 码，最后的结果即是 Z3Vlc3Q6Z3Vlc3Q=。把这串字符串写入首部字段 Authorization 后，发送请求。 当用户代理为浏览器时，用户仅需输入用户 ID 和密码即可，之后，浏览器会自动完成到 Base64 编码的转换 工作。\n3.  接收到包含首部字段 Authorization 请求的服务器，会对认证信息的正确性进行验证。如验证通过， 则返回一条包含 Request-URI 资源的响应。\n\nBASIC 认证虽然采用 Base64 编码方式，但这不是加密处理。不需要任何附加信息即可对其解码。换言之， 由于明文解码后就是用户 ID 和密码，在 HTTP 等非加密通信的线路上进行 BASIC 认证的过程中，如果被人 窃听，被盗的可能性极高。 另外，除此之外想再进行一次 BASIC 认证时，一般的浏览器却无法实现认证注销操作，这也是问题之一。 BASIC 认证使用上不够便捷灵活，且达不到多数 Web 网站期望的安全性等级，因此它并不常用。\n\nDIGEST认证(又叫摘要认证)\n================\n\n为弥补 BASIC 认证存在的弱点，从 HTTP/1.1 起就有了 DIGEST 认证。 DIGEST 认证同样使用质询 / 响应的 方式，但不会像 BASIC 认证那样直接发送明文密码。\n\n1.  请求需认证的资源时，服务器会随着状态码 401 Authorization Required，返 回带 WWW- Authenticate 首部字段的响应。该字段内包含质问响应方式认证所需的临时质询码(随机数，nonce)\n    \n2.  接收到 401 状态码的客户端，返回的响应中包含 DIGEST 认证必须的首部字段 Authorization 信息。\n    \n3.  接收到包含首部字段 Authorization 请求的服务器，会确认认证信息的正确性。认证通过后则返回包 含 Request-URI 资源的响应。\n    \n\nDIGEST 认证提供了高于 BASIC 认证的安全等级，但是和 HTTPS 的客户端认证相比仍旧很弱。DIGEST 认 证提供防止密码被窃听的保护机制，但并不存在防止用户伪装的保护机制。 DIGEST 认证和 BASIC 认证一样，使用上不那么便捷灵活，且仍达不到多数 Web 网站对高度安全等级的追 求标准。因此它的适用范围也有所受限。\n\nSSL客户端认证\n========\n\nSSL 客户端认证是借由 HTTPS 的客户端证书完成认证的方式。凭借客户端证书认证，服务器可确认访问是否来自已登录的客户端。\n\n1.  接收到需要认证资源的请求，服务器会发送 Certificate Request 报文，要求客户端提供客户端证 书。\n2.  用户选择将发送的客户端证书后，客户端会把客户端证书信息以 Client Certificate 报文方式发送给 服务器。\n3.  服务器验证客户端证书验证通过后方可领取证书内客户端的公开密钥，然后开始 HTTPS 加密通 信。\n\n基于表单认证\n======\n\n基于表单的认证，是利用表单控件中的数据，进行认证。比较有意思的是，基于表单的认证是http协议中未被规范的一种认证方式，但因其方便与良好的用户体验，成为了绝大多数web应用采用的认证方式。 表单认证可以借助cookie，以及加密实现一定的安全机制。\n\n1.  客户端把用户 ID 和密码等登录信息放入报文的实体部分，通常是以 POST 方法把请求发送给服务 器。而这时，会使用 HTTPS 通信来进行 HTML 表单画面的显示和用户输入数据的发送。\n2.  服务器会发放用以识别用户的 Session ID。通过验证从客户端发送过来的登录信息进行身份认证， 然后把用户的认证状态与 Session ID 绑定后记录在服务器端。\n3.  客户端接收到从服务器端发来的 Session ID 后，会将其作为 Cookie 保存在本地。下次向服务器发 送请求时，浏览器会自动发送 Cookie，所以 Session ID 也随之发送到服务器。服务器端可通过验证接收到的 Session ID 识别用户和其认证状态。","slug":"http-e8-ae-a4-e8-af-81-e6-9c-ba-e5-88-b6","published":1,"updated":"2020-05-19T08:33:55.927Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts7zu003pzmz85vqu8pbk","content":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0068.jpg\" alt=\"\"></p>\n<h1 id=\"简介HTTP认证\"><a href=\"#简介HTTP认证\" class=\"headerlink\" title=\"简介HTTP认证\"></a>简介HTTP认证</h1><p>如果对某个页面有一定要求，只允许部分用户可见，就需要一个认证功能。 认证主要可以通过核对以下信息实现：</p>\n<ul>\n<li>口令：只有本人知道的一串字符串信息</li>\n<li>令牌：仅本人设备产生的一次性密码</li>\n<li>证书：仅本人持有的一个信息</li>\n</ul>\n<p>通过验证核对上述信息，就可以实现认证，对HTTP协议来说，认证主要有以下几种实现：</p>\n<ul>\n<li>basic认证</li>\n<li>digsic认证</li>\n<li>ssl客户端认证</li>\n<li>基于表单的认证</li>\n</ul>\n<p>下面分别论述这几种认证方式。</p>\n<h1 id=\"BASIC认证\"><a href=\"#BASIC认证\" class=\"headerlink\" title=\"BASIC认证\"></a>BASIC认证</h1><p>basic认证主要利用的是http中的Authorization字段。主要步骤是：</p>\n<ol>\n<li>当请求的资源需要 BASIC 认证时，服务器会随状态码 401 Authorization Required，返回带 WWW- Authenticate 首部字段的响应。该字段内包含认证的方式(BASIC) 及 Request-URI 安全域字符串 (realm)。</li>\n<li>接收到状态码 401 的客户端为了通过 BASIC 认证，需要将用户 ID 及密码发送给服务器。发送的字 符串内容是由用户 ID 和密码构成，两者中间以冒号(:)连接后，再经过 Base64 编码处理。 假设用户 ID 为 guest，密码是 guest，连接起来就会形成 guest:guest 这样的字符串。然后经过 Base64 编 码，最后的结果即是 Z3Vlc3Q6Z3Vlc3Q=。把这串字符串写入首部字段 Authorization 后，发送请求。 当用户代理为浏览器时，用户仅需输入用户 ID 和密码即可，之后，浏览器会自动完成到 Base64 编码的转换 工作。</li>\n<li>接收到包含首部字段 Authorization 请求的服务器，会对认证信息的正确性进行验证。如验证通过， 则返回一条包含 Request-URI 资源的响应。</li>\n</ol>\n<p>BASIC 认证虽然采用 Base64 编码方式，但这不是加密处理。不需要任何附加信息即可对其解码。换言之， 由于明文解码后就是用户 ID 和密码，在 HTTP 等非加密通信的线路上进行 BASIC 认证的过程中，如果被人 窃听，被盗的可能性极高。 另外，除此之外想再进行一次 BASIC 认证时，一般的浏览器却无法实现认证注销操作，这也是问题之一。 BASIC 认证使用上不够便捷灵活，且达不到多数 Web 网站期望的安全性等级，因此它并不常用。</p>\n<h1 id=\"DIGEST认证-又叫摘要认证\"><a href=\"#DIGEST认证-又叫摘要认证\" class=\"headerlink\" title=\"DIGEST认证(又叫摘要认证)\"></a>DIGEST认证(又叫摘要认证)</h1><p>为弥补 BASIC 认证存在的弱点，从 HTTP/1.1 起就有了 DIGEST 认证。 DIGEST 认证同样使用质询 / 响应的 方式，但不会像 BASIC 认证那样直接发送明文密码。</p>\n<ol>\n<li><p>请求需认证的资源时，服务器会随着状态码 401 Authorization Required，返 回带 WWW- Authenticate 首部字段的响应。该字段内包含质问响应方式认证所需的临时质询码(随机数，nonce)</p>\n</li>\n<li><p>接收到 401 状态码的客户端，返回的响应中包含 DIGEST 认证必须的首部字段 Authorization 信息。</p>\n</li>\n<li><p>接收到包含首部字段 Authorization 请求的服务器，会确认认证信息的正确性。认证通过后则返回包 含 Request-URI 资源的响应。</p>\n</li>\n</ol>\n<p>DIGEST 认证提供了高于 BASIC 认证的安全等级，但是和 HTTPS 的客户端认证相比仍旧很弱。DIGEST 认 证提供防止密码被窃听的保护机制，但并不存在防止用户伪装的保护机制。 DIGEST 认证和 BASIC 认证一样，使用上不那么便捷灵活，且仍达不到多数 Web 网站对高度安全等级的追 求标准。因此它的适用范围也有所受限。</p>\n<h1 id=\"SSL客户端认证\"><a href=\"#SSL客户端认证\" class=\"headerlink\" title=\"SSL客户端认证\"></a>SSL客户端认证</h1><p>SSL 客户端认证是借由 HTTPS 的客户端证书完成认证的方式。凭借客户端证书认证，服务器可确认访问是否来自已登录的客户端。</p>\n<ol>\n<li>接收到需要认证资源的请求，服务器会发送 Certificate Request 报文，要求客户端提供客户端证 书。</li>\n<li>用户选择将发送的客户端证书后，客户端会把客户端证书信息以 Client Certificate 报文方式发送给 服务器。</li>\n<li>服务器验证客户端证书验证通过后方可领取证书内客户端的公开密钥，然后开始 HTTPS 加密通 信。</li>\n</ol>\n<h1 id=\"基于表单认证\"><a href=\"#基于表单认证\" class=\"headerlink\" title=\"基于表单认证\"></a>基于表单认证</h1><p>基于表单的认证，是利用表单控件中的数据，进行认证。比较有意思的是，基于表单的认证是http协议中未被规范的一种认证方式，但因其方便与良好的用户体验，成为了绝大多数web应用采用的认证方式。 表单认证可以借助cookie，以及加密实现一定的安全机制。</p>\n<ol>\n<li>客户端把用户 ID 和密码等登录信息放入报文的实体部分，通常是以 POST 方法把请求发送给服务 器。而这时，会使用 HTTPS 通信来进行 HTML 表单画面的显示和用户输入数据的发送。</li>\n<li>服务器会发放用以识别用户的 Session ID。通过验证从客户端发送过来的登录信息进行身份认证， 然后把用户的认证状态与 Session ID 绑定后记录在服务器端。</li>\n<li>客户端接收到从服务器端发来的 Session ID 后，会将其作为 Cookie 保存在本地。下次向服务器发 送请求时，浏览器会自动发送 Cookie，所以 Session ID 也随之发送到服务器。服务器端可通过验证接收到的 Session ID 识别用户和其认证状态。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0068.jpg\" alt=\"\"></p>\n<h1 id=\"简介HTTP认证\"><a href=\"#简介HTTP认证\" class=\"headerlink\" title=\"简介HTTP认证\"></a>简介HTTP认证</h1><p>如果对某个页面有一定要求，只允许部分用户可见，就需要一个认证功能。 认证主要可以通过核对以下信息实现：</p>\n<ul>\n<li>口令：只有本人知道的一串字符串信息</li>\n<li>令牌：仅本人设备产生的一次性密码</li>\n<li>证书：仅本人持有的一个信息</li>\n</ul>\n<p>通过验证核对上述信息，就可以实现认证，对HTTP协议来说，认证主要有以下几种实现：</p>\n<ul>\n<li>basic认证</li>\n<li>digsic认证</li>\n<li>ssl客户端认证</li>\n<li>基于表单的认证</li>\n</ul>\n<p>下面分别论述这几种认证方式。</p>\n<h1 id=\"BASIC认证\"><a href=\"#BASIC认证\" class=\"headerlink\" title=\"BASIC认证\"></a>BASIC认证</h1><p>basic认证主要利用的是http中的Authorization字段。主要步骤是：</p>\n<ol>\n<li>当请求的资源需要 BASIC 认证时，服务器会随状态码 401 Authorization Required，返回带 WWW- Authenticate 首部字段的响应。该字段内包含认证的方式(BASIC) 及 Request-URI 安全域字符串 (realm)。</li>\n<li>接收到状态码 401 的客户端为了通过 BASIC 认证，需要将用户 ID 及密码发送给服务器。发送的字 符串内容是由用户 ID 和密码构成，两者中间以冒号(:)连接后，再经过 Base64 编码处理。 假设用户 ID 为 guest，密码是 guest，连接起来就会形成 guest:guest 这样的字符串。然后经过 Base64 编 码，最后的结果即是 Z3Vlc3Q6Z3Vlc3Q=。把这串字符串写入首部字段 Authorization 后，发送请求。 当用户代理为浏览器时，用户仅需输入用户 ID 和密码即可，之后，浏览器会自动完成到 Base64 编码的转换 工作。</li>\n<li>接收到包含首部字段 Authorization 请求的服务器，会对认证信息的正确性进行验证。如验证通过， 则返回一条包含 Request-URI 资源的响应。</li>\n</ol>\n<p>BASIC 认证虽然采用 Base64 编码方式，但这不是加密处理。不需要任何附加信息即可对其解码。换言之， 由于明文解码后就是用户 ID 和密码，在 HTTP 等非加密通信的线路上进行 BASIC 认证的过程中，如果被人 窃听，被盗的可能性极高。 另外，除此之外想再进行一次 BASIC 认证时，一般的浏览器却无法实现认证注销操作，这也是问题之一。 BASIC 认证使用上不够便捷灵活，且达不到多数 Web 网站期望的安全性等级，因此它并不常用。</p>\n<h1 id=\"DIGEST认证-又叫摘要认证\"><a href=\"#DIGEST认证-又叫摘要认证\" class=\"headerlink\" title=\"DIGEST认证(又叫摘要认证)\"></a>DIGEST认证(又叫摘要认证)</h1><p>为弥补 BASIC 认证存在的弱点，从 HTTP/1.1 起就有了 DIGEST 认证。 DIGEST 认证同样使用质询 / 响应的 方式，但不会像 BASIC 认证那样直接发送明文密码。</p>\n<ol>\n<li><p>请求需认证的资源时，服务器会随着状态码 401 Authorization Required，返 回带 WWW- Authenticate 首部字段的响应。该字段内包含质问响应方式认证所需的临时质询码(随机数，nonce)</p>\n</li>\n<li><p>接收到 401 状态码的客户端，返回的响应中包含 DIGEST 认证必须的首部字段 Authorization 信息。</p>\n</li>\n<li><p>接收到包含首部字段 Authorization 请求的服务器，会确认认证信息的正确性。认证通过后则返回包 含 Request-URI 资源的响应。</p>\n</li>\n</ol>\n<p>DIGEST 认证提供了高于 BASIC 认证的安全等级，但是和 HTTPS 的客户端认证相比仍旧很弱。DIGEST 认 证提供防止密码被窃听的保护机制，但并不存在防止用户伪装的保护机制。 DIGEST 认证和 BASIC 认证一样，使用上不那么便捷灵活，且仍达不到多数 Web 网站对高度安全等级的追 求标准。因此它的适用范围也有所受限。</p>\n<h1 id=\"SSL客户端认证\"><a href=\"#SSL客户端认证\" class=\"headerlink\" title=\"SSL客户端认证\"></a>SSL客户端认证</h1><p>SSL 客户端认证是借由 HTTPS 的客户端证书完成认证的方式。凭借客户端证书认证，服务器可确认访问是否来自已登录的客户端。</p>\n<ol>\n<li>接收到需要认证资源的请求，服务器会发送 Certificate Request 报文，要求客户端提供客户端证 书。</li>\n<li>用户选择将发送的客户端证书后，客户端会把客户端证书信息以 Client Certificate 报文方式发送给 服务器。</li>\n<li>服务器验证客户端证书验证通过后方可领取证书内客户端的公开密钥，然后开始 HTTPS 加密通 信。</li>\n</ol>\n<h1 id=\"基于表单认证\"><a href=\"#基于表单认证\" class=\"headerlink\" title=\"基于表单认证\"></a>基于表单认证</h1><p>基于表单的认证，是利用表单控件中的数据，进行认证。比较有意思的是，基于表单的认证是http协议中未被规范的一种认证方式，但因其方便与良好的用户体验，成为了绝大多数web应用采用的认证方式。 表单认证可以借助cookie，以及加密实现一定的安全机制。</p>\n<ol>\n<li>客户端把用户 ID 和密码等登录信息放入报文的实体部分，通常是以 POST 方法把请求发送给服务 器。而这时，会使用 HTTPS 通信来进行 HTML 表单画面的显示和用户输入数据的发送。</li>\n<li>服务器会发放用以识别用户的 Session ID。通过验证从客户端发送过来的登录信息进行身份认证， 然后把用户的认证状态与 Session ID 绑定后记录在服务器端。</li>\n<li>客户端接收到从服务器端发来的 Session ID 后，会将其作为 Cookie 保存在本地。下次向服务器发 送请求时，浏览器会自动发送 Cookie，所以 Session ID 也随之发送到服务器。服务器端可通过验证接收到的 Session ID 识别用户和其认证状态。</li>\n</ol>\n"},{"title":"javascript中的相等\"===\"与\"==\"详解","url":"165.html","id":"165","date":"2018-02-25T05:16:44.000Z","_content":"\n全等\n==\n\njs对全等\"===\"的实现逻辑是如下的： ![](http://img.bugzhang.com/%E5%85%A8%E7%AD%89.png) 即： 1\\. 如果 Type(x) 和 Type(y) 不同，返回 false 2. 如果 Type(x) 为 Undefined，返回 true 3. 如果 Type(x) 为 Null，返回 true 4. 如果 Type(x) 为 Number，则进入下面的判断逻辑 4.1. 如果 x 为 NaN，返回 false\n4.2. 如果 y 为 NaN，返回 false\n4.3. 如果 x 的数字值和 y 相等，返回 true\n4.4. 如果 x 是 +0 且 y 是 -0，返回 true\n4.5. 如果 x 是 -0 且 y 是 +0，返回 ture\n4.6. 返回 false 5. 如果 Type(x) 为 String，则当且仅当 x 与 y 的字符序列完全相同（长度相等，每个位置上的字符相同）时返回 true，否则返回 false 6. 如果 Type(x) 为 Boolean，则若 x 与 y 同为 true 或同为 false 时返回 true，否则返回 false7. 如果 x 和 y 引用的是同一个对象，返回 true，否则返回 false\n\n不全等==\n=====\n\n不全等的逻辑更加冗长，如下： ![](http://img.bugzhang.com/%E9%9D%9E%E5%85%A8%E7%AD%89.png)\n\n1.  如果 Type(x) 和 Type(y) 相同，则\n\n2.  1.1. 如果 Type(x) 为 Undefined，返回 true\n    1.2. 如果 Type(x) 为 Null，返回 true\n    1.3. 如果 Type(x) 为 Number，则\n    1.3.1. 如果 x 是 NaN，返回 false\n    1.3.2. 如果 y 是 NaN，返回 false\n    1.3.3. 如果 x 的数值与 y 相同，返回 true\n    1.3.4. 如果 x 是 +0 且 y 是 -0，返回 true\n    1.3.5. 如果 x 是 -0 且 y 是 +0，返回 true\n    1.3.6. 返回 false\n    1.4. 如果 Type(x) 为 String，则当且仅当 x 与 y 的字符序列完全相同（长度相等，每个位置上的字符相同）时返回 true，否则返回 false\n    1.5. 如果 Type(x) 为 Boolean，则若 x 与 y 同为 true 或同为 false 时返回 true，否则返回 false\n    1.6. 如果 x 和 y 引用的是同一个对象，返回 true，否则返回 false\n\n3.  如果 x 是 null 且 y 是 undefined，返回 true\n\n4.  如果 x 是 undefined 且 y 是 null，返回 ture\n\n5.  如果 Type(x) 为 Number 且 Type(y) 为 String，以 x == ToNumber(y) 的比较结果作为返回\n\n6.  如果 Type(x) 为 String 且 Type(y) 为 Number，以 ToNumber(x) == y 的比较结果作为返回值\n\n7.  如果 Type(x) 为 Boolean，以 ToNumber(x) == y 的比较结果作为返回值\n\n8.  如果 Type(y) 为 Boolean，以 x == ToNumber(y) 的比较结果作为返回值\n\n9.  如果 Type(x) 为 String 或 Number 且 Type(y) 为 Object，以 x == ToPrimitive(y) 的比较结果作为返回值\n\n10.  如果 Type(x) 为 Object 且 Type(y) 为 String 或 Number，以 ToPrimitive(x) == y 的比较结果作为返回值\n\n11.  返回 false\n\n所以实际就是这样的表现： ![](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1519546038753&di=433922788363eb439577b9e06a9758d0&imgtype=0&src=http%3A%2F%2Fimages2015.cnblogs.com%2Fblog%2F912254%2F201610%2F912254-20161025235619187-741352385.png)\n\n完全等同函数\n======\n\n无论全等还是非全等，对于NaN，以及+0、-0的处理都是非常失败的，因此可以有一个完全等同函数处理这个问题\n\n```js\n    function identity(val1, val2) {\n        if(val1===val2){\n            if((val1 === -0 || val2 === +0)&&(val1 === +0 || val2 === -0)){\n                return false\n            }\n            return true;\n        }else {\n            if(val1 === NaN || val2 === NaN){\n                return true\n            }\n            return false;\n        }\n    }\n```\n\n此外需要注意的就是，在严格模式下，只允许采用全等，另外在代码中，也更加提倡全等以避免不必要的麻烦。","source":"_posts/javascript-e4-b8-ad-e7-9a-84-e7-9b-b8-e7-ad-89-e4-b8-8e-e8-af-a6-e8-a7-a3.md","raw":"---\ntitle: javascript中的相等\"===\"与\"==\"详解\ntags:\n  - JavaScript\n  - 前端底层\nurl: 165.html\nid: 165\ncategories:\n  - 前端\ndate: 2018-02-25 13:16:44\n---\n\n全等\n==\n\njs对全等\"===\"的实现逻辑是如下的： ![](http://img.bugzhang.com/%E5%85%A8%E7%AD%89.png) 即： 1\\. 如果 Type(x) 和 Type(y) 不同，返回 false 2. 如果 Type(x) 为 Undefined，返回 true 3. 如果 Type(x) 为 Null，返回 true 4. 如果 Type(x) 为 Number，则进入下面的判断逻辑 4.1. 如果 x 为 NaN，返回 false\n4.2. 如果 y 为 NaN，返回 false\n4.3. 如果 x 的数字值和 y 相等，返回 true\n4.4. 如果 x 是 +0 且 y 是 -0，返回 true\n4.5. 如果 x 是 -0 且 y 是 +0，返回 ture\n4.6. 返回 false 5. 如果 Type(x) 为 String，则当且仅当 x 与 y 的字符序列完全相同（长度相等，每个位置上的字符相同）时返回 true，否则返回 false 6. 如果 Type(x) 为 Boolean，则若 x 与 y 同为 true 或同为 false 时返回 true，否则返回 false7. 如果 x 和 y 引用的是同一个对象，返回 true，否则返回 false\n\n不全等==\n=====\n\n不全等的逻辑更加冗长，如下： ![](http://img.bugzhang.com/%E9%9D%9E%E5%85%A8%E7%AD%89.png)\n\n1.  如果 Type(x) 和 Type(y) 相同，则\n\n2.  1.1. 如果 Type(x) 为 Undefined，返回 true\n    1.2. 如果 Type(x) 为 Null，返回 true\n    1.3. 如果 Type(x) 为 Number，则\n    1.3.1. 如果 x 是 NaN，返回 false\n    1.3.2. 如果 y 是 NaN，返回 false\n    1.3.3. 如果 x 的数值与 y 相同，返回 true\n    1.3.4. 如果 x 是 +0 且 y 是 -0，返回 true\n    1.3.5. 如果 x 是 -0 且 y 是 +0，返回 true\n    1.3.6. 返回 false\n    1.4. 如果 Type(x) 为 String，则当且仅当 x 与 y 的字符序列完全相同（长度相等，每个位置上的字符相同）时返回 true，否则返回 false\n    1.5. 如果 Type(x) 为 Boolean，则若 x 与 y 同为 true 或同为 false 时返回 true，否则返回 false\n    1.6. 如果 x 和 y 引用的是同一个对象，返回 true，否则返回 false\n\n3.  如果 x 是 null 且 y 是 undefined，返回 true\n\n4.  如果 x 是 undefined 且 y 是 null，返回 ture\n\n5.  如果 Type(x) 为 Number 且 Type(y) 为 String，以 x == ToNumber(y) 的比较结果作为返回\n\n6.  如果 Type(x) 为 String 且 Type(y) 为 Number，以 ToNumber(x) == y 的比较结果作为返回值\n\n7.  如果 Type(x) 为 Boolean，以 ToNumber(x) == y 的比较结果作为返回值\n\n8.  如果 Type(y) 为 Boolean，以 x == ToNumber(y) 的比较结果作为返回值\n\n9.  如果 Type(x) 为 String 或 Number 且 Type(y) 为 Object，以 x == ToPrimitive(y) 的比较结果作为返回值\n\n10.  如果 Type(x) 为 Object 且 Type(y) 为 String 或 Number，以 ToPrimitive(x) == y 的比较结果作为返回值\n\n11.  返回 false\n\n所以实际就是这样的表现： ![](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1519546038753&di=433922788363eb439577b9e06a9758d0&imgtype=0&src=http%3A%2F%2Fimages2015.cnblogs.com%2Fblog%2F912254%2F201610%2F912254-20161025235619187-741352385.png)\n\n完全等同函数\n======\n\n无论全等还是非全等，对于NaN，以及+0、-0的处理都是非常失败的，因此可以有一个完全等同函数处理这个问题\n\n```js\n    function identity(val1, val2) {\n        if(val1===val2){\n            if((val1 === -0 || val2 === +0)&&(val1 === +0 || val2 === -0)){\n                return false\n            }\n            return true;\n        }else {\n            if(val1 === NaN || val2 === NaN){\n                return true\n            }\n            return false;\n        }\n    }\n```\n\n此外需要注意的就是，在严格模式下，只允许采用全等，另外在代码中，也更加提倡全等以避免不必要的麻烦。","slug":"javascript-e4-b8-ad-e7-9a-84-e7-9b-b8-e7-ad-89-e4-b8-8e-e8-af-a6-e8-a7-a3","published":1,"updated":"2020-05-21T08:12:33.644Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts7zx003uzmz87anpg7zl","content":"<h1 id=\"全等\"><a href=\"#全等\" class=\"headerlink\" title=\"全等\"></a>全等</h1><p>js对全等”===”的实现逻辑是如下的： <img src=\"http://img.bugzhang.com/%E5%85%A8%E7%AD%89.png\" alt=\"\"> 即： 1. 如果 Type(x) 和 Type(y) 不同，返回 false 2. 如果 Type(x) 为 Undefined，返回 true 3. 如果 Type(x) 为 Null，返回 true 4. 如果 Type(x) 为 Number，则进入下面的判断逻辑 4.1. 如果 x 为 NaN，返回 false<br>4.2. 如果 y 为 NaN，返回 false<br>4.3. 如果 x 的数字值和 y 相等，返回 true<br>4.4. 如果 x 是 +0 且 y 是 -0，返回 true<br>4.5. 如果 x 是 -0 且 y 是 +0，返回 ture<br>4.6. 返回 false 5. 如果 Type(x) 为 String，则当且仅当 x 与 y 的字符序列完全相同（长度相等，每个位置上的字符相同）时返回 true，否则返回 false 6. 如果 Type(x) 为 Boolean，则若 x 与 y 同为 true 或同为 false 时返回 true，否则返回 false7. 如果 x 和 y 引用的是同一个对象，返回 true，否则返回 false</p>\n<h1 id=\"不全等\"><a href=\"#不全等\" class=\"headerlink\" title=\"不全等==\"></a>不全等==</h1><p>不全等的逻辑更加冗长，如下： <img src=\"http://img.bugzhang.com/%E9%9D%9E%E5%85%A8%E7%AD%89.png\" alt=\"\"></p>\n<ol>\n<li><p>如果 Type(x) 和 Type(y) 相同，则</p>\n</li>\n<li><p>1.1. 如果 Type(x) 为 Undefined，返回 true<br>1.2. 如果 Type(x) 为 Null，返回 true<br>1.3. 如果 Type(x) 为 Number，则<br>1.3.1. 如果 x 是 NaN，返回 false<br>1.3.2. 如果 y 是 NaN，返回 false<br>1.3.3. 如果 x 的数值与 y 相同，返回 true<br>1.3.4. 如果 x 是 +0 且 y 是 -0，返回 true<br>1.3.5. 如果 x 是 -0 且 y 是 +0，返回 true<br>1.3.6. 返回 false<br>1.4. 如果 Type(x) 为 String，则当且仅当 x 与 y 的字符序列完全相同（长度相等，每个位置上的字符相同）时返回 true，否则返回 false<br>1.5. 如果 Type(x) 为 Boolean，则若 x 与 y 同为 true 或同为 false 时返回 true，否则返回 false<br>1.6. 如果 x 和 y 引用的是同一个对象，返回 true，否则返回 false</p>\n</li>\n<li><p>如果 x 是 null 且 y 是 undefined，返回 true</p>\n</li>\n<li><p>如果 x 是 undefined 且 y 是 null，返回 ture</p>\n</li>\n<li><p>如果 Type(x) 为 Number 且 Type(y) 为 String，以 x == ToNumber(y) 的比较结果作为返回</p>\n</li>\n<li><p>如果 Type(x) 为 String 且 Type(y) 为 Number，以 ToNumber(x) == y 的比较结果作为返回值</p>\n</li>\n<li><p>如果 Type(x) 为 Boolean，以 ToNumber(x) == y 的比较结果作为返回值</p>\n</li>\n<li><p>如果 Type(y) 为 Boolean，以 x == ToNumber(y) 的比较结果作为返回值</p>\n</li>\n<li><p>如果 Type(x) 为 String 或 Number 且 Type(y) 为 Object，以 x == ToPrimitive(y) 的比较结果作为返回值</p>\n</li>\n<li><p>如果 Type(x) 为 Object 且 Type(y) 为 String 或 Number，以 ToPrimitive(x) == y 的比较结果作为返回值</p>\n</li>\n<li><p>返回 false</p>\n</li>\n</ol>\n<p>所以实际就是这样的表现： <img src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1519546038753&di=433922788363eb439577b9e06a9758d0&imgtype=0&src=http%3A%2F%2Fimages2015.cnblogs.com%2Fblog%2F912254%2F201610%2F912254-20161025235619187-741352385.png\" alt=\"\"></p>\n<h1 id=\"完全等同函数\"><a href=\"#完全等同函数\" class=\"headerlink\" title=\"完全等同函数\"></a>完全等同函数</h1><p>无论全等还是非全等，对于NaN，以及+0、-0的处理都是非常失败的，因此可以有一个完全等同函数处理这个问题</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">identity</span>(<span class=\"hljs-params\">val1, val2</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(val1===val2)&#123;<br>        <span class=\"hljs-keyword\">if</span>((val1 === <span class=\"hljs-number\">-0</span> || val2 === +<span class=\"hljs-number\">0</span>)&amp;&amp;(val1 === +<span class=\"hljs-number\">0</span> || val2 === <span class=\"hljs-number\">-0</span>))&#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">if</span>(val1 === <span class=\"hljs-literal\">NaN</span> || val2 === <span class=\"hljs-literal\">NaN</span>)&#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>此外需要注意的就是，在严格模式下，只允许采用全等，另外在代码中，也更加提倡全等以避免不必要的麻烦。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"全等\"><a href=\"#全等\" class=\"headerlink\" title=\"全等\"></a>全等</h1><p>js对全等”===”的实现逻辑是如下的： <img src=\"http://img.bugzhang.com/%E5%85%A8%E7%AD%89.png\" alt=\"\"> 即： 1. 如果 Type(x) 和 Type(y) 不同，返回 false 2. 如果 Type(x) 为 Undefined，返回 true 3. 如果 Type(x) 为 Null，返回 true 4. 如果 Type(x) 为 Number，则进入下面的判断逻辑 4.1. 如果 x 为 NaN，返回 false<br>4.2. 如果 y 为 NaN，返回 false<br>4.3. 如果 x 的数字值和 y 相等，返回 true<br>4.4. 如果 x 是 +0 且 y 是 -0，返回 true<br>4.5. 如果 x 是 -0 且 y 是 +0，返回 ture<br>4.6. 返回 false 5. 如果 Type(x) 为 String，则当且仅当 x 与 y 的字符序列完全相同（长度相等，每个位置上的字符相同）时返回 true，否则返回 false 6. 如果 Type(x) 为 Boolean，则若 x 与 y 同为 true 或同为 false 时返回 true，否则返回 false7. 如果 x 和 y 引用的是同一个对象，返回 true，否则返回 false</p>\n<h1 id=\"不全等\"><a href=\"#不全等\" class=\"headerlink\" title=\"不全等==\"></a>不全等==</h1><p>不全等的逻辑更加冗长，如下： <img src=\"http://img.bugzhang.com/%E9%9D%9E%E5%85%A8%E7%AD%89.png\" alt=\"\"></p>\n<ol>\n<li><p>如果 Type(x) 和 Type(y) 相同，则</p>\n</li>\n<li><p>1.1. 如果 Type(x) 为 Undefined，返回 true<br>1.2. 如果 Type(x) 为 Null，返回 true<br>1.3. 如果 Type(x) 为 Number，则<br>1.3.1. 如果 x 是 NaN，返回 false<br>1.3.2. 如果 y 是 NaN，返回 false<br>1.3.3. 如果 x 的数值与 y 相同，返回 true<br>1.3.4. 如果 x 是 +0 且 y 是 -0，返回 true<br>1.3.5. 如果 x 是 -0 且 y 是 +0，返回 true<br>1.3.6. 返回 false<br>1.4. 如果 Type(x) 为 String，则当且仅当 x 与 y 的字符序列完全相同（长度相等，每个位置上的字符相同）时返回 true，否则返回 false<br>1.5. 如果 Type(x) 为 Boolean，则若 x 与 y 同为 true 或同为 false 时返回 true，否则返回 false<br>1.6. 如果 x 和 y 引用的是同一个对象，返回 true，否则返回 false</p>\n</li>\n<li><p>如果 x 是 null 且 y 是 undefined，返回 true</p>\n</li>\n<li><p>如果 x 是 undefined 且 y 是 null，返回 ture</p>\n</li>\n<li><p>如果 Type(x) 为 Number 且 Type(y) 为 String，以 x == ToNumber(y) 的比较结果作为返回</p>\n</li>\n<li><p>如果 Type(x) 为 String 且 Type(y) 为 Number，以 ToNumber(x) == y 的比较结果作为返回值</p>\n</li>\n<li><p>如果 Type(x) 为 Boolean，以 ToNumber(x) == y 的比较结果作为返回值</p>\n</li>\n<li><p>如果 Type(y) 为 Boolean，以 x == ToNumber(y) 的比较结果作为返回值</p>\n</li>\n<li><p>如果 Type(x) 为 String 或 Number 且 Type(y) 为 Object，以 x == ToPrimitive(y) 的比较结果作为返回值</p>\n</li>\n<li><p>如果 Type(x) 为 Object 且 Type(y) 为 String 或 Number，以 ToPrimitive(x) == y 的比较结果作为返回值</p>\n</li>\n<li><p>返回 false</p>\n</li>\n</ol>\n<p>所以实际就是这样的表现： <img src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1519546038753&di=433922788363eb439577b9e06a9758d0&imgtype=0&src=http%3A%2F%2Fimages2015.cnblogs.com%2Fblog%2F912254%2F201610%2F912254-20161025235619187-741352385.png\" alt=\"\"></p>\n<h1 id=\"完全等同函数\"><a href=\"#完全等同函数\" class=\"headerlink\" title=\"完全等同函数\"></a>完全等同函数</h1><p>无论全等还是非全等，对于NaN，以及+0、-0的处理都是非常失败的，因此可以有一个完全等同函数处理这个问题</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">identity</span>(<span class=\"hljs-params\">val1, val2</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(val1===val2)&#123;<br>        <span class=\"hljs-keyword\">if</span>((val1 === <span class=\"hljs-number\">-0</span> || val2 === +<span class=\"hljs-number\">0</span>)&amp;&amp;(val1 === +<span class=\"hljs-number\">0</span> || val2 === <span class=\"hljs-number\">-0</span>))&#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">if</span>(val1 === <span class=\"hljs-literal\">NaN</span> || val2 === <span class=\"hljs-literal\">NaN</span>)&#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>此外需要注意的就是，在严格模式下，只允许采用全等，另外在代码中，也更加提倡全等以避免不必要的麻烦。</p>\n"},{"title":"javascript中OLOO风格（对象委托）编程","url":"191.html","id":"191","date":"2018-04-24T07:11:51.000Z","_content":"\n什么是OLOO\n=======\n\n在《you don't know js》中，作者有提到\"OLOO\"(objects-linked-to-other-objects)编程风格更适合js，而非传统的面向对象风格。原因是：js本身不提供类，所以是对类的一种模拟，实际实现非常繁琐（从es5的多种继承写法可知），是一种舍本求末的行为，而OLOO风格在该书中被认为是最适合JS的风格。 这是一个Student-Person的OLOO风格例子：\n\n    var Person = {\n      init: function(name) {\n        this.name = name;\n      },\n      getName: function() {\n        return this.name;\n      }\n    };\n    \n    var Student = Object.create(Person);\n    \n    Student.set = function(name, school) {\n      this.init(name);\n      this.school = school;\n    };\n    \n    Student.getSchool = function() {\n      return this.school;\n    };\n    \n    var bugzhang = Object.create(Student);\n    bugzhang.set('Bugzhang', 'CSU');\n    \n    bugzhang.getName(); // Bugzhang\n    bugzhang.getSchool(); // CSU\n    \n\nOLOO与OOP的对比\n===========\n\n在绝大多数编程语言中，面向对象的实现有两个范式：基于类的面向对象与基于原型的面向对象，前者如c++，java，后者如javacript。 在js中，如果利用构造函数实现继承，那么构造函数不会在原型链上，原型链只有prototype。如果利用prototype实现，其实prototype式继承不好用。 OLOO没有解决property为引用类型时会共享的问题。 在OOP中：采用的是**类-继承**的思想实现。 在OLOO中：采用的是**行为代理模式**的设计思想。OLOO只代表对象利用原型链连接到其他对象。不再使用构造函数来创建对象，而是使用Object.create()为主的方法，利用对象创建对象。\n\nES6时代的选择\n========\n\n在es6中，class关键字的出现，让js模拟类成为了历史。虽然class本质上任然是构造函数原型混合继承的语法糖，但本身简单好用，简化了重复并且没有意义的模板代码，比如`xxx.prototype.xxx`等；把 class 的 `constructor` 和普通函数严格区分，避免了 new 的暗坑；加上统一的 `super` 关键字作为继承的关键字，而且继承链是成线性的。种种有点表明，class应该作为未来主流的方式。","source":"_posts/javascript-e4-b8-adoloo-e9-a3-8e-e6-a0-bc-ef-bc-88-e5-af-b9-e8-b1-a1-e5-a7-94-e6-89-98-ef-bc-89-e7-bc-96-e7-a8-8b.md","raw":"---\ntitle: javascript中OLOO风格（对象委托）编程\ntags:\n  - JavaScript\n  - 前端\nurl: 191.html\nid: 191\ncategories:\n  - 前端\ndate: 2018-04-24 15:11:51\n---\n\n什么是OLOO\n=======\n\n在《you don't know js》中，作者有提到\"OLOO\"(objects-linked-to-other-objects)编程风格更适合js，而非传统的面向对象风格。原因是：js本身不提供类，所以是对类的一种模拟，实际实现非常繁琐（从es5的多种继承写法可知），是一种舍本求末的行为，而OLOO风格在该书中被认为是最适合JS的风格。 这是一个Student-Person的OLOO风格例子：\n\n    var Person = {\n      init: function(name) {\n        this.name = name;\n      },\n      getName: function() {\n        return this.name;\n      }\n    };\n    \n    var Student = Object.create(Person);\n    \n    Student.set = function(name, school) {\n      this.init(name);\n      this.school = school;\n    };\n    \n    Student.getSchool = function() {\n      return this.school;\n    };\n    \n    var bugzhang = Object.create(Student);\n    bugzhang.set('Bugzhang', 'CSU');\n    \n    bugzhang.getName(); // Bugzhang\n    bugzhang.getSchool(); // CSU\n    \n\nOLOO与OOP的对比\n===========\n\n在绝大多数编程语言中，面向对象的实现有两个范式：基于类的面向对象与基于原型的面向对象，前者如c++，java，后者如javacript。 在js中，如果利用构造函数实现继承，那么构造函数不会在原型链上，原型链只有prototype。如果利用prototype实现，其实prototype式继承不好用。 OLOO没有解决property为引用类型时会共享的问题。 在OOP中：采用的是**类-继承**的思想实现。 在OLOO中：采用的是**行为代理模式**的设计思想。OLOO只代表对象利用原型链连接到其他对象。不再使用构造函数来创建对象，而是使用Object.create()为主的方法，利用对象创建对象。\n\nES6时代的选择\n========\n\n在es6中，class关键字的出现，让js模拟类成为了历史。虽然class本质上任然是构造函数原型混合继承的语法糖，但本身简单好用，简化了重复并且没有意义的模板代码，比如`xxx.prototype.xxx`等；把 class 的 `constructor` 和普通函数严格区分，避免了 new 的暗坑；加上统一的 `super` 关键字作为继承的关键字，而且继承链是成线性的。种种有点表明，class应该作为未来主流的方式。","slug":"javascript-e4-b8-adoloo-e9-a3-8e-e6-a0-bc-ef-bc-88-e5-af-b9-e8-b1-a1-e5-a7-94-e6-89-98-ef-bc-89-e7-bc-96-e7-a8-8b","published":1,"updated":"2020-05-19T08:33:55.927Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts7zz003wzmz8awsb9z8j","content":"<h1 id=\"什么是OLOO\"><a href=\"#什么是OLOO\" class=\"headerlink\" title=\"什么是OLOO\"></a>什么是OLOO</h1><p>在《you don’t know js》中，作者有提到”OLOO”(objects-linked-to-other-objects)编程风格更适合js，而非传统的面向对象风格。原因是：js本身不提供类，所以是对类的一种模拟，实际实现非常繁琐（从es5的多种继承写法可知），是一种舍本求末的行为，而OLOO风格在该书中被认为是最适合JS的风格。 这是一个Student-Person的OLOO风格例子：</p>\n<pre><code>var Person = {\n  init: function(name) {\n    this.name = name;\n  },\n  getName: function() {\n    return this.name;\n  }\n};\n\nvar Student = Object.create(Person);\n\nStudent.set = function(name, school) {\n  this.init(name);\n  this.school = school;\n};\n\nStudent.getSchool = function() {\n  return this.school;\n};\n\nvar bugzhang = Object.create(Student);\nbugzhang.set(&apos;Bugzhang&apos;, &apos;CSU&apos;);\n\nbugzhang.getName(); // Bugzhang\nbugzhang.getSchool(); // CSU</code></pre><h1 id=\"OLOO与OOP的对比\"><a href=\"#OLOO与OOP的对比\" class=\"headerlink\" title=\"OLOO与OOP的对比\"></a>OLOO与OOP的对比</h1><p>在绝大多数编程语言中，面向对象的实现有两个范式：基于类的面向对象与基于原型的面向对象，前者如c++，java，后者如javacript。 在js中，如果利用构造函数实现继承，那么构造函数不会在原型链上，原型链只有prototype。如果利用prototype实现，其实prototype式继承不好用。 OLOO没有解决property为引用类型时会共享的问题。 在OOP中：采用的是<strong>类-继承</strong>的思想实现。 在OLOO中：采用的是<strong>行为代理模式</strong>的设计思想。OLOO只代表对象利用原型链连接到其他对象。不再使用构造函数来创建对象，而是使用Object.create()为主的方法，利用对象创建对象。</p>\n<h1 id=\"ES6时代的选择\"><a href=\"#ES6时代的选择\" class=\"headerlink\" title=\"ES6时代的选择\"></a>ES6时代的选择</h1><p>在es6中，class关键字的出现，让js模拟类成为了历史。虽然class本质上任然是构造函数原型混合继承的语法糖，但本身简单好用，简化了重复并且没有意义的模板代码，比如<code>xxx.prototype.xxx</code>等；把 class 的 <code>constructor</code> 和普通函数严格区分，避免了 new 的暗坑；加上统一的 <code>super</code> 关键字作为继承的关键字，而且继承链是成线性的。种种有点表明，class应该作为未来主流的方式。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"什么是OLOO\"><a href=\"#什么是OLOO\" class=\"headerlink\" title=\"什么是OLOO\"></a>什么是OLOO</h1><p>在《you don’t know js》中，作者有提到”OLOO”(objects-linked-to-other-objects)编程风格更适合js，而非传统的面向对象风格。原因是：js本身不提供类，所以是对类的一种模拟，实际实现非常繁琐（从es5的多种继承写法可知），是一种舍本求末的行为，而OLOO风格在该书中被认为是最适合JS的风格。 这是一个Student-Person的OLOO风格例子：</p>\n<pre><code>var Person = {\n  init: function(name) {\n    this.name = name;\n  },\n  getName: function() {\n    return this.name;\n  }\n};\n\nvar Student = Object.create(Person);\n\nStudent.set = function(name, school) {\n  this.init(name);\n  this.school = school;\n};\n\nStudent.getSchool = function() {\n  return this.school;\n};\n\nvar bugzhang = Object.create(Student);\nbugzhang.set(&apos;Bugzhang&apos;, &apos;CSU&apos;);\n\nbugzhang.getName(); // Bugzhang\nbugzhang.getSchool(); // CSU</code></pre><h1 id=\"OLOO与OOP的对比\"><a href=\"#OLOO与OOP的对比\" class=\"headerlink\" title=\"OLOO与OOP的对比\"></a>OLOO与OOP的对比</h1><p>在绝大多数编程语言中，面向对象的实现有两个范式：基于类的面向对象与基于原型的面向对象，前者如c++，java，后者如javacript。 在js中，如果利用构造函数实现继承，那么构造函数不会在原型链上，原型链只有prototype。如果利用prototype实现，其实prototype式继承不好用。 OLOO没有解决property为引用类型时会共享的问题。 在OOP中：采用的是<strong>类-继承</strong>的思想实现。 在OLOO中：采用的是<strong>行为代理模式</strong>的设计思想。OLOO只代表对象利用原型链连接到其他对象。不再使用构造函数来创建对象，而是使用Object.create()为主的方法，利用对象创建对象。</p>\n<h1 id=\"ES6时代的选择\"><a href=\"#ES6时代的选择\" class=\"headerlink\" title=\"ES6时代的选择\"></a>ES6时代的选择</h1><p>在es6中，class关键字的出现，让js模拟类成为了历史。虽然class本质上任然是构造函数原型混合继承的语法糖，但本身简单好用，简化了重复并且没有意义的模板代码，比如<code>xxx.prototype.xxx</code>等；把 class 的 <code>constructor</code> 和普通函数严格区分，避免了 new 的暗坑；加上统一的 <code>super</code> 关键字作为继承的关键字，而且继承链是成线性的。种种有点表明，class应该作为未来主流的方式。</p>\n"},{"title":"JavaScript垃圾回收机制","url":"48.html","id":"48","date":"2017-09-25T15:06:27.000Z","_content":"\nkdown> ![](http://7xqgks.com1.z0.glb.clouddn.com/head-0037.jpg)\n\n# 操作系统的三种内存分配机制\n\n**静态分配**： 从静态存储区域分配内存。程序编译的时候内存已经分配好了，并且在程序的整个运行期间都存在，如静态变量和全局变量。 **自动分配**： 在栈中为局部变量分配内存的方法，栈中的内存可以随着代码块退出时的出栈操作被自动释放。例如在执行函数时，函数内局部变量的存储单元可以在栈上创建，函数结束时这些存储单元自动被释放。 **动态分配**： 从静态存储区域分配内存。程序编译的时候内存已经分配好了，并且在程序的整个运行期间都存在，如静态变量和全局变量。 栈在底堆在上，function的执行都是通过入栈出栈，执行的时候去堆取到数据推入执行栈，成员变量在堆，局部变量在栈，全局变量也在堆；引用类型的引用变量存储在栈中，指向于实际存储在堆中的实际对象。\n\n# 标记清楚\n\nJavaScript最常用的垃圾回收方式是标记清楚，标记清楚是最早ie游览器采用的方式，现代游览器基本全部使用标记清楚的垃圾回收策略。 标记清楚：当变量进入执行环境（在函数里声明，赋值等），变量被标记为进入环境，进入环境的变量的内存永远不会释放，当变量离开环境（执行完函数）时，标记为“离开环境”，将其内存回收。\n\n# 引用计数\n\n引用计数在JavaScript内存回收中用的较少，现在只有KDE下的KJS引擎的游览器在采用，而最早是网景3游览器采用了这种方式。 引用计数的含义是跟踪记录每个值被引用的次数，当声明一个变量并将一个引用类型赋值给变量时，引用次数是1.如果值又赋给另外一个变量，引用次数加1，如果包含这个值引用的变量取得了其他值，引用次数减1，当引用次数为0，表示不能再访问到，即可回收。 值得注意的是，虽然基本没有游览器上JavaScript使用引用计数了，但ie9一下游览器很多对象不是原生JavaScript对象，比如DOM与BOM中的对象就是c++以COM（组件对象模型）实现的，而COM的垃圾回收采用的是引用计数策略，因此即使游览器采用标记清楚实现垃圾回收，但只要在游览器设计COM对象，就使用了引用计数。这会引起循环引用的问题。如；\n\n    var ele = document.getElementById('ele');\n    var myObj = new Object();\n    myObj.ele = ele;  //新对象一个属性引用了com对象\n    ele.someObj = myObj;  ///com对象一个属性引用了JavaScript对象\n\n\n在上述情况下，即使将DOM从页面移除，其内存也不会被回收。为了避免出现，要在使用完毕后手工回收，赋值`null`来手工解除引用。 ie9以上的游览器上，BOM与DOM变成了JavaScript对象，不会再出现这个问题，但做兼容性处理的时候这种内存泄漏是要考虑的。","source":"_posts/javascript-e5-9e-83-e5-9c-be-e5-9b-9e-e6-94-b6-e6-9c-ba-e5-88-b6.md","raw":"---\ntitle: JavaScript垃圾回收机制\ntags:\n  - 前端底层\nurl: 48.html\nid: 48\ncategories:\n  - 前端\ndate: 2017-09-25 23:06:27\n---\n\nkdown> ![](http://7xqgks.com1.z0.glb.clouddn.com/head-0037.jpg)\n\n# 操作系统的三种内存分配机制\n\n**静态分配**： 从静态存储区域分配内存。程序编译的时候内存已经分配好了，并且在程序的整个运行期间都存在，如静态变量和全局变量。 **自动分配**： 在栈中为局部变量分配内存的方法，栈中的内存可以随着代码块退出时的出栈操作被自动释放。例如在执行函数时，函数内局部变量的存储单元可以在栈上创建，函数结束时这些存储单元自动被释放。 **动态分配**： 从静态存储区域分配内存。程序编译的时候内存已经分配好了，并且在程序的整个运行期间都存在，如静态变量和全局变量。 栈在底堆在上，function的执行都是通过入栈出栈，执行的时候去堆取到数据推入执行栈，成员变量在堆，局部变量在栈，全局变量也在堆；引用类型的引用变量存储在栈中，指向于实际存储在堆中的实际对象。\n\n# 标记清楚\n\nJavaScript最常用的垃圾回收方式是标记清楚，标记清楚是最早ie游览器采用的方式，现代游览器基本全部使用标记清楚的垃圾回收策略。 标记清楚：当变量进入执行环境（在函数里声明，赋值等），变量被标记为进入环境，进入环境的变量的内存永远不会释放，当变量离开环境（执行完函数）时，标记为“离开环境”，将其内存回收。\n\n# 引用计数\n\n引用计数在JavaScript内存回收中用的较少，现在只有KDE下的KJS引擎的游览器在采用，而最早是网景3游览器采用了这种方式。 引用计数的含义是跟踪记录每个值被引用的次数，当声明一个变量并将一个引用类型赋值给变量时，引用次数是1.如果值又赋给另外一个变量，引用次数加1，如果包含这个值引用的变量取得了其他值，引用次数减1，当引用次数为0，表示不能再访问到，即可回收。 值得注意的是，虽然基本没有游览器上JavaScript使用引用计数了，但ie9一下游览器很多对象不是原生JavaScript对象，比如DOM与BOM中的对象就是c++以COM（组件对象模型）实现的，而COM的垃圾回收采用的是引用计数策略，因此即使游览器采用标记清楚实现垃圾回收，但只要在游览器设计COM对象，就使用了引用计数。这会引起循环引用的问题。如；\n\n    var ele = document.getElementById('ele');\n    var myObj = new Object();\n    myObj.ele = ele;  //新对象一个属性引用了com对象\n    ele.someObj = myObj;  ///com对象一个属性引用了JavaScript对象\n\n\n在上述情况下，即使将DOM从页面移除，其内存也不会被回收。为了避免出现，要在使用完毕后手工回收，赋值`null`来手工解除引用。 ie9以上的游览器上，BOM与DOM变成了JavaScript对象，不会再出现这个问题，但做兼容性处理的时候这种内存泄漏是要考虑的。","slug":"javascript-e5-9e-83-e5-9c-be-e5-9b-9e-e6-94-b6-e6-9c-ba-e5-88-b6","published":1,"updated":"2020-05-19T08:51:28.807Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts8010040zmz8eyqe0123","content":"<p>kdown&gt; <img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0037.jpg\" alt=\"\"></p>\n<h1 id=\"操作系统的三种内存分配机制\"><a href=\"#操作系统的三种内存分配机制\" class=\"headerlink\" title=\"操作系统的三种内存分配机制\"></a>操作系统的三种内存分配机制</h1><p><strong>静态分配</strong>： 从静态存储区域分配内存。程序编译的时候内存已经分配好了，并且在程序的整个运行期间都存在，如静态变量和全局变量。 <strong>自动分配</strong>： 在栈中为局部变量分配内存的方法，栈中的内存可以随着代码块退出时的出栈操作被自动释放。例如在执行函数时，函数内局部变量的存储单元可以在栈上创建，函数结束时这些存储单元自动被释放。 <strong>动态分配</strong>： 从静态存储区域分配内存。程序编译的时候内存已经分配好了，并且在程序的整个运行期间都存在，如静态变量和全局变量。 栈在底堆在上，function的执行都是通过入栈出栈，执行的时候去堆取到数据推入执行栈，成员变量在堆，局部变量在栈，全局变量也在堆；引用类型的引用变量存储在栈中，指向于实际存储在堆中的实际对象。</p>\n<h1 id=\"标记清楚\"><a href=\"#标记清楚\" class=\"headerlink\" title=\"标记清楚\"></a>标记清楚</h1><p>JavaScript最常用的垃圾回收方式是标记清楚，标记清楚是最早ie游览器采用的方式，现代游览器基本全部使用标记清楚的垃圾回收策略。 标记清楚：当变量进入执行环境（在函数里声明，赋值等），变量被标记为进入环境，进入环境的变量的内存永远不会释放，当变量离开环境（执行完函数）时，标记为“离开环境”，将其内存回收。</p>\n<h1 id=\"引用计数\"><a href=\"#引用计数\" class=\"headerlink\" title=\"引用计数\"></a>引用计数</h1><p>引用计数在JavaScript内存回收中用的较少，现在只有KDE下的KJS引擎的游览器在采用，而最早是网景3游览器采用了这种方式。 引用计数的含义是跟踪记录每个值被引用的次数，当声明一个变量并将一个引用类型赋值给变量时，引用次数是1.如果值又赋给另外一个变量，引用次数加1，如果包含这个值引用的变量取得了其他值，引用次数减1，当引用次数为0，表示不能再访问到，即可回收。 值得注意的是，虽然基本没有游览器上JavaScript使用引用计数了，但ie9一下游览器很多对象不是原生JavaScript对象，比如DOM与BOM中的对象就是c++以COM（组件对象模型）实现的，而COM的垃圾回收采用的是引用计数策略，因此即使游览器采用标记清楚实现垃圾回收，但只要在游览器设计COM对象，就使用了引用计数。这会引起循环引用的问题。如；</p>\n<pre><code>var ele = document.getElementById(&apos;ele&apos;);\nvar myObj = new Object();\nmyObj.ele = ele;  //新对象一个属性引用了com对象\nele.someObj = myObj;  ///com对象一个属性引用了JavaScript对象</code></pre><p>在上述情况下，即使将DOM从页面移除，其内存也不会被回收。为了避免出现，要在使用完毕后手工回收，赋值<code>null</code>来手工解除引用。 ie9以上的游览器上，BOM与DOM变成了JavaScript对象，不会再出现这个问题，但做兼容性处理的时候这种内存泄漏是要考虑的。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>kdown&gt; <img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0037.jpg\" alt=\"\"></p>\n<h1 id=\"操作系统的三种内存分配机制\"><a href=\"#操作系统的三种内存分配机制\" class=\"headerlink\" title=\"操作系统的三种内存分配机制\"></a>操作系统的三种内存分配机制</h1><p><strong>静态分配</strong>： 从静态存储区域分配内存。程序编译的时候内存已经分配好了，并且在程序的整个运行期间都存在，如静态变量和全局变量。 <strong>自动分配</strong>： 在栈中为局部变量分配内存的方法，栈中的内存可以随着代码块退出时的出栈操作被自动释放。例如在执行函数时，函数内局部变量的存储单元可以在栈上创建，函数结束时这些存储单元自动被释放。 <strong>动态分配</strong>： 从静态存储区域分配内存。程序编译的时候内存已经分配好了，并且在程序的整个运行期间都存在，如静态变量和全局变量。 栈在底堆在上，function的执行都是通过入栈出栈，执行的时候去堆取到数据推入执行栈，成员变量在堆，局部变量在栈，全局变量也在堆；引用类型的引用变量存储在栈中，指向于实际存储在堆中的实际对象。</p>\n<h1 id=\"标记清楚\"><a href=\"#标记清楚\" class=\"headerlink\" title=\"标记清楚\"></a>标记清楚</h1><p>JavaScript最常用的垃圾回收方式是标记清楚，标记清楚是最早ie游览器采用的方式，现代游览器基本全部使用标记清楚的垃圾回收策略。 标记清楚：当变量进入执行环境（在函数里声明，赋值等），变量被标记为进入环境，进入环境的变量的内存永远不会释放，当变量离开环境（执行完函数）时，标记为“离开环境”，将其内存回收。</p>\n<h1 id=\"引用计数\"><a href=\"#引用计数\" class=\"headerlink\" title=\"引用计数\"></a>引用计数</h1><p>引用计数在JavaScript内存回收中用的较少，现在只有KDE下的KJS引擎的游览器在采用，而最早是网景3游览器采用了这种方式。 引用计数的含义是跟踪记录每个值被引用的次数，当声明一个变量并将一个引用类型赋值给变量时，引用次数是1.如果值又赋给另外一个变量，引用次数加1，如果包含这个值引用的变量取得了其他值，引用次数减1，当引用次数为0，表示不能再访问到，即可回收。 值得注意的是，虽然基本没有游览器上JavaScript使用引用计数了，但ie9一下游览器很多对象不是原生JavaScript对象，比如DOM与BOM中的对象就是c++以COM（组件对象模型）实现的，而COM的垃圾回收采用的是引用计数策略，因此即使游览器采用标记清楚实现垃圾回收，但只要在游览器设计COM对象，就使用了引用计数。这会引起循环引用的问题。如；</p>\n<pre><code>var ele = document.getElementById(&apos;ele&apos;);\nvar myObj = new Object();\nmyObj.ele = ele;  //新对象一个属性引用了com对象\nele.someObj = myObj;  ///com对象一个属性引用了JavaScript对象</code></pre><p>在上述情况下，即使将DOM从页面移除，其内存也不会被回收。为了避免出现，要在使用完毕后手工回收，赋值<code>null</code>来手工解除引用。 ie9以上的游览器上，BOM与DOM变成了JavaScript对象，不会再出现这个问题，但做兼容性处理的时候这种内存泄漏是要考虑的。</p>\n"},{"title":"JavaScript工作原理：事件循环","url":"275.html","id":"275","date":"2019-06-24T13:19:22.000Z","_content":"\n单线程异步\n-----\n\njs早期对性能无要求，与此一开始就采用了单线程的选择，好处显而易见是可以非常清晰的确定执行顺序，如果多线程则很难判断在需要某个值时其他是否处理完毕。 虽然后来引入了web service，但其主线程一直是单线程的，并且主线程的变量不得操作dom，辅助线程仍然受主线程控制，相对于对主线程进行辅助计算。 引入异步是，避免某个延时任务（如定时器）阻塞了整个进场，使得加载和渲染无法继续下去，如果没有异步的话，在单线程的js中一旦延时，那么必须要等到这个定时器执行完才可以继续进行渲染或者其他操作，这在客户端基本是不可容忍的。\n\n执行栈\n---\n\n执行栈认为是一个存储函数调用的栈结构，遵循先进后出的原则 ![](http://img.bugzhang.com/1670d2d20ead32ec.gif) js代码的执行过程就是往执行栈里放入函数然后先进后出的执行。\n\n任务队列\n----\n\nJavaScript将任务分为两类：同步任务和异步任务。同步任务会直接进入调用栈先进后出的执行，而异步任务则会放入任务队列，一旦执行栈为空，EventLoop会从任务队列中取出应该被执行的任务放入执行栈执行，**本质上异步代码也是同步执行的**。 ![](http://img.bugzhang.com/16740fa4cd9c6937.webp) 将异步任务又分为了两类：宏任务（macrotask）和微任务（microtask）。执行顺如如下： 1.首先执行同步代码，这属于宏任务 2.当执行完所有同步代码后，执行栈为空，查询是否有异步代码需要执行 3.执行所有微任务 4.当执行完所有微任务后，如有必要会渲染页面 5.然后开始下一轮 Event Loop，执行宏任务中的异步代码，也就是 setTimeout 中的回调函数 微任务包括 process.nextTick ，promise ，MutationObserver。 宏任务包括 script ， setTimeout ，setInterval ，setImmediate ，I/O ，UI rendering。 一个常考是示例：\n```js\n    console.log('script start')\n\n    async function async1() {\n      await async2()\n      console.log('async1 end')\n    }\n    async function async2() {\n      console.log('async2 end')\n    }\n    async1()\n\n    setTimeout(function() {\n      console.log('setTimeout')\n    }, 0)\n\n    new Promise(resolve => {\n      console.log('Promise')\n      resolve()\n    })\n      .then(function() {\n        console.log('promise1')\n      })\n      .then(function() {\n        console.log('promise2')\n      })\n\n    console.log('script end')\n\n    // 执行顺序是：\n    // script start\n    // async2 end\n    // Promise\n    // script end\n    // promise1\n    // promise2\n    // async1 end\n    // setTimeout\n```\n\nnode.js中的事件循环\n-------------\n\nnode.js的异步机制是采用了libuv这个c++的异步库实现的，因此其时间循环就是libuv中规定是循环——分为六个阶段执行：\n\n       ┌───────────────────────────┐\n    ┌─>│           timers          │\n    │  └─────────────┬─────────────┘\n    │  ┌─────────────┴─────────────┐\n    │  │     pending callbacks     │\n    │  └─────────────┬─────────────┘\n    │  ┌─────────────┴─────────────┐\n    │  │       idle, prepare       │\n    │  └─────────────┬─────────────┘      ┌───────────────┐\n    │  ┌─────────────┴─────────────┐      │   incoming:   │\n    │  │           poll            │<─────┤  connections, │\n    │  └─────────────┬─────────────┘      │   data, etc.  │\n    │  ┌─────────────┴─────────────┐      └───────────────┘\n    │  │           check           │\n    │  └─────────────┬─────────────┘\n    │  ┌─────────────┴─────────────┐\n    └──┤      close callbacks      │\n       └───────────────────────────┘\n\n\n*   **timers**\n    *   检查 timer 队列是否有到期的 timer 回调，如果有，将到期的 timer 回调按照 timerId 升序执行。\n    *   检查是否有 process.nextTick 任务，如果有，全部执行。\n    *   检查是否有microtask，如果有，全部执行。\n*   **pending callbacks**\n    *   检查是否有 pending 的 I/O 回调。如果有，执行回调。如果没有，退出该阶段。\n    *   检查是否有 process.nextTick 任务，如果有，全部执行。\n    *   检查是否有microtask，如果有，全部执行。\n*   **idle, prepare**\n    *   libuv内部为poll做准备工作。\n*   **poll**\n    *   首先检查是否存在尚未完成的回调。如果有未完成回调：\n    *   如果有未完成回调。\n        *   执行所有可用回调。\n        *   检查是否有 process.nextTick 回调，如果有，全部执行。\n        *   检查是否有微任务，如果有，全部执行。\n    *   如果没有未完成回调\n        *   检查是否有 immediate 回调，如果有，退出 poll 阶段。如果没有，阻塞在此阶段，等待新的事件通知重启循环。\n    *   如果不存在尚未完成的回调，退出poll阶段。\n*   **check**\n    *   如果有immediate回调，则执行所有immediate回调。\n    *   检查是否有 process.nextTick 回调，如果有，全部执行。\n    *   检查是否有 microtaks，如果有，全部执行。\n*   **close callbacks**\n    *   如果有immediate回调，则执行所有immediate回调。\n    *   检查是否有 process.nextTick 回调，如果有，全部执行。\n    *   检查是否有 microtaks，如果有，全部执行。\n\n上述过程比较复杂，对于一个实际的问题而言，自从node.js升级到10后，执行顺序其实是和游览器端一致的，所以不需要非常详细的知道上述过程，安装与游览器游览器端的去编码即可。","source":"_posts/javascript-e5-b7-a5-e4-bd-9c-e5-8e-9f-e7-90-86-ef-bc-9a-e4-ba-8b-e4-bb-b6-e5-be-aa-e7-8e-af.md","raw":"---\ntitle: JavaScript工作原理：事件循环\ntags:\n  - JavaScript\nurl: 275.html\nid: 275\ncategories:\n  - node.js\ndate: 2019-06-24 21:19:22\n---\n\n单线程异步\n-----\n\njs早期对性能无要求，与此一开始就采用了单线程的选择，好处显而易见是可以非常清晰的确定执行顺序，如果多线程则很难判断在需要某个值时其他是否处理完毕。 虽然后来引入了web service，但其主线程一直是单线程的，并且主线程的变量不得操作dom，辅助线程仍然受主线程控制，相对于对主线程进行辅助计算。 引入异步是，避免某个延时任务（如定时器）阻塞了整个进场，使得加载和渲染无法继续下去，如果没有异步的话，在单线程的js中一旦延时，那么必须要等到这个定时器执行完才可以继续进行渲染或者其他操作，这在客户端基本是不可容忍的。\n\n执行栈\n---\n\n执行栈认为是一个存储函数调用的栈结构，遵循先进后出的原则 ![](http://img.bugzhang.com/1670d2d20ead32ec.gif) js代码的执行过程就是往执行栈里放入函数然后先进后出的执行。\n\n任务队列\n----\n\nJavaScript将任务分为两类：同步任务和异步任务。同步任务会直接进入调用栈先进后出的执行，而异步任务则会放入任务队列，一旦执行栈为空，EventLoop会从任务队列中取出应该被执行的任务放入执行栈执行，**本质上异步代码也是同步执行的**。 ![](http://img.bugzhang.com/16740fa4cd9c6937.webp) 将异步任务又分为了两类：宏任务（macrotask）和微任务（microtask）。执行顺如如下： 1.首先执行同步代码，这属于宏任务 2.当执行完所有同步代码后，执行栈为空，查询是否有异步代码需要执行 3.执行所有微任务 4.当执行完所有微任务后，如有必要会渲染页面 5.然后开始下一轮 Event Loop，执行宏任务中的异步代码，也就是 setTimeout 中的回调函数 微任务包括 process.nextTick ，promise ，MutationObserver。 宏任务包括 script ， setTimeout ，setInterval ，setImmediate ，I/O ，UI rendering。 一个常考是示例：\n```js\n    console.log('script start')\n\n    async function async1() {\n      await async2()\n      console.log('async1 end')\n    }\n    async function async2() {\n      console.log('async2 end')\n    }\n    async1()\n\n    setTimeout(function() {\n      console.log('setTimeout')\n    }, 0)\n\n    new Promise(resolve => {\n      console.log('Promise')\n      resolve()\n    })\n      .then(function() {\n        console.log('promise1')\n      })\n      .then(function() {\n        console.log('promise2')\n      })\n\n    console.log('script end')\n\n    // 执行顺序是：\n    // script start\n    // async2 end\n    // Promise\n    // script end\n    // promise1\n    // promise2\n    // async1 end\n    // setTimeout\n```\n\nnode.js中的事件循环\n-------------\n\nnode.js的异步机制是采用了libuv这个c++的异步库实现的，因此其时间循环就是libuv中规定是循环——分为六个阶段执行：\n\n       ┌───────────────────────────┐\n    ┌─>│           timers          │\n    │  └─────────────┬─────────────┘\n    │  ┌─────────────┴─────────────┐\n    │  │     pending callbacks     │\n    │  └─────────────┬─────────────┘\n    │  ┌─────────────┴─────────────┐\n    │  │       idle, prepare       │\n    │  └─────────────┬─────────────┘      ┌───────────────┐\n    │  ┌─────────────┴─────────────┐      │   incoming:   │\n    │  │           poll            │<─────┤  connections, │\n    │  └─────────────┬─────────────┘      │   data, etc.  │\n    │  ┌─────────────┴─────────────┐      └───────────────┘\n    │  │           check           │\n    │  └─────────────┬─────────────┘\n    │  ┌─────────────┴─────────────┐\n    └──┤      close callbacks      │\n       └───────────────────────────┘\n\n\n*   **timers**\n    *   检查 timer 队列是否有到期的 timer 回调，如果有，将到期的 timer 回调按照 timerId 升序执行。\n    *   检查是否有 process.nextTick 任务，如果有，全部执行。\n    *   检查是否有microtask，如果有，全部执行。\n*   **pending callbacks**\n    *   检查是否有 pending 的 I/O 回调。如果有，执行回调。如果没有，退出该阶段。\n    *   检查是否有 process.nextTick 任务，如果有，全部执行。\n    *   检查是否有microtask，如果有，全部执行。\n*   **idle, prepare**\n    *   libuv内部为poll做准备工作。\n*   **poll**\n    *   首先检查是否存在尚未完成的回调。如果有未完成回调：\n    *   如果有未完成回调。\n        *   执行所有可用回调。\n        *   检查是否有 process.nextTick 回调，如果有，全部执行。\n        *   检查是否有微任务，如果有，全部执行。\n    *   如果没有未完成回调\n        *   检查是否有 immediate 回调，如果有，退出 poll 阶段。如果没有，阻塞在此阶段，等待新的事件通知重启循环。\n    *   如果不存在尚未完成的回调，退出poll阶段。\n*   **check**\n    *   如果有immediate回调，则执行所有immediate回调。\n    *   检查是否有 process.nextTick 回调，如果有，全部执行。\n    *   检查是否有 microtaks，如果有，全部执行。\n*   **close callbacks**\n    *   如果有immediate回调，则执行所有immediate回调。\n    *   检查是否有 process.nextTick 回调，如果有，全部执行。\n    *   检查是否有 microtaks，如果有，全部执行。\n\n上述过程比较复杂，对于一个实际的问题而言，自从node.js升级到10后，执行顺序其实是和游览器端一致的，所以不需要非常详细的知道上述过程，安装与游览器游览器端的去编码即可。","slug":"javascript-e5-b7-a5-e4-bd-9c-e5-8e-9f-e7-90-86-ef-bc-9a-e4-ba-8b-e4-bb-b6-e5-be-aa-e7-8e-af","published":1,"updated":"2020-05-19T08:59:59.189Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts8030043zmz82x7a4fvk","content":"<h2 id=\"单线程异步\"><a href=\"#单线程异步\" class=\"headerlink\" title=\"单线程异步\"></a>单线程异步</h2><p>js早期对性能无要求，与此一开始就采用了单线程的选择，好处显而易见是可以非常清晰的确定执行顺序，如果多线程则很难判断在需要某个值时其他是否处理完毕。 虽然后来引入了web service，但其主线程一直是单线程的，并且主线程的变量不得操作dom，辅助线程仍然受主线程控制，相对于对主线程进行辅助计算。 引入异步是，避免某个延时任务（如定时器）阻塞了整个进场，使得加载和渲染无法继续下去，如果没有异步的话，在单线程的js中一旦延时，那么必须要等到这个定时器执行完才可以继续进行渲染或者其他操作，这在客户端基本是不可容忍的。</p>\n<h2 id=\"执行栈\"><a href=\"#执行栈\" class=\"headerlink\" title=\"执行栈\"></a>执行栈</h2><p>执行栈认为是一个存储函数调用的栈结构，遵循先进后出的原则 <img src=\"http://img.bugzhang.com/1670d2d20ead32ec.gif\" alt=\"\"> js代码的执行过程就是往执行栈里放入函数然后先进后出的执行。</p>\n<h2 id=\"任务队列\"><a href=\"#任务队列\" class=\"headerlink\" title=\"任务队列\"></a>任务队列</h2><p>JavaScript将任务分为两类：同步任务和异步任务。同步任务会直接进入调用栈先进后出的执行，而异步任务则会放入任务队列，一旦执行栈为空，EventLoop会从任务队列中取出应该被执行的任务放入执行栈执行，<strong>本质上异步代码也是同步执行的</strong>。 <img src=\"http://img.bugzhang.com/16740fa4cd9c6937.webp\" alt=\"\"> 将异步任务又分为了两类：宏任务（macrotask）和微任务（microtask）。执行顺如如下： 1.首先执行同步代码，这属于宏任务 2.当执行完所有同步代码后，执行栈为空，查询是否有异步代码需要执行 3.执行所有微任务 4.当执行完所有微任务后，如有必要会渲染页面 5.然后开始下一轮 Event Loop，执行宏任务中的异步代码，也就是 setTimeout 中的回调函数 微任务包括 process.nextTick ，promise ，MutationObserver。 宏任务包括 script ， setTimeout ，setInterval ，setImmediate ，I/O ，UI rendering。 一个常考是示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'script start'</span>)<br><br><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">async1</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">await</span> async2()<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'async1 end'</span>)<br>&#125;<br><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">async2</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'async2 end'</span>)<br>&#125;<br>async1()<br><br>setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'setTimeout'</span>)<br>&#125;, <span class=\"hljs-number\">0</span>)<br><br><span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">resolve</span> =&gt;</span> &#123;<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Promise'</span>)<br>  resolve()<br>&#125;)<br>  .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'promise1'</span>)<br>  &#125;)<br>  .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'promise2'</span>)<br>  &#125;)<br><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'script end'</span>)<br><br><span class=\"hljs-comment\">// 执行顺序是：</span><br><span class=\"hljs-comment\">// script start</span><br><span class=\"hljs-comment\">// async2 end</span><br><span class=\"hljs-comment\">// Promise</span><br><span class=\"hljs-comment\">// script end</span><br><span class=\"hljs-comment\">// promise1</span><br><span class=\"hljs-comment\">// promise2</span><br><span class=\"hljs-comment\">// async1 end</span><br><span class=\"hljs-comment\">// setTimeout</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"node-js中的事件循环\"><a href=\"#node-js中的事件循环\" class=\"headerlink\" title=\"node.js中的事件循环\"></a>node.js中的事件循环</h2><p>node.js的异步机制是采用了libuv这个c++的异步库实现的，因此其时间循环就是libuv中规定是循环——分为六个阶段执行：</p>\n<pre><code>   ┌───────────────────────────┐\n┌─&gt;│           timers          │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n│  │     pending callbacks     │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n│  │       idle, prepare       │\n│  └─────────────┬─────────────┘      ┌───────────────┐\n│  ┌─────────────┴─────────────┐      │   incoming:   │\n│  │           poll            │&lt;─────┤  connections, │\n│  └─────────────┬─────────────┘      │   data, etc.  │\n│  ┌─────────────┴─────────────┐      └───────────────┘\n│  │           check           │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n└──┤      close callbacks      │\n   └───────────────────────────┘</code></pre><ul>\n<li><strong>timers</strong><ul>\n<li>检查 timer 队列是否有到期的 timer 回调，如果有，将到期的 timer 回调按照 timerId 升序执行。</li>\n<li>检查是否有 process.nextTick 任务，如果有，全部执行。</li>\n<li>检查是否有microtask，如果有，全部执行。</li>\n</ul>\n</li>\n<li><strong>pending callbacks</strong><ul>\n<li>检查是否有 pending 的 I/O 回调。如果有，执行回调。如果没有，退出该阶段。</li>\n<li>检查是否有 process.nextTick 任务，如果有，全部执行。</li>\n<li>检查是否有microtask，如果有，全部执行。</li>\n</ul>\n</li>\n<li><strong>idle, prepare</strong><ul>\n<li>libuv内部为poll做准备工作。</li>\n</ul>\n</li>\n<li><strong>poll</strong><ul>\n<li>首先检查是否存在尚未完成的回调。如果有未完成回调：</li>\n<li>如果有未完成回调。<ul>\n<li>执行所有可用回调。</li>\n<li>检查是否有 process.nextTick 回调，如果有，全部执行。</li>\n<li>检查是否有微任务，如果有，全部执行。</li>\n</ul>\n</li>\n<li>如果没有未完成回调<ul>\n<li>检查是否有 immediate 回调，如果有，退出 poll 阶段。如果没有，阻塞在此阶段，等待新的事件通知重启循环。</li>\n</ul>\n</li>\n<li>如果不存在尚未完成的回调，退出poll阶段。</li>\n</ul>\n</li>\n<li><strong>check</strong><ul>\n<li>如果有immediate回调，则执行所有immediate回调。</li>\n<li>检查是否有 process.nextTick 回调，如果有，全部执行。</li>\n<li>检查是否有 microtaks，如果有，全部执行。</li>\n</ul>\n</li>\n<li><strong>close callbacks</strong><ul>\n<li>如果有immediate回调，则执行所有immediate回调。</li>\n<li>检查是否有 process.nextTick 回调，如果有，全部执行。</li>\n<li>检查是否有 microtaks，如果有，全部执行。</li>\n</ul>\n</li>\n</ul>\n<p>上述过程比较复杂，对于一个实际的问题而言，自从node.js升级到10后，执行顺序其实是和游览器端一致的，所以不需要非常详细的知道上述过程，安装与游览器游览器端的去编码即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"单线程异步\"><a href=\"#单线程异步\" class=\"headerlink\" title=\"单线程异步\"></a>单线程异步</h2><p>js早期对性能无要求，与此一开始就采用了单线程的选择，好处显而易见是可以非常清晰的确定执行顺序，如果多线程则很难判断在需要某个值时其他是否处理完毕。 虽然后来引入了web service，但其主线程一直是单线程的，并且主线程的变量不得操作dom，辅助线程仍然受主线程控制，相对于对主线程进行辅助计算。 引入异步是，避免某个延时任务（如定时器）阻塞了整个进场，使得加载和渲染无法继续下去，如果没有异步的话，在单线程的js中一旦延时，那么必须要等到这个定时器执行完才可以继续进行渲染或者其他操作，这在客户端基本是不可容忍的。</p>\n<h2 id=\"执行栈\"><a href=\"#执行栈\" class=\"headerlink\" title=\"执行栈\"></a>执行栈</h2><p>执行栈认为是一个存储函数调用的栈结构，遵循先进后出的原则 <img src=\"http://img.bugzhang.com/1670d2d20ead32ec.gif\" alt=\"\"> js代码的执行过程就是往执行栈里放入函数然后先进后出的执行。</p>\n<h2 id=\"任务队列\"><a href=\"#任务队列\" class=\"headerlink\" title=\"任务队列\"></a>任务队列</h2><p>JavaScript将任务分为两类：同步任务和异步任务。同步任务会直接进入调用栈先进后出的执行，而异步任务则会放入任务队列，一旦执行栈为空，EventLoop会从任务队列中取出应该被执行的任务放入执行栈执行，<strong>本质上异步代码也是同步执行的</strong>。 <img src=\"http://img.bugzhang.com/16740fa4cd9c6937.webp\" alt=\"\"> 将异步任务又分为了两类：宏任务（macrotask）和微任务（microtask）。执行顺如如下： 1.首先执行同步代码，这属于宏任务 2.当执行完所有同步代码后，执行栈为空，查询是否有异步代码需要执行 3.执行所有微任务 4.当执行完所有微任务后，如有必要会渲染页面 5.然后开始下一轮 Event Loop，执行宏任务中的异步代码，也就是 setTimeout 中的回调函数 微任务包括 process.nextTick ，promise ，MutationObserver。 宏任务包括 script ， setTimeout ，setInterval ，setImmediate ，I/O ，UI rendering。 一个常考是示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'script start'</span>)<br><br><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">async1</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">await</span> async2()<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'async1 end'</span>)<br>&#125;<br><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">async2</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'async2 end'</span>)<br>&#125;<br>async1()<br><br>setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'setTimeout'</span>)<br>&#125;, <span class=\"hljs-number\">0</span>)<br><br><span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">resolve</span> =&gt;</span> &#123;<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Promise'</span>)<br>  resolve()<br>&#125;)<br>  .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'promise1'</span>)<br>  &#125;)<br>  .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'promise2'</span>)<br>  &#125;)<br><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'script end'</span>)<br><br><span class=\"hljs-comment\">// 执行顺序是：</span><br><span class=\"hljs-comment\">// script start</span><br><span class=\"hljs-comment\">// async2 end</span><br><span class=\"hljs-comment\">// Promise</span><br><span class=\"hljs-comment\">// script end</span><br><span class=\"hljs-comment\">// promise1</span><br><span class=\"hljs-comment\">// promise2</span><br><span class=\"hljs-comment\">// async1 end</span><br><span class=\"hljs-comment\">// setTimeout</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"node-js中的事件循环\"><a href=\"#node-js中的事件循环\" class=\"headerlink\" title=\"node.js中的事件循环\"></a>node.js中的事件循环</h2><p>node.js的异步机制是采用了libuv这个c++的异步库实现的，因此其时间循环就是libuv中规定是循环——分为六个阶段执行：</p>\n<pre><code>   ┌───────────────────────────┐\n┌─&gt;│           timers          │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n│  │     pending callbacks     │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n│  │       idle, prepare       │\n│  └─────────────┬─────────────┘      ┌───────────────┐\n│  ┌─────────────┴─────────────┐      │   incoming:   │\n│  │           poll            │&lt;─────┤  connections, │\n│  └─────────────┬─────────────┘      │   data, etc.  │\n│  ┌─────────────┴─────────────┐      └───────────────┘\n│  │           check           │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n└──┤      close callbacks      │\n   └───────────────────────────┘</code></pre><ul>\n<li><strong>timers</strong><ul>\n<li>检查 timer 队列是否有到期的 timer 回调，如果有，将到期的 timer 回调按照 timerId 升序执行。</li>\n<li>检查是否有 process.nextTick 任务，如果有，全部执行。</li>\n<li>检查是否有microtask，如果有，全部执行。</li>\n</ul>\n</li>\n<li><strong>pending callbacks</strong><ul>\n<li>检查是否有 pending 的 I/O 回调。如果有，执行回调。如果没有，退出该阶段。</li>\n<li>检查是否有 process.nextTick 任务，如果有，全部执行。</li>\n<li>检查是否有microtask，如果有，全部执行。</li>\n</ul>\n</li>\n<li><strong>idle, prepare</strong><ul>\n<li>libuv内部为poll做准备工作。</li>\n</ul>\n</li>\n<li><strong>poll</strong><ul>\n<li>首先检查是否存在尚未完成的回调。如果有未完成回调：</li>\n<li>如果有未完成回调。<ul>\n<li>执行所有可用回调。</li>\n<li>检查是否有 process.nextTick 回调，如果有，全部执行。</li>\n<li>检查是否有微任务，如果有，全部执行。</li>\n</ul>\n</li>\n<li>如果没有未完成回调<ul>\n<li>检查是否有 immediate 回调，如果有，退出 poll 阶段。如果没有，阻塞在此阶段，等待新的事件通知重启循环。</li>\n</ul>\n</li>\n<li>如果不存在尚未完成的回调，退出poll阶段。</li>\n</ul>\n</li>\n<li><strong>check</strong><ul>\n<li>如果有immediate回调，则执行所有immediate回调。</li>\n<li>检查是否有 process.nextTick 回调，如果有，全部执行。</li>\n<li>检查是否有 microtaks，如果有，全部执行。</li>\n</ul>\n</li>\n<li><strong>close callbacks</strong><ul>\n<li>如果有immediate回调，则执行所有immediate回调。</li>\n<li>检查是否有 process.nextTick 回调，如果有，全部执行。</li>\n<li>检查是否有 microtaks，如果有，全部执行。</li>\n</ul>\n</li>\n</ul>\n<p>上述过程比较复杂，对于一个实际的问题而言，自从node.js升级到10后，执行顺序其实是和游览器端一致的，所以不需要非常详细的知道上述过程，安装与游览器游览器端的去编码即可。</p>\n"},{"title":"JavaScript模块化","url":"44.html","id":"44","date":"2017-08-14T14:53:07.000Z","_content":"\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0029.jpg)\n\n# 从古代前端说起\n\n早起的前端，是没有工程体系的，基本就是div+css，以及用js做个动画验证个表单之类的工作，因为工程不复杂，变量少，代码重构难度低，开发团队也不大（当时很多前端都是后端甚至设计师来写），所以这门语言一开始对模块化的需求不大，可以统统全局变量，反正没几个。在需要的时候写端脚本然后引入即可，甚至很多js代码是混入html属性中也不足为奇。\n\n# 模块\n\n而对于javascript来说，模块代表就是一个特定函数，这种模式使用了闭包\n```js\n    var module =\n    (function() {\n        //私有变量 函数\n        ...\n        return{\n        //公有函数\n        ...\n        };\n    })();\n```\n\n这种javascript模块，将内部功能与对外功能划定了清晰的界限。防止了命名冲突。\n\n# CommonJS\n\nCommonJS认为js不应该只是简单脚本语言，应该可以运行在任何地方，因此开始制定一系列api。CommonJS的崛起主要是随着node.js的大热，而被熟知了的。\n```js\n    //定义模块\n    exports.sum = {};\n\n    //使用模块\n    var xxx = require('xxx');\n    exports.add = function(n){\n         return xxx.ss(val,n);\n    };\n```\n\n这种写法适合服务端，因为在服务器读取模块都是在本地磁盘，加载速度很快。但是如果在客户端，加载模块的时候有可能出现“假死”状况。因为使用时候必须等模块加载完毕。但即使如此，实际还是不能使用的主要原因是少了node中才有的几个全局变量：\n\n*   module\n*   exports\n*   require\n*   global\n\n现在，browserify和webpack，通过commonjs在游览器的实现，可以进行模块打包处理，其中webpack已经成为了前端工程标准的打包工具。\n\n# AMD\n\nAMD，即 (Asynchronous Module Definition)，异步模块定义，require.js应用的是这一规范。先定义所有依赖，然后在加载完成后的回调函数中执行。\n```js\n    //使用模块\n    require([module], callback);\n```\n\n# CMD\n\nCMD， Common Module Definition，命令模块定义。实现是淘宝玉伯大神开发的sea.js相关的。 CMD和AMD一样也是异步的，其使用方式是：\n```js\n    //模块的定义\n    define(function(require, exports, module) {\n       var xxx = require('xxx');\n       xxx.start();\n    });\n```\n\nAMD和CMD最大的区别是对依赖模块的执行时机处理不同。 CMD对模块的态度是懒执行, 而AMD对模块的态度是预执行。CMD是在需要的时候才会执行，带来的好处就是开发者能理解因为过程更接近与人脑所想，而AMD是所有的模块全部提前，带来结果就是如果不考虑这点就会被坑。可以说CMD通过机器打包的效率提升了编码效率，这可能也是sea.js在webpack但是之前在国内更火的原因。","source":"_posts/javascript-e6-a8-a1-e5-9d-97-e5-8c-96.md","raw":"---\ntitle: JavaScript模块化\ntags:\n  - 前端工程化\nurl: 44.html\nid: 44\ncategories:\n  - 前端\ndate: 2017-08-14 22:53:07\n---\n\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0029.jpg)\n\n# 从古代前端说起\n\n早起的前端，是没有工程体系的，基本就是div+css，以及用js做个动画验证个表单之类的工作，因为工程不复杂，变量少，代码重构难度低，开发团队也不大（当时很多前端都是后端甚至设计师来写），所以这门语言一开始对模块化的需求不大，可以统统全局变量，反正没几个。在需要的时候写端脚本然后引入即可，甚至很多js代码是混入html属性中也不足为奇。\n\n# 模块\n\n而对于javascript来说，模块代表就是一个特定函数，这种模式使用了闭包\n```js\n    var module =\n    (function() {\n        //私有变量 函数\n        ...\n        return{\n        //公有函数\n        ...\n        };\n    })();\n```\n\n这种javascript模块，将内部功能与对外功能划定了清晰的界限。防止了命名冲突。\n\n# CommonJS\n\nCommonJS认为js不应该只是简单脚本语言，应该可以运行在任何地方，因此开始制定一系列api。CommonJS的崛起主要是随着node.js的大热，而被熟知了的。\n```js\n    //定义模块\n    exports.sum = {};\n\n    //使用模块\n    var xxx = require('xxx');\n    exports.add = function(n){\n         return xxx.ss(val,n);\n    };\n```\n\n这种写法适合服务端，因为在服务器读取模块都是在本地磁盘，加载速度很快。但是如果在客户端，加载模块的时候有可能出现“假死”状况。因为使用时候必须等模块加载完毕。但即使如此，实际还是不能使用的主要原因是少了node中才有的几个全局变量：\n\n*   module\n*   exports\n*   require\n*   global\n\n现在，browserify和webpack，通过commonjs在游览器的实现，可以进行模块打包处理，其中webpack已经成为了前端工程标准的打包工具。\n\n# AMD\n\nAMD，即 (Asynchronous Module Definition)，异步模块定义，require.js应用的是这一规范。先定义所有依赖，然后在加载完成后的回调函数中执行。\n```js\n    //使用模块\n    require([module], callback);\n```\n\n# CMD\n\nCMD， Common Module Definition，命令模块定义。实现是淘宝玉伯大神开发的sea.js相关的。 CMD和AMD一样也是异步的，其使用方式是：\n```js\n    //模块的定义\n    define(function(require, exports, module) {\n       var xxx = require('xxx');\n       xxx.start();\n    });\n```\n\nAMD和CMD最大的区别是对依赖模块的执行时机处理不同。 CMD对模块的态度是懒执行, 而AMD对模块的态度是预执行。CMD是在需要的时候才会执行，带来的好处就是开发者能理解因为过程更接近与人脑所想，而AMD是所有的模块全部提前，带来结果就是如果不考虑这点就会被坑。可以说CMD通过机器打包的效率提升了编码效率，这可能也是sea.js在webpack但是之前在国内更火的原因。","slug":"javascript-e6-a8-a1-e5-9d-97-e5-8c-96","published":1,"updated":"2020-05-19T08:57:22.868Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts8050047zmz81loua21n","content":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0029.jpg\" alt=\"\"></p>\n<h1 id=\"从古代前端说起\"><a href=\"#从古代前端说起\" class=\"headerlink\" title=\"从古代前端说起\"></a>从古代前端说起</h1><p>早起的前端，是没有工程体系的，基本就是div+css，以及用js做个动画验证个表单之类的工作，因为工程不复杂，变量少，代码重构难度低，开发团队也不大（当时很多前端都是后端甚至设计师来写），所以这门语言一开始对模块化的需求不大，可以统统全局变量，反正没几个。在需要的时候写端脚本然后引入即可，甚至很多js代码是混入html属性中也不足为奇。</p>\n<h1 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h1><p>而对于javascript来说，模块代表就是一个特定函数，这种模式使用了闭包</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> <span class=\"hljs-built_in\">module</span> =<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-comment\">//私有变量 函数</span><br>    ...<br>    <span class=\"hljs-keyword\">return</span>&#123;<br>    <span class=\"hljs-comment\">//公有函数</span><br>    ...<br>    &#125;;<br>&#125;)();<br></code></pre></td></tr></table></figure>\n\n<p>这种javascript模块，将内部功能与对外功能划定了清晰的界限。防止了命名冲突。</p>\n<h1 id=\"CommonJS\"><a href=\"#CommonJS\" class=\"headerlink\" title=\"CommonJS\"></a>CommonJS</h1><p>CommonJS认为js不应该只是简单脚本语言，应该可以运行在任何地方，因此开始制定一系列api。CommonJS的崛起主要是随着node.js的大热，而被熟知了的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//定义模块</span><br>exports.sum = &#123;&#125;;<br><br><span class=\"hljs-comment\">//使用模块</span><br><span class=\"hljs-keyword\">var</span> xxx = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xxx'</span>);<br>exports.add = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">n</span>)</span>&#123;<br>     <span class=\"hljs-keyword\">return</span> xxx.ss(val,n);<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>这种写法适合服务端，因为在服务器读取模块都是在本地磁盘，加载速度很快。但是如果在客户端，加载模块的时候有可能出现“假死”状况。因为使用时候必须等模块加载完毕。但即使如此，实际还是不能使用的主要原因是少了node中才有的几个全局变量：</p>\n<ul>\n<li>module</li>\n<li>exports</li>\n<li>require</li>\n<li>global</li>\n</ul>\n<p>现在，browserify和webpack，通过commonjs在游览器的实现，可以进行模块打包处理，其中webpack已经成为了前端工程标准的打包工具。</p>\n<h1 id=\"AMD\"><a href=\"#AMD\" class=\"headerlink\" title=\"AMD\"></a>AMD</h1><p>AMD，即 (Asynchronous Module Definition)，异步模块定义，require.js应用的是这一规范。先定义所有依赖，然后在加载完成后的回调函数中执行。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//使用模块</span><br><span class=\"hljs-built_in\">require</span>([<span class=\"hljs-built_in\">module</span>], callback);<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h1><p>CMD， Common Module Definition，命令模块定义。实现是淘宝玉伯大神开发的sea.js相关的。 CMD和AMD一样也是异步的，其使用方式是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//模块的定义</span><br>define(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">require, exports, module</span>) </span>&#123;<br>   <span class=\"hljs-keyword\">var</span> xxx = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xxx'</span>);<br>   xxx.start();<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<p>AMD和CMD最大的区别是对依赖模块的执行时机处理不同。 CMD对模块的态度是懒执行, 而AMD对模块的态度是预执行。CMD是在需要的时候才会执行，带来的好处就是开发者能理解因为过程更接近与人脑所想，而AMD是所有的模块全部提前，带来结果就是如果不考虑这点就会被坑。可以说CMD通过机器打包的效率提升了编码效率，这可能也是sea.js在webpack但是之前在国内更火的原因。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0029.jpg\" alt=\"\"></p>\n<h1 id=\"从古代前端说起\"><a href=\"#从古代前端说起\" class=\"headerlink\" title=\"从古代前端说起\"></a>从古代前端说起</h1><p>早起的前端，是没有工程体系的，基本就是div+css，以及用js做个动画验证个表单之类的工作，因为工程不复杂，变量少，代码重构难度低，开发团队也不大（当时很多前端都是后端甚至设计师来写），所以这门语言一开始对模块化的需求不大，可以统统全局变量，反正没几个。在需要的时候写端脚本然后引入即可，甚至很多js代码是混入html属性中也不足为奇。</p>\n<h1 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h1><p>而对于javascript来说，模块代表就是一个特定函数，这种模式使用了闭包</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> <span class=\"hljs-built_in\">module</span> =<br>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-comment\">//私有变量 函数</span><br>    ...<br>    <span class=\"hljs-keyword\">return</span>&#123;<br>    <span class=\"hljs-comment\">//公有函数</span><br>    ...<br>    &#125;;<br>&#125;)();<br></code></pre></td></tr></table></figure>\n\n<p>这种javascript模块，将内部功能与对外功能划定了清晰的界限。防止了命名冲突。</p>\n<h1 id=\"CommonJS\"><a href=\"#CommonJS\" class=\"headerlink\" title=\"CommonJS\"></a>CommonJS</h1><p>CommonJS认为js不应该只是简单脚本语言，应该可以运行在任何地方，因此开始制定一系列api。CommonJS的崛起主要是随着node.js的大热，而被熟知了的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//定义模块</span><br>exports.sum = &#123;&#125;;<br><br><span class=\"hljs-comment\">//使用模块</span><br><span class=\"hljs-keyword\">var</span> xxx = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xxx'</span>);<br>exports.add = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">n</span>)</span>&#123;<br>     <span class=\"hljs-keyword\">return</span> xxx.ss(val,n);<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>这种写法适合服务端，因为在服务器读取模块都是在本地磁盘，加载速度很快。但是如果在客户端，加载模块的时候有可能出现“假死”状况。因为使用时候必须等模块加载完毕。但即使如此，实际还是不能使用的主要原因是少了node中才有的几个全局变量：</p>\n<ul>\n<li>module</li>\n<li>exports</li>\n<li>require</li>\n<li>global</li>\n</ul>\n<p>现在，browserify和webpack，通过commonjs在游览器的实现，可以进行模块打包处理，其中webpack已经成为了前端工程标准的打包工具。</p>\n<h1 id=\"AMD\"><a href=\"#AMD\" class=\"headerlink\" title=\"AMD\"></a>AMD</h1><p>AMD，即 (Asynchronous Module Definition)，异步模块定义，require.js应用的是这一规范。先定义所有依赖，然后在加载完成后的回调函数中执行。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//使用模块</span><br><span class=\"hljs-built_in\">require</span>([<span class=\"hljs-built_in\">module</span>], callback);<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h1><p>CMD， Common Module Definition，命令模块定义。实现是淘宝玉伯大神开发的sea.js相关的。 CMD和AMD一样也是异步的，其使用方式是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//模块的定义</span><br>define(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">require, exports, module</span>) </span>&#123;<br>   <span class=\"hljs-keyword\">var</span> xxx = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xxx'</span>);<br>   xxx.start();<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<p>AMD和CMD最大的区别是对依赖模块的执行时机处理不同。 CMD对模块的态度是懒执行, 而AMD对模块的态度是预执行。CMD是在需要的时候才会执行，带来的好处就是开发者能理解因为过程更接近与人脑所想，而AMD是所有的模块全部提前，带来结果就是如果不考虑这点就会被坑。可以说CMD通过机器打包的效率提升了编码效率，这可能也是sea.js在webpack但是之前在国内更火的原因。</p>\n"},{"title":"JavaScript工作原理：内存管理","url":"258.html","id":"258","date":"2019-05-23T11:05:44.000Z","_content":"\n堆栈\n--\n\njs和其他语言一样，是将数据存储在堆栈结构中的。\n\n*   栈（stack）：结构类似于数据结构中的栈，先入后出。存储了函数参数值、所有变量名包括对象的引用、基础类型（String、Number、Boolean、Null、Undefined、Symbol）。 ![](http://img.bugzhang.com/queue.png)\n\n*   堆（heap）：结构类似于数据结构中的队列，先入先出，和操作系统中的堆（一种树）是完全的两码事。存储复杂对象。 ![](http://img.bugzhang.com/stack.png) 这里特别补充一点是池，又叫做常量池，顾名思义就是存储常量的地方，自从ES6引入const后，常量就被存储在池中。池是一块特殊的栈，结构和栈一样除了池中数据不可变之外。\n\n\njs的内存空间中的存储如下图 ![](http://img.bugzhang.com/%E5%A0%86%E5%86%85%E5%AD%98%E5%92%8C%E6%A0%88%E5%86%85%E5%AD%98.jpg) 栈中的运算比堆中快，为什么要将Object存储在堆中是因为对象可拓展，单独存储不会影响栈的效率。\n\n操作系统分配\n------\n\n静态分配：从静态存储区域分配内存。程序编译的时候内存已经分配好了，并且在程序的整个运行期间都存在，如静态变量和全局变量。 自动分配：在栈中为局部变量分配内存的方法，栈中的内存可以随着代码块退出时的出栈操作被自动释放。例如在执行函数时，函数内局部变量的存储单元可以在栈上创建，函数结束时这些存储单元自动被释放。 动态分配：从静态存储区域分配内存。程序编译的时候内存已经分配好了，并且在程序的整个运行期间都存在，如静态变量和全局变量。 栈在底堆在上，function的执行都是通过入栈出栈，执行的时候去堆取到数据推入执行栈，成员变量在堆，局部变量在栈，全局变量也在堆；引用类型的引用变量存储在栈中，指向于实际存储在堆中的实际对象。\n\nnode.js中V8垃圾回收算法\n----------------\n\n# 新生代与老生代内存\n\n新生代：存活时间较短的对象，会被GC自动回收的对象及作用域，比如不被引用的对象及调用完毕的函数等。默认吗32M。基本只包括抽象语法树中使用了的变量会被放在新生代中。 老生代：存活时间较长或常驻内存的对象，比如闭包因为外部仍在引用内部作用域的变量而不会被自动回收，故会被放在常驻内存中，这种就属于在新生代中持续存活，所以被移到了老生代中，还有一些核心模块也会被存在老生代中，例如文件系统(fs)、加密模块（crypto）等。可以依靠node --max-old-space-size修改，最大1.7G，默认1.4G。 具体内部的分类如下图： ![](http://img.bugzhang.com/5DL5K718A$3DT%60SPWC$LGKF.png)\n\n# 新生代的内存回收算法——Cheney算法\n\n它将现有的空间分半，一个作为 To 空间，一个作为 From 空间，当开始垃圾回收时会检查 from 空间中存活的对象并赋复制入 To 空间中，而非存活就会被直接释放，完成复制后，两者职责互换，下一轮回收时重复操作。 算法效率很低，但占用空间大，但因为新生代本身内存限制不大，因此采用这样的算法对整个系统的优化是利大于弊的。\n\n# 老生代的内存回收算法——标记清楚\n\n当变量进度环境，将这个变量标记为“进入环境”，状态为“进入环境”的变量不会被释放，当变量离开环境，就标记为“离开环境”，并且进行回收。具体实现一般是翻转一个特定的位来实现这个标记。\n\n# 被淘汰的内存回收算法——引用计数\n\n引用计数在JavaScript内存回收中用的较少，现在只有KDE下的KJS引擎的游览器在采用，而最早是网景3游览器采用了这种方式。 引用计数的含义是跟踪记录每个值被引用的次数，当声明一个变量并将一个引用类型赋值给变量时，引用次数是1.如果值又赋给另外一个变量，引用次数加1，如果包含这个值引用的变量取得了其他值，引用次数减1，当引用次数为0，表示不能再访问到，即可回收。 值得注意的是，虽然基本没有游览器上JavaScript使用引用计数了，但ie9一下游览器很多对象不是原生JavaScript对象，比如DOM与BOM中的对象就是c++以COM（组件对象模型）实现的，而COM的垃圾回收采用的是引用计数策略，因此即使游览器采用标记清楚实现垃圾回收，但只要在游览器设计COM对象，就使用了引用计数。这会引起循环引用的问题。如；\n\n    var ele = document.getElementById('ele');\n    var myObj = new Object();\n    myObj.ele = ele;  //新对象一个属性引用了com对象\n    ele.someObj = myObj;  ///com对象一个属性引用了JavaScript对象\n\n\n在上述情况下，即使将DOM从页面移除，其内存也不会被回收。为了避免出现，要在使用完毕后手工回收，赋值null来手工解除引用。 ie9以上的游览器上，BOM与DOM变成了JavaScript对象，不会再出现这个问题，但做兼容性处理的时候这种内存泄漏是要考虑的。","source":"_posts/js-e5-86-85-e5-ad-98-e7-ae-a1-e7-90-86-e6-9c-ba-e5-88-b6.md","raw":"---\ntitle: JavaScript工作原理：内存管理\nurl: 258.html\nid: 258\ncategories:\n  - node.js\ndate: 2019-05-23 19:05:44\ntags:\n---\n\n堆栈\n--\n\njs和其他语言一样，是将数据存储在堆栈结构中的。\n\n*   栈（stack）：结构类似于数据结构中的栈，先入后出。存储了函数参数值、所有变量名包括对象的引用、基础类型（String、Number、Boolean、Null、Undefined、Symbol）。 ![](http://img.bugzhang.com/queue.png)\n\n*   堆（heap）：结构类似于数据结构中的队列，先入先出，和操作系统中的堆（一种树）是完全的两码事。存储复杂对象。 ![](http://img.bugzhang.com/stack.png) 这里特别补充一点是池，又叫做常量池，顾名思义就是存储常量的地方，自从ES6引入const后，常量就被存储在池中。池是一块特殊的栈，结构和栈一样除了池中数据不可变之外。\n\n\njs的内存空间中的存储如下图 ![](http://img.bugzhang.com/%E5%A0%86%E5%86%85%E5%AD%98%E5%92%8C%E6%A0%88%E5%86%85%E5%AD%98.jpg) 栈中的运算比堆中快，为什么要将Object存储在堆中是因为对象可拓展，单独存储不会影响栈的效率。\n\n操作系统分配\n------\n\n静态分配：从静态存储区域分配内存。程序编译的时候内存已经分配好了，并且在程序的整个运行期间都存在，如静态变量和全局变量。 自动分配：在栈中为局部变量分配内存的方法，栈中的内存可以随着代码块退出时的出栈操作被自动释放。例如在执行函数时，函数内局部变量的存储单元可以在栈上创建，函数结束时这些存储单元自动被释放。 动态分配：从静态存储区域分配内存。程序编译的时候内存已经分配好了，并且在程序的整个运行期间都存在，如静态变量和全局变量。 栈在底堆在上，function的执行都是通过入栈出栈，执行的时候去堆取到数据推入执行栈，成员变量在堆，局部变量在栈，全局变量也在堆；引用类型的引用变量存储在栈中，指向于实际存储在堆中的实际对象。\n\nnode.js中V8垃圾回收算法\n----------------\n\n# 新生代与老生代内存\n\n新生代：存活时间较短的对象，会被GC自动回收的对象及作用域，比如不被引用的对象及调用完毕的函数等。默认吗32M。基本只包括抽象语法树中使用了的变量会被放在新生代中。 老生代：存活时间较长或常驻内存的对象，比如闭包因为外部仍在引用内部作用域的变量而不会被自动回收，故会被放在常驻内存中，这种就属于在新生代中持续存活，所以被移到了老生代中，还有一些核心模块也会被存在老生代中，例如文件系统(fs)、加密模块（crypto）等。可以依靠node --max-old-space-size修改，最大1.7G，默认1.4G。 具体内部的分类如下图： ![](http://img.bugzhang.com/5DL5K718A$3DT%60SPWC$LGKF.png)\n\n# 新生代的内存回收算法——Cheney算法\n\n它将现有的空间分半，一个作为 To 空间，一个作为 From 空间，当开始垃圾回收时会检查 from 空间中存活的对象并赋复制入 To 空间中，而非存活就会被直接释放，完成复制后，两者职责互换，下一轮回收时重复操作。 算法效率很低，但占用空间大，但因为新生代本身内存限制不大，因此采用这样的算法对整个系统的优化是利大于弊的。\n\n# 老生代的内存回收算法——标记清楚\n\n当变量进度环境，将这个变量标记为“进入环境”，状态为“进入环境”的变量不会被释放，当变量离开环境，就标记为“离开环境”，并且进行回收。具体实现一般是翻转一个特定的位来实现这个标记。\n\n# 被淘汰的内存回收算法——引用计数\n\n引用计数在JavaScript内存回收中用的较少，现在只有KDE下的KJS引擎的游览器在采用，而最早是网景3游览器采用了这种方式。 引用计数的含义是跟踪记录每个值被引用的次数，当声明一个变量并将一个引用类型赋值给变量时，引用次数是1.如果值又赋给另外一个变量，引用次数加1，如果包含这个值引用的变量取得了其他值，引用次数减1，当引用次数为0，表示不能再访问到，即可回收。 值得注意的是，虽然基本没有游览器上JavaScript使用引用计数了，但ie9一下游览器很多对象不是原生JavaScript对象，比如DOM与BOM中的对象就是c++以COM（组件对象模型）实现的，而COM的垃圾回收采用的是引用计数策略，因此即使游览器采用标记清楚实现垃圾回收，但只要在游览器设计COM对象，就使用了引用计数。这会引起循环引用的问题。如；\n\n    var ele = document.getElementById('ele');\n    var myObj = new Object();\n    myObj.ele = ele;  //新对象一个属性引用了com对象\n    ele.someObj = myObj;  ///com对象一个属性引用了JavaScript对象\n\n\n在上述情况下，即使将DOM从页面移除，其内存也不会被回收。为了避免出现，要在使用完毕后手工回收，赋值null来手工解除引用。 ie9以上的游览器上，BOM与DOM变成了JavaScript对象，不会再出现这个问题，但做兼容性处理的时候这种内存泄漏是要考虑的。","slug":"js-e5-86-85-e5-ad-98-e7-ae-a1-e7-90-86-e6-9c-ba-e5-88-b6","published":1,"updated":"2020-05-19T08:51:28.571Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts806004bzmz806bs6tjb","content":"<h2 id=\"堆栈\"><a href=\"#堆栈\" class=\"headerlink\" title=\"堆栈\"></a>堆栈</h2><p>js和其他语言一样，是将数据存储在堆栈结构中的。</p>\n<ul>\n<li><p>栈（stack）：结构类似于数据结构中的栈，先入后出。存储了函数参数值、所有变量名包括对象的引用、基础类型（String、Number、Boolean、Null、Undefined、Symbol）。 <img src=\"http://img.bugzhang.com/queue.png\" alt=\"\"></p>\n</li>\n<li><p>堆（heap）：结构类似于数据结构中的队列，先入先出，和操作系统中的堆（一种树）是完全的两码事。存储复杂对象。 <img src=\"http://img.bugzhang.com/stack.png\" alt=\"\"> 这里特别补充一点是池，又叫做常量池，顾名思义就是存储常量的地方，自从ES6引入const后，常量就被存储在池中。池是一块特殊的栈，结构和栈一样除了池中数据不可变之外。</p>\n</li>\n</ul>\n<p>js的内存空间中的存储如下图 <img src=\"http://img.bugzhang.com/%E5%A0%86%E5%86%85%E5%AD%98%E5%92%8C%E6%A0%88%E5%86%85%E5%AD%98.jpg\" alt=\"\"> 栈中的运算比堆中快，为什么要将Object存储在堆中是因为对象可拓展，单独存储不会影响栈的效率。</p>\n<h2 id=\"操作系统分配\"><a href=\"#操作系统分配\" class=\"headerlink\" title=\"操作系统分配\"></a>操作系统分配</h2><p>静态分配：从静态存储区域分配内存。程序编译的时候内存已经分配好了，并且在程序的整个运行期间都存在，如静态变量和全局变量。 自动分配：在栈中为局部变量分配内存的方法，栈中的内存可以随着代码块退出时的出栈操作被自动释放。例如在执行函数时，函数内局部变量的存储单元可以在栈上创建，函数结束时这些存储单元自动被释放。 动态分配：从静态存储区域分配内存。程序编译的时候内存已经分配好了，并且在程序的整个运行期间都存在，如静态变量和全局变量。 栈在底堆在上，function的执行都是通过入栈出栈，执行的时候去堆取到数据推入执行栈，成员变量在堆，局部变量在栈，全局变量也在堆；引用类型的引用变量存储在栈中，指向于实际存储在堆中的实际对象。</p>\n<h2 id=\"node-js中V8垃圾回收算法\"><a href=\"#node-js中V8垃圾回收算法\" class=\"headerlink\" title=\"node.js中V8垃圾回收算法\"></a>node.js中V8垃圾回收算法</h2><h1 id=\"新生代与老生代内存\"><a href=\"#新生代与老生代内存\" class=\"headerlink\" title=\"新生代与老生代内存\"></a>新生代与老生代内存</h1><p>新生代：存活时间较短的对象，会被GC自动回收的对象及作用域，比如不被引用的对象及调用完毕的函数等。默认吗32M。基本只包括抽象语法树中使用了的变量会被放在新生代中。 老生代：存活时间较长或常驻内存的对象，比如闭包因为外部仍在引用内部作用域的变量而不会被自动回收，故会被放在常驻内存中，这种就属于在新生代中持续存活，所以被移到了老生代中，还有一些核心模块也会被存在老生代中，例如文件系统(fs)、加密模块（crypto）等。可以依靠node –max-old-space-size修改，最大1.7G，默认1.4G。 具体内部的分类如下图： <img src=\"http://img.bugzhang.com/5DL5K718A$3DT%60SPWC$LGKF.png\" alt=\"\"></p>\n<h1 id=\"新生代的内存回收算法——Cheney算法\"><a href=\"#新生代的内存回收算法——Cheney算法\" class=\"headerlink\" title=\"新生代的内存回收算法——Cheney算法\"></a>新生代的内存回收算法——Cheney算法</h1><p>它将现有的空间分半，一个作为 To 空间，一个作为 From 空间，当开始垃圾回收时会检查 from 空间中存活的对象并赋复制入 To 空间中，而非存活就会被直接释放，完成复制后，两者职责互换，下一轮回收时重复操作。 算法效率很低，但占用空间大，但因为新生代本身内存限制不大，因此采用这样的算法对整个系统的优化是利大于弊的。</p>\n<h1 id=\"老生代的内存回收算法——标记清楚\"><a href=\"#老生代的内存回收算法——标记清楚\" class=\"headerlink\" title=\"老生代的内存回收算法——标记清楚\"></a>老生代的内存回收算法——标记清楚</h1><p>当变量进度环境，将这个变量标记为“进入环境”，状态为“进入环境”的变量不会被释放，当变量离开环境，就标记为“离开环境”，并且进行回收。具体实现一般是翻转一个特定的位来实现这个标记。</p>\n<h1 id=\"被淘汰的内存回收算法——引用计数\"><a href=\"#被淘汰的内存回收算法——引用计数\" class=\"headerlink\" title=\"被淘汰的内存回收算法——引用计数\"></a>被淘汰的内存回收算法——引用计数</h1><p>引用计数在JavaScript内存回收中用的较少，现在只有KDE下的KJS引擎的游览器在采用，而最早是网景3游览器采用了这种方式。 引用计数的含义是跟踪记录每个值被引用的次数，当声明一个变量并将一个引用类型赋值给变量时，引用次数是1.如果值又赋给另外一个变量，引用次数加1，如果包含这个值引用的变量取得了其他值，引用次数减1，当引用次数为0，表示不能再访问到，即可回收。 值得注意的是，虽然基本没有游览器上JavaScript使用引用计数了，但ie9一下游览器很多对象不是原生JavaScript对象，比如DOM与BOM中的对象就是c++以COM（组件对象模型）实现的，而COM的垃圾回收采用的是引用计数策略，因此即使游览器采用标记清楚实现垃圾回收，但只要在游览器设计COM对象，就使用了引用计数。这会引起循环引用的问题。如；</p>\n<pre><code>var ele = document.getElementById(&apos;ele&apos;);\nvar myObj = new Object();\nmyObj.ele = ele;  //新对象一个属性引用了com对象\nele.someObj = myObj;  ///com对象一个属性引用了JavaScript对象</code></pre><p>在上述情况下，即使将DOM从页面移除，其内存也不会被回收。为了避免出现，要在使用完毕后手工回收，赋值null来手工解除引用。 ie9以上的游览器上，BOM与DOM变成了JavaScript对象，不会再出现这个问题，但做兼容性处理的时候这种内存泄漏是要考虑的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"堆栈\"><a href=\"#堆栈\" class=\"headerlink\" title=\"堆栈\"></a>堆栈</h2><p>js和其他语言一样，是将数据存储在堆栈结构中的。</p>\n<ul>\n<li><p>栈（stack）：结构类似于数据结构中的栈，先入后出。存储了函数参数值、所有变量名包括对象的引用、基础类型（String、Number、Boolean、Null、Undefined、Symbol）。 <img src=\"http://img.bugzhang.com/queue.png\" alt=\"\"></p>\n</li>\n<li><p>堆（heap）：结构类似于数据结构中的队列，先入先出，和操作系统中的堆（一种树）是完全的两码事。存储复杂对象。 <img src=\"http://img.bugzhang.com/stack.png\" alt=\"\"> 这里特别补充一点是池，又叫做常量池，顾名思义就是存储常量的地方，自从ES6引入const后，常量就被存储在池中。池是一块特殊的栈，结构和栈一样除了池中数据不可变之外。</p>\n</li>\n</ul>\n<p>js的内存空间中的存储如下图 <img src=\"http://img.bugzhang.com/%E5%A0%86%E5%86%85%E5%AD%98%E5%92%8C%E6%A0%88%E5%86%85%E5%AD%98.jpg\" alt=\"\"> 栈中的运算比堆中快，为什么要将Object存储在堆中是因为对象可拓展，单独存储不会影响栈的效率。</p>\n<h2 id=\"操作系统分配\"><a href=\"#操作系统分配\" class=\"headerlink\" title=\"操作系统分配\"></a>操作系统分配</h2><p>静态分配：从静态存储区域分配内存。程序编译的时候内存已经分配好了，并且在程序的整个运行期间都存在，如静态变量和全局变量。 自动分配：在栈中为局部变量分配内存的方法，栈中的内存可以随着代码块退出时的出栈操作被自动释放。例如在执行函数时，函数内局部变量的存储单元可以在栈上创建，函数结束时这些存储单元自动被释放。 动态分配：从静态存储区域分配内存。程序编译的时候内存已经分配好了，并且在程序的整个运行期间都存在，如静态变量和全局变量。 栈在底堆在上，function的执行都是通过入栈出栈，执行的时候去堆取到数据推入执行栈，成员变量在堆，局部变量在栈，全局变量也在堆；引用类型的引用变量存储在栈中，指向于实际存储在堆中的实际对象。</p>\n<h2 id=\"node-js中V8垃圾回收算法\"><a href=\"#node-js中V8垃圾回收算法\" class=\"headerlink\" title=\"node.js中V8垃圾回收算法\"></a>node.js中V8垃圾回收算法</h2><h1 id=\"新生代与老生代内存\"><a href=\"#新生代与老生代内存\" class=\"headerlink\" title=\"新生代与老生代内存\"></a>新生代与老生代内存</h1><p>新生代：存活时间较短的对象，会被GC自动回收的对象及作用域，比如不被引用的对象及调用完毕的函数等。默认吗32M。基本只包括抽象语法树中使用了的变量会被放在新生代中。 老生代：存活时间较长或常驻内存的对象，比如闭包因为外部仍在引用内部作用域的变量而不会被自动回收，故会被放在常驻内存中，这种就属于在新生代中持续存活，所以被移到了老生代中，还有一些核心模块也会被存在老生代中，例如文件系统(fs)、加密模块（crypto）等。可以依靠node –max-old-space-size修改，最大1.7G，默认1.4G。 具体内部的分类如下图： <img src=\"http://img.bugzhang.com/5DL5K718A$3DT%60SPWC$LGKF.png\" alt=\"\"></p>\n<h1 id=\"新生代的内存回收算法——Cheney算法\"><a href=\"#新生代的内存回收算法——Cheney算法\" class=\"headerlink\" title=\"新生代的内存回收算法——Cheney算法\"></a>新生代的内存回收算法——Cheney算法</h1><p>它将现有的空间分半，一个作为 To 空间，一个作为 From 空间，当开始垃圾回收时会检查 from 空间中存活的对象并赋复制入 To 空间中，而非存活就会被直接释放，完成复制后，两者职责互换，下一轮回收时重复操作。 算法效率很低，但占用空间大，但因为新生代本身内存限制不大，因此采用这样的算法对整个系统的优化是利大于弊的。</p>\n<h1 id=\"老生代的内存回收算法——标记清楚\"><a href=\"#老生代的内存回收算法——标记清楚\" class=\"headerlink\" title=\"老生代的内存回收算法——标记清楚\"></a>老生代的内存回收算法——标记清楚</h1><p>当变量进度环境，将这个变量标记为“进入环境”，状态为“进入环境”的变量不会被释放，当变量离开环境，就标记为“离开环境”，并且进行回收。具体实现一般是翻转一个特定的位来实现这个标记。</p>\n<h1 id=\"被淘汰的内存回收算法——引用计数\"><a href=\"#被淘汰的内存回收算法——引用计数\" class=\"headerlink\" title=\"被淘汰的内存回收算法——引用计数\"></a>被淘汰的内存回收算法——引用计数</h1><p>引用计数在JavaScript内存回收中用的较少，现在只有KDE下的KJS引擎的游览器在采用，而最早是网景3游览器采用了这种方式。 引用计数的含义是跟踪记录每个值被引用的次数，当声明一个变量并将一个引用类型赋值给变量时，引用次数是1.如果值又赋给另外一个变量，引用次数加1，如果包含这个值引用的变量取得了其他值，引用次数减1，当引用次数为0，表示不能再访问到，即可回收。 值得注意的是，虽然基本没有游览器上JavaScript使用引用计数了，但ie9一下游览器很多对象不是原生JavaScript对象，比如DOM与BOM中的对象就是c++以COM（组件对象模型）实现的，而COM的垃圾回收采用的是引用计数策略，因此即使游览器采用标记清楚实现垃圾回收，但只要在游览器设计COM对象，就使用了引用计数。这会引起循环引用的问题。如；</p>\n<pre><code>var ele = document.getElementById(&apos;ele&apos;);\nvar myObj = new Object();\nmyObj.ele = ele;  //新对象一个属性引用了com对象\nele.someObj = myObj;  ///com对象一个属性引用了JavaScript对象</code></pre><p>在上述情况下，即使将DOM从页面移除，其内存也不会被回收。为了避免出现，要在使用完毕后手工回收，赋值null来手工解除引用。 ie9以上的游览器上，BOM与DOM变成了JavaScript对象，不会再出现这个问题，但做兼容性处理的时候这种内存泄漏是要考虑的。</p>\n"},{"title":"koa源码分析","url":"228.html","id":"228","date":"2019-02-03T07:14:48.000Z","_content":"\nkoa源码非常简单，只有四个文件也就是koa的四大对象：\n\n*   application.js 包含 app 的构造以及启动一个服务器\n*   context.js app 的 context 对象, 传入中间件的上下文对象\n*   request.js app 的请求对象，包含请求相关的一些属性\n*   response.js app 的响应对象，包含响应相关的一些属性\n\napplication主要方法\n===============\n```js\napplication中的构造函数：\n\n    constructor() {\n      super();\n\n      this.proxy = false;\n      // 存放中间件的数组\n      this.middleware = [];\n      // 忽略的子域名数量\n      this.subdomainOffset = 2;\n      // 设置环境变量\n      this.env = process.env.NODE_ENV || 'development';\n      // 挂载context，request，response到application\n      this.context = Object.create(context);\n      this.request = Object.create(request);\n      this.response = Object.create(response);\n      if (util.inspect.custom) {\n        this[util.inspect.custom] = this.inspect;\n      }\n    }\n```\n\napplication除了构造方法外还有几个主要的方法，包括： applicaton的createContext方法：\n```js\n      createContext(req, res) {\n        const context = Object.create(this.context);\n        const request = context.request = Object.create(this.request);\n        const response = context.response = Object.create(this.response);\n        context.app = request.app = response.app = this;\n        context.req = request.req = response.req = req;\n        context.res = request.res = response.res = res;\n        request.ctx = response.ctx = context;\n        request.response = response;\n        response.request = request;\n        context.originalUrl = request.originalUrl = req.url;\n        context.state = {};\n        return context;\n      }\n```\n\n创建了一个context上下文对象，这个对象挂载了app，req，res，ctx等多个属性，属性的含义看缩写即可明白。 application中的listen方法\n```js\n      listen(...args) {\n        debug('listen');\n        const server = http.createServer(this.callback());\n        return server.listen(...args);\n      }\n```\n\n调用了基础网络库http中的createServer和linsten方法，创建一个服务器并且监听端口。\n\nkoa中间件源码原理\n==========\n\napplication中的use方法：\n```js\n    use(fn) {\n      if (typeof fn !== 'function') throw new TypeError('middleware must be a function!');\n      if (isGeneratorFunction(fn)) {\n        deprecate('Support for generators will be removed in v3. ' +\n                  'See the documentation for examples of how to convert old middleware ' +\n                  'https://github.com/koajs/koa/blob/master/docs/migration.md');\n        fn = convert(fn);\n      }\n      debug('use %s', fn._name || fn.name || '-');\n      this.middleware.push(fn);\n      return this;\n    }\n```\n\n因为中间件是一个用于拦截请求的异步函数，所以首先判断中间件类型是否正确，并且在中间件是generator函数的情况下转为异步函数，然后把推入中间件数组并且返回本身。该步骤仅仅作为注册中间件的功能，中间件数组中的中间件将会在http发生时被依次调用。调用的过程如下：\n```js\n    callback() {\n      const fn = compose(this.middleware);\n\n      if (!this.listenerCount('error')) this.on('error', this.onerror);\n\n      const handleRequest = (req, res) => {\n        const ctx = this.createContext(req, res);\n        return this.handleRequest(ctx, fn);\n      };\n\n      return handleRequest;\n    }\n```\n\n这边中间件的执行用了一个koa-compose的库，koa-compose也非常精简，只要一个compose方法的高阶函数，洋葱模型在方法内部实现，只有三十多行：\n```js\n    function compose (middleware) {\n      if (!Array.isArray(middleware)) throw new TypeError('Middleware stack must be an array!')\n      for (const fn of middleware) {\n        if (typeof fn !== 'function') throw new TypeError('Middleware must be composed of functions!')\n      }\n\n      /**\n       * @param {Object} context\n       * @return {Promise}\n       * @api public\n       */\n\n      return function (context, next) {\n        // last called middleware #\n        let index = -1\n        return dispatch(0)\n        function dispatch (i) {\n          if (i <= index) return Promise.reject(new Error('next() called multiple times'))\n          index = i\n          let fn = middleware[i]\n          if (i === middleware.length) fn = next\n          if (!fn) return Promise.resolve()\n          try {\n            return Promise.resolve(fn(context, dispatch.bind(null, i + 1)));\n          } catch (err) {\n            return Promise.reject(err)\n          }\n        }\n      }\n    }\n```\n\n前几行做类型判断，不再赘述。 主要内容是返回一个函数，这个函数是一个递归的高阶函数。 最关键的一行是return Promise.resolve(fn(context, dispatch.bind(null, i + 1))); 这就会在promise resolve的时候执行fn(context, dispatch.bind(null, i + 1)) 这个过程可以被理解为\n```js\n    function compose(){\n      return Promise.resolve(\n        f1(context,function(){\n          return Promise.resolve(\n            f2(context,function(){\n              return Promise.resolve(\n                f3(context,function(){\n                  return Promise.resolve(\n                    next(context,function(){\n                      return Promise.resolve('fn is undefined')\n                    })\n                  )\n                })\n              )\n            })\n          )\n        })\n      )\n    }\n```\n\n在一个中间件函数中不能调用两次next()，否则会抛出错误。 为什么执行顺序是1,2,3,4,5,ok,5,4,3,2,1呢。是因为 next() 是把主线程暂时交给下个代码块，所有代码块执行完后会依次收回执行权，而收回的顺序就相反了。\n\ncontext主要方法\n===========\n\n相比application，剩下三部分都要简单的多。 Koa处理请求的过程：当请求到来的时候，会通过req和res来创建一个context (ctx)，然后执行中间件，然后再返回响应。 context.js是用来代理ctx的功能，把更多的方法和功能挂载上去，提供对request和response的更多操作。其中最主要的方法是delegate方法，除此之外的方法都是辅助方法或者错误捕获。\n```js\n    delegate(proto, 'response')\n      .method('attachment')\n      // ...\n      .getter('writable');\n\n    delegate(proto, 'request')\n      .method('acceptsLanguages')\n      // ...\n      .getter('ip');\n```\n\n这段操作使得，当访问proto的代理属性的时候，实际上是在访问proto.response的对应属性。 #request和response 两者类似，虽然代码比较长，但实际就是对HTTP的header的一个处理而已，每个方法都非常简单，也调用了一些基础的网络库如url，net等等。","source":"_posts/koa-e6-ba-90-e7-a0-81-e5-88-86-e6-9e-90-ef-bc-88-e4-b8-80-ef-bc-89.md","raw":"---\ntitle: koa源码分析\ntags:\n  - egg.js\n  - node.js\nurl: 228.html\nid: 228\ncategories:\n  - node.js\n  - 后端\ndate: 2019-02-03 15:14:48\n---\n\nkoa源码非常简单，只有四个文件也就是koa的四大对象：\n\n*   application.js 包含 app 的构造以及启动一个服务器\n*   context.js app 的 context 对象, 传入中间件的上下文对象\n*   request.js app 的请求对象，包含请求相关的一些属性\n*   response.js app 的响应对象，包含响应相关的一些属性\n\napplication主要方法\n===============\n```js\napplication中的构造函数：\n\n    constructor() {\n      super();\n\n      this.proxy = false;\n      // 存放中间件的数组\n      this.middleware = [];\n      // 忽略的子域名数量\n      this.subdomainOffset = 2;\n      // 设置环境变量\n      this.env = process.env.NODE_ENV || 'development';\n      // 挂载context，request，response到application\n      this.context = Object.create(context);\n      this.request = Object.create(request);\n      this.response = Object.create(response);\n      if (util.inspect.custom) {\n        this[util.inspect.custom] = this.inspect;\n      }\n    }\n```\n\napplication除了构造方法外还有几个主要的方法，包括： applicaton的createContext方法：\n```js\n      createContext(req, res) {\n        const context = Object.create(this.context);\n        const request = context.request = Object.create(this.request);\n        const response = context.response = Object.create(this.response);\n        context.app = request.app = response.app = this;\n        context.req = request.req = response.req = req;\n        context.res = request.res = response.res = res;\n        request.ctx = response.ctx = context;\n        request.response = response;\n        response.request = request;\n        context.originalUrl = request.originalUrl = req.url;\n        context.state = {};\n        return context;\n      }\n```\n\n创建了一个context上下文对象，这个对象挂载了app，req，res，ctx等多个属性，属性的含义看缩写即可明白。 application中的listen方法\n```js\n      listen(...args) {\n        debug('listen');\n        const server = http.createServer(this.callback());\n        return server.listen(...args);\n      }\n```\n\n调用了基础网络库http中的createServer和linsten方法，创建一个服务器并且监听端口。\n\nkoa中间件源码原理\n==========\n\napplication中的use方法：\n```js\n    use(fn) {\n      if (typeof fn !== 'function') throw new TypeError('middleware must be a function!');\n      if (isGeneratorFunction(fn)) {\n        deprecate('Support for generators will be removed in v3. ' +\n                  'See the documentation for examples of how to convert old middleware ' +\n                  'https://github.com/koajs/koa/blob/master/docs/migration.md');\n        fn = convert(fn);\n      }\n      debug('use %s', fn._name || fn.name || '-');\n      this.middleware.push(fn);\n      return this;\n    }\n```\n\n因为中间件是一个用于拦截请求的异步函数，所以首先判断中间件类型是否正确，并且在中间件是generator函数的情况下转为异步函数，然后把推入中间件数组并且返回本身。该步骤仅仅作为注册中间件的功能，中间件数组中的中间件将会在http发生时被依次调用。调用的过程如下：\n```js\n    callback() {\n      const fn = compose(this.middleware);\n\n      if (!this.listenerCount('error')) this.on('error', this.onerror);\n\n      const handleRequest = (req, res) => {\n        const ctx = this.createContext(req, res);\n        return this.handleRequest(ctx, fn);\n      };\n\n      return handleRequest;\n    }\n```\n\n这边中间件的执行用了一个koa-compose的库，koa-compose也非常精简，只要一个compose方法的高阶函数，洋葱模型在方法内部实现，只有三十多行：\n```js\n    function compose (middleware) {\n      if (!Array.isArray(middleware)) throw new TypeError('Middleware stack must be an array!')\n      for (const fn of middleware) {\n        if (typeof fn !== 'function') throw new TypeError('Middleware must be composed of functions!')\n      }\n\n      /**\n       * @param {Object} context\n       * @return {Promise}\n       * @api public\n       */\n\n      return function (context, next) {\n        // last called middleware #\n        let index = -1\n        return dispatch(0)\n        function dispatch (i) {\n          if (i <= index) return Promise.reject(new Error('next() called multiple times'))\n          index = i\n          let fn = middleware[i]\n          if (i === middleware.length) fn = next\n          if (!fn) return Promise.resolve()\n          try {\n            return Promise.resolve(fn(context, dispatch.bind(null, i + 1)));\n          } catch (err) {\n            return Promise.reject(err)\n          }\n        }\n      }\n    }\n```\n\n前几行做类型判断，不再赘述。 主要内容是返回一个函数，这个函数是一个递归的高阶函数。 最关键的一行是return Promise.resolve(fn(context, dispatch.bind(null, i + 1))); 这就会在promise resolve的时候执行fn(context, dispatch.bind(null, i + 1)) 这个过程可以被理解为\n```js\n    function compose(){\n      return Promise.resolve(\n        f1(context,function(){\n          return Promise.resolve(\n            f2(context,function(){\n              return Promise.resolve(\n                f3(context,function(){\n                  return Promise.resolve(\n                    next(context,function(){\n                      return Promise.resolve('fn is undefined')\n                    })\n                  )\n                })\n              )\n            })\n          )\n        })\n      )\n    }\n```\n\n在一个中间件函数中不能调用两次next()，否则会抛出错误。 为什么执行顺序是1,2,3,4,5,ok,5,4,3,2,1呢。是因为 next() 是把主线程暂时交给下个代码块，所有代码块执行完后会依次收回执行权，而收回的顺序就相反了。\n\ncontext主要方法\n===========\n\n相比application，剩下三部分都要简单的多。 Koa处理请求的过程：当请求到来的时候，会通过req和res来创建一个context (ctx)，然后执行中间件，然后再返回响应。 context.js是用来代理ctx的功能，把更多的方法和功能挂载上去，提供对request和response的更多操作。其中最主要的方法是delegate方法，除此之外的方法都是辅助方法或者错误捕获。\n```js\n    delegate(proto, 'response')\n      .method('attachment')\n      // ...\n      .getter('writable');\n\n    delegate(proto, 'request')\n      .method('acceptsLanguages')\n      // ...\n      .getter('ip');\n```\n\n这段操作使得，当访问proto的代理属性的时候，实际上是在访问proto.response的对应属性。 #request和response 两者类似，虽然代码比较长，但实际就是对HTTP的header的一个处理而已，每个方法都非常简单，也调用了一些基础的网络库如url，net等等。","slug":"koa-e6-ba-90-e7-a0-81-e5-88-86-e6-9e-90-ef-bc-88-e4-b8-80-ef-bc-89","published":1,"updated":"2020-05-19T08:53:23.113Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts807004ezmz883sy49u5","content":"<p>koa源码非常简单，只有四个文件也就是koa的四大对象：</p>\n<ul>\n<li>application.js 包含 app 的构造以及启动一个服务器</li>\n<li>context.js app 的 context 对象, 传入中间件的上下文对象</li>\n<li>request.js app 的请求对象，包含请求相关的一些属性</li>\n<li>response.js app 的响应对象，包含响应相关的一些属性</li>\n</ul>\n<h1 id=\"application主要方法\"><a href=\"#application主要方法\" class=\"headerlink\" title=\"application主要方法\"></a>application主要方法</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">application中的构造函数：<br><br>    <span class=\"hljs-keyword\">constructor</span>() &#123;<br>      <span class=\"hljs-keyword\">super</span>();<br><br>      <span class=\"hljs-keyword\">this</span>.proxy = <span class=\"hljs-literal\">false</span>;<br>      <span class=\"hljs-comment\">// 存放中间件的数组</span><br>      <span class=\"hljs-keyword\">this</span>.middleware = [];<br>      <span class=\"hljs-comment\">// 忽略的子域名数量</span><br>      <span class=\"hljs-keyword\">this</span>.subdomainOffset = <span class=\"hljs-number\">2</span>;<br>      <span class=\"hljs-comment\">// 设置环境变量</span><br>      <span class=\"hljs-keyword\">this</span>.env = process.env.NODE_ENV || <span class=\"hljs-string\">'development'</span>;<br>      <span class=\"hljs-comment\">// 挂载context，request，response到application</span><br>      <span class=\"hljs-keyword\">this</span>.context = <span class=\"hljs-built_in\">Object</span>.create(context);<br>      <span class=\"hljs-keyword\">this</span>.request = <span class=\"hljs-built_in\">Object</span>.create(request);<br>      <span class=\"hljs-keyword\">this</span>.response = <span class=\"hljs-built_in\">Object</span>.create(response);<br>      <span class=\"hljs-keyword\">if</span> (util.inspect.custom) &#123;<br>        <span class=\"hljs-keyword\">this</span>[util.inspect.custom] = <span class=\"hljs-keyword\">this</span>.inspect;<br>      &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n<p>application除了构造方法外还有几个主要的方法，包括： applicaton的createContext方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">createContext(req, res) &#123;<br>  <span class=\"hljs-keyword\">const</span> context = <span class=\"hljs-built_in\">Object</span>.create(<span class=\"hljs-keyword\">this</span>.context);<br>  <span class=\"hljs-keyword\">const</span> request = context.request = <span class=\"hljs-built_in\">Object</span>.create(<span class=\"hljs-keyword\">this</span>.request);<br>  <span class=\"hljs-keyword\">const</span> response = context.response = <span class=\"hljs-built_in\">Object</span>.create(<span class=\"hljs-keyword\">this</span>.response);<br>  context.app = request.app = response.app = <span class=\"hljs-keyword\">this</span>;<br>  context.req = request.req = response.req = req;<br>  context.res = request.res = response.res = res;<br>  request.ctx = response.ctx = context;<br>  request.response = response;<br>  response.request = request;<br>  context.originalUrl = request.originalUrl = req.url;<br>  context.state = &#123;&#125;;<br>  <span class=\"hljs-keyword\">return</span> context;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>创建了一个context上下文对象，这个对象挂载了app，req，res，ctx等多个属性，属性的含义看缩写即可明白。 application中的listen方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">listen(...args) &#123;<br>  debug(<span class=\"hljs-string\">'listen'</span>);<br>  <span class=\"hljs-keyword\">const</span> server = http.createServer(<span class=\"hljs-keyword\">this</span>.callback());<br>  <span class=\"hljs-keyword\">return</span> server.listen(...args);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>调用了基础网络库http中的createServer和linsten方法，创建一个服务器并且监听端口。</p>\n<h1 id=\"koa中间件源码原理\"><a href=\"#koa中间件源码原理\" class=\"headerlink\" title=\"koa中间件源码原理\"></a>koa中间件源码原理</h1><p>application中的use方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">use(fn) &#123;<br>  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> fn !== <span class=\"hljs-string\">'function'</span>) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">TypeError</span>(<span class=\"hljs-string\">'middleware must be a function!'</span>);<br>  <span class=\"hljs-keyword\">if</span> (isGeneratorFunction(fn)) &#123;<br>    deprecate(<span class=\"hljs-string\">'Support for generators will be removed in v3. '</span> +<br>              <span class=\"hljs-string\">'See the documentation for examples of how to convert old middleware '</span> +<br>              <span class=\"hljs-string\">'https://github.com/koajs/koa/blob/master/docs/migration.md'</span>);<br>    fn = convert(fn);<br>  &#125;<br>  debug(<span class=\"hljs-string\">'use %s'</span>, fn._name || fn.name || <span class=\"hljs-string\">'-'</span>);<br>  <span class=\"hljs-keyword\">this</span>.middleware.push(fn);<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>因为中间件是一个用于拦截请求的异步函数，所以首先判断中间件类型是否正确，并且在中间件是generator函数的情况下转为异步函数，然后把推入中间件数组并且返回本身。该步骤仅仅作为注册中间件的功能，中间件数组中的中间件将会在http发生时被依次调用。调用的过程如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">callback() &#123;<br>  <span class=\"hljs-keyword\">const</span> fn = compose(<span class=\"hljs-keyword\">this</span>.middleware);<br><br>  <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">this</span>.listenerCount(<span class=\"hljs-string\">'error'</span>)) <span class=\"hljs-keyword\">this</span>.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-keyword\">this</span>.onerror);<br><br>  <span class=\"hljs-keyword\">const</span> handleRequest = <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">const</span> ctx = <span class=\"hljs-keyword\">this</span>.createContext(req, res);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.handleRequest(ctx, fn);<br>  &#125;;<br><br>  <span class=\"hljs-keyword\">return</span> handleRequest;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>这边中间件的执行用了一个koa-compose的库，koa-compose也非常精简，只要一个compose方法的高阶函数，洋葱模型在方法内部实现，只有三十多行：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">compose</span> (<span class=\"hljs-params\">middleware</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">Array</span>.isArray(middleware)) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">TypeError</span>(<span class=\"hljs-string\">'Middleware stack must be an array!'</span>)<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> fn <span class=\"hljs-keyword\">of</span> middleware) &#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> fn !== <span class=\"hljs-string\">'function'</span>) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">TypeError</span>(<span class=\"hljs-string\">'Middleware must be composed of functions!'</span>)<br>  &#125;<br><br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">&#123;Object&#125;</span> <span class=\"hljs-variable\">context</span></span></span><br><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@return <span class=\"hljs-type\">&#123;Promise&#125;</span></span></span><br><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@api <span class=\"hljs-variable\">public</span></span></span><br><span class=\"hljs-comment\">   */</span><br><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">context, next</span>) </span>&#123;<br>    <span class=\"hljs-comment\">// last called middleware #</span><br>    <span class=\"hljs-keyword\">let</span> index = <span class=\"hljs-number\">-1</span><br>    <span class=\"hljs-keyword\">return</span> dispatch(<span class=\"hljs-number\">0</span>)<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dispatch</span> (<span class=\"hljs-params\">i</span>) </span>&#123;<br>      <span class=\"hljs-keyword\">if</span> (i &lt;= index) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.reject(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'next() called multiple times'</span>))<br>      index = i<br>      <span class=\"hljs-keyword\">let</span> fn = middleware[i]<br>      <span class=\"hljs-keyword\">if</span> (i === middleware.length) fn = next<br>      <span class=\"hljs-keyword\">if</span> (!fn) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.resolve()<br>      <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.resolve(fn(context, dispatch.bind(<span class=\"hljs-literal\">null</span>, i + <span class=\"hljs-number\">1</span>)));<br>      &#125; <span class=\"hljs-keyword\">catch</span> (err) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.reject(err)<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>前几行做类型判断，不再赘述。 主要内容是返回一个函数，这个函数是一个递归的高阶函数。 最关键的一行是return Promise.resolve(fn(context, dispatch.bind(null, i + 1))); 这就会在promise resolve的时候执行fn(context, dispatch.bind(null, i + 1)) 这个过程可以被理解为</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">compose</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.resolve(<br>    f1(context,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.resolve(<br>        f2(context,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.resolve(<br>            f3(context,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>              <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.resolve(<br>                next(context,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>                  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.resolve(<span class=\"hljs-string\">'fn is undefined'</span>)<br>                &#125;)<br>              )<br>            &#125;)<br>          )<br>        &#125;)<br>      )<br>    &#125;)<br>  )<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在一个中间件函数中不能调用两次next()，否则会抛出错误。 为什么执行顺序是1,2,3,4,5,ok,5,4,3,2,1呢。是因为 next() 是把主线程暂时交给下个代码块，所有代码块执行完后会依次收回执行权，而收回的顺序就相反了。</p>\n<h1 id=\"context主要方法\"><a href=\"#context主要方法\" class=\"headerlink\" title=\"context主要方法\"></a>context主要方法</h1><p>相比application，剩下三部分都要简单的多。 Koa处理请求的过程：当请求到来的时候，会通过req和res来创建一个context (ctx)，然后执行中间件，然后再返回响应。 context.js是用来代理ctx的功能，把更多的方法和功能挂载上去，提供对request和response的更多操作。其中最主要的方法是delegate方法，除此之外的方法都是辅助方法或者错误捕获。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">delegate(proto, <span class=\"hljs-string\">'response'</span>)<br>  .method(<span class=\"hljs-string\">'attachment'</span>)<br>  <span class=\"hljs-comment\">// ...</span><br>  .getter(<span class=\"hljs-string\">'writable'</span>);<br><br>delegate(proto, <span class=\"hljs-string\">'request'</span>)<br>  .method(<span class=\"hljs-string\">'acceptsLanguages'</span>)<br>  <span class=\"hljs-comment\">// ...</span><br>  .getter(<span class=\"hljs-string\">'ip'</span>);<br></code></pre></td></tr></table></figure>\n\n<p>这段操作使得，当访问proto的代理属性的时候，实际上是在访问proto.response的对应属性。 #request和response 两者类似，虽然代码比较长，但实际就是对HTTP的header的一个处理而已，每个方法都非常简单，也调用了一些基础的网络库如url，net等等。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>koa源码非常简单，只有四个文件也就是koa的四大对象：</p>\n<ul>\n<li>application.js 包含 app 的构造以及启动一个服务器</li>\n<li>context.js app 的 context 对象, 传入中间件的上下文对象</li>\n<li>request.js app 的请求对象，包含请求相关的一些属性</li>\n<li>response.js app 的响应对象，包含响应相关的一些属性</li>\n</ul>\n<h1 id=\"application主要方法\"><a href=\"#application主要方法\" class=\"headerlink\" title=\"application主要方法\"></a>application主要方法</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">application中的构造函数：<br><br>    <span class=\"hljs-keyword\">constructor</span>() &#123;<br>      <span class=\"hljs-keyword\">super</span>();<br><br>      <span class=\"hljs-keyword\">this</span>.proxy = <span class=\"hljs-literal\">false</span>;<br>      <span class=\"hljs-comment\">// 存放中间件的数组</span><br>      <span class=\"hljs-keyword\">this</span>.middleware = [];<br>      <span class=\"hljs-comment\">// 忽略的子域名数量</span><br>      <span class=\"hljs-keyword\">this</span>.subdomainOffset = <span class=\"hljs-number\">2</span>;<br>      <span class=\"hljs-comment\">// 设置环境变量</span><br>      <span class=\"hljs-keyword\">this</span>.env = process.env.NODE_ENV || <span class=\"hljs-string\">'development'</span>;<br>      <span class=\"hljs-comment\">// 挂载context，request，response到application</span><br>      <span class=\"hljs-keyword\">this</span>.context = <span class=\"hljs-built_in\">Object</span>.create(context);<br>      <span class=\"hljs-keyword\">this</span>.request = <span class=\"hljs-built_in\">Object</span>.create(request);<br>      <span class=\"hljs-keyword\">this</span>.response = <span class=\"hljs-built_in\">Object</span>.create(response);<br>      <span class=\"hljs-keyword\">if</span> (util.inspect.custom) &#123;<br>        <span class=\"hljs-keyword\">this</span>[util.inspect.custom] = <span class=\"hljs-keyword\">this</span>.inspect;<br>      &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n<p>application除了构造方法外还有几个主要的方法，包括： applicaton的createContext方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">createContext(req, res) &#123;<br>  <span class=\"hljs-keyword\">const</span> context = <span class=\"hljs-built_in\">Object</span>.create(<span class=\"hljs-keyword\">this</span>.context);<br>  <span class=\"hljs-keyword\">const</span> request = context.request = <span class=\"hljs-built_in\">Object</span>.create(<span class=\"hljs-keyword\">this</span>.request);<br>  <span class=\"hljs-keyword\">const</span> response = context.response = <span class=\"hljs-built_in\">Object</span>.create(<span class=\"hljs-keyword\">this</span>.response);<br>  context.app = request.app = response.app = <span class=\"hljs-keyword\">this</span>;<br>  context.req = request.req = response.req = req;<br>  context.res = request.res = response.res = res;<br>  request.ctx = response.ctx = context;<br>  request.response = response;<br>  response.request = request;<br>  context.originalUrl = request.originalUrl = req.url;<br>  context.state = &#123;&#125;;<br>  <span class=\"hljs-keyword\">return</span> context;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>创建了一个context上下文对象，这个对象挂载了app，req，res，ctx等多个属性，属性的含义看缩写即可明白。 application中的listen方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">listen(...args) &#123;<br>  debug(<span class=\"hljs-string\">'listen'</span>);<br>  <span class=\"hljs-keyword\">const</span> server = http.createServer(<span class=\"hljs-keyword\">this</span>.callback());<br>  <span class=\"hljs-keyword\">return</span> server.listen(...args);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>调用了基础网络库http中的createServer和linsten方法，创建一个服务器并且监听端口。</p>\n<h1 id=\"koa中间件源码原理\"><a href=\"#koa中间件源码原理\" class=\"headerlink\" title=\"koa中间件源码原理\"></a>koa中间件源码原理</h1><p>application中的use方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">use(fn) &#123;<br>  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> fn !== <span class=\"hljs-string\">'function'</span>) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">TypeError</span>(<span class=\"hljs-string\">'middleware must be a function!'</span>);<br>  <span class=\"hljs-keyword\">if</span> (isGeneratorFunction(fn)) &#123;<br>    deprecate(<span class=\"hljs-string\">'Support for generators will be removed in v3. '</span> +<br>              <span class=\"hljs-string\">'See the documentation for examples of how to convert old middleware '</span> +<br>              <span class=\"hljs-string\">'https://github.com/koajs/koa/blob/master/docs/migration.md'</span>);<br>    fn = convert(fn);<br>  &#125;<br>  debug(<span class=\"hljs-string\">'use %s'</span>, fn._name || fn.name || <span class=\"hljs-string\">'-'</span>);<br>  <span class=\"hljs-keyword\">this</span>.middleware.push(fn);<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>因为中间件是一个用于拦截请求的异步函数，所以首先判断中间件类型是否正确，并且在中间件是generator函数的情况下转为异步函数，然后把推入中间件数组并且返回本身。该步骤仅仅作为注册中间件的功能，中间件数组中的中间件将会在http发生时被依次调用。调用的过程如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">callback() &#123;<br>  <span class=\"hljs-keyword\">const</span> fn = compose(<span class=\"hljs-keyword\">this</span>.middleware);<br><br>  <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">this</span>.listenerCount(<span class=\"hljs-string\">'error'</span>)) <span class=\"hljs-keyword\">this</span>.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-keyword\">this</span>.onerror);<br><br>  <span class=\"hljs-keyword\">const</span> handleRequest = <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">const</span> ctx = <span class=\"hljs-keyword\">this</span>.createContext(req, res);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.handleRequest(ctx, fn);<br>  &#125;;<br><br>  <span class=\"hljs-keyword\">return</span> handleRequest;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>这边中间件的执行用了一个koa-compose的库，koa-compose也非常精简，只要一个compose方法的高阶函数，洋葱模型在方法内部实现，只有三十多行：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">compose</span> (<span class=\"hljs-params\">middleware</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">Array</span>.isArray(middleware)) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">TypeError</span>(<span class=\"hljs-string\">'Middleware stack must be an array!'</span>)<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> fn <span class=\"hljs-keyword\">of</span> middleware) &#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> fn !== <span class=\"hljs-string\">'function'</span>) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">TypeError</span>(<span class=\"hljs-string\">'Middleware must be composed of functions!'</span>)<br>  &#125;<br><br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">&#123;Object&#125;</span> <span class=\"hljs-variable\">context</span></span></span><br><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@return <span class=\"hljs-type\">&#123;Promise&#125;</span></span></span><br><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@api <span class=\"hljs-variable\">public</span></span></span><br><span class=\"hljs-comment\">   */</span><br><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">context, next</span>) </span>&#123;<br>    <span class=\"hljs-comment\">// last called middleware #</span><br>    <span class=\"hljs-keyword\">let</span> index = <span class=\"hljs-number\">-1</span><br>    <span class=\"hljs-keyword\">return</span> dispatch(<span class=\"hljs-number\">0</span>)<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dispatch</span> (<span class=\"hljs-params\">i</span>) </span>&#123;<br>      <span class=\"hljs-keyword\">if</span> (i &lt;= index) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.reject(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'next() called multiple times'</span>))<br>      index = i<br>      <span class=\"hljs-keyword\">let</span> fn = middleware[i]<br>      <span class=\"hljs-keyword\">if</span> (i === middleware.length) fn = next<br>      <span class=\"hljs-keyword\">if</span> (!fn) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.resolve()<br>      <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.resolve(fn(context, dispatch.bind(<span class=\"hljs-literal\">null</span>, i + <span class=\"hljs-number\">1</span>)));<br>      &#125; <span class=\"hljs-keyword\">catch</span> (err) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.reject(err)<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>前几行做类型判断，不再赘述。 主要内容是返回一个函数，这个函数是一个递归的高阶函数。 最关键的一行是return Promise.resolve(fn(context, dispatch.bind(null, i + 1))); 这就会在promise resolve的时候执行fn(context, dispatch.bind(null, i + 1)) 这个过程可以被理解为</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">compose</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.resolve(<br>    f1(context,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.resolve(<br>        f2(context,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.resolve(<br>            f3(context,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>              <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.resolve(<br>                next(context,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>                  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.resolve(<span class=\"hljs-string\">'fn is undefined'</span>)<br>                &#125;)<br>              )<br>            &#125;)<br>          )<br>        &#125;)<br>      )<br>    &#125;)<br>  )<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在一个中间件函数中不能调用两次next()，否则会抛出错误。 为什么执行顺序是1,2,3,4,5,ok,5,4,3,2,1呢。是因为 next() 是把主线程暂时交给下个代码块，所有代码块执行完后会依次收回执行权，而收回的顺序就相反了。</p>\n<h1 id=\"context主要方法\"><a href=\"#context主要方法\" class=\"headerlink\" title=\"context主要方法\"></a>context主要方法</h1><p>相比application，剩下三部分都要简单的多。 Koa处理请求的过程：当请求到来的时候，会通过req和res来创建一个context (ctx)，然后执行中间件，然后再返回响应。 context.js是用来代理ctx的功能，把更多的方法和功能挂载上去，提供对request和response的更多操作。其中最主要的方法是delegate方法，除此之外的方法都是辅助方法或者错误捕获。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">delegate(proto, <span class=\"hljs-string\">'response'</span>)<br>  .method(<span class=\"hljs-string\">'attachment'</span>)<br>  <span class=\"hljs-comment\">// ...</span><br>  .getter(<span class=\"hljs-string\">'writable'</span>);<br><br>delegate(proto, <span class=\"hljs-string\">'request'</span>)<br>  .method(<span class=\"hljs-string\">'acceptsLanguages'</span>)<br>  <span class=\"hljs-comment\">// ...</span><br>  .getter(<span class=\"hljs-string\">'ip'</span>);<br></code></pre></td></tr></table></figure>\n\n<p>这段操作使得，当访问proto的代理属性的时候，实际上是在访问proto.response的对应属性。 #request和response 两者类似，虽然代码比较长，但实际就是对HTTP的header的一个处理而已，每个方法都非常简单，也调用了一些基础的网络库如url，net等等。</p>\n"},{"title":"Web性能优化分类总结","url":"34.html","id":"34","date":"2017-06-23T13:15:32.000Z","_content":"\n一图流 ![](http://img.bugzhang.com/web%E4%BC%98%E5%8C%96.svg)","source":"_posts/web-e6-80-a7-e8-83-bd-e4-bc-98-e5-8c-96-e5-88-86-e7-b1-bb-e6-80-bb-e7-bb-93.md","raw":"---\ntitle: Web性能优化分类总结\ntags:\n  - 前端\n  - 性能优化\nurl: 34.html\nid: 34\ncategories:\n  - 前端\ndate: 2017-06-23 21:15:32\n---\n\n一图流 ![](http://img.bugzhang.com/web%E4%BC%98%E5%8C%96.svg)","slug":"web-e6-80-a7-e8-83-bd-e4-bc-98-e5-8c-96-e5-88-86-e7-b1-bb-e6-80-bb-e7-bb-93","published":1,"updated":"2020-05-19T08:33:55.924Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts809004izmz8emm69zv7","content":"<p>一图流 <img src=\"http://img.bugzhang.com/web%E4%BC%98%E5%8C%96.svg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>一图流 <img src=\"http://img.bugzhang.com/web%E4%BC%98%E5%8C%96.svg\" alt=\"\"></p>\n"},{"title":"Webpack构建原理","url":"52.html","id":"52","date":"2017-08-19T10:09:08.000Z","_content":"\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0037.jpg) ![](https://sfault-image.b0.upaiyun.com/307/325/3073259919-576944e693dc3_articlex) 现代前端工程化：ES6 + Webpack + React + Babel，commonjs 的模块必须在使用前经过 webpack 的构建才可以被游览器直接使用，webpack是现代前端重要一环。\n\n# webpack解决的问题\n\n当项目很复杂的时候，没有模块系统会产生很多复杂问题，模块化相关如下：http://bugzhang.com/2017/08/01/javascriptmo-kuai-hua/ webpack可以打包所有静态资源，常见的例如：\n\n*   根据模板生成html,并且自动处理上面的css/JS引用路径\n*   自动处理img里图片路径，css样式中背景图的路径，字体引用\n*   开启本地服务器，变写代码边自动更新页面内容watch\n*   编译jsx、es6、sass、less、coffeescript等等并添加md5、sourcemap等辅助\n*   异步加载内容，比如弹出框，不需要时不加载到dom\n*   配合vue.js、react等框架，解析相关文件 ![](http://webpack.github.io/assets/what-is-webpack.png)\n\n# webpack整体架构\n\n以webpack.config主要部分划分，webpack主要有以下部分：\n\n*   entry：一个可执行模块的入口文件\n*   output：模块的出口目录\n*   chunk：多个文件组成的一个代码块\n*   loader：模块转换器，确定处理方式\n*   plugin：插件，拓展webpack功能，与loader一同定义webpack的处理方式\n\n```js\n    module.exports = {\n      devtool: isProd\n        ? false\n        : '#cheap-module-source-map',\n      output: {\n        path: path.resolve(__dirname, '../dist'),\n        publicPath: '/dist/',\n        filename: '[name].[chunkhash].js'\n      },\n      resolve: {\n        alias: {\n          'public': path.resolve(__dirname, '../public')\n        }\n      },\n      module: {\n        noParse: /es6-promise\\.js$/, // avoid webpack shimming process\n        rules: [\n          {\n            test: /\\.vue$/,\n            loader: 'vue-loader',\n            options: vueConfig\n          },\n          {\n            test: /\\.js$/,\n            loader: 'babel-loader',\n            exclude: /node_modules/\n          },\n          {\n            test: /\\.(png|jpg|gif|svg)$/,\n            loader: 'url-loader',\n            options: {\n              limit: 10000,\n              name: '[name].[ext]?[hash]'\n            }\n          },\n          {\n            test: /\\.css$/,\n            use: isProd\n              ? ExtractTextPlugin.extract({\n                  use: 'css-loader?minimize',\n                  fallback: 'vue-style-loader'\n                })\n              : ['vue-style-loader', 'css-loader']\n          }\n        ]\n      },\n      performance: {\n        maxEntrypointSize: 300000,\n        hints: isProd ? 'warning' : false\n      },\n      plugins: isProd\n        ? [\n            new webpack.optimize.UglifyJsPlugin({\n              compress: { warnings: false }\n            }),\n            new ExtractTextPlugin({\n              filename: 'common.[chunkhash].css'\n            })\n          ]\n        : [\n            new FriendlyErrorsPlugin()\n          ]\n    }\n```\n\n> 一个典型的webpack配置文件\n\n# webpack构建过程\n\n官网对webpack构建的图示如下： ![](https://segmentfault.com/img/remote/1460000004839887) webpack会将所有静态资源看做是模块，然后把这些模块组成到一个bundle，在页面上最终引入一个bundle.js实现对静态资源的加载。大概过程如下： ![](https://segmentfault.com/img/remote/1460000005770047) 构建过程中，webpack做了很多工作，主要的有：\n\n*   读取并初始化option\n*   编译\n*   递归分析依赖，按照依赖build\n*   构建，构建过程中会用相应的loader\n*   构建完毕后编译，生成AST抽象语法树\n*   遍历AST，在有依赖时，收集依赖\n*   打包前合并、压缩等\n*   输出文件","source":"_posts/webpack-e6-9e-84-e5-bb-ba-e5-8e-9f-e7-90-86.md","raw":"---\ntitle: Webpack构建原理\ntags:\n  - 前端工程化\nurl: 52.html\nid: 52\ncategories:\n  - 前端\ndate: 2017-08-19 18:09:08\n---\n\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0037.jpg) ![](https://sfault-image.b0.upaiyun.com/307/325/3073259919-576944e693dc3_articlex) 现代前端工程化：ES6 + Webpack + React + Babel，commonjs 的模块必须在使用前经过 webpack 的构建才可以被游览器直接使用，webpack是现代前端重要一环。\n\n# webpack解决的问题\n\n当项目很复杂的时候，没有模块系统会产生很多复杂问题，模块化相关如下：http://bugzhang.com/2017/08/01/javascriptmo-kuai-hua/ webpack可以打包所有静态资源，常见的例如：\n\n*   根据模板生成html,并且自动处理上面的css/JS引用路径\n*   自动处理img里图片路径，css样式中背景图的路径，字体引用\n*   开启本地服务器，变写代码边自动更新页面内容watch\n*   编译jsx、es6、sass、less、coffeescript等等并添加md5、sourcemap等辅助\n*   异步加载内容，比如弹出框，不需要时不加载到dom\n*   配合vue.js、react等框架，解析相关文件 ![](http://webpack.github.io/assets/what-is-webpack.png)\n\n# webpack整体架构\n\n以webpack.config主要部分划分，webpack主要有以下部分：\n\n*   entry：一个可执行模块的入口文件\n*   output：模块的出口目录\n*   chunk：多个文件组成的一个代码块\n*   loader：模块转换器，确定处理方式\n*   plugin：插件，拓展webpack功能，与loader一同定义webpack的处理方式\n\n```js\n    module.exports = {\n      devtool: isProd\n        ? false\n        : '#cheap-module-source-map',\n      output: {\n        path: path.resolve(__dirname, '../dist'),\n        publicPath: '/dist/',\n        filename: '[name].[chunkhash].js'\n      },\n      resolve: {\n        alias: {\n          'public': path.resolve(__dirname, '../public')\n        }\n      },\n      module: {\n        noParse: /es6-promise\\.js$/, // avoid webpack shimming process\n        rules: [\n          {\n            test: /\\.vue$/,\n            loader: 'vue-loader',\n            options: vueConfig\n          },\n          {\n            test: /\\.js$/,\n            loader: 'babel-loader',\n            exclude: /node_modules/\n          },\n          {\n            test: /\\.(png|jpg|gif|svg)$/,\n            loader: 'url-loader',\n            options: {\n              limit: 10000,\n              name: '[name].[ext]?[hash]'\n            }\n          },\n          {\n            test: /\\.css$/,\n            use: isProd\n              ? ExtractTextPlugin.extract({\n                  use: 'css-loader?minimize',\n                  fallback: 'vue-style-loader'\n                })\n              : ['vue-style-loader', 'css-loader']\n          }\n        ]\n      },\n      performance: {\n        maxEntrypointSize: 300000,\n        hints: isProd ? 'warning' : false\n      },\n      plugins: isProd\n        ? [\n            new webpack.optimize.UglifyJsPlugin({\n              compress: { warnings: false }\n            }),\n            new ExtractTextPlugin({\n              filename: 'common.[chunkhash].css'\n            })\n          ]\n        : [\n            new FriendlyErrorsPlugin()\n          ]\n    }\n```\n\n> 一个典型的webpack配置文件\n\n# webpack构建过程\n\n官网对webpack构建的图示如下： ![](https://segmentfault.com/img/remote/1460000004839887) webpack会将所有静态资源看做是模块，然后把这些模块组成到一个bundle，在页面上最终引入一个bundle.js实现对静态资源的加载。大概过程如下： ![](https://segmentfault.com/img/remote/1460000005770047) 构建过程中，webpack做了很多工作，主要的有：\n\n*   读取并初始化option\n*   编译\n*   递归分析依赖，按照依赖build\n*   构建，构建过程中会用相应的loader\n*   构建完毕后编译，生成AST抽象语法树\n*   遍历AST，在有依赖时，收集依赖\n*   打包前合并、压缩等\n*   输出文件","slug":"webpack-e6-9e-84-e5-bb-ba-e5-8e-9f-e7-90-86","published":1,"updated":"2020-05-19T08:51:28.565Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts809004lzmz8hh2ubscr","content":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0037.jpg\" alt=\"\"> <img src=\"https://sfault-image.b0.upaiyun.com/307/325/3073259919-576944e693dc3_articlex\" alt=\"\"> 现代前端工程化：ES6 + Webpack + React + Babel，commonjs 的模块必须在使用前经过 webpack 的构建才可以被游览器直接使用，webpack是现代前端重要一环。</p>\n<h1 id=\"webpack解决的问题\"><a href=\"#webpack解决的问题\" class=\"headerlink\" title=\"webpack解决的问题\"></a>webpack解决的问题</h1><p>当项目很复杂的时候，没有模块系统会产生很多复杂问题，模块化相关如下：<a href=\"http://bugzhang.com/2017/08/01/javascriptmo-kuai-hua/\">http://bugzhang.com/2017/08/01/javascriptmo-kuai-hua/</a> webpack可以打包所有静态资源，常见的例如：</p>\n<ul>\n<li>根据模板生成html,并且自动处理上面的css/JS引用路径</li>\n<li>自动处理img里图片路径，css样式中背景图的路径，字体引用</li>\n<li>开启本地服务器，变写代码边自动更新页面内容watch</li>\n<li>编译jsx、es6、sass、less、coffeescript等等并添加md5、sourcemap等辅助</li>\n<li>异步加载内容，比如弹出框，不需要时不加载到dom</li>\n<li>配合vue.js、react等框架，解析相关文件 <img src=\"http://webpack.github.io/assets/what-is-webpack.png\" alt=\"\"></li>\n</ul>\n<h1 id=\"webpack整体架构\"><a href=\"#webpack整体架构\" class=\"headerlink\" title=\"webpack整体架构\"></a>webpack整体架构</h1><p>以webpack.config主要部分划分，webpack主要有以下部分：</p>\n<ul>\n<li>entry：一个可执行模块的入口文件</li>\n<li>output：模块的出口目录</li>\n<li>chunk：多个文件组成的一个代码块</li>\n<li>loader：模块转换器，确定处理方式</li>\n<li>plugin：插件，拓展webpack功能，与loader一同定义webpack的处理方式</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>  devtool: isProd<br>    ? <span class=\"hljs-literal\">false</span><br>    : <span class=\"hljs-string\">'#cheap-module-source-map'</span>,<br>  output: &#123;<br>    path: path.resolve(__dirname, <span class=\"hljs-string\">'../dist'</span>),<br>    publicPath: <span class=\"hljs-string\">'/dist/'</span>,<br>    filename: <span class=\"hljs-string\">'[name].[chunkhash].js'</span><br>  &#125;,<br>  resolve: &#123;<br>    alias: &#123;<br>      <span class=\"hljs-string\">'public'</span>: path.resolve(__dirname, <span class=\"hljs-string\">'../public'</span>)<br>    &#125;<br>  &#125;,<br>  <span class=\"hljs-built_in\">module</span>: &#123;<br>    noParse: <span class=\"hljs-regexp\">/es6-promise\\.js$/</span>, <span class=\"hljs-comment\">// avoid webpack shimming process</span><br>    rules: [<br>      &#123;<br>        test: <span class=\"hljs-regexp\">/\\.vue$/</span>,<br>        loader: <span class=\"hljs-string\">'vue-loader'</span>,<br>        options: vueConfig<br>      &#125;,<br>      &#123;<br>        test: <span class=\"hljs-regexp\">/\\.js$/</span>,<br>        loader: <span class=\"hljs-string\">'babel-loader'</span>,<br>        exclude: <span class=\"hljs-regexp\">/node_modules/</span><br>      &#125;,<br>      &#123;<br>        test: <span class=\"hljs-regexp\">/\\.(png|jpg|gif|svg)$/</span>,<br>        loader: <span class=\"hljs-string\">'url-loader'</span>,<br>        options: &#123;<br>          limit: <span class=\"hljs-number\">10000</span>,<br>          name: <span class=\"hljs-string\">'[name].[ext]?[hash]'</span><br>        &#125;<br>      &#125;,<br>      &#123;<br>        test: <span class=\"hljs-regexp\">/\\.css$/</span>,<br>        use: isProd<br>          ? ExtractTextPlugin.extract(&#123;<br>              use: <span class=\"hljs-string\">'css-loader?minimize'</span>,<br>              fallback: <span class=\"hljs-string\">'vue-style-loader'</span><br>            &#125;)<br>          : [<span class=\"hljs-string\">'vue-style-loader'</span>, <span class=\"hljs-string\">'css-loader'</span>]<br>      &#125;<br>    ]<br>  &#125;,<br>  performance: &#123;<br>    maxEntrypointSize: <span class=\"hljs-number\">300000</span>,<br>    hints: isProd ? <span class=\"hljs-string\">'warning'</span> : <span class=\"hljs-literal\">false</span><br>  &#125;,<br>  plugins: isProd<br>    ? [<br>        <span class=\"hljs-keyword\">new</span> webpack.optimize.UglifyJsPlugin(&#123;<br>          compress: &#123; <span class=\"hljs-attr\">warnings</span>: <span class=\"hljs-literal\">false</span> &#125;<br>        &#125;),<br>        <span class=\"hljs-keyword\">new</span> ExtractTextPlugin(&#123;<br>          filename: <span class=\"hljs-string\">'common.[chunkhash].css'</span><br>        &#125;)<br>      ]<br>    : [<br>        <span class=\"hljs-keyword\">new</span> FriendlyErrorsPlugin()<br>      ]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>一个典型的webpack配置文件</p>\n</blockquote>\n<h1 id=\"webpack构建过程\"><a href=\"#webpack构建过程\" class=\"headerlink\" title=\"webpack构建过程\"></a>webpack构建过程</h1><p>官网对webpack构建的图示如下： <img src=\"https://segmentfault.com/img/remote/1460000004839887\" alt=\"\"> webpack会将所有静态资源看做是模块，然后把这些模块组成到一个bundle，在页面上最终引入一个bundle.js实现对静态资源的加载。大概过程如下： <img src=\"https://segmentfault.com/img/remote/1460000005770047\" alt=\"\"> 构建过程中，webpack做了很多工作，主要的有：</p>\n<ul>\n<li>读取并初始化option</li>\n<li>编译</li>\n<li>递归分析依赖，按照依赖build</li>\n<li>构建，构建过程中会用相应的loader</li>\n<li>构建完毕后编译，生成AST抽象语法树</li>\n<li>遍历AST，在有依赖时，收集依赖</li>\n<li>打包前合并、压缩等</li>\n<li>输出文件</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0037.jpg\" alt=\"\"> <img src=\"https://sfault-image.b0.upaiyun.com/307/325/3073259919-576944e693dc3_articlex\" alt=\"\"> 现代前端工程化：ES6 + Webpack + React + Babel，commonjs 的模块必须在使用前经过 webpack 的构建才可以被游览器直接使用，webpack是现代前端重要一环。</p>\n<h1 id=\"webpack解决的问题\"><a href=\"#webpack解决的问题\" class=\"headerlink\" title=\"webpack解决的问题\"></a>webpack解决的问题</h1><p>当项目很复杂的时候，没有模块系统会产生很多复杂问题，模块化相关如下：<a href=\"http://bugzhang.com/2017/08/01/javascriptmo-kuai-hua/\">http://bugzhang.com/2017/08/01/javascriptmo-kuai-hua/</a> webpack可以打包所有静态资源，常见的例如：</p>\n<ul>\n<li>根据模板生成html,并且自动处理上面的css/JS引用路径</li>\n<li>自动处理img里图片路径，css样式中背景图的路径，字体引用</li>\n<li>开启本地服务器，变写代码边自动更新页面内容watch</li>\n<li>编译jsx、es6、sass、less、coffeescript等等并添加md5、sourcemap等辅助</li>\n<li>异步加载内容，比如弹出框，不需要时不加载到dom</li>\n<li>配合vue.js、react等框架，解析相关文件 <img src=\"http://webpack.github.io/assets/what-is-webpack.png\" alt=\"\"></li>\n</ul>\n<h1 id=\"webpack整体架构\"><a href=\"#webpack整体架构\" class=\"headerlink\" title=\"webpack整体架构\"></a>webpack整体架构</h1><p>以webpack.config主要部分划分，webpack主要有以下部分：</p>\n<ul>\n<li>entry：一个可执行模块的入口文件</li>\n<li>output：模块的出口目录</li>\n<li>chunk：多个文件组成的一个代码块</li>\n<li>loader：模块转换器，确定处理方式</li>\n<li>plugin：插件，拓展webpack功能，与loader一同定义webpack的处理方式</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">module</span>.exports = &#123;<br>  devtool: isProd<br>    ? <span class=\"hljs-literal\">false</span><br>    : <span class=\"hljs-string\">'#cheap-module-source-map'</span>,<br>  output: &#123;<br>    path: path.resolve(__dirname, <span class=\"hljs-string\">'../dist'</span>),<br>    publicPath: <span class=\"hljs-string\">'/dist/'</span>,<br>    filename: <span class=\"hljs-string\">'[name].[chunkhash].js'</span><br>  &#125;,<br>  resolve: &#123;<br>    alias: &#123;<br>      <span class=\"hljs-string\">'public'</span>: path.resolve(__dirname, <span class=\"hljs-string\">'../public'</span>)<br>    &#125;<br>  &#125;,<br>  <span class=\"hljs-built_in\">module</span>: &#123;<br>    noParse: <span class=\"hljs-regexp\">/es6-promise\\.js$/</span>, <span class=\"hljs-comment\">// avoid webpack shimming process</span><br>    rules: [<br>      &#123;<br>        test: <span class=\"hljs-regexp\">/\\.vue$/</span>,<br>        loader: <span class=\"hljs-string\">'vue-loader'</span>,<br>        options: vueConfig<br>      &#125;,<br>      &#123;<br>        test: <span class=\"hljs-regexp\">/\\.js$/</span>,<br>        loader: <span class=\"hljs-string\">'babel-loader'</span>,<br>        exclude: <span class=\"hljs-regexp\">/node_modules/</span><br>      &#125;,<br>      &#123;<br>        test: <span class=\"hljs-regexp\">/\\.(png|jpg|gif|svg)$/</span>,<br>        loader: <span class=\"hljs-string\">'url-loader'</span>,<br>        options: &#123;<br>          limit: <span class=\"hljs-number\">10000</span>,<br>          name: <span class=\"hljs-string\">'[name].[ext]?[hash]'</span><br>        &#125;<br>      &#125;,<br>      &#123;<br>        test: <span class=\"hljs-regexp\">/\\.css$/</span>,<br>        use: isProd<br>          ? ExtractTextPlugin.extract(&#123;<br>              use: <span class=\"hljs-string\">'css-loader?minimize'</span>,<br>              fallback: <span class=\"hljs-string\">'vue-style-loader'</span><br>            &#125;)<br>          : [<span class=\"hljs-string\">'vue-style-loader'</span>, <span class=\"hljs-string\">'css-loader'</span>]<br>      &#125;<br>    ]<br>  &#125;,<br>  performance: &#123;<br>    maxEntrypointSize: <span class=\"hljs-number\">300000</span>,<br>    hints: isProd ? <span class=\"hljs-string\">'warning'</span> : <span class=\"hljs-literal\">false</span><br>  &#125;,<br>  plugins: isProd<br>    ? [<br>        <span class=\"hljs-keyword\">new</span> webpack.optimize.UglifyJsPlugin(&#123;<br>          compress: &#123; <span class=\"hljs-attr\">warnings</span>: <span class=\"hljs-literal\">false</span> &#125;<br>        &#125;),<br>        <span class=\"hljs-keyword\">new</span> ExtractTextPlugin(&#123;<br>          filename: <span class=\"hljs-string\">'common.[chunkhash].css'</span><br>        &#125;)<br>      ]<br>    : [<br>        <span class=\"hljs-keyword\">new</span> FriendlyErrorsPlugin()<br>      ]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>一个典型的webpack配置文件</p>\n</blockquote>\n<h1 id=\"webpack构建过程\"><a href=\"#webpack构建过程\" class=\"headerlink\" title=\"webpack构建过程\"></a>webpack构建过程</h1><p>官网对webpack构建的图示如下： <img src=\"https://segmentfault.com/img/remote/1460000004839887\" alt=\"\"> webpack会将所有静态资源看做是模块，然后把这些模块组成到一个bundle，在页面上最终引入一个bundle.js实现对静态资源的加载。大概过程如下： <img src=\"https://segmentfault.com/img/remote/1460000005770047\" alt=\"\"> 构建过程中，webpack做了很多工作，主要的有：</p>\n<ul>\n<li>读取并初始化option</li>\n<li>编译</li>\n<li>递归分析依赖，按照依赖build</li>\n<li>构建，构建过程中会用相应的loader</li>\n<li>构建完毕后编译，生成AST抽象语法树</li>\n<li>遍历AST，在有依赖时，收集依赖</li>\n<li>打包前合并、压缩等</li>\n<li>输出文件</li>\n</ul>\n"},{"title":"Zepto源码分析——Zepto核心","url":"62.html","id":"62","date":"2017-09-11T03:16:07.000Z","_content":"\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0046.jpg)\n\n前言\n--\n\n一直计划想写一写某个框架的源码分析，之前读过jQuery的，但感觉jQuery太大，同时网上研究也已经很多而且很全了，所以选取迷你版jQuery之称的Zepto作为分析对象，边读边写，同时司徒正美大神的《JavaScript框架设计》这本书的对js框架的讲解，来写写自己理解。\n\n目录结构\n----\n\n源码下载地址：https://github.com/madrobby/zepto ，源码在src目录下，目录结构如下：\n\n    ├── src\n       ├── ajax.js\n       ├── amd_layout.js\n       ├── assets.js\n       ├── callbacks.js\n       ├── data.js\n       ├── deferred.js\n       ├── detect.js\n       ├── event.js\n       ├── form.js\n       ├── fx.js\n       ├── fx_methods.js\n       ├── gesture.js\n       ├── ie.js\n       ├── ios3.js\n       ├── selector.js\n       ├── stack.js\n       ├── touch.js\n       └── zepto.js\n\n\n命名空间\n----\n```js\n    var Zepto = (function() {\n      return $\n    })()\n\n    window.Zepto = Zepto\n    window.$ === undefined && (window.$ = Zepto)\n```\n\nZepto借鉴了类似jQuery的挂载全局变量的方式实现，核心是返回$传递给Zepto。然后把Zepto和$作为window的属性。这样不会发现变量冲突，即使冲突只需要修改这两个变量名。 此外补充下，因为很多框架都采用了$作为标配，因此经常会出现$这个变量名冲突的问题，不过一般情况下Zepto是不会和jQuery冲突（这两个只选取一个就足够了），jQuery中的解决方案是：\n\n```js\n    //先把可能存在的变量名存放\n    var _jQuery = window.jQuery,\n        _$ = window.$;\n\n    //没冲突时候放进去\n    jQuery.extend({\n      noConflict:function(deep){\n        window.$ = _$;\n        if(deep){\n          window.jQuery = _jQuery;\n        }\n        return jQuery;\n      }\n    });\n```\n\n类型判定\n----\n\n这段代码是相对比较简单的，就不再复习一遍JavaScript的类型了。直接上代码：\n\n```js\n    function type(obj) {\n      return obj == null ? String(obj) :\n        class2type[toString.call(obj)] || \"object\"\n    }\n\n    function isFunction(value) {\n      return type(value) == \"function\"\n    }\n\n    function isWindow(obj) {\n      return obj != null && obj == obj.window\n    }\n\n    function isDocument(obj) {\n      return obj != null && obj.nodeType == obj.DOCUMENT_NODE\n    }\n\n    function isObject(obj) {\n      return type(obj) == \"object\"\n    }\n\n    function isPlainObject(obj) {\n      return isObject(obj) && !isWindow(obj) && Object.getPrototypeOf(obj) == Object.prototype\n    }\n\n    function likeArray(obj) {\n      var length = !!obj && 'length' in obj && obj.length,\n        type = $.type(obj)\n\n      return 'function' != type && !isWindow(obj) && (\n        'array' == type || length === 0 ||\n        (typeof length == 'number' && length > 0 && (length - 1) in obj)\n      )\n    }\n```\n\n\nJavaScript的类型判断有一些坑，如下：\n```js\n    //type的坑\n    typeof null // 'object'\n    typeof document.childNodes  //safari 'function'\n    typeof document.createElement('embed')  //firefox3-10  'function'\n    typeof document.createElement('object')  //firefox3-10  'function'\n    typeof document.createElement('applet')  //firefox3-10  'function'\n    typeof /\\d/i  //  'function'\n    typeof window.alert  //ie6-8  'object'\n    //跨文档比较原型，会不一致\n    var iframe = document.createElement('iframe');\n    document.body.appendChild(iframe);\n    xArray = window.frames[window.frames.length - 1].Array;\n    var arr = new xArray[1,2,3];\n    arr instanceof Array;   //false\n    arr.constructor === Array;  //false\n    //旧版本AE中DOM和BOM对象的constructor不存在\n    window.onload = function(){\n        alert(window.constructor);  //ie67 undefined\n        alert(document.constructor);  //ie67 undefined\n        alert(document.body.constructor);  //ie67 undefined\n        alert((new ActiveXObject('Microsoft.XMLHTTP')).constructor);  //ie6-9 undefined\n    }\n    //isNaN会把字符串、数组放回去返回true\n    isNaN('aaa')  //true\n```\n\n框架入口\n----\n```js\n      zepto.init = function(selector, context) {\n        var dom\n        // 如果没有选择器，返回一个空Zepto对象\n        if (!selector) return zepto.Z()\n        // 如果是字符串类型的选择器\n        else if (typeof selector == 'string') {\n          // 去除收尾空白符\n          selector = selector.trim()\n          // 如果传入的字符串是以<开头且符合HTML代码规则，创建元素\n          if (selector[0] == '<' && fragmentRE.test(selector))\n            dom = zepto.fragment(selector, RegExp.$1, context), selector = null\n          // 如果不是规范但又有内容，在指定位置查找\n          else if (context !== undefined) return $(context).find(selector)\n          // 如果是CSS选择器，调用CSS选择器查找\n          else dom = zepto.qsa(document, selector)\n        }\n        // 如果是函数，当dom创建时调用\n        else if (isFunction(selector)) return $(document).ready(selector)\n        // 如果是一个Zepto对象，直接返回这个对象\n        else if (zepto.isZ(selector)) return selector\n        else {\n          // 如果是数组，转成类数组对象\n          if (isArray(selector)) dom = compact(selector)\n          // 如果是一个对象，将其包括到一个数组中\n          else if (isObject(selector))\n            dom = [selector], selector = null\n          // 如果是HTML片段，以此创建节点\n          else if (fragmentRE.test(selector))\n            dom = zepto.fragment(selector.trim(), RegExp.$1, context), selector = null\n          // 如果有context参数，在context上创建\n          else if (context !== undefined) return $(context).find(selector)\n          // 如果是CSS选择器，调用CSS选择器查找\n          else dom = zepto.qsa(document, selector)\n        }\n        // 从查找到的节点创建一个Zepto对象\n        return zepto.Z(dom, selector)\n      }\n```\n\n一个基本概念就是Zepto对象，Zepto是一个类数组对象，它具有链式方法来操作它指向的DOM节点，除了$(Zepto)对象上的直接方法外(如$.extend)，文档对象中的所有方法都是集合方法。 调用Zepto框架的方法，都是作用于Zepto()对象的，init函数所做的工作就是讲正常的DOM对象转换成具有Zepto方法的Zepto对象。\n\n对象拓展\n----\n\n对象拓展是一种机制，用来把新功能添加到命名空间上。实质就是深浅拷贝。 `javascript function extend(target, source, deep) { for (key in source) if (deep && (isPlainObject(source[key]) || isArray(source[key]))) { if (isPlainObject(source[key]) && !isPlainObject(target[key])) target[key] = {} if (isArray(source[key]) && !isArray(target[key])) target[key] = [] extend(target[key], source[key], deep) } else if (source[key] !== undefined) target[key] = source[key] }`","source":"_posts/zepto-e6-ba-90-e7-a0-81-e5-88-86-e6-9e-90-zepto-e6-a0-b8-e5-bf-83.md","raw":"---\ntitle: Zepto源码分析——Zepto核心\ntags:\n  - zepto.js\n  - 源码分析\nurl: 62.html\nid: 62\ncategories:\n  - 前端\ndate: 2017-09-11 11:16:07\n---\n\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0046.jpg)\n\n前言\n--\n\n一直计划想写一写某个框架的源码分析，之前读过jQuery的，但感觉jQuery太大，同时网上研究也已经很多而且很全了，所以选取迷你版jQuery之称的Zepto作为分析对象，边读边写，同时司徒正美大神的《JavaScript框架设计》这本书的对js框架的讲解，来写写自己理解。\n\n目录结构\n----\n\n源码下载地址：https://github.com/madrobby/zepto ，源码在src目录下，目录结构如下：\n\n    ├── src\n       ├── ajax.js\n       ├── amd_layout.js\n       ├── assets.js\n       ├── callbacks.js\n       ├── data.js\n       ├── deferred.js\n       ├── detect.js\n       ├── event.js\n       ├── form.js\n       ├── fx.js\n       ├── fx_methods.js\n       ├── gesture.js\n       ├── ie.js\n       ├── ios3.js\n       ├── selector.js\n       ├── stack.js\n       ├── touch.js\n       └── zepto.js\n\n\n命名空间\n----\n```js\n    var Zepto = (function() {\n      return $\n    })()\n\n    window.Zepto = Zepto\n    window.$ === undefined && (window.$ = Zepto)\n```\n\nZepto借鉴了类似jQuery的挂载全局变量的方式实现，核心是返回$传递给Zepto。然后把Zepto和$作为window的属性。这样不会发现变量冲突，即使冲突只需要修改这两个变量名。 此外补充下，因为很多框架都采用了$作为标配，因此经常会出现$这个变量名冲突的问题，不过一般情况下Zepto是不会和jQuery冲突（这两个只选取一个就足够了），jQuery中的解决方案是：\n\n```js\n    //先把可能存在的变量名存放\n    var _jQuery = window.jQuery,\n        _$ = window.$;\n\n    //没冲突时候放进去\n    jQuery.extend({\n      noConflict:function(deep){\n        window.$ = _$;\n        if(deep){\n          window.jQuery = _jQuery;\n        }\n        return jQuery;\n      }\n    });\n```\n\n类型判定\n----\n\n这段代码是相对比较简单的，就不再复习一遍JavaScript的类型了。直接上代码：\n\n```js\n    function type(obj) {\n      return obj == null ? String(obj) :\n        class2type[toString.call(obj)] || \"object\"\n    }\n\n    function isFunction(value) {\n      return type(value) == \"function\"\n    }\n\n    function isWindow(obj) {\n      return obj != null && obj == obj.window\n    }\n\n    function isDocument(obj) {\n      return obj != null && obj.nodeType == obj.DOCUMENT_NODE\n    }\n\n    function isObject(obj) {\n      return type(obj) == \"object\"\n    }\n\n    function isPlainObject(obj) {\n      return isObject(obj) && !isWindow(obj) && Object.getPrototypeOf(obj) == Object.prototype\n    }\n\n    function likeArray(obj) {\n      var length = !!obj && 'length' in obj && obj.length,\n        type = $.type(obj)\n\n      return 'function' != type && !isWindow(obj) && (\n        'array' == type || length === 0 ||\n        (typeof length == 'number' && length > 0 && (length - 1) in obj)\n      )\n    }\n```\n\n\nJavaScript的类型判断有一些坑，如下：\n```js\n    //type的坑\n    typeof null // 'object'\n    typeof document.childNodes  //safari 'function'\n    typeof document.createElement('embed')  //firefox3-10  'function'\n    typeof document.createElement('object')  //firefox3-10  'function'\n    typeof document.createElement('applet')  //firefox3-10  'function'\n    typeof /\\d/i  //  'function'\n    typeof window.alert  //ie6-8  'object'\n    //跨文档比较原型，会不一致\n    var iframe = document.createElement('iframe');\n    document.body.appendChild(iframe);\n    xArray = window.frames[window.frames.length - 1].Array;\n    var arr = new xArray[1,2,3];\n    arr instanceof Array;   //false\n    arr.constructor === Array;  //false\n    //旧版本AE中DOM和BOM对象的constructor不存在\n    window.onload = function(){\n        alert(window.constructor);  //ie67 undefined\n        alert(document.constructor);  //ie67 undefined\n        alert(document.body.constructor);  //ie67 undefined\n        alert((new ActiveXObject('Microsoft.XMLHTTP')).constructor);  //ie6-9 undefined\n    }\n    //isNaN会把字符串、数组放回去返回true\n    isNaN('aaa')  //true\n```\n\n框架入口\n----\n```js\n      zepto.init = function(selector, context) {\n        var dom\n        // 如果没有选择器，返回一个空Zepto对象\n        if (!selector) return zepto.Z()\n        // 如果是字符串类型的选择器\n        else if (typeof selector == 'string') {\n          // 去除收尾空白符\n          selector = selector.trim()\n          // 如果传入的字符串是以<开头且符合HTML代码规则，创建元素\n          if (selector[0] == '<' && fragmentRE.test(selector))\n            dom = zepto.fragment(selector, RegExp.$1, context), selector = null\n          // 如果不是规范但又有内容，在指定位置查找\n          else if (context !== undefined) return $(context).find(selector)\n          // 如果是CSS选择器，调用CSS选择器查找\n          else dom = zepto.qsa(document, selector)\n        }\n        // 如果是函数，当dom创建时调用\n        else if (isFunction(selector)) return $(document).ready(selector)\n        // 如果是一个Zepto对象，直接返回这个对象\n        else if (zepto.isZ(selector)) return selector\n        else {\n          // 如果是数组，转成类数组对象\n          if (isArray(selector)) dom = compact(selector)\n          // 如果是一个对象，将其包括到一个数组中\n          else if (isObject(selector))\n            dom = [selector], selector = null\n          // 如果是HTML片段，以此创建节点\n          else if (fragmentRE.test(selector))\n            dom = zepto.fragment(selector.trim(), RegExp.$1, context), selector = null\n          // 如果有context参数，在context上创建\n          else if (context !== undefined) return $(context).find(selector)\n          // 如果是CSS选择器，调用CSS选择器查找\n          else dom = zepto.qsa(document, selector)\n        }\n        // 从查找到的节点创建一个Zepto对象\n        return zepto.Z(dom, selector)\n      }\n```\n\n一个基本概念就是Zepto对象，Zepto是一个类数组对象，它具有链式方法来操作它指向的DOM节点，除了$(Zepto)对象上的直接方法外(如$.extend)，文档对象中的所有方法都是集合方法。 调用Zepto框架的方法，都是作用于Zepto()对象的，init函数所做的工作就是讲正常的DOM对象转换成具有Zepto方法的Zepto对象。\n\n对象拓展\n----\n\n对象拓展是一种机制，用来把新功能添加到命名空间上。实质就是深浅拷贝。 `javascript function extend(target, source, deep) { for (key in source) if (deep && (isPlainObject(source[key]) || isArray(source[key]))) { if (isPlainObject(source[key]) && !isPlainObject(target[key])) target[key] = {} if (isArray(source[key]) && !isArray(target[key])) target[key] = [] extend(target[key], source[key], deep) } else if (source[key] !== undefined) target[key] = source[key] }`","slug":"zepto-e6-ba-90-e7-a0-81-e5-88-86-e6-9e-90-zepto-e6-a0-b8-e5-bf-83","published":1,"updated":"2020-05-19T08:47:15.216Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts80c004pzmz85vpra4at","content":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0046.jpg\" alt=\"\"></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>一直计划想写一写某个框架的源码分析，之前读过jQuery的，但感觉jQuery太大，同时网上研究也已经很多而且很全了，所以选取迷你版jQuery之称的Zepto作为分析对象，边读边写，同时司徒正美大神的《JavaScript框架设计》这本书的对js框架的讲解，来写写自己理解。</p>\n<h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><p>源码下载地址：<a href=\"https://github.com/madrobby/zepto\" target=\"_blank\" rel=\"noopener\">https://github.com/madrobby/zepto</a> ，源码在src目录下，目录结构如下：</p>\n<pre><code>├── src\n   ├── ajax.js\n   ├── amd_layout.js\n   ├── assets.js\n   ├── callbacks.js\n   ├── data.js\n   ├── deferred.js\n   ├── detect.js\n   ├── event.js\n   ├── form.js\n   ├── fx.js\n   ├── fx_methods.js\n   ├── gesture.js\n   ├── ie.js\n   ├── ios3.js\n   ├── selector.js\n   ├── stack.js\n   ├── touch.js\n   └── zepto.js</code></pre><h2 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a>命名空间</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> Zepto = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">return</span> $<br>&#125;)()<br><br><span class=\"hljs-built_in\">window</span>.Zepto = Zepto<br><span class=\"hljs-built_in\">window</span>.$ === <span class=\"hljs-literal\">undefined</span> &amp;&amp; (<span class=\"hljs-built_in\">window</span>.$ = Zepto)<br></code></pre></td></tr></table></figure>\n\n<p>Zepto借鉴了类似jQuery的挂载全局变量的方式实现，核心是返回$传递给Zepto。然后把Zepto和$作为window的属性。这样不会发现变量冲突，即使冲突只需要修改这两个变量名。 此外补充下，因为很多框架都采用了$作为标配，因此经常会出现$这个变量名冲突的问题，不过一般情况下Zepto是不会和jQuery冲突（这两个只选取一个就足够了），jQuery中的解决方案是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//先把可能存在的变量名存放</span><br><span class=\"hljs-keyword\">var</span> _jQuery = <span class=\"hljs-built_in\">window</span>.jQuery,<br>    _$ = <span class=\"hljs-built_in\">window</span>.$;<br><br><span class=\"hljs-comment\">//没冲突时候放进去</span><br>jQuery.extend(&#123;<br>  noConflict:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">deep</span>)</span>&#123;<br>    <span class=\"hljs-built_in\">window</span>.$ = _$;<br>    <span class=\"hljs-keyword\">if</span>(deep)&#123;<br>      <span class=\"hljs-built_in\">window</span>.jQuery = _jQuery;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> jQuery;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"类型判定\"><a href=\"#类型判定\" class=\"headerlink\" title=\"类型判定\"></a>类型判定</h2><p>这段代码是相对比较简单的，就不再复习一遍JavaScript的类型了。直接上代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">type</span>(<span class=\"hljs-params\">obj</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">return</span> obj == <span class=\"hljs-literal\">null</span> ? <span class=\"hljs-built_in\">String</span>(obj) :<br>    class2type[toString.call(obj)] || <span class=\"hljs-string\">\"object\"</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isFunction</span>(<span class=\"hljs-params\">value</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">return</span> type(value) == <span class=\"hljs-string\">\"function\"</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isWindow</span>(<span class=\"hljs-params\">obj</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">return</span> obj != <span class=\"hljs-literal\">null</span> &amp;&amp; obj == obj.window<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isDocument</span>(<span class=\"hljs-params\">obj</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">return</span> obj != <span class=\"hljs-literal\">null</span> &amp;&amp; obj.nodeType == obj.DOCUMENT_NODE<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isObject</span>(<span class=\"hljs-params\">obj</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">return</span> type(obj) == <span class=\"hljs-string\">\"object\"</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isPlainObject</span>(<span class=\"hljs-params\">obj</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">return</span> isObject(obj) &amp;&amp; !isWindow(obj) &amp;&amp; <span class=\"hljs-built_in\">Object</span>.getPrototypeOf(obj) == <span class=\"hljs-built_in\">Object</span>.prototype<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">likeArray</span>(<span class=\"hljs-params\">obj</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">var</span> length = !!obj &amp;&amp; <span class=\"hljs-string\">'length'</span> <span class=\"hljs-keyword\">in</span> obj &amp;&amp; obj.length,<br>    type = $.type(obj)<br><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'function'</span> != type &amp;&amp; !isWindow(obj) &amp;&amp; (<br>    <span class=\"hljs-string\">'array'</span> == type || length === <span class=\"hljs-number\">0</span> ||<br>    (<span class=\"hljs-keyword\">typeof</span> length == <span class=\"hljs-string\">'number'</span> &amp;&amp; length &gt; <span class=\"hljs-number\">0</span> &amp;&amp; (length - <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">in</span> obj)<br>  )<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n<p>JavaScript的类型判断有一些坑，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//type的坑</span><br><span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-literal\">null</span> <span class=\"hljs-comment\">// 'object'</span><br><span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">document</span>.childNodes  <span class=\"hljs-comment\">//safari 'function'</span><br><span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'embed'</span>)  <span class=\"hljs-comment\">//firefox3-10  'function'</span><br><span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'object'</span>)  <span class=\"hljs-comment\">//firefox3-10  'function'</span><br><span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'applet'</span>)  <span class=\"hljs-comment\">//firefox3-10  'function'</span><br><span class=\"hljs-keyword\">typeof</span> /\\d/i  <span class=\"hljs-comment\">//  'function'</span><br><span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">window</span>.alert  <span class=\"hljs-comment\">//ie6-8  'object'</span><br><span class=\"hljs-comment\">//跨文档比较原型，会不一致</span><br><span class=\"hljs-keyword\">var</span> iframe = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'iframe'</span>);<br><span class=\"hljs-built_in\">document</span>.body.appendChild(iframe);<br>xArray = <span class=\"hljs-built_in\">window</span>.frames[<span class=\"hljs-built_in\">window</span>.frames.length - <span class=\"hljs-number\">1</span>].Array;<br><span class=\"hljs-keyword\">var</span> arr = <span class=\"hljs-keyword\">new</span> xArray[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>];<br>arr <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Array</span>;   <span class=\"hljs-comment\">//false</span><br>arr.constructor === <span class=\"hljs-built_in\">Array</span>;  <span class=\"hljs-comment\">//false</span><br><span class=\"hljs-comment\">//旧版本AE中DOM和BOM对象的constructor不存在</span><br><span class=\"hljs-built_in\">window</span>.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    alert(<span class=\"hljs-built_in\">window</span>.constructor);  <span class=\"hljs-comment\">//ie67 undefined</span><br>    alert(<span class=\"hljs-built_in\">document</span>.constructor);  <span class=\"hljs-comment\">//ie67 undefined</span><br>    alert(<span class=\"hljs-built_in\">document</span>.body.constructor);  <span class=\"hljs-comment\">//ie67 undefined</span><br>    alert((<span class=\"hljs-keyword\">new</span> ActiveXObject(<span class=\"hljs-string\">'Microsoft.XMLHTTP'</span>)).constructor);  <span class=\"hljs-comment\">//ie6-9 undefined</span><br>&#125;<br><span class=\"hljs-comment\">//isNaN会把字符串、数组放回去返回true</span><br><span class=\"hljs-built_in\">isNaN</span>(<span class=\"hljs-string\">'aaa'</span>)  <span class=\"hljs-comment\">//true</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"框架入口\"><a href=\"#框架入口\" class=\"headerlink\" title=\"框架入口\"></a>框架入口</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">zepto.init = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">selector, context</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">var</span> dom<br>  <span class=\"hljs-comment\">// 如果没有选择器，返回一个空Zepto对象</span><br>  <span class=\"hljs-keyword\">if</span> (!selector) <span class=\"hljs-keyword\">return</span> zepto.Z()<br>  <span class=\"hljs-comment\">// 如果是字符串类型的选择器</span><br>  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> selector == <span class=\"hljs-string\">'string'</span>) &#123;<br>    <span class=\"hljs-comment\">// 去除收尾空白符</span><br>    selector = selector.trim()<br>    <span class=\"hljs-comment\">// 如果传入的字符串是以&lt;开头且符合HTML代码规则，创建元素</span><br>    <span class=\"hljs-keyword\">if</span> (selector[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">'&lt;'</span> &amp;&amp; fragmentRE.test(selector))<br>      dom = zepto.fragment(selector, <span class=\"hljs-built_in\">RegExp</span>.$<span class=\"hljs-number\">1</span>, context), selector = <span class=\"hljs-literal\">null</span><br>    <span class=\"hljs-comment\">// 如果不是规范但又有内容，在指定位置查找</span><br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (context !== <span class=\"hljs-literal\">undefined</span>) <span class=\"hljs-keyword\">return</span> $(context).find(selector)<br>    <span class=\"hljs-comment\">// 如果是CSS选择器，调用CSS选择器查找</span><br>    <span class=\"hljs-keyword\">else</span> dom = zepto.qsa(<span class=\"hljs-built_in\">document</span>, selector)<br>  &#125;<br>  <span class=\"hljs-comment\">// 如果是函数，当dom创建时调用</span><br>  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (isFunction(selector)) <span class=\"hljs-keyword\">return</span> $(<span class=\"hljs-built_in\">document</span>).ready(selector)<br>  <span class=\"hljs-comment\">// 如果是一个Zepto对象，直接返回这个对象</span><br>  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (zepto.isZ(selector)) <span class=\"hljs-keyword\">return</span> selector<br>  <span class=\"hljs-keyword\">else</span> &#123;<br>    <span class=\"hljs-comment\">// 如果是数组，转成类数组对象</span><br>    <span class=\"hljs-keyword\">if</span> (isArray(selector)) dom = compact(selector)<br>    <span class=\"hljs-comment\">// 如果是一个对象，将其包括到一个数组中</span><br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (isObject(selector))<br>      dom = [selector], selector = <span class=\"hljs-literal\">null</span><br>    <span class=\"hljs-comment\">// 如果是HTML片段，以此创建节点</span><br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (fragmentRE.test(selector))<br>      dom = zepto.fragment(selector.trim(), <span class=\"hljs-built_in\">RegExp</span>.$<span class=\"hljs-number\">1</span>, context), selector = <span class=\"hljs-literal\">null</span><br>    <span class=\"hljs-comment\">// 如果有context参数，在context上创建</span><br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (context !== <span class=\"hljs-literal\">undefined</span>) <span class=\"hljs-keyword\">return</span> $(context).find(selector)<br>    <span class=\"hljs-comment\">// 如果是CSS选择器，调用CSS选择器查找</span><br>    <span class=\"hljs-keyword\">else</span> dom = zepto.qsa(<span class=\"hljs-built_in\">document</span>, selector)<br>  &#125;<br>  <span class=\"hljs-comment\">// 从查找到的节点创建一个Zepto对象</span><br>  <span class=\"hljs-keyword\">return</span> zepto.Z(dom, selector)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>一个基本概念就是Zepto对象，Zepto是一个类数组对象，它具有链式方法来操作它指向的DOM节点，除了$(Zepto)对象上的直接方法外(如$.extend)，文档对象中的所有方法都是集合方法。 调用Zepto框架的方法，都是作用于Zepto()对象的，init函数所做的工作就是讲正常的DOM对象转换成具有Zepto方法的Zepto对象。</p>\n<h2 id=\"对象拓展\"><a href=\"#对象拓展\" class=\"headerlink\" title=\"对象拓展\"></a>对象拓展</h2><p>对象拓展是一种机制，用来把新功能添加到命名空间上。实质就是深浅拷贝。 <code>javascript function extend(target, source, deep) { for (key in source) if (deep &amp;&amp; (isPlainObject(source[key]) || isArray(source[key]))) { if (isPlainObject(source[key]) &amp;&amp; !isPlainObject(target[key])) target[key] = {} if (isArray(source[key]) &amp;&amp; !isArray(target[key])) target[key] = [] extend(target[key], source[key], deep) } else if (source[key] !== undefined) target[key] = source[key] }</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0046.jpg\" alt=\"\"></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>一直计划想写一写某个框架的源码分析，之前读过jQuery的，但感觉jQuery太大，同时网上研究也已经很多而且很全了，所以选取迷你版jQuery之称的Zepto作为分析对象，边读边写，同时司徒正美大神的《JavaScript框架设计》这本书的对js框架的讲解，来写写自己理解。</p>\n<h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><p>源码下载地址：<a href=\"https://github.com/madrobby/zepto\" target=\"_blank\" rel=\"noopener\">https://github.com/madrobby/zepto</a> ，源码在src目录下，目录结构如下：</p>\n<pre><code>├── src\n   ├── ajax.js\n   ├── amd_layout.js\n   ├── assets.js\n   ├── callbacks.js\n   ├── data.js\n   ├── deferred.js\n   ├── detect.js\n   ├── event.js\n   ├── form.js\n   ├── fx.js\n   ├── fx_methods.js\n   ├── gesture.js\n   ├── ie.js\n   ├── ios3.js\n   ├── selector.js\n   ├── stack.js\n   ├── touch.js\n   └── zepto.js</code></pre><h2 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a>命名空间</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> Zepto = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  <span class=\"hljs-keyword\">return</span> $<br>&#125;)()<br><br><span class=\"hljs-built_in\">window</span>.Zepto = Zepto<br><span class=\"hljs-built_in\">window</span>.$ === <span class=\"hljs-literal\">undefined</span> &amp;&amp; (<span class=\"hljs-built_in\">window</span>.$ = Zepto)<br></code></pre></td></tr></table></figure>\n\n<p>Zepto借鉴了类似jQuery的挂载全局变量的方式实现，核心是返回$传递给Zepto。然后把Zepto和$作为window的属性。这样不会发现变量冲突，即使冲突只需要修改这两个变量名。 此外补充下，因为很多框架都采用了$作为标配，因此经常会出现$这个变量名冲突的问题，不过一般情况下Zepto是不会和jQuery冲突（这两个只选取一个就足够了），jQuery中的解决方案是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//先把可能存在的变量名存放</span><br><span class=\"hljs-keyword\">var</span> _jQuery = <span class=\"hljs-built_in\">window</span>.jQuery,<br>    _$ = <span class=\"hljs-built_in\">window</span>.$;<br><br><span class=\"hljs-comment\">//没冲突时候放进去</span><br>jQuery.extend(&#123;<br>  noConflict:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">deep</span>)</span>&#123;<br>    <span class=\"hljs-built_in\">window</span>.$ = _$;<br>    <span class=\"hljs-keyword\">if</span>(deep)&#123;<br>      <span class=\"hljs-built_in\">window</span>.jQuery = _jQuery;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> jQuery;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"类型判定\"><a href=\"#类型判定\" class=\"headerlink\" title=\"类型判定\"></a>类型判定</h2><p>这段代码是相对比较简单的，就不再复习一遍JavaScript的类型了。直接上代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">type</span>(<span class=\"hljs-params\">obj</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">return</span> obj == <span class=\"hljs-literal\">null</span> ? <span class=\"hljs-built_in\">String</span>(obj) :<br>    class2type[toString.call(obj)] || <span class=\"hljs-string\">\"object\"</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isFunction</span>(<span class=\"hljs-params\">value</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">return</span> type(value) == <span class=\"hljs-string\">\"function\"</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isWindow</span>(<span class=\"hljs-params\">obj</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">return</span> obj != <span class=\"hljs-literal\">null</span> &amp;&amp; obj == obj.window<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isDocument</span>(<span class=\"hljs-params\">obj</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">return</span> obj != <span class=\"hljs-literal\">null</span> &amp;&amp; obj.nodeType == obj.DOCUMENT_NODE<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isObject</span>(<span class=\"hljs-params\">obj</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">return</span> type(obj) == <span class=\"hljs-string\">\"object\"</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isPlainObject</span>(<span class=\"hljs-params\">obj</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">return</span> isObject(obj) &amp;&amp; !isWindow(obj) &amp;&amp; <span class=\"hljs-built_in\">Object</span>.getPrototypeOf(obj) == <span class=\"hljs-built_in\">Object</span>.prototype<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">likeArray</span>(<span class=\"hljs-params\">obj</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">var</span> length = !!obj &amp;&amp; <span class=\"hljs-string\">'length'</span> <span class=\"hljs-keyword\">in</span> obj &amp;&amp; obj.length,<br>    type = $.type(obj)<br><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'function'</span> != type &amp;&amp; !isWindow(obj) &amp;&amp; (<br>    <span class=\"hljs-string\">'array'</span> == type || length === <span class=\"hljs-number\">0</span> ||<br>    (<span class=\"hljs-keyword\">typeof</span> length == <span class=\"hljs-string\">'number'</span> &amp;&amp; length &gt; <span class=\"hljs-number\">0</span> &amp;&amp; (length - <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">in</span> obj)<br>  )<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n<p>JavaScript的类型判断有一些坑，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//type的坑</span><br><span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-literal\">null</span> <span class=\"hljs-comment\">// 'object'</span><br><span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">document</span>.childNodes  <span class=\"hljs-comment\">//safari 'function'</span><br><span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'embed'</span>)  <span class=\"hljs-comment\">//firefox3-10  'function'</span><br><span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'object'</span>)  <span class=\"hljs-comment\">//firefox3-10  'function'</span><br><span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'applet'</span>)  <span class=\"hljs-comment\">//firefox3-10  'function'</span><br><span class=\"hljs-keyword\">typeof</span> /\\d/i  <span class=\"hljs-comment\">//  'function'</span><br><span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">window</span>.alert  <span class=\"hljs-comment\">//ie6-8  'object'</span><br><span class=\"hljs-comment\">//跨文档比较原型，会不一致</span><br><span class=\"hljs-keyword\">var</span> iframe = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'iframe'</span>);<br><span class=\"hljs-built_in\">document</span>.body.appendChild(iframe);<br>xArray = <span class=\"hljs-built_in\">window</span>.frames[<span class=\"hljs-built_in\">window</span>.frames.length - <span class=\"hljs-number\">1</span>].Array;<br><span class=\"hljs-keyword\">var</span> arr = <span class=\"hljs-keyword\">new</span> xArray[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>];<br>arr <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Array</span>;   <span class=\"hljs-comment\">//false</span><br>arr.constructor === <span class=\"hljs-built_in\">Array</span>;  <span class=\"hljs-comment\">//false</span><br><span class=\"hljs-comment\">//旧版本AE中DOM和BOM对象的constructor不存在</span><br><span class=\"hljs-built_in\">window</span>.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    alert(<span class=\"hljs-built_in\">window</span>.constructor);  <span class=\"hljs-comment\">//ie67 undefined</span><br>    alert(<span class=\"hljs-built_in\">document</span>.constructor);  <span class=\"hljs-comment\">//ie67 undefined</span><br>    alert(<span class=\"hljs-built_in\">document</span>.body.constructor);  <span class=\"hljs-comment\">//ie67 undefined</span><br>    alert((<span class=\"hljs-keyword\">new</span> ActiveXObject(<span class=\"hljs-string\">'Microsoft.XMLHTTP'</span>)).constructor);  <span class=\"hljs-comment\">//ie6-9 undefined</span><br>&#125;<br><span class=\"hljs-comment\">//isNaN会把字符串、数组放回去返回true</span><br><span class=\"hljs-built_in\">isNaN</span>(<span class=\"hljs-string\">'aaa'</span>)  <span class=\"hljs-comment\">//true</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"框架入口\"><a href=\"#框架入口\" class=\"headerlink\" title=\"框架入口\"></a>框架入口</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">zepto.init = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">selector, context</span>) </span>&#123;<br>  <span class=\"hljs-keyword\">var</span> dom<br>  <span class=\"hljs-comment\">// 如果没有选择器，返回一个空Zepto对象</span><br>  <span class=\"hljs-keyword\">if</span> (!selector) <span class=\"hljs-keyword\">return</span> zepto.Z()<br>  <span class=\"hljs-comment\">// 如果是字符串类型的选择器</span><br>  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> selector == <span class=\"hljs-string\">'string'</span>) &#123;<br>    <span class=\"hljs-comment\">// 去除收尾空白符</span><br>    selector = selector.trim()<br>    <span class=\"hljs-comment\">// 如果传入的字符串是以&lt;开头且符合HTML代码规则，创建元素</span><br>    <span class=\"hljs-keyword\">if</span> (selector[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">'&lt;'</span> &amp;&amp; fragmentRE.test(selector))<br>      dom = zepto.fragment(selector, <span class=\"hljs-built_in\">RegExp</span>.$<span class=\"hljs-number\">1</span>, context), selector = <span class=\"hljs-literal\">null</span><br>    <span class=\"hljs-comment\">// 如果不是规范但又有内容，在指定位置查找</span><br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (context !== <span class=\"hljs-literal\">undefined</span>) <span class=\"hljs-keyword\">return</span> $(context).find(selector)<br>    <span class=\"hljs-comment\">// 如果是CSS选择器，调用CSS选择器查找</span><br>    <span class=\"hljs-keyword\">else</span> dom = zepto.qsa(<span class=\"hljs-built_in\">document</span>, selector)<br>  &#125;<br>  <span class=\"hljs-comment\">// 如果是函数，当dom创建时调用</span><br>  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (isFunction(selector)) <span class=\"hljs-keyword\">return</span> $(<span class=\"hljs-built_in\">document</span>).ready(selector)<br>  <span class=\"hljs-comment\">// 如果是一个Zepto对象，直接返回这个对象</span><br>  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (zepto.isZ(selector)) <span class=\"hljs-keyword\">return</span> selector<br>  <span class=\"hljs-keyword\">else</span> &#123;<br>    <span class=\"hljs-comment\">// 如果是数组，转成类数组对象</span><br>    <span class=\"hljs-keyword\">if</span> (isArray(selector)) dom = compact(selector)<br>    <span class=\"hljs-comment\">// 如果是一个对象，将其包括到一个数组中</span><br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (isObject(selector))<br>      dom = [selector], selector = <span class=\"hljs-literal\">null</span><br>    <span class=\"hljs-comment\">// 如果是HTML片段，以此创建节点</span><br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (fragmentRE.test(selector))<br>      dom = zepto.fragment(selector.trim(), <span class=\"hljs-built_in\">RegExp</span>.$<span class=\"hljs-number\">1</span>, context), selector = <span class=\"hljs-literal\">null</span><br>    <span class=\"hljs-comment\">// 如果有context参数，在context上创建</span><br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (context !== <span class=\"hljs-literal\">undefined</span>) <span class=\"hljs-keyword\">return</span> $(context).find(selector)<br>    <span class=\"hljs-comment\">// 如果是CSS选择器，调用CSS选择器查找</span><br>    <span class=\"hljs-keyword\">else</span> dom = zepto.qsa(<span class=\"hljs-built_in\">document</span>, selector)<br>  &#125;<br>  <span class=\"hljs-comment\">// 从查找到的节点创建一个Zepto对象</span><br>  <span class=\"hljs-keyword\">return</span> zepto.Z(dom, selector)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>一个基本概念就是Zepto对象，Zepto是一个类数组对象，它具有链式方法来操作它指向的DOM节点，除了$(Zepto)对象上的直接方法外(如$.extend)，文档对象中的所有方法都是集合方法。 调用Zepto框架的方法，都是作用于Zepto()对象的，init函数所做的工作就是讲正常的DOM对象转换成具有Zepto方法的Zepto对象。</p>\n<h2 id=\"对象拓展\"><a href=\"#对象拓展\" class=\"headerlink\" title=\"对象拓展\"></a>对象拓展</h2><p>对象拓展是一种机制，用来把新功能添加到命名空间上。实质就是深浅拷贝。 <code>javascript function extend(target, source, deep) { for (key in source) if (deep &amp;&amp; (isPlainObject(source[key]) || isArray(source[key]))) { if (isPlainObject(source[key]) &amp;&amp; !isPlainObject(target[key])) target[key] = {} if (isArray(source[key]) &amp;&amp; !isArray(target[key])) target[key] = [] extend(target[key], source[key], deep) } else if (source[key] !== undefined) target[key] = source[key] }</code></p>\n"},{"title":"将项目从 GitHub 部署到服务器","url":"21.html","id":"21","date":"2016-01-23T15:22:35.000Z","_content":"\n原文转载自[开源中国翻译](http://www.oschina.net/translate/deploying-from-github-to-a-server)，一大半是我翻译的。\n\n* * *\n\nGitHub以及它所依赖的版本控制系统Git，绝对是非常出色的项目管理和协作的工具，不管项目是不是跟代码相关。 本文会讨论有哪些选项可以让Git和Github更好的融入项目的工作流当中，以实现平滑的自动化的过程。 我把这些选项划分到不同的工具集当中，这些集合包括自动运行测试，以及拉取代码部署到服务器上等等。\n\n为何要这样做？\n-------\n\n有了这些自动化过程的运行，你和你的团队就可以只关注单纯的编码以及代码的合并，而不是每次build的时候都要花费几个小时去重复的做部署这样的事情。 自动化部署变化的主要问题是变化会自动地被部署。你必须信任你的团队以及他们写的代码。这就是为什么自动化部署和自动化测试的搭配成为典型，而下面提供的工具也反映了这一点。\n\nGit Hooks（钩子）\n-------------\n\nGit内置了一套拓展框架叫做钩子（http://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks）用来处理自动化部署，并且这些钩子一般在被特定的Git事件 ( certain points)触发后被调用在我们的第一端口用来处理任务。钩子可以被分为服务器端钩子与客户端钩子。 服务器端是用于监听网络操作的事件 ——比如，当存储库接收推送后。而客户端挂钩的触发是因为开发者进行了操作，如提交和合并。 这是在Git文档中hooks的完整列表(http://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks)。 我会注释一对情侣在这里让你开始。希望这能让你在自己当前手动部署的项目工作流程中中变得非常有用。Hooks可以在任何语言的项目部署中运行，强大而灵活。\n\npre-commit\n----------\n\n此这个钩子运行在其他所有钩子之前，并且在更改提交之前。可以用来在提交前检查代码错误。 我们在这里写一个JavaScript的小项目说明（当然，我故意留了你可以找到的bug）。 重命名hooks/pre-commit.sample 为 hooks/pre-commit，并进行如下测试命令，以这样的内容：\n\n    &lt;br&gt;\n    `#!/bin/shjshint index.js`&lt;br&gt;\n    试着提交这个变动：\n    `git commit -m &quot;adding Javascript \n    你可以看到报错信息：&lt;br&gt;\n    `index.js: line 5, col 25, Missing semicolon.1 error`\n    \n\n添加缺少的分号后重新提交，不在报错。\n\npost-receive\n------------\n\n当推送远程Git仓库完成时，服务器端的该钩子触发。在这个例子中，我们推出一个简单的网站的最新版本到你的Web服务器目录，实际上是一个（最基本的）部署。 我有一个现有的网站包含有一个index.html页 - 以及我们在后面的例子将使用的其他网页。你也可以创建自己的，使用在这里设立仓库。 克隆仓库，通过指定--bear标记来创建一个只包含版本控制信息的存储库，而不是我们的代码仓库：  \n\n    git clone --bare https://github.com/sitepoint-editors/GitHub-Auto-Deploy.git GitHu`&lt;br&gt;\n    现在我们添加钩子：\n    `cd GitHub-Auto-Deploy.git/hooksvi post-receive`\n    添加这些到文件中：&lt;\n    `git clone --bare https://github.com/sitepoint-editors/GitHub-Auto-Deploy.git GitHub-Auto-Deploy.git`&lt;\n    现在我们添加钩子：\n    `cd GitHub-Auto-Deploy.git/hooksvi post-receive`&lt;\n    添加这些到文件中：\n    `#!/bin/shgit --work-tree=/var/www/html --git-dir=/var/repo/GitHub-Auto-Deploy.git checkout -f`&lt;\n    \n\n注意：这些路径是基于Ubuntu环境下完成，所以记得要改变路径，以满足你的路径。 该命令将推出当前仓库到定义的工作目录，但没有任何版本控制数据。 更改文件属性使之可执行： `chmod +x post-receive`<br> 小贴士：这些位置与Ubuntu的安装路径相关，所以一定记得要改变路径，以满足您的设置。该命令将检查当前的存储库到定义的工作目录，但没有任何版本控制数据。 将文件添加可执行的权限：<br> `chmod +x post-receive`<br> 在你的本地端，像平时一样克隆这个库，使用你选择的工具，并添加一个新的远程的实时服务器（记得更改服务器的详细信息到你的Web服务器和用户的详细信息）：<br> `git remote add prod ssh://user@domain.com/var/repo/GitHub-Auto-Deploy.git`<br> 要部署到我们生产环境下的服务器来替代仓库，输入以下命令： `git push prod master`<br> 你可以ls一下服务器的 var/www/html 目录，可以看到index.html文件已经被自动拷贝进你的web文件夹内啦。 如果你使用的是自己的Git仓库，你可以把它配置在同一台服务器上的应用，并实现自动化部署。如果你使用的是GitHub上或其他外部Git的服务，那么这个钩子还没有完全自动化，但它已经降到了一步。这可以进一步简化。 GitHub的post-receive 钩子中有一个可以使用reync或scp的选项。这是另外的一种选择——特别是当你的应用需要构建时（GitHub限制了可能的命令）——是使用post-receive 钩子来触发，然后使用-f选项可以检查出从GitHub的代码库的应用程序服务器上的脚本和运行其他一些必要的命令。这个时候，自动化部署开始变得复杂起来，我们不得不使用下一套工具来更好的完成。\n\n从 GitHub 直接自动部署\n---------------\n\nGitHub 有它自己的文档来自动化部署到集成平台，这里包括一些托管提供商。 老实说，大部分文档都有些错误，不准确或者没有起到作用， 在一些主流的主机提供商那儿，我做了一些搜索链接到官方文档，对于其他一些提供商，我建议你使用 post-receiveor 持续集成的方法：<br> Heroku AWS Azure\n\n持续集成(CI)服务\n----------\n\n有许多无数的能够查看 GitHub 项目回购变更协议的应用服务，不仅能够为你部署，而且能够执行其他功能，诸如为你运行测试和构建过程。 一旦你移动到一个新的和更复杂的实例时，我们可以使用 CI 自动化构建项目过程。首先，拉伸一个存储库的 Master 分支，然后触发一个运行构建的 bash 脚本，并且部署流程以及对微博更新。CI 与 web 服务能够在同一台服务器上或者在不同的服务器上运行，这一切都取决于你的偏好。\n\nJenkins\n-------\n\n你需要搭建你自己的 Jenkins 服务器，这意味着你可以完全地控制它，但必须要对它进行维护。幸运的是，它提供了多平台支持，如果你只是想要先简单尝试一下的话，这些支持也包括了 Docker。 Jenkins 使用插件实现了自己的大部分功能，并且由于其年代久远、开源的性质以及普及度很广，它拥有很多的插件。例如，有一些 Git、GitHub 和 Twitter 的相关插件。 Jenkins 需要大量的配置，而且有时，若想要将你需要的指令组合到一起来构造你所需的工作流程，可能需要大量的研究。\n\nTravis\n------\n\n此外，在 GitHub 文档中，使用 GitHub 的 Travis 集成指令已经过时。现在，它更简单：阅读找出更多的 Travis 文档。 Travis 不需要任何主机与服务器设置，因此你无需投入太多的精力，就可以保持和试用CI，这是一个很好的起点。不过，扩展超出（综合）默认的集成将涉及到一些额外的配置工作。比如，微博请求对 webhooks 的访问。 在回购中，你会注意到 Travis-- 特别是在配置自己的文件中，它有一个习惯，就是更新太慢。当你本身没有对 Travis 服务器进行访问时，那么这些问题就难以解决。\n\n其他商业服务\n------\n\n持续集成已经日益流行了，所以已经有了非常多的新的服务和应用程序 – 很多是通过你可能已经在使用的工具的创作者释出的，并且将很和谐的融入到现有的工具链和工作流程当中。这里有些例子： https://buddy.works/ https://www.atlassian.com/software/bamboo/ https://www.jetbrains.com/teamcity/ https://codeship.com/ https://circleci.com/ https://saucelabs.com/ https://about.gitlab.com/gitlab-ci/ http://deploybot.com/\n\n* * *","source":"_posts/e5-b0-86-e9-a1-b9-e7-9b-ae-e4-bb-8e-github-e9-83-a8-e7-bd-b2-e5-88-b0-e6-9c-8d-e5-8a-a1-e5-99-a8.md","raw":"---\ntitle: 将项目从 GitHub 部署到服务器\ntags:\n  - linux\n  - 运维\nurl: 21.html\nid: 21\ncategories:\n  - 扯淡集\ndate: 2016-01-23 23:22:35\n---\n\n原文转载自[开源中国翻译](http://www.oschina.net/translate/deploying-from-github-to-a-server)，一大半是我翻译的。\n\n* * *\n\nGitHub以及它所依赖的版本控制系统Git，绝对是非常出色的项目管理和协作的工具，不管项目是不是跟代码相关。 本文会讨论有哪些选项可以让Git和Github更好的融入项目的工作流当中，以实现平滑的自动化的过程。 我把这些选项划分到不同的工具集当中，这些集合包括自动运行测试，以及拉取代码部署到服务器上等等。\n\n为何要这样做？\n-------\n\n有了这些自动化过程的运行，你和你的团队就可以只关注单纯的编码以及代码的合并，而不是每次build的时候都要花费几个小时去重复的做部署这样的事情。 自动化部署变化的主要问题是变化会自动地被部署。你必须信任你的团队以及他们写的代码。这就是为什么自动化部署和自动化测试的搭配成为典型，而下面提供的工具也反映了这一点。\n\nGit Hooks（钩子）\n-------------\n\nGit内置了一套拓展框架叫做钩子（http://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks）用来处理自动化部署，并且这些钩子一般在被特定的Git事件 ( certain points)触发后被调用在我们的第一端口用来处理任务。钩子可以被分为服务器端钩子与客户端钩子。 服务器端是用于监听网络操作的事件 ——比如，当存储库接收推送后。而客户端挂钩的触发是因为开发者进行了操作，如提交和合并。 这是在Git文档中hooks的完整列表(http://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks)。 我会注释一对情侣在这里让你开始。希望这能让你在自己当前手动部署的项目工作流程中中变得非常有用。Hooks可以在任何语言的项目部署中运行，强大而灵活。\n\npre-commit\n----------\n\n此这个钩子运行在其他所有钩子之前，并且在更改提交之前。可以用来在提交前检查代码错误。 我们在这里写一个JavaScript的小项目说明（当然，我故意留了你可以找到的bug）。 重命名hooks/pre-commit.sample 为 hooks/pre-commit，并进行如下测试命令，以这样的内容：\n\n    &lt;br&gt;\n    `#!/bin/shjshint index.js`&lt;br&gt;\n    试着提交这个变动：\n    `git commit -m &quot;adding Javascript \n    你可以看到报错信息：&lt;br&gt;\n    `index.js: line 5, col 25, Missing semicolon.1 error`\n    \n\n添加缺少的分号后重新提交，不在报错。\n\npost-receive\n------------\n\n当推送远程Git仓库完成时，服务器端的该钩子触发。在这个例子中，我们推出一个简单的网站的最新版本到你的Web服务器目录，实际上是一个（最基本的）部署。 我有一个现有的网站包含有一个index.html页 - 以及我们在后面的例子将使用的其他网页。你也可以创建自己的，使用在这里设立仓库。 克隆仓库，通过指定--bear标记来创建一个只包含版本控制信息的存储库，而不是我们的代码仓库：  \n\n    git clone --bare https://github.com/sitepoint-editors/GitHub-Auto-Deploy.git GitHu`&lt;br&gt;\n    现在我们添加钩子：\n    `cd GitHub-Auto-Deploy.git/hooksvi post-receive`\n    添加这些到文件中：&lt;\n    `git clone --bare https://github.com/sitepoint-editors/GitHub-Auto-Deploy.git GitHub-Auto-Deploy.git`&lt;\n    现在我们添加钩子：\n    `cd GitHub-Auto-Deploy.git/hooksvi post-receive`&lt;\n    添加这些到文件中：\n    `#!/bin/shgit --work-tree=/var/www/html --git-dir=/var/repo/GitHub-Auto-Deploy.git checkout -f`&lt;\n    \n\n注意：这些路径是基于Ubuntu环境下完成，所以记得要改变路径，以满足你的路径。 该命令将推出当前仓库到定义的工作目录，但没有任何版本控制数据。 更改文件属性使之可执行： `chmod +x post-receive`<br> 小贴士：这些位置与Ubuntu的安装路径相关，所以一定记得要改变路径，以满足您的设置。该命令将检查当前的存储库到定义的工作目录，但没有任何版本控制数据。 将文件添加可执行的权限：<br> `chmod +x post-receive`<br> 在你的本地端，像平时一样克隆这个库，使用你选择的工具，并添加一个新的远程的实时服务器（记得更改服务器的详细信息到你的Web服务器和用户的详细信息）：<br> `git remote add prod ssh://user@domain.com/var/repo/GitHub-Auto-Deploy.git`<br> 要部署到我们生产环境下的服务器来替代仓库，输入以下命令： `git push prod master`<br> 你可以ls一下服务器的 var/www/html 目录，可以看到index.html文件已经被自动拷贝进你的web文件夹内啦。 如果你使用的是自己的Git仓库，你可以把它配置在同一台服务器上的应用，并实现自动化部署。如果你使用的是GitHub上或其他外部Git的服务，那么这个钩子还没有完全自动化，但它已经降到了一步。这可以进一步简化。 GitHub的post-receive 钩子中有一个可以使用reync或scp的选项。这是另外的一种选择——特别是当你的应用需要构建时（GitHub限制了可能的命令）——是使用post-receive 钩子来触发，然后使用-f选项可以检查出从GitHub的代码库的应用程序服务器上的脚本和运行其他一些必要的命令。这个时候，自动化部署开始变得复杂起来，我们不得不使用下一套工具来更好的完成。\n\n从 GitHub 直接自动部署\n---------------\n\nGitHub 有它自己的文档来自动化部署到集成平台，这里包括一些托管提供商。 老实说，大部分文档都有些错误，不准确或者没有起到作用， 在一些主流的主机提供商那儿，我做了一些搜索链接到官方文档，对于其他一些提供商，我建议你使用 post-receiveor 持续集成的方法：<br> Heroku AWS Azure\n\n持续集成(CI)服务\n----------\n\n有许多无数的能够查看 GitHub 项目回购变更协议的应用服务，不仅能够为你部署，而且能够执行其他功能，诸如为你运行测试和构建过程。 一旦你移动到一个新的和更复杂的实例时，我们可以使用 CI 自动化构建项目过程。首先，拉伸一个存储库的 Master 分支，然后触发一个运行构建的 bash 脚本，并且部署流程以及对微博更新。CI 与 web 服务能够在同一台服务器上或者在不同的服务器上运行，这一切都取决于你的偏好。\n\nJenkins\n-------\n\n你需要搭建你自己的 Jenkins 服务器，这意味着你可以完全地控制它，但必须要对它进行维护。幸运的是，它提供了多平台支持，如果你只是想要先简单尝试一下的话，这些支持也包括了 Docker。 Jenkins 使用插件实现了自己的大部分功能，并且由于其年代久远、开源的性质以及普及度很广，它拥有很多的插件。例如，有一些 Git、GitHub 和 Twitter 的相关插件。 Jenkins 需要大量的配置，而且有时，若想要将你需要的指令组合到一起来构造你所需的工作流程，可能需要大量的研究。\n\nTravis\n------\n\n此外，在 GitHub 文档中，使用 GitHub 的 Travis 集成指令已经过时。现在，它更简单：阅读找出更多的 Travis 文档。 Travis 不需要任何主机与服务器设置，因此你无需投入太多的精力，就可以保持和试用CI，这是一个很好的起点。不过，扩展超出（综合）默认的集成将涉及到一些额外的配置工作。比如，微博请求对 webhooks 的访问。 在回购中，你会注意到 Travis-- 特别是在配置自己的文件中，它有一个习惯，就是更新太慢。当你本身没有对 Travis 服务器进行访问时，那么这些问题就难以解决。\n\n其他商业服务\n------\n\n持续集成已经日益流行了，所以已经有了非常多的新的服务和应用程序 – 很多是通过你可能已经在使用的工具的创作者释出的，并且将很和谐的融入到现有的工具链和工作流程当中。这里有些例子： https://buddy.works/ https://www.atlassian.com/software/bamboo/ https://www.jetbrains.com/teamcity/ https://codeship.com/ https://circleci.com/ https://saucelabs.com/ https://about.gitlab.com/gitlab-ci/ http://deploybot.com/\n\n* * *","slug":"e5-b0-86-e9-a1-b9-e7-9b-ae-e4-bb-8e-github-e9-83-a8-e7-bd-b2-e5-88-b0-e6-9c-8d-e5-8a-a1-e5-99-a8","published":1,"updated":"2020-05-19T08:33:55.922Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts81q006wzmz8e2d60q7n","content":"<p>原文转载自<a href=\"http://www.oschina.net/translate/deploying-from-github-to-a-server\" target=\"_blank\" rel=\"noopener\">开源中国翻译</a>，一大半是我翻译的。</p>\n<hr>\n<p>GitHub以及它所依赖的版本控制系统Git，绝对是非常出色的项目管理和协作的工具，不管项目是不是跟代码相关。 本文会讨论有哪些选项可以让Git和Github更好的融入项目的工作流当中，以实现平滑的自动化的过程。 我把这些选项划分到不同的工具集当中，这些集合包括自动运行测试，以及拉取代码部署到服务器上等等。</p>\n<h2 id=\"为何要这样做？\"><a href=\"#为何要这样做？\" class=\"headerlink\" title=\"为何要这样做？\"></a>为何要这样做？</h2><p>有了这些自动化过程的运行，你和你的团队就可以只关注单纯的编码以及代码的合并，而不是每次build的时候都要花费几个小时去重复的做部署这样的事情。 自动化部署变化的主要问题是变化会自动地被部署。你必须信任你的团队以及他们写的代码。这就是为什么自动化部署和自动化测试的搭配成为典型，而下面提供的工具也反映了这一点。</p>\n<h2 id=\"Git-Hooks（钩子）\"><a href=\"#Git-Hooks（钩子）\" class=\"headerlink\" title=\"Git Hooks（钩子）\"></a>Git Hooks（钩子）</h2><p>Git内置了一套拓展框架叫做钩子（<a href=\"http://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks）用来处理自动化部署，并且这些钩子一般在被特定的Git事件\" target=\"_blank\" rel=\"noopener\">http://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks）用来处理自动化部署，并且这些钩子一般在被特定的Git事件</a> ( certain points)触发后被调用在我们的第一端口用来处理任务。钩子可以被分为服务器端钩子与客户端钩子。 服务器端是用于监听网络操作的事件 ——比如，当存储库接收推送后。而客户端挂钩的触发是因为开发者进行了操作，如提交和合并。 这是在Git文档中hooks的完整列表(<a href=\"http://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks)。\" target=\"_blank\" rel=\"noopener\">http://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks)。</a> 我会注释一对情侣在这里让你开始。希望这能让你在自己当前手动部署的项目工作流程中中变得非常有用。Hooks可以在任何语言的项目部署中运行，强大而灵活。</p>\n<h2 id=\"pre-commit\"><a href=\"#pre-commit\" class=\"headerlink\" title=\"pre-commit\"></a>pre-commit</h2><p>此这个钩子运行在其他所有钩子之前，并且在更改提交之前。可以用来在提交前检查代码错误。 我们在这里写一个JavaScript的小项目说明（当然，我故意留了你可以找到的bug）。 重命名hooks/pre-commit.sample 为 hooks/pre-commit，并进行如下测试命令，以这样的内容：</p>\n<pre><code>&amp;lt;br&amp;gt;\n`#!/bin/shjshint index.js`&amp;lt;br&amp;gt;\n试着提交这个变动：\n`git commit -m &amp;quot;adding Javascript \n你可以看到报错信息：&amp;lt;br&amp;gt;\n`index.js: line 5, col 25, Missing semicolon.1 error`</code></pre><p>添加缺少的分号后重新提交，不在报错。</p>\n<h2 id=\"post-receive\"><a href=\"#post-receive\" class=\"headerlink\" title=\"post-receive\"></a>post-receive</h2><p>当推送远程Git仓库完成时，服务器端的该钩子触发。在这个例子中，我们推出一个简单的网站的最新版本到你的Web服务器目录，实际上是一个（最基本的）部署。 我有一个现有的网站包含有一个index.html页 - 以及我们在后面的例子将使用的其他网页。你也可以创建自己的，使用在这里设立仓库。 克隆仓库，通过指定–bear标记来创建一个只包含版本控制信息的存储库，而不是我们的代码仓库：  </p>\n<pre><code>git clone --bare https://github.com/sitepoint-editors/GitHub-Auto-Deploy.git GitHu`&amp;lt;br&amp;gt;\n现在我们添加钩子：\n`cd GitHub-Auto-Deploy.git/hooksvi post-receive`\n添加这些到文件中：&amp;lt;\n`git clone --bare https://github.com/sitepoint-editors/GitHub-Auto-Deploy.git GitHub-Auto-Deploy.git`&amp;lt;\n现在我们添加钩子：\n`cd GitHub-Auto-Deploy.git/hooksvi post-receive`&amp;lt;\n添加这些到文件中：\n`#!/bin/shgit --work-tree=/var/www/html --git-dir=/var/repo/GitHub-Auto-Deploy.git checkout -f`&amp;lt;</code></pre><p>注意：这些路径是基于Ubuntu环境下完成，所以记得要改变路径，以满足你的路径。 该命令将推出当前仓库到定义的工作目录，但没有任何版本控制数据。 更改文件属性使之可执行： <code>chmod +x post-receive</code><br> 小贴士：这些位置与Ubuntu的安装路径相关，所以一定记得要改变路径，以满足您的设置。该命令将检查当前的存储库到定义的工作目录，但没有任何版本控制数据。 将文件添加可执行的权限：<br> <code>chmod +x post-receive</code><br> 在你的本地端，像平时一样克隆这个库，使用你选择的工具，并添加一个新的远程的实时服务器（记得更改服务器的详细信息到你的Web服务器和用户的详细信息）：<br> <code>git remote add prod ssh://user@domain.com/var/repo/GitHub-Auto-Deploy.git</code><br> 要部署到我们生产环境下的服务器来替代仓库，输入以下命令： <code>git push prod master</code><br> 你可以ls一下服务器的 var/www/html 目录，可以看到index.html文件已经被自动拷贝进你的web文件夹内啦。 如果你使用的是自己的Git仓库，你可以把它配置在同一台服务器上的应用，并实现自动化部署。如果你使用的是GitHub上或其他外部Git的服务，那么这个钩子还没有完全自动化，但它已经降到了一步。这可以进一步简化。 GitHub的post-receive 钩子中有一个可以使用reync或scp的选项。这是另外的一种选择——特别是当你的应用需要构建时（GitHub限制了可能的命令）——是使用post-receive 钩子来触发，然后使用-f选项可以检查出从GitHub的代码库的应用程序服务器上的脚本和运行其他一些必要的命令。这个时候，自动化部署开始变得复杂起来，我们不得不使用下一套工具来更好的完成。</p>\n<h2 id=\"从-GitHub-直接自动部署\"><a href=\"#从-GitHub-直接自动部署\" class=\"headerlink\" title=\"从 GitHub 直接自动部署\"></a>从 GitHub 直接自动部署</h2><p>GitHub 有它自己的文档来自动化部署到集成平台，这里包括一些托管提供商。 老实说，大部分文档都有些错误，不准确或者没有起到作用， 在一些主流的主机提供商那儿，我做了一些搜索链接到官方文档，对于其他一些提供商，我建议你使用 post-receiveor 持续集成的方法：<br> Heroku AWS Azure</p>\n<h2 id=\"持续集成-CI-服务\"><a href=\"#持续集成-CI-服务\" class=\"headerlink\" title=\"持续集成(CI)服务\"></a>持续集成(CI)服务</h2><p>有许多无数的能够查看 GitHub 项目回购变更协议的应用服务，不仅能够为你部署，而且能够执行其他功能，诸如为你运行测试和构建过程。 一旦你移动到一个新的和更复杂的实例时，我们可以使用 CI 自动化构建项目过程。首先，拉伸一个存储库的 Master 分支，然后触发一个运行构建的 bash 脚本，并且部署流程以及对微博更新。CI 与 web 服务能够在同一台服务器上或者在不同的服务器上运行，这一切都取决于你的偏好。</p>\n<h2 id=\"Jenkins\"><a href=\"#Jenkins\" class=\"headerlink\" title=\"Jenkins\"></a>Jenkins</h2><p>你需要搭建你自己的 Jenkins 服务器，这意味着你可以完全地控制它，但必须要对它进行维护。幸运的是，它提供了多平台支持，如果你只是想要先简单尝试一下的话，这些支持也包括了 Docker。 Jenkins 使用插件实现了自己的大部分功能，并且由于其年代久远、开源的性质以及普及度很广，它拥有很多的插件。例如，有一些 Git、GitHub 和 Twitter 的相关插件。 Jenkins 需要大量的配置，而且有时，若想要将你需要的指令组合到一起来构造你所需的工作流程，可能需要大量的研究。</p>\n<h2 id=\"Travis\"><a href=\"#Travis\" class=\"headerlink\" title=\"Travis\"></a>Travis</h2><p>此外，在 GitHub 文档中，使用 GitHub 的 Travis 集成指令已经过时。现在，它更简单：阅读找出更多的 Travis 文档。 Travis 不需要任何主机与服务器设置，因此你无需投入太多的精力，就可以保持和试用CI，这是一个很好的起点。不过，扩展超出（综合）默认的集成将涉及到一些额外的配置工作。比如，微博请求对 webhooks 的访问。 在回购中，你会注意到 Travis– 特别是在配置自己的文件中，它有一个习惯，就是更新太慢。当你本身没有对 Travis 服务器进行访问时，那么这些问题就难以解决。</p>\n<h2 id=\"其他商业服务\"><a href=\"#其他商业服务\" class=\"headerlink\" title=\"其他商业服务\"></a>其他商业服务</h2><p>持续集成已经日益流行了，所以已经有了非常多的新的服务和应用程序 – 很多是通过你可能已经在使用的工具的创作者释出的，并且将很和谐的融入到现有的工具链和工作流程当中。这里有些例子： <a href=\"https://buddy.works/\" target=\"_blank\" rel=\"noopener\">https://buddy.works/</a> <a href=\"https://www.atlassian.com/software/bamboo/\" target=\"_blank\" rel=\"noopener\">https://www.atlassian.com/software/bamboo/</a> <a href=\"https://www.jetbrains.com/teamcity/\" target=\"_blank\" rel=\"noopener\">https://www.jetbrains.com/teamcity/</a> <a href=\"https://codeship.com/\" target=\"_blank\" rel=\"noopener\">https://codeship.com/</a> <a href=\"https://circleci.com/\" target=\"_blank\" rel=\"noopener\">https://circleci.com/</a> <a href=\"https://saucelabs.com/\" target=\"_blank\" rel=\"noopener\">https://saucelabs.com/</a> <a href=\"https://about.gitlab.com/gitlab-ci/\" target=\"_blank\" rel=\"noopener\">https://about.gitlab.com/gitlab-ci/</a> <a href=\"http://deploybot.com/\" target=\"_blank\" rel=\"noopener\">http://deploybot.com/</a></p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<p>原文转载自<a href=\"http://www.oschina.net/translate/deploying-from-github-to-a-server\" target=\"_blank\" rel=\"noopener\">开源中国翻译</a>，一大半是我翻译的。</p>\n<hr>\n<p>GitHub以及它所依赖的版本控制系统Git，绝对是非常出色的项目管理和协作的工具，不管项目是不是跟代码相关。 本文会讨论有哪些选项可以让Git和Github更好的融入项目的工作流当中，以实现平滑的自动化的过程。 我把这些选项划分到不同的工具集当中，这些集合包括自动运行测试，以及拉取代码部署到服务器上等等。</p>\n<h2 id=\"为何要这样做？\"><a href=\"#为何要这样做？\" class=\"headerlink\" title=\"为何要这样做？\"></a>为何要这样做？</h2><p>有了这些自动化过程的运行，你和你的团队就可以只关注单纯的编码以及代码的合并，而不是每次build的时候都要花费几个小时去重复的做部署这样的事情。 自动化部署变化的主要问题是变化会自动地被部署。你必须信任你的团队以及他们写的代码。这就是为什么自动化部署和自动化测试的搭配成为典型，而下面提供的工具也反映了这一点。</p>\n<h2 id=\"Git-Hooks（钩子）\"><a href=\"#Git-Hooks（钩子）\" class=\"headerlink\" title=\"Git Hooks（钩子）\"></a>Git Hooks（钩子）</h2><p>Git内置了一套拓展框架叫做钩子（<a href=\"http://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks）用来处理自动化部署，并且这些钩子一般在被特定的Git事件\" target=\"_blank\" rel=\"noopener\">http://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks）用来处理自动化部署，并且这些钩子一般在被特定的Git事件</a> ( certain points)触发后被调用在我们的第一端口用来处理任务。钩子可以被分为服务器端钩子与客户端钩子。 服务器端是用于监听网络操作的事件 ——比如，当存储库接收推送后。而客户端挂钩的触发是因为开发者进行了操作，如提交和合并。 这是在Git文档中hooks的完整列表(<a href=\"http://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks)。\" target=\"_blank\" rel=\"noopener\">http://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks)。</a> 我会注释一对情侣在这里让你开始。希望这能让你在自己当前手动部署的项目工作流程中中变得非常有用。Hooks可以在任何语言的项目部署中运行，强大而灵活。</p>\n<h2 id=\"pre-commit\"><a href=\"#pre-commit\" class=\"headerlink\" title=\"pre-commit\"></a>pre-commit</h2><p>此这个钩子运行在其他所有钩子之前，并且在更改提交之前。可以用来在提交前检查代码错误。 我们在这里写一个JavaScript的小项目说明（当然，我故意留了你可以找到的bug）。 重命名hooks/pre-commit.sample 为 hooks/pre-commit，并进行如下测试命令，以这样的内容：</p>\n<pre><code>&amp;lt;br&amp;gt;\n`#!/bin/shjshint index.js`&amp;lt;br&amp;gt;\n试着提交这个变动：\n`git commit -m &amp;quot;adding Javascript \n你可以看到报错信息：&amp;lt;br&amp;gt;\n`index.js: line 5, col 25, Missing semicolon.1 error`</code></pre><p>添加缺少的分号后重新提交，不在报错。</p>\n<h2 id=\"post-receive\"><a href=\"#post-receive\" class=\"headerlink\" title=\"post-receive\"></a>post-receive</h2><p>当推送远程Git仓库完成时，服务器端的该钩子触发。在这个例子中，我们推出一个简单的网站的最新版本到你的Web服务器目录，实际上是一个（最基本的）部署。 我有一个现有的网站包含有一个index.html页 - 以及我们在后面的例子将使用的其他网页。你也可以创建自己的，使用在这里设立仓库。 克隆仓库，通过指定–bear标记来创建一个只包含版本控制信息的存储库，而不是我们的代码仓库：  </p>\n<pre><code>git clone --bare https://github.com/sitepoint-editors/GitHub-Auto-Deploy.git GitHu`&amp;lt;br&amp;gt;\n现在我们添加钩子：\n`cd GitHub-Auto-Deploy.git/hooksvi post-receive`\n添加这些到文件中：&amp;lt;\n`git clone --bare https://github.com/sitepoint-editors/GitHub-Auto-Deploy.git GitHub-Auto-Deploy.git`&amp;lt;\n现在我们添加钩子：\n`cd GitHub-Auto-Deploy.git/hooksvi post-receive`&amp;lt;\n添加这些到文件中：\n`#!/bin/shgit --work-tree=/var/www/html --git-dir=/var/repo/GitHub-Auto-Deploy.git checkout -f`&amp;lt;</code></pre><p>注意：这些路径是基于Ubuntu环境下完成，所以记得要改变路径，以满足你的路径。 该命令将推出当前仓库到定义的工作目录，但没有任何版本控制数据。 更改文件属性使之可执行： <code>chmod +x post-receive</code><br> 小贴士：这些位置与Ubuntu的安装路径相关，所以一定记得要改变路径，以满足您的设置。该命令将检查当前的存储库到定义的工作目录，但没有任何版本控制数据。 将文件添加可执行的权限：<br> <code>chmod +x post-receive</code><br> 在你的本地端，像平时一样克隆这个库，使用你选择的工具，并添加一个新的远程的实时服务器（记得更改服务器的详细信息到你的Web服务器和用户的详细信息）：<br> <code>git remote add prod ssh://user@domain.com/var/repo/GitHub-Auto-Deploy.git</code><br> 要部署到我们生产环境下的服务器来替代仓库，输入以下命令： <code>git push prod master</code><br> 你可以ls一下服务器的 var/www/html 目录，可以看到index.html文件已经被自动拷贝进你的web文件夹内啦。 如果你使用的是自己的Git仓库，你可以把它配置在同一台服务器上的应用，并实现自动化部署。如果你使用的是GitHub上或其他外部Git的服务，那么这个钩子还没有完全自动化，但它已经降到了一步。这可以进一步简化。 GitHub的post-receive 钩子中有一个可以使用reync或scp的选项。这是另外的一种选择——特别是当你的应用需要构建时（GitHub限制了可能的命令）——是使用post-receive 钩子来触发，然后使用-f选项可以检查出从GitHub的代码库的应用程序服务器上的脚本和运行其他一些必要的命令。这个时候，自动化部署开始变得复杂起来，我们不得不使用下一套工具来更好的完成。</p>\n<h2 id=\"从-GitHub-直接自动部署\"><a href=\"#从-GitHub-直接自动部署\" class=\"headerlink\" title=\"从 GitHub 直接自动部署\"></a>从 GitHub 直接自动部署</h2><p>GitHub 有它自己的文档来自动化部署到集成平台，这里包括一些托管提供商。 老实说，大部分文档都有些错误，不准确或者没有起到作用， 在一些主流的主机提供商那儿，我做了一些搜索链接到官方文档，对于其他一些提供商，我建议你使用 post-receiveor 持续集成的方法：<br> Heroku AWS Azure</p>\n<h2 id=\"持续集成-CI-服务\"><a href=\"#持续集成-CI-服务\" class=\"headerlink\" title=\"持续集成(CI)服务\"></a>持续集成(CI)服务</h2><p>有许多无数的能够查看 GitHub 项目回购变更协议的应用服务，不仅能够为你部署，而且能够执行其他功能，诸如为你运行测试和构建过程。 一旦你移动到一个新的和更复杂的实例时，我们可以使用 CI 自动化构建项目过程。首先，拉伸一个存储库的 Master 分支，然后触发一个运行构建的 bash 脚本，并且部署流程以及对微博更新。CI 与 web 服务能够在同一台服务器上或者在不同的服务器上运行，这一切都取决于你的偏好。</p>\n<h2 id=\"Jenkins\"><a href=\"#Jenkins\" class=\"headerlink\" title=\"Jenkins\"></a>Jenkins</h2><p>你需要搭建你自己的 Jenkins 服务器，这意味着你可以完全地控制它，但必须要对它进行维护。幸运的是，它提供了多平台支持，如果你只是想要先简单尝试一下的话，这些支持也包括了 Docker。 Jenkins 使用插件实现了自己的大部分功能，并且由于其年代久远、开源的性质以及普及度很广，它拥有很多的插件。例如，有一些 Git、GitHub 和 Twitter 的相关插件。 Jenkins 需要大量的配置，而且有时，若想要将你需要的指令组合到一起来构造你所需的工作流程，可能需要大量的研究。</p>\n<h2 id=\"Travis\"><a href=\"#Travis\" class=\"headerlink\" title=\"Travis\"></a>Travis</h2><p>此外，在 GitHub 文档中，使用 GitHub 的 Travis 集成指令已经过时。现在，它更简单：阅读找出更多的 Travis 文档。 Travis 不需要任何主机与服务器设置，因此你无需投入太多的精力，就可以保持和试用CI，这是一个很好的起点。不过，扩展超出（综合）默认的集成将涉及到一些额外的配置工作。比如，微博请求对 webhooks 的访问。 在回购中，你会注意到 Travis– 特别是在配置自己的文件中，它有一个习惯，就是更新太慢。当你本身没有对 Travis 服务器进行访问时，那么这些问题就难以解决。</p>\n<h2 id=\"其他商业服务\"><a href=\"#其他商业服务\" class=\"headerlink\" title=\"其他商业服务\"></a>其他商业服务</h2><p>持续集成已经日益流行了，所以已经有了非常多的新的服务和应用程序 – 很多是通过你可能已经在使用的工具的创作者释出的，并且将很和谐的融入到现有的工具链和工作流程当中。这里有些例子： <a href=\"https://buddy.works/\" target=\"_blank\" rel=\"noopener\">https://buddy.works/</a> <a href=\"https://www.atlassian.com/software/bamboo/\" target=\"_blank\" rel=\"noopener\">https://www.atlassian.com/software/bamboo/</a> <a href=\"https://www.jetbrains.com/teamcity/\" target=\"_blank\" rel=\"noopener\">https://www.jetbrains.com/teamcity/</a> <a href=\"https://codeship.com/\" target=\"_blank\" rel=\"noopener\">https://codeship.com/</a> <a href=\"https://circleci.com/\" target=\"_blank\" rel=\"noopener\">https://circleci.com/</a> <a href=\"https://saucelabs.com/\" target=\"_blank\" rel=\"noopener\">https://saucelabs.com/</a> <a href=\"https://about.gitlab.com/gitlab-ci/\" target=\"_blank\" rel=\"noopener\">https://about.gitlab.com/gitlab-ci/</a> <a href=\"http://deploybot.com/\" target=\"_blank\" rel=\"noopener\">http://deploybot.com/</a></p>\n<hr>\n"},{"title":"深入理解Vitual DOM","url":"58.html","id":"58","date":"2017-08-29T15:12:57.000Z","_content":"\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0049.jpg)\n\n> Vitual DOM是被诸如React,Vue,Preact等框架采用的一种内部黑盒技术，用来作为到最终dom操作的一个中介。 ![](http://7xqgks.com1.z0.glb.clouddn.com/v-dom1.png) v-dom在前端的工作图\n\n# v-dom是什么\n\nv-dom是一个真实dom的模拟表示，它像是原始dom的一个轻量级的副本，不同的是v-dom减少了冗余，采用了高性能的diff算法比较更新dom，同时只通过最终的正式dom操作来渲染入游览器，这最终特性保证了v-dom的高效。\n\n# 为什么要用v-dom\n\nDOM操作是把js实现到游览器的核心，一切的交互都需要用过dom。不幸的是，don操作是一件性能非常底下的工作：因为dom对象中有很多和操作无关的冗余字段，而任何dom操作不得不遍历整颗冗余度非常高的dom树。 比如，目前有一个列表，包含多个项目，当检查第一项，dom将重建整个列表，这是十倍以上的非必须工作，在早起前端，因为业务的不复杂性，dom操作尚能工作顺利，但目前越来越复杂的前端场景，现代网站可以使用大量dom操作，低效更新已经是一个严重的问题。 ![](http://7xqgks.com1.z0.glb.clouddn.com/v-dom2.png)真实的游览器渲染过程，元素的更新会涉及到重绘和回流，进一步降低性能。 这种缓慢的现实，使得很多js框架采用自己的方式去更新dom，v-dom就是其中一个被推广的佼佼者。\n\n# v-dom如何被建立\n\n![](http://efe.baidu.com/blog/the-inner-workings-of-virtual-dom/1.png)Preact的dom工作流程。\n\n## 虚拟元素\n\n我们可以用如下的虚拟元素替代真实dom：\n\n    /**\n     * 一个类似的dom结构元素的v-dom设计\n     * <div id=\"container\">\n     *  <h1>Hello v-dom</h1>\n     * </div>\n     */\n\n    var element = {\n        tagName: 'div',\n        attr: {\n            props: {\n                id: 'container'\n            },\n            style: {\n                color: 'black'\n            }\n        },\n        children: {\n            tagName: 'h1',\n            value: 'Hello v-dom'\n        }\n    }\n\n    //用构造函数模拟一下\n    function Element(tagName, attr, children, value) {\n        this.tagName = tagName;\n        this.attr = attr;\n        this.children = children;\n        this.value = value;\n    };\n    var headline = new Element('h1', null, null, 'Hello world');\n    var container = new Element('div', {\n        props: {\n            id: 'container'\n        },\n        style: {\n            color: 'black'\n        }\n    }, headline, null);\n\n\n上述代码就是一个对v-dom的描述以及简单实现，实际上React的JSX转换后真正调用的API也是类似的API，这个API是`React.createElement()`。 v-dom有一些通用的特点：轻量级、无状态、不可改变。\n\n## render方法\n\n有了上述的v-dom对象后，再通过类似`render()`的方法，就可以创建真实dom，render函数的简单实现类似这样：\n\n    function render(element, root) {\n        var realDOM = document.createElement(element.tagName);\n        //循环设置属性和样式\n        var props = element.attr.props;\n        var styles = element.attr.style;\n        for (var i in props) {\n            realDOM.setAttrbute(i, props[i]);\n        }\n        for (var j in styles) {\n            realDOM.style[j] = styles[j];\n        }\n        //循环子节点，如果是对象递归该方法，否则创建文本节点\n        element.children.forEach(function (child) {\n            if (child instanceof Element) {\n                render(child, realDOM);\n    } else {\n                raedlDOM.appendChild(document.createTextNode(child));\n            }\n        });\n        //插入真实dom\n        root.appendChild(realDOM);\n        return realDOM;\n    }\n\n\n## diff算法比较差异\n\n当Virtual DOM发生更新时候，会进行变化生成一颗新的dom树，为了比较两棵树的异同，引入了一种Diff算法完成比较，diff算法非常高效，当对v-dom完成差异比较后，这个差异会作用到真实dom，过程如下：\n\n*   1.构建Virtual Dom树\n*   2.将Virtual Dom插入真实dom\n*   3.构建变化后的Virtual Dom树\n*   4.通过diff算法比较差异\n*   5.仅将差异在真实DOM中更新\n\n给定任意两颗树，进行转换的差异算法，一般复杂度是O(n^3)，react的diff算法复杂度是O(n)，它基于v-dom的两个基本事实：\n\n*   两个相同组件产生类似的DOM结构，不同的组件产生不同的DOM结构；\n*   对于同一层次的一组子节点，它们可以通过唯一的id进行区分。\n\n组件的树是自带层级的，diff算法按照层级比较，如图： ![](http://cdn.infoqstatic.com/statics_s2_20170822-0429/resource/articles/react-dom-diff/zh/resources/0909000.png) 如果节点类型不同，直接删除Before中的节点，插入新节点；如果节点类型相同，继续层序遍历属性，属性不同则替换属性；直到遍历到最底层。通过一次遍历，即可比较出不同，更新了整个dom。\n\n    //一个参考算法，链接：https://www.zhihu.com/question/29504639/answer/73607810\n    // diff 函数，对比两棵树\n    function diff (oldTree, newTree) {\n      var index = 0 // 当前节点的标志\n      var patches = {} // 用来记录每个节点差异的对象\n      dfsWalk(oldTree, newTree, index, patches)\n      return patches\n    }\n\n    // 对两棵树进行深度优先遍历\n    function dfsWalk (oldNode, newNode, index, patches) {\n      // 对比oldNode和newNode的不同，记录下来\n      patches[index] = [...]\n\n      diffChildren(oldNode.children, newNode.children, index, patches)\n    }\n\n    // 遍历子节点\n    function diffChildren (oldChildren, newChildren, index, patches) {\n      var leftNode = null\n      var currentNodeIndex = index\n      oldChildren.forEach(function (child, i) {\n        var newChild = newChildren[i]\n        currentNodeIndex = (leftNode && leftNode.count) // 计算节点的标识\n          ? currentNodeIndex + leftNode.count + 1\n          : currentNodeIndex + 1\n        dfsWalk(child, newChild, currentNodeIndex, patches) // 深度遍历子节点\n        leftNode = child\n      })\n    }\n\n\n一篇很好的diff算法原理的解析：http://www.infoq.com/cn/articles/react-dom-diff/\n\n# 生命周期问题\n\nv-dom的整个过程，即产生了生命周期，一切和v-dom相关的组件的生命周期也与之相关。如： ![](https://cn.vuejs.org/images/lifecycle.png)vue组件的生命周期 ![](http://7xqgks.com1.z0.glb.clouddn.com/3-3-component-lifecycle.jpg)react组件的生命周期 一般分为初始化、运行中、销毁三个状态，三个状态有关的生命周期钩子函数有： **初始化阶段**： 　　getDefaultProps:获取实例的默认属性(即使没有生成实例，组件的第一个实例被初始化CreateClass的时候调用，只调用一次,) 　　getInitialState:获取每个实例的初始化状态（每个实例自己维护） 　　componentWillMount：组件即将被装载、渲染到页面上（render之前最好一次修改状态的机会） 　　render:组件在这里生成虚拟的DOM节点（只能访问this.props和this.state；只有一个顶层组件，也就是说render返回值值职能是一个组件；不允许修改状态和DOM输出） 　　componentDidMount:组件真正在被装载之后，可以修改DOM **运行中状态**： 　　componentWillReceiveProps:组件将要接收到属性的时候调用（赶在父组件修改真正发生之前,可以修改属性和状态） 　　shouldComponentUpdate:组件接受到新属性或者新状态的时候（可以返回false，接收数据后不更新，阻止render调用，后面的函数不会被继续执行了） 　　componentWillUpdate:不能修改属性和状态 　　render:只能访问this.props和this.state；只有一个顶层组件，也就是说render返回值只能是一个组件；不允许修改状态和DOM输出 　　componentDidUpdate:可以修改DOM **销毁阶段**： 　　componentWillUnmount:开发者需要来销毁（组件真正删除之前调用，比如计时器和事件监听器）","source":"_posts/e6-b7-b1-e5-85-a5-e7-90-86-e8-a7-a3vitual-dom.md","raw":"---\ntitle: 深入理解Vitual DOM\ntags:\n  - 前端底层\nurl: 58.html\nid: 58\ncategories:\n  - 前端\ndate: 2017-08-29 23:12:57\n---\n\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0049.jpg)\n\n> Vitual DOM是被诸如React,Vue,Preact等框架采用的一种内部黑盒技术，用来作为到最终dom操作的一个中介。 ![](http://7xqgks.com1.z0.glb.clouddn.com/v-dom1.png) v-dom在前端的工作图\n\n# v-dom是什么\n\nv-dom是一个真实dom的模拟表示，它像是原始dom的一个轻量级的副本，不同的是v-dom减少了冗余，采用了高性能的diff算法比较更新dom，同时只通过最终的正式dom操作来渲染入游览器，这最终特性保证了v-dom的高效。\n\n# 为什么要用v-dom\n\nDOM操作是把js实现到游览器的核心，一切的交互都需要用过dom。不幸的是，don操作是一件性能非常底下的工作：因为dom对象中有很多和操作无关的冗余字段，而任何dom操作不得不遍历整颗冗余度非常高的dom树。 比如，目前有一个列表，包含多个项目，当检查第一项，dom将重建整个列表，这是十倍以上的非必须工作，在早起前端，因为业务的不复杂性，dom操作尚能工作顺利，但目前越来越复杂的前端场景，现代网站可以使用大量dom操作，低效更新已经是一个严重的问题。 ![](http://7xqgks.com1.z0.glb.clouddn.com/v-dom2.png)真实的游览器渲染过程，元素的更新会涉及到重绘和回流，进一步降低性能。 这种缓慢的现实，使得很多js框架采用自己的方式去更新dom，v-dom就是其中一个被推广的佼佼者。\n\n# v-dom如何被建立\n\n![](http://efe.baidu.com/blog/the-inner-workings-of-virtual-dom/1.png)Preact的dom工作流程。\n\n## 虚拟元素\n\n我们可以用如下的虚拟元素替代真实dom：\n\n    /**\n     * 一个类似的dom结构元素的v-dom设计\n     * <div id=\"container\">\n     *  <h1>Hello v-dom</h1>\n     * </div>\n     */\n\n    var element = {\n        tagName: 'div',\n        attr: {\n            props: {\n                id: 'container'\n            },\n            style: {\n                color: 'black'\n            }\n        },\n        children: {\n            tagName: 'h1',\n            value: 'Hello v-dom'\n        }\n    }\n\n    //用构造函数模拟一下\n    function Element(tagName, attr, children, value) {\n        this.tagName = tagName;\n        this.attr = attr;\n        this.children = children;\n        this.value = value;\n    };\n    var headline = new Element('h1', null, null, 'Hello world');\n    var container = new Element('div', {\n        props: {\n            id: 'container'\n        },\n        style: {\n            color: 'black'\n        }\n    }, headline, null);\n\n\n上述代码就是一个对v-dom的描述以及简单实现，实际上React的JSX转换后真正调用的API也是类似的API，这个API是`React.createElement()`。 v-dom有一些通用的特点：轻量级、无状态、不可改变。\n\n## render方法\n\n有了上述的v-dom对象后，再通过类似`render()`的方法，就可以创建真实dom，render函数的简单实现类似这样：\n\n    function render(element, root) {\n        var realDOM = document.createElement(element.tagName);\n        //循环设置属性和样式\n        var props = element.attr.props;\n        var styles = element.attr.style;\n        for (var i in props) {\n            realDOM.setAttrbute(i, props[i]);\n        }\n        for (var j in styles) {\n            realDOM.style[j] = styles[j];\n        }\n        //循环子节点，如果是对象递归该方法，否则创建文本节点\n        element.children.forEach(function (child) {\n            if (child instanceof Element) {\n                render(child, realDOM);\n    } else {\n                raedlDOM.appendChild(document.createTextNode(child));\n            }\n        });\n        //插入真实dom\n        root.appendChild(realDOM);\n        return realDOM;\n    }\n\n\n## diff算法比较差异\n\n当Virtual DOM发生更新时候，会进行变化生成一颗新的dom树，为了比较两棵树的异同，引入了一种Diff算法完成比较，diff算法非常高效，当对v-dom完成差异比较后，这个差异会作用到真实dom，过程如下：\n\n*   1.构建Virtual Dom树\n*   2.将Virtual Dom插入真实dom\n*   3.构建变化后的Virtual Dom树\n*   4.通过diff算法比较差异\n*   5.仅将差异在真实DOM中更新\n\n给定任意两颗树，进行转换的差异算法，一般复杂度是O(n^3)，react的diff算法复杂度是O(n)，它基于v-dom的两个基本事实：\n\n*   两个相同组件产生类似的DOM结构，不同的组件产生不同的DOM结构；\n*   对于同一层次的一组子节点，它们可以通过唯一的id进行区分。\n\n组件的树是自带层级的，diff算法按照层级比较，如图： ![](http://cdn.infoqstatic.com/statics_s2_20170822-0429/resource/articles/react-dom-diff/zh/resources/0909000.png) 如果节点类型不同，直接删除Before中的节点，插入新节点；如果节点类型相同，继续层序遍历属性，属性不同则替换属性；直到遍历到最底层。通过一次遍历，即可比较出不同，更新了整个dom。\n\n    //一个参考算法，链接：https://www.zhihu.com/question/29504639/answer/73607810\n    // diff 函数，对比两棵树\n    function diff (oldTree, newTree) {\n      var index = 0 // 当前节点的标志\n      var patches = {} // 用来记录每个节点差异的对象\n      dfsWalk(oldTree, newTree, index, patches)\n      return patches\n    }\n\n    // 对两棵树进行深度优先遍历\n    function dfsWalk (oldNode, newNode, index, patches) {\n      // 对比oldNode和newNode的不同，记录下来\n      patches[index] = [...]\n\n      diffChildren(oldNode.children, newNode.children, index, patches)\n    }\n\n    // 遍历子节点\n    function diffChildren (oldChildren, newChildren, index, patches) {\n      var leftNode = null\n      var currentNodeIndex = index\n      oldChildren.forEach(function (child, i) {\n        var newChild = newChildren[i]\n        currentNodeIndex = (leftNode && leftNode.count) // 计算节点的标识\n          ? currentNodeIndex + leftNode.count + 1\n          : currentNodeIndex + 1\n        dfsWalk(child, newChild, currentNodeIndex, patches) // 深度遍历子节点\n        leftNode = child\n      })\n    }\n\n\n一篇很好的diff算法原理的解析：http://www.infoq.com/cn/articles/react-dom-diff/\n\n# 生命周期问题\n\nv-dom的整个过程，即产生了生命周期，一切和v-dom相关的组件的生命周期也与之相关。如： ![](https://cn.vuejs.org/images/lifecycle.png)vue组件的生命周期 ![](http://7xqgks.com1.z0.glb.clouddn.com/3-3-component-lifecycle.jpg)react组件的生命周期 一般分为初始化、运行中、销毁三个状态，三个状态有关的生命周期钩子函数有： **初始化阶段**： 　　getDefaultProps:获取实例的默认属性(即使没有生成实例，组件的第一个实例被初始化CreateClass的时候调用，只调用一次,) 　　getInitialState:获取每个实例的初始化状态（每个实例自己维护） 　　componentWillMount：组件即将被装载、渲染到页面上（render之前最好一次修改状态的机会） 　　render:组件在这里生成虚拟的DOM节点（只能访问this.props和this.state；只有一个顶层组件，也就是说render返回值值职能是一个组件；不允许修改状态和DOM输出） 　　componentDidMount:组件真正在被装载之后，可以修改DOM **运行中状态**： 　　componentWillReceiveProps:组件将要接收到属性的时候调用（赶在父组件修改真正发生之前,可以修改属性和状态） 　　shouldComponentUpdate:组件接受到新属性或者新状态的时候（可以返回false，接收数据后不更新，阻止render调用，后面的函数不会被继续执行了） 　　componentWillUpdate:不能修改属性和状态 　　render:只能访问this.props和this.state；只有一个顶层组件，也就是说render返回值只能是一个组件；不允许修改状态和DOM输出 　　componentDidUpdate:可以修改DOM **销毁阶段**： 　　componentWillUnmount:开发者需要来销毁（组件真正删除之前调用，比如计时器和事件监听器）","slug":"e6-b7-b1-e5-85-a5-e7-90-86-e8-a7-a3vitual-dom","published":1,"updated":"2020-05-19T08:51:28.570Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts81s006xzmz89ip96sii","content":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0049.jpg\" alt=\"\"></p>\n<blockquote>\n<p>Vitual DOM是被诸如React,Vue,Preact等框架采用的一种内部黑盒技术，用来作为到最终dom操作的一个中介。 <img src=\"http://7xqgks.com1.z0.glb.clouddn.com/v-dom1.png\" alt=\"\"> v-dom在前端的工作图</p>\n</blockquote>\n<h1 id=\"v-dom是什么\"><a href=\"#v-dom是什么\" class=\"headerlink\" title=\"v-dom是什么\"></a>v-dom是什么</h1><p>v-dom是一个真实dom的模拟表示，它像是原始dom的一个轻量级的副本，不同的是v-dom减少了冗余，采用了高性能的diff算法比较更新dom，同时只通过最终的正式dom操作来渲染入游览器，这最终特性保证了v-dom的高效。</p>\n<h1 id=\"为什么要用v-dom\"><a href=\"#为什么要用v-dom\" class=\"headerlink\" title=\"为什么要用v-dom\"></a>为什么要用v-dom</h1><p>DOM操作是把js实现到游览器的核心，一切的交互都需要用过dom。不幸的是，don操作是一件性能非常底下的工作：因为dom对象中有很多和操作无关的冗余字段，而任何dom操作不得不遍历整颗冗余度非常高的dom树。 比如，目前有一个列表，包含多个项目，当检查第一项，dom将重建整个列表，这是十倍以上的非必须工作，在早起前端，因为业务的不复杂性，dom操作尚能工作顺利，但目前越来越复杂的前端场景，现代网站可以使用大量dom操作，低效更新已经是一个严重的问题。 <img src=\"http://7xqgks.com1.z0.glb.clouddn.com/v-dom2.png\" alt=\"\">真实的游览器渲染过程，元素的更新会涉及到重绘和回流，进一步降低性能。 这种缓慢的现实，使得很多js框架采用自己的方式去更新dom，v-dom就是其中一个被推广的佼佼者。</p>\n<h1 id=\"v-dom如何被建立\"><a href=\"#v-dom如何被建立\" class=\"headerlink\" title=\"v-dom如何被建立\"></a>v-dom如何被建立</h1><p><img src=\"http://efe.baidu.com/blog/the-inner-workings-of-virtual-dom/1.png\" alt=\"\">Preact的dom工作流程。</p>\n<h2 id=\"虚拟元素\"><a href=\"#虚拟元素\" class=\"headerlink\" title=\"虚拟元素\"></a>虚拟元素</h2><p>我们可以用如下的虚拟元素替代真实dom：</p>\n<pre><code>/**\n * 一个类似的dom结构元素的v-dom设计\n * &lt;div id=&quot;container&quot;&gt;\n *  &lt;h1&gt;Hello v-dom&lt;/h1&gt;\n * &lt;/div&gt;\n */\n\nvar element = {\n    tagName: &apos;div&apos;,\n    attr: {\n        props: {\n            id: &apos;container&apos;\n        },\n        style: {\n            color: &apos;black&apos;\n        }\n    },\n    children: {\n        tagName: &apos;h1&apos;,\n        value: &apos;Hello v-dom&apos;\n    }\n}\n\n//用构造函数模拟一下\nfunction Element(tagName, attr, children, value) {\n    this.tagName = tagName;\n    this.attr = attr;\n    this.children = children;\n    this.value = value;\n};\nvar headline = new Element(&apos;h1&apos;, null, null, &apos;Hello world&apos;);\nvar container = new Element(&apos;div&apos;, {\n    props: {\n        id: &apos;container&apos;\n    },\n    style: {\n        color: &apos;black&apos;\n    }\n}, headline, null);</code></pre><p>上述代码就是一个对v-dom的描述以及简单实现，实际上React的JSX转换后真正调用的API也是类似的API，这个API是<code>React.createElement()</code>。 v-dom有一些通用的特点：轻量级、无状态、不可改变。</p>\n<h2 id=\"render方法\"><a href=\"#render方法\" class=\"headerlink\" title=\"render方法\"></a>render方法</h2><p>有了上述的v-dom对象后，再通过类似<code>render()</code>的方法，就可以创建真实dom，render函数的简单实现类似这样：</p>\n<pre><code>function render(element, root) {\n    var realDOM = document.createElement(element.tagName);\n    //循环设置属性和样式\n    var props = element.attr.props;\n    var styles = element.attr.style;\n    for (var i in props) {\n        realDOM.setAttrbute(i, props[i]);\n    }\n    for (var j in styles) {\n        realDOM.style[j] = styles[j];\n    }\n    //循环子节点，如果是对象递归该方法，否则创建文本节点\n    element.children.forEach(function (child) {\n        if (child instanceof Element) {\n            render(child, realDOM);\n} else {\n            raedlDOM.appendChild(document.createTextNode(child));\n        }\n    });\n    //插入真实dom\n    root.appendChild(realDOM);\n    return realDOM;\n}</code></pre><h2 id=\"diff算法比较差异\"><a href=\"#diff算法比较差异\" class=\"headerlink\" title=\"diff算法比较差异\"></a>diff算法比较差异</h2><p>当Virtual DOM发生更新时候，会进行变化生成一颗新的dom树，为了比较两棵树的异同，引入了一种Diff算法完成比较，diff算法非常高效，当对v-dom完成差异比较后，这个差异会作用到真实dom，过程如下：</p>\n<ul>\n<li>1.构建Virtual Dom树</li>\n<li>2.将Virtual Dom插入真实dom</li>\n<li>3.构建变化后的Virtual Dom树</li>\n<li>4.通过diff算法比较差异</li>\n<li>5.仅将差异在真实DOM中更新</li>\n</ul>\n<p>给定任意两颗树，进行转换的差异算法，一般复杂度是O(n^3)，react的diff算法复杂度是O(n)，它基于v-dom的两个基本事实：</p>\n<ul>\n<li>两个相同组件产生类似的DOM结构，不同的组件产生不同的DOM结构；</li>\n<li>对于同一层次的一组子节点，它们可以通过唯一的id进行区分。</li>\n</ul>\n<p>组件的树是自带层级的，diff算法按照层级比较，如图： <img src=\"http://cdn.infoqstatic.com/statics_s2_20170822-0429/resource/articles/react-dom-diff/zh/resources/0909000.png\" alt=\"\"> 如果节点类型不同，直接删除Before中的节点，插入新节点；如果节点类型相同，继续层序遍历属性，属性不同则替换属性；直到遍历到最底层。通过一次遍历，即可比较出不同，更新了整个dom。</p>\n<pre><code>//一个参考算法，链接：https://www.zhihu.com/question/29504639/answer/73607810\n// diff 函数，对比两棵树\nfunction diff (oldTree, newTree) {\n  var index = 0 // 当前节点的标志\n  var patches = {} // 用来记录每个节点差异的对象\n  dfsWalk(oldTree, newTree, index, patches)\n  return patches\n}\n\n// 对两棵树进行深度优先遍历\nfunction dfsWalk (oldNode, newNode, index, patches) {\n  // 对比oldNode和newNode的不同，记录下来\n  patches[index] = [...]\n\n  diffChildren(oldNode.children, newNode.children, index, patches)\n}\n\n// 遍历子节点\nfunction diffChildren (oldChildren, newChildren, index, patches) {\n  var leftNode = null\n  var currentNodeIndex = index\n  oldChildren.forEach(function (child, i) {\n    var newChild = newChildren[i]\n    currentNodeIndex = (leftNode &amp;&amp; leftNode.count) // 计算节点的标识\n      ? currentNodeIndex + leftNode.count + 1\n      : currentNodeIndex + 1\n    dfsWalk(child, newChild, currentNodeIndex, patches) // 深度遍历子节点\n    leftNode = child\n  })\n}</code></pre><p>一篇很好的diff算法原理的解析：<a href=\"http://www.infoq.com/cn/articles/react-dom-diff/\" target=\"_blank\" rel=\"noopener\">http://www.infoq.com/cn/articles/react-dom-diff/</a></p>\n<h1 id=\"生命周期问题\"><a href=\"#生命周期问题\" class=\"headerlink\" title=\"生命周期问题\"></a>生命周期问题</h1><p>v-dom的整个过程，即产生了生命周期，一切和v-dom相关的组件的生命周期也与之相关。如： <img src=\"https://cn.vuejs.org/images/lifecycle.png\" alt=\"\">vue组件的生命周期 <img src=\"http://7xqgks.com1.z0.glb.clouddn.com/3-3-component-lifecycle.jpg\" alt=\"\">react组件的生命周期 一般分为初始化、运行中、销毁三个状态，三个状态有关的生命周期钩子函数有： <strong>初始化阶段</strong>： 　　getDefaultProps:获取实例的默认属性(即使没有生成实例，组件的第一个实例被初始化CreateClass的时候调用，只调用一次,) 　　getInitialState:获取每个实例的初始化状态（每个实例自己维护） 　　componentWillMount：组件即将被装载、渲染到页面上（render之前最好一次修改状态的机会） 　　render:组件在这里生成虚拟的DOM节点（只能访问this.props和this.state；只有一个顶层组件，也就是说render返回值值职能是一个组件；不允许修改状态和DOM输出） 　　componentDidMount:组件真正在被装载之后，可以修改DOM <strong>运行中状态</strong>： 　　componentWillReceiveProps:组件将要接收到属性的时候调用（赶在父组件修改真正发生之前,可以修改属性和状态） 　　shouldComponentUpdate:组件接受到新属性或者新状态的时候（可以返回false，接收数据后不更新，阻止render调用，后面的函数不会被继续执行了） 　　componentWillUpdate:不能修改属性和状态 　　render:只能访问this.props和this.state；只有一个顶层组件，也就是说render返回值只能是一个组件；不允许修改状态和DOM输出 　　componentDidUpdate:可以修改DOM <strong>销毁阶段</strong>： 　　componentWillUnmount:开发者需要来销毁（组件真正删除之前调用，比如计时器和事件监听器）</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0049.jpg\" alt=\"\"></p>\n<blockquote>\n<p>Vitual DOM是被诸如React,Vue,Preact等框架采用的一种内部黑盒技术，用来作为到最终dom操作的一个中介。 <img src=\"http://7xqgks.com1.z0.glb.clouddn.com/v-dom1.png\" alt=\"\"> v-dom在前端的工作图</p>\n</blockquote>\n<h1 id=\"v-dom是什么\"><a href=\"#v-dom是什么\" class=\"headerlink\" title=\"v-dom是什么\"></a>v-dom是什么</h1><p>v-dom是一个真实dom的模拟表示，它像是原始dom的一个轻量级的副本，不同的是v-dom减少了冗余，采用了高性能的diff算法比较更新dom，同时只通过最终的正式dom操作来渲染入游览器，这最终特性保证了v-dom的高效。</p>\n<h1 id=\"为什么要用v-dom\"><a href=\"#为什么要用v-dom\" class=\"headerlink\" title=\"为什么要用v-dom\"></a>为什么要用v-dom</h1><p>DOM操作是把js实现到游览器的核心，一切的交互都需要用过dom。不幸的是，don操作是一件性能非常底下的工作：因为dom对象中有很多和操作无关的冗余字段，而任何dom操作不得不遍历整颗冗余度非常高的dom树。 比如，目前有一个列表，包含多个项目，当检查第一项，dom将重建整个列表，这是十倍以上的非必须工作，在早起前端，因为业务的不复杂性，dom操作尚能工作顺利，但目前越来越复杂的前端场景，现代网站可以使用大量dom操作，低效更新已经是一个严重的问题。 <img src=\"http://7xqgks.com1.z0.glb.clouddn.com/v-dom2.png\" alt=\"\">真实的游览器渲染过程，元素的更新会涉及到重绘和回流，进一步降低性能。 这种缓慢的现实，使得很多js框架采用自己的方式去更新dom，v-dom就是其中一个被推广的佼佼者。</p>\n<h1 id=\"v-dom如何被建立\"><a href=\"#v-dom如何被建立\" class=\"headerlink\" title=\"v-dom如何被建立\"></a>v-dom如何被建立</h1><p><img src=\"http://efe.baidu.com/blog/the-inner-workings-of-virtual-dom/1.png\" alt=\"\">Preact的dom工作流程。</p>\n<h2 id=\"虚拟元素\"><a href=\"#虚拟元素\" class=\"headerlink\" title=\"虚拟元素\"></a>虚拟元素</h2><p>我们可以用如下的虚拟元素替代真实dom：</p>\n<pre><code>/**\n * 一个类似的dom结构元素的v-dom设计\n * &lt;div id=&quot;container&quot;&gt;\n *  &lt;h1&gt;Hello v-dom&lt;/h1&gt;\n * &lt;/div&gt;\n */\n\nvar element = {\n    tagName: &apos;div&apos;,\n    attr: {\n        props: {\n            id: &apos;container&apos;\n        },\n        style: {\n            color: &apos;black&apos;\n        }\n    },\n    children: {\n        tagName: &apos;h1&apos;,\n        value: &apos;Hello v-dom&apos;\n    }\n}\n\n//用构造函数模拟一下\nfunction Element(tagName, attr, children, value) {\n    this.tagName = tagName;\n    this.attr = attr;\n    this.children = children;\n    this.value = value;\n};\nvar headline = new Element(&apos;h1&apos;, null, null, &apos;Hello world&apos;);\nvar container = new Element(&apos;div&apos;, {\n    props: {\n        id: &apos;container&apos;\n    },\n    style: {\n        color: &apos;black&apos;\n    }\n}, headline, null);</code></pre><p>上述代码就是一个对v-dom的描述以及简单实现，实际上React的JSX转换后真正调用的API也是类似的API，这个API是<code>React.createElement()</code>。 v-dom有一些通用的特点：轻量级、无状态、不可改变。</p>\n<h2 id=\"render方法\"><a href=\"#render方法\" class=\"headerlink\" title=\"render方法\"></a>render方法</h2><p>有了上述的v-dom对象后，再通过类似<code>render()</code>的方法，就可以创建真实dom，render函数的简单实现类似这样：</p>\n<pre><code>function render(element, root) {\n    var realDOM = document.createElement(element.tagName);\n    //循环设置属性和样式\n    var props = element.attr.props;\n    var styles = element.attr.style;\n    for (var i in props) {\n        realDOM.setAttrbute(i, props[i]);\n    }\n    for (var j in styles) {\n        realDOM.style[j] = styles[j];\n    }\n    //循环子节点，如果是对象递归该方法，否则创建文本节点\n    element.children.forEach(function (child) {\n        if (child instanceof Element) {\n            render(child, realDOM);\n} else {\n            raedlDOM.appendChild(document.createTextNode(child));\n        }\n    });\n    //插入真实dom\n    root.appendChild(realDOM);\n    return realDOM;\n}</code></pre><h2 id=\"diff算法比较差异\"><a href=\"#diff算法比较差异\" class=\"headerlink\" title=\"diff算法比较差异\"></a>diff算法比较差异</h2><p>当Virtual DOM发生更新时候，会进行变化生成一颗新的dom树，为了比较两棵树的异同，引入了一种Diff算法完成比较，diff算法非常高效，当对v-dom完成差异比较后，这个差异会作用到真实dom，过程如下：</p>\n<ul>\n<li>1.构建Virtual Dom树</li>\n<li>2.将Virtual Dom插入真实dom</li>\n<li>3.构建变化后的Virtual Dom树</li>\n<li>4.通过diff算法比较差异</li>\n<li>5.仅将差异在真实DOM中更新</li>\n</ul>\n<p>给定任意两颗树，进行转换的差异算法，一般复杂度是O(n^3)，react的diff算法复杂度是O(n)，它基于v-dom的两个基本事实：</p>\n<ul>\n<li>两个相同组件产生类似的DOM结构，不同的组件产生不同的DOM结构；</li>\n<li>对于同一层次的一组子节点，它们可以通过唯一的id进行区分。</li>\n</ul>\n<p>组件的树是自带层级的，diff算法按照层级比较，如图： <img src=\"http://cdn.infoqstatic.com/statics_s2_20170822-0429/resource/articles/react-dom-diff/zh/resources/0909000.png\" alt=\"\"> 如果节点类型不同，直接删除Before中的节点，插入新节点；如果节点类型相同，继续层序遍历属性，属性不同则替换属性；直到遍历到最底层。通过一次遍历，即可比较出不同，更新了整个dom。</p>\n<pre><code>//一个参考算法，链接：https://www.zhihu.com/question/29504639/answer/73607810\n// diff 函数，对比两棵树\nfunction diff (oldTree, newTree) {\n  var index = 0 // 当前节点的标志\n  var patches = {} // 用来记录每个节点差异的对象\n  dfsWalk(oldTree, newTree, index, patches)\n  return patches\n}\n\n// 对两棵树进行深度优先遍历\nfunction dfsWalk (oldNode, newNode, index, patches) {\n  // 对比oldNode和newNode的不同，记录下来\n  patches[index] = [...]\n\n  diffChildren(oldNode.children, newNode.children, index, patches)\n}\n\n// 遍历子节点\nfunction diffChildren (oldChildren, newChildren, index, patches) {\n  var leftNode = null\n  var currentNodeIndex = index\n  oldChildren.forEach(function (child, i) {\n    var newChild = newChildren[i]\n    currentNodeIndex = (leftNode &amp;&amp; leftNode.count) // 计算节点的标识\n      ? currentNodeIndex + leftNode.count + 1\n      : currentNodeIndex + 1\n    dfsWalk(child, newChild, currentNodeIndex, patches) // 深度遍历子节点\n    leftNode = child\n  })\n}</code></pre><p>一篇很好的diff算法原理的解析：<a href=\"http://www.infoq.com/cn/articles/react-dom-diff/\" target=\"_blank\" rel=\"noopener\">http://www.infoq.com/cn/articles/react-dom-diff/</a></p>\n<h1 id=\"生命周期问题\"><a href=\"#生命周期问题\" class=\"headerlink\" title=\"生命周期问题\"></a>生命周期问题</h1><p>v-dom的整个过程，即产生了生命周期，一切和v-dom相关的组件的生命周期也与之相关。如： <img src=\"https://cn.vuejs.org/images/lifecycle.png\" alt=\"\">vue组件的生命周期 <img src=\"http://7xqgks.com1.z0.glb.clouddn.com/3-3-component-lifecycle.jpg\" alt=\"\">react组件的生命周期 一般分为初始化、运行中、销毁三个状态，三个状态有关的生命周期钩子函数有： <strong>初始化阶段</strong>： 　　getDefaultProps:获取实例的默认属性(即使没有生成实例，组件的第一个实例被初始化CreateClass的时候调用，只调用一次,) 　　getInitialState:获取每个实例的初始化状态（每个实例自己维护） 　　componentWillMount：组件即将被装载、渲染到页面上（render之前最好一次修改状态的机会） 　　render:组件在这里生成虚拟的DOM节点（只能访问this.props和this.state；只有一个顶层组件，也就是说render返回值值职能是一个组件；不允许修改状态和DOM输出） 　　componentDidMount:组件真正在被装载之后，可以修改DOM <strong>运行中状态</strong>： 　　componentWillReceiveProps:组件将要接收到属性的时候调用（赶在父组件修改真正发生之前,可以修改属性和状态） 　　shouldComponentUpdate:组件接受到新属性或者新状态的时候（可以返回false，接收数据后不更新，阻止render调用，后面的函数不会被继续执行了） 　　componentWillUpdate:不能修改属性和状态 　　render:只能访问this.props和this.state；只有一个顶层组件，也就是说render返回值只能是一个组件；不允许修改状态和DOM输出 　　componentDidUpdate:可以修改DOM <strong>销毁阶段</strong>： 　　componentWillUnmount:开发者需要来销毁（组件真正删除之前调用，比如计时器和事件监听器）</p>\n"},{"title":"JavaScript工作原理：JavaScript V8引擎的优化","url":"262.html","id":"262","date":"2019-05-25T17:14:56.000Z","_content":"\n> js引擎是将JavaScript处理并运行的环境，jvm是java处理并运行的环境，在JavaScript的V8引擎的设计中，大量借鉴了jvm中的一些方法和思想进行设计，着重起到优化的功能\n\n编译性语言的处理过程\n----------\n\n对于c或者c++这种编译兴来说，编辑、编译和运行是全部分离的，互相是一个职责链的形势，这个过程对于学过c语言基础或者与此相关的我们来说是非常简单的： ![](http://img.bugzhang.com/QQ%E5%9B%BE%E7%89%8720190812012318.png) 如上图所示，编辑源代码后、经过编译链接、最后得到本地二进制代码，然后交给操作系统运行。\n\n解释性语言的处理过程\n----------\n\n对于python、ruby、perl等解释性语言（通常脚本语言都是解释性语言）来说，脚本并不需要进行编译，而是在运行过程中直接被解释器解释的同时调用操作系统资源运行的。旧的JavaScript引擎，也是采用这样的方式编译JavaScript代码的。 ![](http://img.bugzhang.com/QQ%E5%9B%BE%E7%89%8720190812012324.png) 如上图所示，比起编译性的语言，解释语言可以不用得到二进制表示，而被直接解释执行。\n\nJava的处理过程\n---------\n\n相比上边两种，Java的处理可谓复杂很多。分为了两个阶段：编译与解释阶段。与c++的编译阶段区别是编译阶段生产的不是直接可以运行的二进制代码，而是一种叫做字节码的中间代码。之所以使用这种字节码的中间代码是因为字节码可以不受操作系统和平台的限制，借助jvm实现“Write once, run anywhere”的跨平台功能，这也是Java最大的卖点与久经不衰的原因之一。 另外一个阶段是类似Python的解释阶段，Python不同的是：首先解释阶段将字节码作为了输入然后被解释器运行；加入了JIT的概念，JIT可以将字节码转为本地代码然后执行，这个JIT主要是起到一个优化性能的作用。 ![](http://img.bugzhang.com/QQ%E5%9B%BE%E7%89%8720190812012327.png)\n\nV8对JavaScript的处理过程\n------------------\n\nV8对js的处理过程与Java非常相似，但把Java的两个阶段合并了起来，全部在JavaScript引擎中执行。此外，因为JavaScript作为弱类型语言，本身没有进行类型的标记，如果直接编译对于编译器来说是有性能损耗的，为此v8借用了类型系统在内部构建了隐性类型系统。 ![](http://img.bugzhang.com/QQ%E5%9B%BE%E7%89%8720190812012331.png)\n\n多线程优化\n-----\n\nV8引擎内部有多个线程进行处理：\n\n*   主线程：获取代码并优化。\n*   编译线程：获取主线程获取的代码然后编译并执行，此时主线程正在优化。\n*   Profiler线程（我翻译为检查器线程）：找到会占用大量性能的部分，以便主线程可以优先优化这部分。\n*   CG线程（垃圾扫描与回收器）：用来进行垃圾回收的线程。\n\n首次执行JavaScript代码时，V8利用full-codegen直接将解析后的JavaScript转换为机器代码而无需任何转换。这使它可以非常快速地开始执行机器代码。请注意，V8不使用中间字节码表示，因此无需解释器。 当代码运行一段时间后，探查器线程已经收集了足够的数据来告诉应该优化哪个方法。 接下来，Crankshaft优化开始于另一个线程。它将JavaScript抽象语法树转换为名为Hydrogen的高级静态单指派（SSA）表示，并尝试优化氢图。大多数优化都是在这个级别完成的。\n\n隐藏类优化\n-----\n\n大多数JavaScript解释器使用类似字典的结构（基于散列函数）来存储对象属性值在内存中的位置。这种结构使得在JavaScript中检索属性的值比在Java或C＃等非动态编程语言中的计算成本更高。在Java中，所有对象属性都是在编译之前由固定对象布局确定的，并且无法在运行时动态添加或删除。结果、属性值（或指向这些属性的指针）可以作为连续缓冲区存储在存储器中，每个缓冲区之间具有固定偏移量。可以根据属性类型轻松确定偏移的长度，而在运行时可以更改属性类型的JavaScript中，这是不可能的。 由于使用字典在内存中查找对象属性的位置效率非常低，因此V8使用不同的方法：隐藏类。隐藏类的工作方式类似于Java等语言中使用的固定对象布局（类），除非它们是在运行时创建的。现在，让我们看看它们实际上是什么样的：\n```js\n    function Point（x，y）{\n        this.x = x;\n        this.y = y;\n    }\n    var p1 = new Point（1,2）;\n```\n\n一旦new一个新的Point类，V8将创建一个名为“C0”的隐藏类，如图： ![](http://img.bugzhang.com/1_pVnIrMZiB9iAz5sW28AixA.png) 此时，尚未定义任何Point的属性，“C0”为空。 一旦执行了第一个语句“this.x = x”（在“Point”函数内），V8将创建一个名为“C1”的第二个隐藏类，它基于“C0”。“C1”描述了可以找到属性x的存储器中的位置（相对于对象指针）。在这种情况下，“x”存储在偏移 0处，这意味着当在存储器中查看点对象作为连续缓冲区时，第一偏移将对应于属性“x”。V8还将使用“类转换”更新“C0”，该类转换指出如果将属性“x”添加到点对象，则隐藏类应该从“C0”切换到“C1”。下面的点对象的隐藏类现在是“C1”。 ![](http://img.bugzhang.com/1_QsVUE3snZD9abYXccg6Sgw.png) 每次将新属性添加到对象时，旧的隐藏类都会更新为新隐藏类的转换路径。隐藏类转换很重要，因为它们允许在以相同方式创建的对象之间共享隐藏类。如果两个对象共享一个隐藏类并且同一属性被添加到它们中，则转换将确保两个对象都接收相同的新隐藏类以及随其附带的所有优化代码。 执行语句“this.y = y”时重复此过程。 创建一个名为“C2”的新隐藏类，将类转换添加到“C1”，声明如果将属性“y”添加到Point对象（已包含属性“x”），则隐藏类应更改为“C2”，点对象的隐藏类更新为“C2”。 ![](http://img.bugzhang.com/1_spJ8v7GWivxZZzTAzqVPtA.png) 隐藏类转换取决于属性添加到对象的顺序。看一下下面的代码片段：\n```js\n    function Point（x，y）{\n        this.x = x;\n        this.y = y;\n    }\n    var p1 = new Point（1,2）;\n    p1.a = 5;\n    p1.b = 6;\n    var p2 = new Point（3,4）;\n    p2.b = 7;\n    p2.a = 8;\n```\n\n现在，您将假设对于p1和p2，将使用相同的隐藏类和转换。好吧，不是真的。对于“p1”，首先添加属性“a”，然后添加属性“b”。但是，对于“p2”，首先分配“b”，然后是“a”。因此，作为不同转换路径的结果，“p1”和“p2”以不同的隐藏类结束。在这种情况下，**以相同的顺序初始化动态属性要好得多，以便可以重用隐藏的类。**\n\n内联缓存\n----\n\n除了JIT、多线程、隐藏类外，V8还是用来内联缓存的方式优化js这种动态语言代码。内联缓存依赖于**对相同类的对象的重复调用往往发生在相同类的对象上**这一常见的现象。即A类的对象往往会重复调用B类的对象，V8会维护一个作为参数传递的对象类型的缓存，并且以B类为假设的对象类型。之后如果判断得到V8猜想正确，那么就可以绕过访问对象属性的过程。 每当在特定对象上调用方法时，V8引擎必须执行对该对象的隐藏类的查找，以确定访问特定属性的偏移量。在将同一方法成功调用两次到同一个隐藏类之后，V8省略了隐藏类查找，只是将属性的偏移量添加到对象指针本身。对于该方法的所有未来调用，V8引擎假定隐藏类未更改，并使用先前查找中存储的偏移直接跳转到特定属性的内存地址。这大大提高了执行速度。\n\n新的管道机制\n------\n\n新的执行管道建立在Ignition，V8的解释器和TurboFan（V8的最新优化编译器）之上。也大大提升了性能。以下两张图是在引入Ignition前后，V8对于管道的使用过程。 ![](http://img.bugzhang.com/918GZ8F$%28MIH3Q_UR%7D74%7D$C.png) ![](http://img.bugzhang.com/BVJ~S%5D3%5B%5D%7B%60G%5D4SKDAIY5NG.png)\n\n* * *\n\n参考：\n\n*   chrome官方文档：https://docs.google.com/ -https://docs.google.com/presentation/d/1chhN90uB8yPaIhx\\_h2M3lPyxPgdPmkADqSNAoXYQiVE/edit#slide=id.g1ba7f92079\\_5_29\n*   《webkit技术内幕》\n*   https://blog.csdn.net/allen8612433/article/details/80329022\n*   https://blog.csdn.net/zhangge3663/article/details/83310757","source":"_posts/javascript-v8-e5-bc-95-e6-93-8e-e4-b8-8ejava-jvm-e5-af-b9-e6-af-94.md","raw":"---\ntitle: JavaScript工作原理：JavaScript V8引擎的优化\ntags:\n  - JavaScript\nurl: 262.html\nid: 262\ncategories:\n  - 前端\ndate: 2019-05-26 01:14:56\n---\n\n> js引擎是将JavaScript处理并运行的环境，jvm是java处理并运行的环境，在JavaScript的V8引擎的设计中，大量借鉴了jvm中的一些方法和思想进行设计，着重起到优化的功能\n\n编译性语言的处理过程\n----------\n\n对于c或者c++这种编译兴来说，编辑、编译和运行是全部分离的，互相是一个职责链的形势，这个过程对于学过c语言基础或者与此相关的我们来说是非常简单的： ![](http://img.bugzhang.com/QQ%E5%9B%BE%E7%89%8720190812012318.png) 如上图所示，编辑源代码后、经过编译链接、最后得到本地二进制代码，然后交给操作系统运行。\n\n解释性语言的处理过程\n----------\n\n对于python、ruby、perl等解释性语言（通常脚本语言都是解释性语言）来说，脚本并不需要进行编译，而是在运行过程中直接被解释器解释的同时调用操作系统资源运行的。旧的JavaScript引擎，也是采用这样的方式编译JavaScript代码的。 ![](http://img.bugzhang.com/QQ%E5%9B%BE%E7%89%8720190812012324.png) 如上图所示，比起编译性的语言，解释语言可以不用得到二进制表示，而被直接解释执行。\n\nJava的处理过程\n---------\n\n相比上边两种，Java的处理可谓复杂很多。分为了两个阶段：编译与解释阶段。与c++的编译阶段区别是编译阶段生产的不是直接可以运行的二进制代码，而是一种叫做字节码的中间代码。之所以使用这种字节码的中间代码是因为字节码可以不受操作系统和平台的限制，借助jvm实现“Write once, run anywhere”的跨平台功能，这也是Java最大的卖点与久经不衰的原因之一。 另外一个阶段是类似Python的解释阶段，Python不同的是：首先解释阶段将字节码作为了输入然后被解释器运行；加入了JIT的概念，JIT可以将字节码转为本地代码然后执行，这个JIT主要是起到一个优化性能的作用。 ![](http://img.bugzhang.com/QQ%E5%9B%BE%E7%89%8720190812012327.png)\n\nV8对JavaScript的处理过程\n------------------\n\nV8对js的处理过程与Java非常相似，但把Java的两个阶段合并了起来，全部在JavaScript引擎中执行。此外，因为JavaScript作为弱类型语言，本身没有进行类型的标记，如果直接编译对于编译器来说是有性能损耗的，为此v8借用了类型系统在内部构建了隐性类型系统。 ![](http://img.bugzhang.com/QQ%E5%9B%BE%E7%89%8720190812012331.png)\n\n多线程优化\n-----\n\nV8引擎内部有多个线程进行处理：\n\n*   主线程：获取代码并优化。\n*   编译线程：获取主线程获取的代码然后编译并执行，此时主线程正在优化。\n*   Profiler线程（我翻译为检查器线程）：找到会占用大量性能的部分，以便主线程可以优先优化这部分。\n*   CG线程（垃圾扫描与回收器）：用来进行垃圾回收的线程。\n\n首次执行JavaScript代码时，V8利用full-codegen直接将解析后的JavaScript转换为机器代码而无需任何转换。这使它可以非常快速地开始执行机器代码。请注意，V8不使用中间字节码表示，因此无需解释器。 当代码运行一段时间后，探查器线程已经收集了足够的数据来告诉应该优化哪个方法。 接下来，Crankshaft优化开始于另一个线程。它将JavaScript抽象语法树转换为名为Hydrogen的高级静态单指派（SSA）表示，并尝试优化氢图。大多数优化都是在这个级别完成的。\n\n隐藏类优化\n-----\n\n大多数JavaScript解释器使用类似字典的结构（基于散列函数）来存储对象属性值在内存中的位置。这种结构使得在JavaScript中检索属性的值比在Java或C＃等非动态编程语言中的计算成本更高。在Java中，所有对象属性都是在编译之前由固定对象布局确定的，并且无法在运行时动态添加或删除。结果、属性值（或指向这些属性的指针）可以作为连续缓冲区存储在存储器中，每个缓冲区之间具有固定偏移量。可以根据属性类型轻松确定偏移的长度，而在运行时可以更改属性类型的JavaScript中，这是不可能的。 由于使用字典在内存中查找对象属性的位置效率非常低，因此V8使用不同的方法：隐藏类。隐藏类的工作方式类似于Java等语言中使用的固定对象布局（类），除非它们是在运行时创建的。现在，让我们看看它们实际上是什么样的：\n```js\n    function Point（x，y）{\n        this.x = x;\n        this.y = y;\n    }\n    var p1 = new Point（1,2）;\n```\n\n一旦new一个新的Point类，V8将创建一个名为“C0”的隐藏类，如图： ![](http://img.bugzhang.com/1_pVnIrMZiB9iAz5sW28AixA.png) 此时，尚未定义任何Point的属性，“C0”为空。 一旦执行了第一个语句“this.x = x”（在“Point”函数内），V8将创建一个名为“C1”的第二个隐藏类，它基于“C0”。“C1”描述了可以找到属性x的存储器中的位置（相对于对象指针）。在这种情况下，“x”存储在偏移 0处，这意味着当在存储器中查看点对象作为连续缓冲区时，第一偏移将对应于属性“x”。V8还将使用“类转换”更新“C0”，该类转换指出如果将属性“x”添加到点对象，则隐藏类应该从“C0”切换到“C1”。下面的点对象的隐藏类现在是“C1”。 ![](http://img.bugzhang.com/1_QsVUE3snZD9abYXccg6Sgw.png) 每次将新属性添加到对象时，旧的隐藏类都会更新为新隐藏类的转换路径。隐藏类转换很重要，因为它们允许在以相同方式创建的对象之间共享隐藏类。如果两个对象共享一个隐藏类并且同一属性被添加到它们中，则转换将确保两个对象都接收相同的新隐藏类以及随其附带的所有优化代码。 执行语句“this.y = y”时重复此过程。 创建一个名为“C2”的新隐藏类，将类转换添加到“C1”，声明如果将属性“y”添加到Point对象（已包含属性“x”），则隐藏类应更改为“C2”，点对象的隐藏类更新为“C2”。 ![](http://img.bugzhang.com/1_spJ8v7GWivxZZzTAzqVPtA.png) 隐藏类转换取决于属性添加到对象的顺序。看一下下面的代码片段：\n```js\n    function Point（x，y）{\n        this.x = x;\n        this.y = y;\n    }\n    var p1 = new Point（1,2）;\n    p1.a = 5;\n    p1.b = 6;\n    var p2 = new Point（3,4）;\n    p2.b = 7;\n    p2.a = 8;\n```\n\n现在，您将假设对于p1和p2，将使用相同的隐藏类和转换。好吧，不是真的。对于“p1”，首先添加属性“a”，然后添加属性“b”。但是，对于“p2”，首先分配“b”，然后是“a”。因此，作为不同转换路径的结果，“p1”和“p2”以不同的隐藏类结束。在这种情况下，**以相同的顺序初始化动态属性要好得多，以便可以重用隐藏的类。**\n\n内联缓存\n----\n\n除了JIT、多线程、隐藏类外，V8还是用来内联缓存的方式优化js这种动态语言代码。内联缓存依赖于**对相同类的对象的重复调用往往发生在相同类的对象上**这一常见的现象。即A类的对象往往会重复调用B类的对象，V8会维护一个作为参数传递的对象类型的缓存，并且以B类为假设的对象类型。之后如果判断得到V8猜想正确，那么就可以绕过访问对象属性的过程。 每当在特定对象上调用方法时，V8引擎必须执行对该对象的隐藏类的查找，以确定访问特定属性的偏移量。在将同一方法成功调用两次到同一个隐藏类之后，V8省略了隐藏类查找，只是将属性的偏移量添加到对象指针本身。对于该方法的所有未来调用，V8引擎假定隐藏类未更改，并使用先前查找中存储的偏移直接跳转到特定属性的内存地址。这大大提高了执行速度。\n\n新的管道机制\n------\n\n新的执行管道建立在Ignition，V8的解释器和TurboFan（V8的最新优化编译器）之上。也大大提升了性能。以下两张图是在引入Ignition前后，V8对于管道的使用过程。 ![](http://img.bugzhang.com/918GZ8F$%28MIH3Q_UR%7D74%7D$C.png) ![](http://img.bugzhang.com/BVJ~S%5D3%5B%5D%7B%60G%5D4SKDAIY5NG.png)\n\n* * *\n\n参考：\n\n*   chrome官方文档：https://docs.google.com/ -https://docs.google.com/presentation/d/1chhN90uB8yPaIhx\\_h2M3lPyxPgdPmkADqSNAoXYQiVE/edit#slide=id.g1ba7f92079\\_5_29\n*   《webkit技术内幕》\n*   https://blog.csdn.net/allen8612433/article/details/80329022\n*   https://blog.csdn.net/zhangge3663/article/details/83310757","slug":"javascript-v8-e5-bc-95-e6-93-8e-e4-b8-8ejava-jvm-e5-af-b9-e6-af-94","published":1,"updated":"2020-05-19T08:54:04.638Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts81v006zzmz86emk7ki3","content":"<blockquote>\n<p>js引擎是将JavaScript处理并运行的环境，jvm是java处理并运行的环境，在JavaScript的V8引擎的设计中，大量借鉴了jvm中的一些方法和思想进行设计，着重起到优化的功能</p>\n</blockquote>\n<h2 id=\"编译性语言的处理过程\"><a href=\"#编译性语言的处理过程\" class=\"headerlink\" title=\"编译性语言的处理过程\"></a>编译性语言的处理过程</h2><p>对于c或者c++这种编译兴来说，编辑、编译和运行是全部分离的，互相是一个职责链的形势，这个过程对于学过c语言基础或者与此相关的我们来说是非常简单的： <img src=\"http://img.bugzhang.com/QQ%E5%9B%BE%E7%89%8720190812012318.png\" alt=\"\"> 如上图所示，编辑源代码后、经过编译链接、最后得到本地二进制代码，然后交给操作系统运行。</p>\n<h2 id=\"解释性语言的处理过程\"><a href=\"#解释性语言的处理过程\" class=\"headerlink\" title=\"解释性语言的处理过程\"></a>解释性语言的处理过程</h2><p>对于python、ruby、perl等解释性语言（通常脚本语言都是解释性语言）来说，脚本并不需要进行编译，而是在运行过程中直接被解释器解释的同时调用操作系统资源运行的。旧的JavaScript引擎，也是采用这样的方式编译JavaScript代码的。 <img src=\"http://img.bugzhang.com/QQ%E5%9B%BE%E7%89%8720190812012324.png\" alt=\"\"> 如上图所示，比起编译性的语言，解释语言可以不用得到二进制表示，而被直接解释执行。</p>\n<h2 id=\"Java的处理过程\"><a href=\"#Java的处理过程\" class=\"headerlink\" title=\"Java的处理过程\"></a>Java的处理过程</h2><p>相比上边两种，Java的处理可谓复杂很多。分为了两个阶段：编译与解释阶段。与c++的编译阶段区别是编译阶段生产的不是直接可以运行的二进制代码，而是一种叫做字节码的中间代码。之所以使用这种字节码的中间代码是因为字节码可以不受操作系统和平台的限制，借助jvm实现“Write once, run anywhere”的跨平台功能，这也是Java最大的卖点与久经不衰的原因之一。 另外一个阶段是类似Python的解释阶段，Python不同的是：首先解释阶段将字节码作为了输入然后被解释器运行；加入了JIT的概念，JIT可以将字节码转为本地代码然后执行，这个JIT主要是起到一个优化性能的作用。 <img src=\"http://img.bugzhang.com/QQ%E5%9B%BE%E7%89%8720190812012327.png\" alt=\"\"></p>\n<h2 id=\"V8对JavaScript的处理过程\"><a href=\"#V8对JavaScript的处理过程\" class=\"headerlink\" title=\"V8对JavaScript的处理过程\"></a>V8对JavaScript的处理过程</h2><p>V8对js的处理过程与Java非常相似，但把Java的两个阶段合并了起来，全部在JavaScript引擎中执行。此外，因为JavaScript作为弱类型语言，本身没有进行类型的标记，如果直接编译对于编译器来说是有性能损耗的，为此v8借用了类型系统在内部构建了隐性类型系统。 <img src=\"http://img.bugzhang.com/QQ%E5%9B%BE%E7%89%8720190812012331.png\" alt=\"\"></p>\n<h2 id=\"多线程优化\"><a href=\"#多线程优化\" class=\"headerlink\" title=\"多线程优化\"></a>多线程优化</h2><p>V8引擎内部有多个线程进行处理：</p>\n<ul>\n<li>主线程：获取代码并优化。</li>\n<li>编译线程：获取主线程获取的代码然后编译并执行，此时主线程正在优化。</li>\n<li>Profiler线程（我翻译为检查器线程）：找到会占用大量性能的部分，以便主线程可以优先优化这部分。</li>\n<li>CG线程（垃圾扫描与回收器）：用来进行垃圾回收的线程。</li>\n</ul>\n<p>首次执行JavaScript代码时，V8利用full-codegen直接将解析后的JavaScript转换为机器代码而无需任何转换。这使它可以非常快速地开始执行机器代码。请注意，V8不使用中间字节码表示，因此无需解释器。 当代码运行一段时间后，探查器线程已经收集了足够的数据来告诉应该优化哪个方法。 接下来，Crankshaft优化开始于另一个线程。它将JavaScript抽象语法树转换为名为Hydrogen的高级静态单指派（SSA）表示，并尝试优化氢图。大多数优化都是在这个级别完成的。</p>\n<h2 id=\"隐藏类优化\"><a href=\"#隐藏类优化\" class=\"headerlink\" title=\"隐藏类优化\"></a>隐藏类优化</h2><p>大多数JavaScript解释器使用类似字典的结构（基于散列函数）来存储对象属性值在内存中的位置。这种结构使得在JavaScript中检索属性的值比在Java或C＃等非动态编程语言中的计算成本更高。在Java中，所有对象属性都是在编译之前由固定对象布局确定的，并且无法在运行时动态添加或删除。结果、属性值（或指向这些属性的指针）可以作为连续缓冲区存储在存储器中，每个缓冲区之间具有固定偏移量。可以根据属性类型轻松确定偏移的长度，而在运行时可以更改属性类型的JavaScript中，这是不可能的。 由于使用字典在内存中查找对象属性的位置效率非常低，因此V8使用不同的方法：隐藏类。隐藏类的工作方式类似于Java等语言中使用的固定对象布局（类），除非它们是在运行时创建的。现在，让我们看看它们实际上是什么样的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Point</span>（<span class=\"hljs-title\">x</span>，<span class=\"hljs-title\">y</span>）</span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.x = x;<br>    <span class=\"hljs-keyword\">this</span>.y = y;<br>&#125;<br><span class=\"hljs-keyword\">var</span> p1 = <span class=\"hljs-keyword\">new</span> Point（<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>）;<br></code></pre></td></tr></table></figure>\n\n<p>一旦new一个新的Point类，V8将创建一个名为“C0”的隐藏类，如图： <img src=\"http://img.bugzhang.com/1_pVnIrMZiB9iAz5sW28AixA.png\" alt=\"\"> 此时，尚未定义任何Point的属性，“C0”为空。 一旦执行了第一个语句“this.x = x”（在“Point”函数内），V8将创建一个名为“C1”的第二个隐藏类，它基于“C0”。“C1”描述了可以找到属性x的存储器中的位置（相对于对象指针）。在这种情况下，“x”存储在偏移 0处，这意味着当在存储器中查看点对象作为连续缓冲区时，第一偏移将对应于属性“x”。V8还将使用“类转换”更新“C0”，该类转换指出如果将属性“x”添加到点对象，则隐藏类应该从“C0”切换到“C1”。下面的点对象的隐藏类现在是“C1”。 <img src=\"http://img.bugzhang.com/1_QsVUE3snZD9abYXccg6Sgw.png\" alt=\"\"> 每次将新属性添加到对象时，旧的隐藏类都会更新为新隐藏类的转换路径。隐藏类转换很重要，因为它们允许在以相同方式创建的对象之间共享隐藏类。如果两个对象共享一个隐藏类并且同一属性被添加到它们中，则转换将确保两个对象都接收相同的新隐藏类以及随其附带的所有优化代码。 执行语句“this.y = y”时重复此过程。 创建一个名为“C2”的新隐藏类，将类转换添加到“C1”，声明如果将属性“y”添加到Point对象（已包含属性“x”），则隐藏类应更改为“C2”，点对象的隐藏类更新为“C2”。 <img src=\"http://img.bugzhang.com/1_spJ8v7GWivxZZzTAzqVPtA.png\" alt=\"\"> 隐藏类转换取决于属性添加到对象的顺序。看一下下面的代码片段：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Point</span>（<span class=\"hljs-title\">x</span>，<span class=\"hljs-title\">y</span>）</span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.x = x;<br>    <span class=\"hljs-keyword\">this</span>.y = y;<br>&#125;<br><span class=\"hljs-keyword\">var</span> p1 = <span class=\"hljs-keyword\">new</span> Point（<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>）;<br>p1.a = <span class=\"hljs-number\">5</span>;<br>p1.b = <span class=\"hljs-number\">6</span>;<br><span class=\"hljs-keyword\">var</span> p2 = <span class=\"hljs-keyword\">new</span> Point（<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>）;<br>p2.b = <span class=\"hljs-number\">7</span>;<br>p2.a = <span class=\"hljs-number\">8</span>;<br></code></pre></td></tr></table></figure>\n\n<p>现在，您将假设对于p1和p2，将使用相同的隐藏类和转换。好吧，不是真的。对于“p1”，首先添加属性“a”，然后添加属性“b”。但是，对于“p2”，首先分配“b”，然后是“a”。因此，作为不同转换路径的结果，“p1”和“p2”以不同的隐藏类结束。在这种情况下，<strong>以相同的顺序初始化动态属性要好得多，以便可以重用隐藏的类。</strong></p>\n<h2 id=\"内联缓存\"><a href=\"#内联缓存\" class=\"headerlink\" title=\"内联缓存\"></a>内联缓存</h2><p>除了JIT、多线程、隐藏类外，V8还是用来内联缓存的方式优化js这种动态语言代码。内联缓存依赖于<strong>对相同类的对象的重复调用往往发生在相同类的对象上</strong>这一常见的现象。即A类的对象往往会重复调用B类的对象，V8会维护一个作为参数传递的对象类型的缓存，并且以B类为假设的对象类型。之后如果判断得到V8猜想正确，那么就可以绕过访问对象属性的过程。 每当在特定对象上调用方法时，V8引擎必须执行对该对象的隐藏类的查找，以确定访问特定属性的偏移量。在将同一方法成功调用两次到同一个隐藏类之后，V8省略了隐藏类查找，只是将属性的偏移量添加到对象指针本身。对于该方法的所有未来调用，V8引擎假定隐藏类未更改，并使用先前查找中存储的偏移直接跳转到特定属性的内存地址。这大大提高了执行速度。</p>\n<h2 id=\"新的管道机制\"><a href=\"#新的管道机制\" class=\"headerlink\" title=\"新的管道机制\"></a>新的管道机制</h2><p>新的执行管道建立在Ignition，V8的解释器和TurboFan（V8的最新优化编译器）之上。也大大提升了性能。以下两张图是在引入Ignition前后，V8对于管道的使用过程。 <img src=\"http://img.bugzhang.com/918GZ8F$%28MIH3Q_UR%7D74%7D$C.png\" alt=\"\"> <img src=\"http://img.bugzhang.com/BVJ~S%5D3%5B%5D%7B%60G%5D4SKDAIY5NG.png\" alt=\"\"></p>\n<hr>\n<p>参考：</p>\n<ul>\n<li>chrome官方文档：<a href=\"https://docs.google.com/\" target=\"_blank\" rel=\"noopener\">https://docs.google.com/</a> -<a href=\"https://docs.google.com/presentation/d/1chhN90uB8yPaIhx\\_h2M3lPyxPgdPmkADqSNAoXYQiVE/edit#slide=id.g1ba7f92079\\_5_29\" target=\"_blank\" rel=\"noopener\">https://docs.google.com/presentation/d/1chhN90uB8yPaIhx\\_h2M3lPyxPgdPmkADqSNAoXYQiVE/edit#slide=id.g1ba7f92079\\_5_29</a></li>\n<li>《webkit技术内幕》</li>\n<li><a href=\"https://blog.csdn.net/allen8612433/article/details/80329022\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/allen8612433/article/details/80329022</a></li>\n<li><a href=\"https://blog.csdn.net/zhangge3663/article/details/83310757\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/zhangge3663/article/details/83310757</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>js引擎是将JavaScript处理并运行的环境，jvm是java处理并运行的环境，在JavaScript的V8引擎的设计中，大量借鉴了jvm中的一些方法和思想进行设计，着重起到优化的功能</p>\n</blockquote>\n<h2 id=\"编译性语言的处理过程\"><a href=\"#编译性语言的处理过程\" class=\"headerlink\" title=\"编译性语言的处理过程\"></a>编译性语言的处理过程</h2><p>对于c或者c++这种编译兴来说，编辑、编译和运行是全部分离的，互相是一个职责链的形势，这个过程对于学过c语言基础或者与此相关的我们来说是非常简单的： <img src=\"http://img.bugzhang.com/QQ%E5%9B%BE%E7%89%8720190812012318.png\" alt=\"\"> 如上图所示，编辑源代码后、经过编译链接、最后得到本地二进制代码，然后交给操作系统运行。</p>\n<h2 id=\"解释性语言的处理过程\"><a href=\"#解释性语言的处理过程\" class=\"headerlink\" title=\"解释性语言的处理过程\"></a>解释性语言的处理过程</h2><p>对于python、ruby、perl等解释性语言（通常脚本语言都是解释性语言）来说，脚本并不需要进行编译，而是在运行过程中直接被解释器解释的同时调用操作系统资源运行的。旧的JavaScript引擎，也是采用这样的方式编译JavaScript代码的。 <img src=\"http://img.bugzhang.com/QQ%E5%9B%BE%E7%89%8720190812012324.png\" alt=\"\"> 如上图所示，比起编译性的语言，解释语言可以不用得到二进制表示，而被直接解释执行。</p>\n<h2 id=\"Java的处理过程\"><a href=\"#Java的处理过程\" class=\"headerlink\" title=\"Java的处理过程\"></a>Java的处理过程</h2><p>相比上边两种，Java的处理可谓复杂很多。分为了两个阶段：编译与解释阶段。与c++的编译阶段区别是编译阶段生产的不是直接可以运行的二进制代码，而是一种叫做字节码的中间代码。之所以使用这种字节码的中间代码是因为字节码可以不受操作系统和平台的限制，借助jvm实现“Write once, run anywhere”的跨平台功能，这也是Java最大的卖点与久经不衰的原因之一。 另外一个阶段是类似Python的解释阶段，Python不同的是：首先解释阶段将字节码作为了输入然后被解释器运行；加入了JIT的概念，JIT可以将字节码转为本地代码然后执行，这个JIT主要是起到一个优化性能的作用。 <img src=\"http://img.bugzhang.com/QQ%E5%9B%BE%E7%89%8720190812012327.png\" alt=\"\"></p>\n<h2 id=\"V8对JavaScript的处理过程\"><a href=\"#V8对JavaScript的处理过程\" class=\"headerlink\" title=\"V8对JavaScript的处理过程\"></a>V8对JavaScript的处理过程</h2><p>V8对js的处理过程与Java非常相似，但把Java的两个阶段合并了起来，全部在JavaScript引擎中执行。此外，因为JavaScript作为弱类型语言，本身没有进行类型的标记，如果直接编译对于编译器来说是有性能损耗的，为此v8借用了类型系统在内部构建了隐性类型系统。 <img src=\"http://img.bugzhang.com/QQ%E5%9B%BE%E7%89%8720190812012331.png\" alt=\"\"></p>\n<h2 id=\"多线程优化\"><a href=\"#多线程优化\" class=\"headerlink\" title=\"多线程优化\"></a>多线程优化</h2><p>V8引擎内部有多个线程进行处理：</p>\n<ul>\n<li>主线程：获取代码并优化。</li>\n<li>编译线程：获取主线程获取的代码然后编译并执行，此时主线程正在优化。</li>\n<li>Profiler线程（我翻译为检查器线程）：找到会占用大量性能的部分，以便主线程可以优先优化这部分。</li>\n<li>CG线程（垃圾扫描与回收器）：用来进行垃圾回收的线程。</li>\n</ul>\n<p>首次执行JavaScript代码时，V8利用full-codegen直接将解析后的JavaScript转换为机器代码而无需任何转换。这使它可以非常快速地开始执行机器代码。请注意，V8不使用中间字节码表示，因此无需解释器。 当代码运行一段时间后，探查器线程已经收集了足够的数据来告诉应该优化哪个方法。 接下来，Crankshaft优化开始于另一个线程。它将JavaScript抽象语法树转换为名为Hydrogen的高级静态单指派（SSA）表示，并尝试优化氢图。大多数优化都是在这个级别完成的。</p>\n<h2 id=\"隐藏类优化\"><a href=\"#隐藏类优化\" class=\"headerlink\" title=\"隐藏类优化\"></a>隐藏类优化</h2><p>大多数JavaScript解释器使用类似字典的结构（基于散列函数）来存储对象属性值在内存中的位置。这种结构使得在JavaScript中检索属性的值比在Java或C＃等非动态编程语言中的计算成本更高。在Java中，所有对象属性都是在编译之前由固定对象布局确定的，并且无法在运行时动态添加或删除。结果、属性值（或指向这些属性的指针）可以作为连续缓冲区存储在存储器中，每个缓冲区之间具有固定偏移量。可以根据属性类型轻松确定偏移的长度，而在运行时可以更改属性类型的JavaScript中，这是不可能的。 由于使用字典在内存中查找对象属性的位置效率非常低，因此V8使用不同的方法：隐藏类。隐藏类的工作方式类似于Java等语言中使用的固定对象布局（类），除非它们是在运行时创建的。现在，让我们看看它们实际上是什么样的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Point</span>（<span class=\"hljs-title\">x</span>，<span class=\"hljs-title\">y</span>）</span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.x = x;<br>    <span class=\"hljs-keyword\">this</span>.y = y;<br>&#125;<br><span class=\"hljs-keyword\">var</span> p1 = <span class=\"hljs-keyword\">new</span> Point（<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>）;<br></code></pre></td></tr></table></figure>\n\n<p>一旦new一个新的Point类，V8将创建一个名为“C0”的隐藏类，如图： <img src=\"http://img.bugzhang.com/1_pVnIrMZiB9iAz5sW28AixA.png\" alt=\"\"> 此时，尚未定义任何Point的属性，“C0”为空。 一旦执行了第一个语句“this.x = x”（在“Point”函数内），V8将创建一个名为“C1”的第二个隐藏类，它基于“C0”。“C1”描述了可以找到属性x的存储器中的位置（相对于对象指针）。在这种情况下，“x”存储在偏移 0处，这意味着当在存储器中查看点对象作为连续缓冲区时，第一偏移将对应于属性“x”。V8还将使用“类转换”更新“C0”，该类转换指出如果将属性“x”添加到点对象，则隐藏类应该从“C0”切换到“C1”。下面的点对象的隐藏类现在是“C1”。 <img src=\"http://img.bugzhang.com/1_QsVUE3snZD9abYXccg6Sgw.png\" alt=\"\"> 每次将新属性添加到对象时，旧的隐藏类都会更新为新隐藏类的转换路径。隐藏类转换很重要，因为它们允许在以相同方式创建的对象之间共享隐藏类。如果两个对象共享一个隐藏类并且同一属性被添加到它们中，则转换将确保两个对象都接收相同的新隐藏类以及随其附带的所有优化代码。 执行语句“this.y = y”时重复此过程。 创建一个名为“C2”的新隐藏类，将类转换添加到“C1”，声明如果将属性“y”添加到Point对象（已包含属性“x”），则隐藏类应更改为“C2”，点对象的隐藏类更新为“C2”。 <img src=\"http://img.bugzhang.com/1_spJ8v7GWivxZZzTAzqVPtA.png\" alt=\"\"> 隐藏类转换取决于属性添加到对象的顺序。看一下下面的代码片段：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Point</span>（<span class=\"hljs-title\">x</span>，<span class=\"hljs-title\">y</span>）</span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.x = x;<br>    <span class=\"hljs-keyword\">this</span>.y = y;<br>&#125;<br><span class=\"hljs-keyword\">var</span> p1 = <span class=\"hljs-keyword\">new</span> Point（<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>）;<br>p1.a = <span class=\"hljs-number\">5</span>;<br>p1.b = <span class=\"hljs-number\">6</span>;<br><span class=\"hljs-keyword\">var</span> p2 = <span class=\"hljs-keyword\">new</span> Point（<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>）;<br>p2.b = <span class=\"hljs-number\">7</span>;<br>p2.a = <span class=\"hljs-number\">8</span>;<br></code></pre></td></tr></table></figure>\n\n<p>现在，您将假设对于p1和p2，将使用相同的隐藏类和转换。好吧，不是真的。对于“p1”，首先添加属性“a”，然后添加属性“b”。但是，对于“p2”，首先分配“b”，然后是“a”。因此，作为不同转换路径的结果，“p1”和“p2”以不同的隐藏类结束。在这种情况下，<strong>以相同的顺序初始化动态属性要好得多，以便可以重用隐藏的类。</strong></p>\n<h2 id=\"内联缓存\"><a href=\"#内联缓存\" class=\"headerlink\" title=\"内联缓存\"></a>内联缓存</h2><p>除了JIT、多线程、隐藏类外，V8还是用来内联缓存的方式优化js这种动态语言代码。内联缓存依赖于<strong>对相同类的对象的重复调用往往发生在相同类的对象上</strong>这一常见的现象。即A类的对象往往会重复调用B类的对象，V8会维护一个作为参数传递的对象类型的缓存，并且以B类为假设的对象类型。之后如果判断得到V8猜想正确，那么就可以绕过访问对象属性的过程。 每当在特定对象上调用方法时，V8引擎必须执行对该对象的隐藏类的查找，以确定访问特定属性的偏移量。在将同一方法成功调用两次到同一个隐藏类之后，V8省略了隐藏类查找，只是将属性的偏移量添加到对象指针本身。对于该方法的所有未来调用，V8引擎假定隐藏类未更改，并使用先前查找中存储的偏移直接跳转到特定属性的内存地址。这大大提高了执行速度。</p>\n<h2 id=\"新的管道机制\"><a href=\"#新的管道机制\" class=\"headerlink\" title=\"新的管道机制\"></a>新的管道机制</h2><p>新的执行管道建立在Ignition，V8的解释器和TurboFan（V8的最新优化编译器）之上。也大大提升了性能。以下两张图是在引入Ignition前后，V8对于管道的使用过程。 <img src=\"http://img.bugzhang.com/918GZ8F$%28MIH3Q_UR%7D74%7D$C.png\" alt=\"\"> <img src=\"http://img.bugzhang.com/BVJ~S%5D3%5B%5D%7B%60G%5D4SKDAIY5NG.png\" alt=\"\"></p>\n<hr>\n<p>参考：</p>\n<ul>\n<li>chrome官方文档：<a href=\"https://docs.google.com/\" target=\"_blank\" rel=\"noopener\">https://docs.google.com/</a> -<a href=\"https://docs.google.com/presentation/d/1chhN90uB8yPaIhx\\_h2M3lPyxPgdPmkADqSNAoXYQiVE/edit#slide=id.g1ba7f92079\\_5_29\" target=\"_blank\" rel=\"noopener\">https://docs.google.com/presentation/d/1chhN90uB8yPaIhx\\_h2M3lPyxPgdPmkADqSNAoXYQiVE/edit#slide=id.g1ba7f92079\\_5_29</a></li>\n<li>《webkit技术内幕》</li>\n<li><a href=\"https://blog.csdn.net/allen8612433/article/details/80329022\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/allen8612433/article/details/80329022</a></li>\n<li><a href=\"https://blog.csdn.net/zhangge3663/article/details/83310757\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/zhangge3663/article/details/83310757</a></li>\n</ul>\n"},{"title":"Zepto源码分析——事件模块","url":"66.html","id":"66","date":"2017-09-19T09:18:34.000Z","_content":"\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0052.jpg) Zepto的事件模块有些简化，因为Zepto作为一个针对移动端游览器的框架，所以游览器的事件系统本身相对完善，不需要做过多事件机制中最复杂的兼容处理。所以在分析后打算总结下针对PC端框架中兼容处理的。\n\n游览器事件API\n--------\n\ndom提供了三种层级的事件api：html事件、dom0级事件、dom2级事件（可以绑定多个回调）。整个事件机制主要简历在dom0级与dom2级两个标准上：http://bugzhang.com/2017/08/13/chang-yong-de-javascriptdai-ma-duan-2-dom-shi-jian-ajax-cookie/ ，改博文里第一段代码就是相关的实现，此处不再阐述。\n\n## 与dom 0级事件的缺陷\n\n*   对于DOM3新增事件不支持，如：FocusIn,FocsuOut,MouseRemoved,MouseScrill等，但这些事件用的很少\n*   每次只可以绑定一个回调，重复绑定就会取消掉上次的绑定\n*   在ie下回调没有参数，在其他游览器回调第一个参数是事件对象\n*   只能再冒泡阶段可用\n\n## ie事件addachEvent的缺陷\n\n*   this指向的是window，存在内存泄漏\n*   多钟时间绑定回调后，执行顺序不是按照绑定时的顺序触发\n*   与W3C有一些事件有区别\n*   **只支持冒泡阶段**\n\n## addEventListenner的缺陷\n\n*   部分游览器与标准的事件定义不一致\n*   第四个参数是ff跨文档监听事件，第五个参数是flash下制定监听函数的引用强弱\n*   事件对象不稳定，各个游览器有区别\n*   input事件不如ie的propertychange事件好用\n\nZepto的Event模块核心方法\n-----------------\n\n## add：内部用来添加事件的方法\n\n```js\n    function add(element, events, fn, data, selector, delegator, capture) {\n        //拓展标识属性zid\n        var id = zid(element),\n            set = (handlers[id] || (handlers[id] = []))\n        events\n            //匹配空格，获取多个event\n            .split(/\\s/)\n            .forEach(function (event) {\n                if (event == 'ready')\n                    return $(document).ready(fn)\n                var handler = parse(event)\n                handler.fn = fn\n                handler.sel = selector\n                // 如果事件是emulate mouseenter, mouseleave\n                if (handler.e in hover)\n                    fn = function (e) {\n                        var related = e.relatedTarget\n                        if (!related || (related !== this && !$.contains(this, related)))\n                            return handler.fn.apply(this, arguments)\n                    }\n                //事件代理\n                handler.del = delegator\n                var callback = delegator || fn\n                handler.proxy = function (e) {\n                    e = compatible(e)\n                    if (e.isImmediatePropagationStopped())\n                        return\n                    e.data = data\n                    var result = callback.apply(element, e._args == undefined\n                        ? [e]\n                        : [e].concat(e._args))\n                    if (result === false)\n                        e.preventDefault(),\n                            e.stopPropagation()\n                    return result\n                }\n                handler.i = set.length\n                set.push(handler)\n                //如果支持dom2级事件\n                if ('addEventListener' in element)\n                    element.addEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture))\n            })\n    }\n```\n\n## remove：内部删除事件的方法\n\n```js\n    function remove(element, events, fn, selector, capture) {\n        var id = zid(element)\n        eachEvent(events || '', fn, function(event, fn) {\n            findHandlers(element, event, fn, selector).forEach(function(handler) {\n                delete handlers[id][handler.i]\n                element.removeEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture))\n            })\n        })\n    }\n```\n\n就是调用removeEventListener\n\n## on：添加事件\n\non是zepto中最核心的事件方法，源码如下：\n```js\n      $.fn.on = function(event, selector, data, callback, one){\n        var autoRemove, delegator, $this = this\n        if (event && !isString(event)) {\n          $.each(event, function(type, fn){\n            $this.on(type, selector, data, fn, one)\n          })\n          return $this\n        }\n\n        if (!isString(selector) && !isFunction(callback) && callback !== false)\n          callback = data, data = selector, selector = undefined\n        if (callback === undefined || data === false)\n          callback = data, data = undefined\n\n        if (callback === false) callback = returnFalse\n\n        return $this.each(function(_, element){\n          //如果是有one=true，先删掉事件，再执行事件\n          if (one) autoRemove = function(e){\n            remove(element, e.type, callback)\n            return callback.apply(this, arguments)\n          }\n          //按照选择器找到元素\n          if (selector) delegator = function(e){\n            var evt, match = $(e.target).closest(selector, element).get(0)\n            if (match && match !== element) {\n              evt = $.extend(createProxy(e), {currentTarget: match, liveFired: element})\n              return (autoRemove || callback).apply(match, [evt].concat(slice.call(arguments, 1)))\n            }\n          }\n\n          add(element, event, callback, data, selector, delegator || autoRemove)\n        })\n      }\n```\n\n参数说明：\n\n*   event:事件类型，可以通过空格的字符串方式添加(\"click mousedown\")，或者事件类型为键，函数为值的方式({click:function,mousedown:function})。\n*   selector:可选参数，事件委托的节点选择器\n*   data:事件处理程序中的event.data属性\n*   callback:事件处理程序的回调函数\n*   one:绑定事件后，只触发一次回调\n\n使用方式：\n```js\n    var elem = $('#content')\n    // observe all clicks inside #content:\n    elem.on('click', function(e){ ... })\n    // observe clicks inside navigation links in #content\n    elem.on('click', 'nav a', function(e){ ... })\n    // all clicks inside links in the document\n    $(document).on('click', 'a', function(e){ ... })\n    // disable following any navigation link on the page\n    $(document).on('click', 'nav a', false)\n```\n\n很多其他api是内部通过调用on方法实现的，如：\n\n```js\n    //基于一组特定的根元素为所有选择器匹配的元素附加一个处理事件，匹配的元素可能现在或将来才创建。\n    $.fn.delegate = function(selector, event, callback){\n      return this.on(event, selector, callback)\n    }\n    //添加一个处理事件到元素，当第一次执行事件以后，该事件将自动解除绑定，保证处理函数在每个元素上最多执行一次。\n    $.fn.one = function(event, selector, data, callback){\n      return this.on(event, selector, data, callback, 1)\n    }\n    //为一个元素绑定一个处理事件。\n    $.fn.bind = function(event, data, callback){\n      return this.on(event, data, callback)\n    }\n```\n\n## off：移除事件\n\noff模块也是主要的核心模块，主要做移除事件\n```js\n    $.fn.off = function(event, selector, callback){\n        var $this = this\n        if (event && !isString(event)) {\n            $.each(event, function(type, fn){\n                $this.off(type, selector, fn)\n            })\n            return $this\n        }\n\n        if (!isString(selector) && !isFunction(callback) && callback !== false)\n            callback = selector, selector = undefined\n\n        if (callback === false) callback = returnFalse\n\n        return $this.each(function(){\n            remove(this, event, callback, selector)\n        })\n    }\n```\n\n一些api是内部通过调用off方法实现的，如：\n```js\n    //移除Bind绑定的事件\n    $.fn.unbind = function (event, callback) {\n        return this.off(event, callback)\n    }\n    //移除通过delegate 注册的事件。\n    $.fn.undelegate = function (selector, event, callback) {\n        return this.off(event, selector, callback)\n    }\n```\n\n## trigge与triggerHandler\n\n在对象集合的元素上触发指定的事件\n```js\n    $.fn.trigger = function (event, args) {\n        event = (isString(event) || $.isPlainObject(event))\n            ? $.Event(event)\n            : compatible(event)\n        event._args = args\n        return this.each(function () {\n            // handle focus(), blur() by calling them directly\n            if (event.type in focus && typeof this[event.type] == \"function\")\n                this[event.type]()\n            // items in the collection might not be DOM elements\n            else if ('dispatchEvent' in this)\n                this.dispatchEvent(event)\n            else\n                $(this).triggerHandler(event, args)\n        })\n    }\n    $.fn.triggerHandler = function (event, args) {\n        var e,\n            result\n        this.each(function (i, element) {\n            e = createProxy(isString(event)\n                ? $.Event(event)\n                : event)\n            e._args = args\n            e.target = element\n            $.each(findHandlers(element, event.type || event), function (i, handler) {\n                result = handler.proxy(e)\n                if (e.isImmediatePropagationStopped())\n                    return false\n            })\n        })\n        return result\n    }\n```\n\ntriggle模拟整个冒泡过程，除了自身，还触发祖先节点与window的同类型的回调，在游览器底层上，使用的方法是dispatchEvent，如果是在ie上是fireEvent。\n\n## $.Event：自定义事件\n\n```js\n    $.Event = function (type, props) {\n        if (!isString(type))\n            props = type,\n                type = props.type\n        var event = document.createEvent(specialEvents[type] || 'Events'),\n            bubbles = true\n        if (props)\n            for (var name in props)\n                (name == 'bubbles')\n                    ? (bubbles = !!props[name])\n                    : (event[name] = props[name])\n        event.initEvent(type, bubbles, true)\n        return compatible(event)\n    }\n```\n\n底层采用的是游览器的createEvent和initEvent方法来模拟事件，从而实现自定义事件的功能。\n\n# 一些补充\n\n1.很多框架对于事件代理不采用捕获而采用冒泡的原因，是考虑兼容性\n\n2.zepto因为自身主要做移动端的原因，所以对于低版本ie浏览器是不考虑的，我在上述中或多或少做了补充 3.zepto的很大一部分事件实际是在touch模块，这块主要是触摸事件，内容也比较多，打算留到下篇再写","source":"_posts/zepto-e6-ba-90-e7-a0-81-e5-88-86-e6-9e-90-e4-ba-8b-e4-bb-b6-e6-a8-a1-e5-9d-97.md","raw":"---\ntitle: Zepto源码分析——事件模块\ntags:\n  - zepto.js\n  - 源码分析\nurl: 66.html\nid: 66\ncategories:\n  - 未分类\ndate: 2017-09-19 17:18:34\n---\n\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0052.jpg) Zepto的事件模块有些简化，因为Zepto作为一个针对移动端游览器的框架，所以游览器的事件系统本身相对完善，不需要做过多事件机制中最复杂的兼容处理。所以在分析后打算总结下针对PC端框架中兼容处理的。\n\n游览器事件API\n--------\n\ndom提供了三种层级的事件api：html事件、dom0级事件、dom2级事件（可以绑定多个回调）。整个事件机制主要简历在dom0级与dom2级两个标准上：http://bugzhang.com/2017/08/13/chang-yong-de-javascriptdai-ma-duan-2-dom-shi-jian-ajax-cookie/ ，改博文里第一段代码就是相关的实现，此处不再阐述。\n\n## 与dom 0级事件的缺陷\n\n*   对于DOM3新增事件不支持，如：FocusIn,FocsuOut,MouseRemoved,MouseScrill等，但这些事件用的很少\n*   每次只可以绑定一个回调，重复绑定就会取消掉上次的绑定\n*   在ie下回调没有参数，在其他游览器回调第一个参数是事件对象\n*   只能再冒泡阶段可用\n\n## ie事件addachEvent的缺陷\n\n*   this指向的是window，存在内存泄漏\n*   多钟时间绑定回调后，执行顺序不是按照绑定时的顺序触发\n*   与W3C有一些事件有区别\n*   **只支持冒泡阶段**\n\n## addEventListenner的缺陷\n\n*   部分游览器与标准的事件定义不一致\n*   第四个参数是ff跨文档监听事件，第五个参数是flash下制定监听函数的引用强弱\n*   事件对象不稳定，各个游览器有区别\n*   input事件不如ie的propertychange事件好用\n\nZepto的Event模块核心方法\n-----------------\n\n## add：内部用来添加事件的方法\n\n```js\n    function add(element, events, fn, data, selector, delegator, capture) {\n        //拓展标识属性zid\n        var id = zid(element),\n            set = (handlers[id] || (handlers[id] = []))\n        events\n            //匹配空格，获取多个event\n            .split(/\\s/)\n            .forEach(function (event) {\n                if (event == 'ready')\n                    return $(document).ready(fn)\n                var handler = parse(event)\n                handler.fn = fn\n                handler.sel = selector\n                // 如果事件是emulate mouseenter, mouseleave\n                if (handler.e in hover)\n                    fn = function (e) {\n                        var related = e.relatedTarget\n                        if (!related || (related !== this && !$.contains(this, related)))\n                            return handler.fn.apply(this, arguments)\n                    }\n                //事件代理\n                handler.del = delegator\n                var callback = delegator || fn\n                handler.proxy = function (e) {\n                    e = compatible(e)\n                    if (e.isImmediatePropagationStopped())\n                        return\n                    e.data = data\n                    var result = callback.apply(element, e._args == undefined\n                        ? [e]\n                        : [e].concat(e._args))\n                    if (result === false)\n                        e.preventDefault(),\n                            e.stopPropagation()\n                    return result\n                }\n                handler.i = set.length\n                set.push(handler)\n                //如果支持dom2级事件\n                if ('addEventListener' in element)\n                    element.addEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture))\n            })\n    }\n```\n\n## remove：内部删除事件的方法\n\n```js\n    function remove(element, events, fn, selector, capture) {\n        var id = zid(element)\n        eachEvent(events || '', fn, function(event, fn) {\n            findHandlers(element, event, fn, selector).forEach(function(handler) {\n                delete handlers[id][handler.i]\n                element.removeEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture))\n            })\n        })\n    }\n```\n\n就是调用removeEventListener\n\n## on：添加事件\n\non是zepto中最核心的事件方法，源码如下：\n```js\n      $.fn.on = function(event, selector, data, callback, one){\n        var autoRemove, delegator, $this = this\n        if (event && !isString(event)) {\n          $.each(event, function(type, fn){\n            $this.on(type, selector, data, fn, one)\n          })\n          return $this\n        }\n\n        if (!isString(selector) && !isFunction(callback) && callback !== false)\n          callback = data, data = selector, selector = undefined\n        if (callback === undefined || data === false)\n          callback = data, data = undefined\n\n        if (callback === false) callback = returnFalse\n\n        return $this.each(function(_, element){\n          //如果是有one=true，先删掉事件，再执行事件\n          if (one) autoRemove = function(e){\n            remove(element, e.type, callback)\n            return callback.apply(this, arguments)\n          }\n          //按照选择器找到元素\n          if (selector) delegator = function(e){\n            var evt, match = $(e.target).closest(selector, element).get(0)\n            if (match && match !== element) {\n              evt = $.extend(createProxy(e), {currentTarget: match, liveFired: element})\n              return (autoRemove || callback).apply(match, [evt].concat(slice.call(arguments, 1)))\n            }\n          }\n\n          add(element, event, callback, data, selector, delegator || autoRemove)\n        })\n      }\n```\n\n参数说明：\n\n*   event:事件类型，可以通过空格的字符串方式添加(\"click mousedown\")，或者事件类型为键，函数为值的方式({click:function,mousedown:function})。\n*   selector:可选参数，事件委托的节点选择器\n*   data:事件处理程序中的event.data属性\n*   callback:事件处理程序的回调函数\n*   one:绑定事件后，只触发一次回调\n\n使用方式：\n```js\n    var elem = $('#content')\n    // observe all clicks inside #content:\n    elem.on('click', function(e){ ... })\n    // observe clicks inside navigation links in #content\n    elem.on('click', 'nav a', function(e){ ... })\n    // all clicks inside links in the document\n    $(document).on('click', 'a', function(e){ ... })\n    // disable following any navigation link on the page\n    $(document).on('click', 'nav a', false)\n```\n\n很多其他api是内部通过调用on方法实现的，如：\n\n```js\n    //基于一组特定的根元素为所有选择器匹配的元素附加一个处理事件，匹配的元素可能现在或将来才创建。\n    $.fn.delegate = function(selector, event, callback){\n      return this.on(event, selector, callback)\n    }\n    //添加一个处理事件到元素，当第一次执行事件以后，该事件将自动解除绑定，保证处理函数在每个元素上最多执行一次。\n    $.fn.one = function(event, selector, data, callback){\n      return this.on(event, selector, data, callback, 1)\n    }\n    //为一个元素绑定一个处理事件。\n    $.fn.bind = function(event, data, callback){\n      return this.on(event, data, callback)\n    }\n```\n\n## off：移除事件\n\noff模块也是主要的核心模块，主要做移除事件\n```js\n    $.fn.off = function(event, selector, callback){\n        var $this = this\n        if (event && !isString(event)) {\n            $.each(event, function(type, fn){\n                $this.off(type, selector, fn)\n            })\n            return $this\n        }\n\n        if (!isString(selector) && !isFunction(callback) && callback !== false)\n            callback = selector, selector = undefined\n\n        if (callback === false) callback = returnFalse\n\n        return $this.each(function(){\n            remove(this, event, callback, selector)\n        })\n    }\n```\n\n一些api是内部通过调用off方法实现的，如：\n```js\n    //移除Bind绑定的事件\n    $.fn.unbind = function (event, callback) {\n        return this.off(event, callback)\n    }\n    //移除通过delegate 注册的事件。\n    $.fn.undelegate = function (selector, event, callback) {\n        return this.off(event, selector, callback)\n    }\n```\n\n## trigge与triggerHandler\n\n在对象集合的元素上触发指定的事件\n```js\n    $.fn.trigger = function (event, args) {\n        event = (isString(event) || $.isPlainObject(event))\n            ? $.Event(event)\n            : compatible(event)\n        event._args = args\n        return this.each(function () {\n            // handle focus(), blur() by calling them directly\n            if (event.type in focus && typeof this[event.type] == \"function\")\n                this[event.type]()\n            // items in the collection might not be DOM elements\n            else if ('dispatchEvent' in this)\n                this.dispatchEvent(event)\n            else\n                $(this).triggerHandler(event, args)\n        })\n    }\n    $.fn.triggerHandler = function (event, args) {\n        var e,\n            result\n        this.each(function (i, element) {\n            e = createProxy(isString(event)\n                ? $.Event(event)\n                : event)\n            e._args = args\n            e.target = element\n            $.each(findHandlers(element, event.type || event), function (i, handler) {\n                result = handler.proxy(e)\n                if (e.isImmediatePropagationStopped())\n                    return false\n            })\n        })\n        return result\n    }\n```\n\ntriggle模拟整个冒泡过程，除了自身，还触发祖先节点与window的同类型的回调，在游览器底层上，使用的方法是dispatchEvent，如果是在ie上是fireEvent。\n\n## $.Event：自定义事件\n\n```js\n    $.Event = function (type, props) {\n        if (!isString(type))\n            props = type,\n                type = props.type\n        var event = document.createEvent(specialEvents[type] || 'Events'),\n            bubbles = true\n        if (props)\n            for (var name in props)\n                (name == 'bubbles')\n                    ? (bubbles = !!props[name])\n                    : (event[name] = props[name])\n        event.initEvent(type, bubbles, true)\n        return compatible(event)\n    }\n```\n\n底层采用的是游览器的createEvent和initEvent方法来模拟事件，从而实现自定义事件的功能。\n\n# 一些补充\n\n1.很多框架对于事件代理不采用捕获而采用冒泡的原因，是考虑兼容性\n\n2.zepto因为自身主要做移动端的原因，所以对于低版本ie浏览器是不考虑的，我在上述中或多或少做了补充 3.zepto的很大一部分事件实际是在touch模块，这块主要是触摸事件，内容也比较多，打算留到下篇再写","slug":"zepto-e6-ba-90-e7-a0-81-e5-88-86-e6-9e-90-e4-ba-8b-e4-bb-b6-e6-a8-a1-e5-9d-97","published":1,"updated":"2020-05-19T08:51:28.569Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts81x0071zmz8howic0lk","content":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0052.jpg\" alt=\"\"> Zepto的事件模块有些简化，因为Zepto作为一个针对移动端游览器的框架，所以游览器的事件系统本身相对完善，不需要做过多事件机制中最复杂的兼容处理。所以在分析后打算总结下针对PC端框架中兼容处理的。</p>\n<h2 id=\"游览器事件API\"><a href=\"#游览器事件API\" class=\"headerlink\" title=\"游览器事件API\"></a>游览器事件API</h2><p>dom提供了三种层级的事件api：html事件、dom0级事件、dom2级事件（可以绑定多个回调）。整个事件机制主要简历在dom0级与dom2级两个标准上：<a href=\"http://bugzhang.com/2017/08/13/chang-yong-de-javascriptdai-ma-duan-2-dom-shi-jian-ajax-cookie/\">http://bugzhang.com/2017/08/13/chang-yong-de-javascriptdai-ma-duan-2-dom-shi-jian-ajax-cookie/</a> ，改博文里第一段代码就是相关的实现，此处不再阐述。</p>\n<h2 id=\"与dom-0级事件的缺陷\"><a href=\"#与dom-0级事件的缺陷\" class=\"headerlink\" title=\"与dom 0级事件的缺陷\"></a>与dom 0级事件的缺陷</h2><ul>\n<li>对于DOM3新增事件不支持，如：FocusIn,FocsuOut,MouseRemoved,MouseScrill等，但这些事件用的很少</li>\n<li>每次只可以绑定一个回调，重复绑定就会取消掉上次的绑定</li>\n<li>在ie下回调没有参数，在其他游览器回调第一个参数是事件对象</li>\n<li>只能再冒泡阶段可用</li>\n</ul>\n<h2 id=\"ie事件addachEvent的缺陷\"><a href=\"#ie事件addachEvent的缺陷\" class=\"headerlink\" title=\"ie事件addachEvent的缺陷\"></a>ie事件addachEvent的缺陷</h2><ul>\n<li>this指向的是window，存在内存泄漏</li>\n<li>多钟时间绑定回调后，执行顺序不是按照绑定时的顺序触发</li>\n<li>与W3C有一些事件有区别</li>\n<li><strong>只支持冒泡阶段</strong></li>\n</ul>\n<h2 id=\"addEventListenner的缺陷\"><a href=\"#addEventListenner的缺陷\" class=\"headerlink\" title=\"addEventListenner的缺陷\"></a>addEventListenner的缺陷</h2><ul>\n<li>部分游览器与标准的事件定义不一致</li>\n<li>第四个参数是ff跨文档监听事件，第五个参数是flash下制定监听函数的引用强弱</li>\n<li>事件对象不稳定，各个游览器有区别</li>\n<li>input事件不如ie的propertychange事件好用</li>\n</ul>\n<h2 id=\"Zepto的Event模块核心方法\"><a href=\"#Zepto的Event模块核心方法\" class=\"headerlink\" title=\"Zepto的Event模块核心方法\"></a>Zepto的Event模块核心方法</h2><h2 id=\"add：内部用来添加事件的方法\"><a href=\"#add：内部用来添加事件的方法\" class=\"headerlink\" title=\"add：内部用来添加事件的方法\"></a>add：内部用来添加事件的方法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\">element, events, fn, data, selector, delegator, capture</span>) </span>&#123;<br>    <span class=\"hljs-comment\">//拓展标识属性zid</span><br>    <span class=\"hljs-keyword\">var</span> id = zid(element),<br>        <span class=\"hljs-keyword\">set</span> = (handlers[id] || (handlers[id] = []))<br>    events<br>        //匹配空格，获取多个event<br>        .split(/\\s/)<br>        .forEach(function (event) &#123;<br>            <span class=\"hljs-keyword\">if</span> (event == <span class=\"hljs-string\">'ready'</span>)<br>                <span class=\"hljs-keyword\">return</span> $(<span class=\"hljs-built_in\">document</span>).ready(fn)<br>            <span class=\"hljs-keyword\">var</span> handler = parse(event)<br>            handler.fn = fn<br>            handler.sel = selector<br>            <span class=\"hljs-comment\">// 如果事件是emulate mouseenter, mouseleave</span><br>            <span class=\"hljs-keyword\">if</span> (handler.e <span class=\"hljs-keyword\">in</span> hover)<br>                fn = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) </span>&#123;<br>                    <span class=\"hljs-keyword\">var</span> related = e.relatedTarget<br>                    <span class=\"hljs-keyword\">if</span> (!related || (related !== <span class=\"hljs-keyword\">this</span> &amp;&amp; !$.contains(<span class=\"hljs-keyword\">this</span>, related)))<br>                        <span class=\"hljs-keyword\">return</span> handler.fn.apply(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>)<br>                &#125;<br>            <span class=\"hljs-comment\">//事件代理</span><br>            handler.del = delegator<br>            <span class=\"hljs-keyword\">var</span> callback = delegator || fn<br>            handler.proxy = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) </span>&#123;<br>                e = compatible(e)<br>                <span class=\"hljs-keyword\">if</span> (e.isImmediatePropagationStopped())<br>                    <span class=\"hljs-keyword\">return</span><br>                e.data = data<br>                <span class=\"hljs-keyword\">var</span> result = callback.apply(element, e._args == <span class=\"hljs-literal\">undefined</span><br>                    ? [e]<br>                    : [e].concat(e._args))<br>                <span class=\"hljs-keyword\">if</span> (result === <span class=\"hljs-literal\">false</span>)<br>                    e.preventDefault(),<br>                        e.stopPropagation()<br>                <span class=\"hljs-keyword\">return</span> result<br>            &#125;<br>            handler.i = <span class=\"hljs-keyword\">set</span>.length<br>            <span class=\"hljs-keyword\">set</span>.push(handler)<br>            //如果支持dom2级事件<br>            if ('addEventListener' in element)<br>                element.addEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture))<br>        &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"remove：内部删除事件的方法\"><a href=\"#remove：内部删除事件的方法\" class=\"headerlink\" title=\"remove：内部删除事件的方法\"></a>remove：内部删除事件的方法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">remove</span>(<span class=\"hljs-params\">element, events, fn, selector, capture</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">var</span> id = zid(element)<br>    eachEvent(events || <span class=\"hljs-string\">''</span>, fn, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">event, fn</span>) </span>&#123;<br>        findHandlers(element, event, fn, selector).forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">handler</span>) </span>&#123;<br>            <span class=\"hljs-keyword\">delete</span> handlers[id][handler.i]<br>            element.removeEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture))<br>        &#125;)<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>就是调用removeEventListener</p>\n<h2 id=\"on：添加事件\"><a href=\"#on：添加事件\" class=\"headerlink\" title=\"on：添加事件\"></a>on：添加事件</h2><p>on是zepto中最核心的事件方法，源码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">$.fn.on = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">event, selector, data, callback, one</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">var</span> autoRemove, delegator, $<span class=\"hljs-keyword\">this</span> = <span class=\"hljs-keyword\">this</span><br>  <span class=\"hljs-keyword\">if</span> (event &amp;&amp; !isString(event)) &#123;<br>    $.each(event, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">type, fn</span>)</span>&#123;<br>      $<span class=\"hljs-keyword\">this</span>.on(type, selector, data, fn, one)<br>    &#125;)<br>    <span class=\"hljs-keyword\">return</span> $<span class=\"hljs-keyword\">this</span><br>  &#125;<br><br>  <span class=\"hljs-keyword\">if</span> (!isString(selector) &amp;&amp; !isFunction(callback) &amp;&amp; callback !== <span class=\"hljs-literal\">false</span>)<br>    callback = data, data = selector, selector = <span class=\"hljs-literal\">undefined</span><br>  <span class=\"hljs-keyword\">if</span> (callback === <span class=\"hljs-literal\">undefined</span> || data === <span class=\"hljs-literal\">false</span>)<br>    callback = data, data = <span class=\"hljs-literal\">undefined</span><br><br>  <span class=\"hljs-keyword\">if</span> (callback === <span class=\"hljs-literal\">false</span>) callback = returnFalse<br><br>  <span class=\"hljs-keyword\">return</span> $<span class=\"hljs-keyword\">this</span>.each(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">_, element</span>)</span>&#123;<br>    <span class=\"hljs-comment\">//如果是有one=true，先删掉事件，再执行事件</span><br>    <span class=\"hljs-keyword\">if</span> (one) autoRemove = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>&#123;<br>      remove(element, e.type, callback)<br>      <span class=\"hljs-keyword\">return</span> callback.apply(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>)<br>    &#125;<br>    <span class=\"hljs-comment\">//按照选择器找到元素</span><br>    <span class=\"hljs-keyword\">if</span> (selector) delegator = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>&#123;<br>      <span class=\"hljs-keyword\">var</span> evt, match = $(e.target).closest(selector, element).get(<span class=\"hljs-number\">0</span>)<br>      <span class=\"hljs-keyword\">if</span> (match &amp;&amp; match !== element) &#123;<br>        evt = $.extend(createProxy(e), &#123;<span class=\"hljs-attr\">currentTarget</span>: match, <span class=\"hljs-attr\">liveFired</span>: element&#125;)<br>        <span class=\"hljs-keyword\">return</span> (autoRemove || callback).apply(match, [evt].concat(slice.call(<span class=\"hljs-built_in\">arguments</span>, <span class=\"hljs-number\">1</span>)))<br>      &#125;<br>    &#125;<br><br>    add(element, event, callback, data, selector, delegator || autoRemove)<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>参数说明：</p>\n<ul>\n<li>event:事件类型，可以通过空格的字符串方式添加(“click mousedown”)，或者事件类型为键，函数为值的方式({click:function,mousedown:function})。</li>\n<li>selector:可选参数，事件委托的节点选择器</li>\n<li>data:事件处理程序中的event.data属性</li>\n<li>callback:事件处理程序的回调函数</li>\n<li>one:绑定事件后，只触发一次回调</li>\n</ul>\n<p>使用方式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> elem = $(<span class=\"hljs-string\">'#content'</span>)<br><span class=\"hljs-comment\">// observe all clicks inside #content:</span><br>elem.on(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>&#123; ... &#125;)<br><span class=\"hljs-comment\">// observe clicks inside navigation links in #content</span><br>elem.on(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-string\">'nav a'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>&#123; ... &#125;)<br><span class=\"hljs-comment\">// all clicks inside links in the document</span><br>$(<span class=\"hljs-built_in\">document</span>).on(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>&#123; ... &#125;)<br><span class=\"hljs-comment\">// disable following any navigation link on the page</span><br>$(<span class=\"hljs-built_in\">document</span>).on(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-string\">'nav a'</span>, <span class=\"hljs-literal\">false</span>)<br></code></pre></td></tr></table></figure>\n\n<p>很多其他api是内部通过调用on方法实现的，如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//基于一组特定的根元素为所有选择器匹配的元素附加一个处理事件，匹配的元素可能现在或将来才创建。</span><br>$.fn.delegate = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">selector, event, callback</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.on(event, selector, callback)<br>&#125;<br><span class=\"hljs-comment\">//添加一个处理事件到元素，当第一次执行事件以后，该事件将自动解除绑定，保证处理函数在每个元素上最多执行一次。</span><br>$.fn.one = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">event, selector, data, callback</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.on(event, selector, data, callback, <span class=\"hljs-number\">1</span>)<br>&#125;<br><span class=\"hljs-comment\">//为一个元素绑定一个处理事件。</span><br>$.fn.bind = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">event, data, callback</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.on(event, data, callback)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"off：移除事件\"><a href=\"#off：移除事件\" class=\"headerlink\" title=\"off：移除事件\"></a>off：移除事件</h2><p>off模块也是主要的核心模块，主要做移除事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">$.fn.off = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">event, selector, callback</span>)</span>&#123;<br>    <span class=\"hljs-keyword\">var</span> $<span class=\"hljs-keyword\">this</span> = <span class=\"hljs-keyword\">this</span><br>    <span class=\"hljs-keyword\">if</span> (event &amp;&amp; !isString(event)) &#123;<br>        $.each(event, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">type, fn</span>)</span>&#123;<br>            $<span class=\"hljs-keyword\">this</span>.off(type, selector, fn)<br>        &#125;)<br>        <span class=\"hljs-keyword\">return</span> $<span class=\"hljs-keyword\">this</span><br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span> (!isString(selector) &amp;&amp; !isFunction(callback) &amp;&amp; callback !== <span class=\"hljs-literal\">false</span>)<br>        callback = selector, selector = <span class=\"hljs-literal\">undefined</span><br><br>    <span class=\"hljs-keyword\">if</span> (callback === <span class=\"hljs-literal\">false</span>) callback = returnFalse<br><br>    <span class=\"hljs-keyword\">return</span> $<span class=\"hljs-keyword\">this</span>.each(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>        remove(<span class=\"hljs-keyword\">this</span>, event, callback, selector)<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>一些api是内部通过调用off方法实现的，如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//移除Bind绑定的事件</span><br>$.fn.unbind = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">event, callback</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.off(event, callback)<br>&#125;<br><span class=\"hljs-comment\">//移除通过delegate 注册的事件。</span><br>$.fn.undelegate = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">selector, event, callback</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.off(event, selector, callback)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"trigge与triggerHandler\"><a href=\"#trigge与triggerHandler\" class=\"headerlink\" title=\"trigge与triggerHandler\"></a>trigge与triggerHandler</h2><p>在对象集合的元素上触发指定的事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">$.fn.trigger = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">event, args</span>) </span>&#123;<br>    event = (isString(event) || $.isPlainObject(event))<br>        ? $.Event(event)<br>        : compatible(event)<br>    event._args = args<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.each(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>        <span class=\"hljs-comment\">// handle focus(), blur() by calling them directly</span><br>        <span class=\"hljs-keyword\">if</span> (event.type <span class=\"hljs-keyword\">in</span> focus &amp;&amp; <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-keyword\">this</span>[event.type] == <span class=\"hljs-string\">\"function\"</span>)<br>            <span class=\"hljs-keyword\">this</span>[event.type]()<br>        <span class=\"hljs-comment\">// items in the collection might not be DOM elements</span><br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">'dispatchEvent'</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">this</span>)<br>            <span class=\"hljs-keyword\">this</span>.dispatchEvent(event)<br>        <span class=\"hljs-keyword\">else</span><br>            $(<span class=\"hljs-keyword\">this</span>).triggerHandler(event, args)<br>    &#125;)<br>&#125;<br>$.fn.triggerHandler = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">event, args</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">var</span> e,<br>        result<br>    <span class=\"hljs-keyword\">this</span>.each(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">i, element</span>) </span>&#123;<br>        e = createProxy(isString(event)<br>            ? $.Event(event)<br>            : event)<br>        e._args = args<br>        e.target = element<br>        $.each(findHandlers(element, event.type || event), <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">i, handler</span>) </span>&#123;<br>            result = handler.proxy(e)<br>            <span class=\"hljs-keyword\">if</span> (e.isImmediatePropagationStopped())<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>        &#125;)<br>    &#125;)<br>    <span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>triggle模拟整个冒泡过程，除了自身，还触发祖先节点与window的同类型的回调，在游览器底层上，使用的方法是dispatchEvent，如果是在ie上是fireEvent。</p>\n<h2 id=\"Event：自定义事件\"><a href=\"#Event：自定义事件\" class=\"headerlink\" title=\"$.Event：自定义事件\"></a>$.Event：自定义事件</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">$.Event = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">type, props</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (!isString(type))<br>        props = type,<br>            type = props.type<br>    <span class=\"hljs-keyword\">var</span> event = <span class=\"hljs-built_in\">document</span>.createEvent(specialEvents[type] || <span class=\"hljs-string\">'Events'</span>),<br>        bubbles = <span class=\"hljs-literal\">true</span><br>    <span class=\"hljs-keyword\">if</span> (props)<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> name <span class=\"hljs-keyword\">in</span> props)<br>            (name == <span class=\"hljs-string\">'bubbles'</span>)<br>                ? (bubbles = !!props[name])<br>                : (event[name] = props[name])<br>    event.initEvent(type, bubbles, <span class=\"hljs-literal\">true</span>)<br>    <span class=\"hljs-keyword\">return</span> compatible(event)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>底层采用的是游览器的createEvent和initEvent方法来模拟事件，从而实现自定义事件的功能。</p>\n<h1 id=\"一些补充\"><a href=\"#一些补充\" class=\"headerlink\" title=\"一些补充\"></a>一些补充</h1><p>1.很多框架对于事件代理不采用捕获而采用冒泡的原因，是考虑兼容性</p>\n<p>2.zepto因为自身主要做移动端的原因，所以对于低版本ie浏览器是不考虑的，我在上述中或多或少做了补充 3.zepto的很大一部分事件实际是在touch模块，这块主要是触摸事件，内容也比较多，打算留到下篇再写</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0052.jpg\" alt=\"\"> Zepto的事件模块有些简化，因为Zepto作为一个针对移动端游览器的框架，所以游览器的事件系统本身相对完善，不需要做过多事件机制中最复杂的兼容处理。所以在分析后打算总结下针对PC端框架中兼容处理的。</p>\n<h2 id=\"游览器事件API\"><a href=\"#游览器事件API\" class=\"headerlink\" title=\"游览器事件API\"></a>游览器事件API</h2><p>dom提供了三种层级的事件api：html事件、dom0级事件、dom2级事件（可以绑定多个回调）。整个事件机制主要简历在dom0级与dom2级两个标准上：<a href=\"http://bugzhang.com/2017/08/13/chang-yong-de-javascriptdai-ma-duan-2-dom-shi-jian-ajax-cookie/\">http://bugzhang.com/2017/08/13/chang-yong-de-javascriptdai-ma-duan-2-dom-shi-jian-ajax-cookie/</a> ，改博文里第一段代码就是相关的实现，此处不再阐述。</p>\n<h2 id=\"与dom-0级事件的缺陷\"><a href=\"#与dom-0级事件的缺陷\" class=\"headerlink\" title=\"与dom 0级事件的缺陷\"></a>与dom 0级事件的缺陷</h2><ul>\n<li>对于DOM3新增事件不支持，如：FocusIn,FocsuOut,MouseRemoved,MouseScrill等，但这些事件用的很少</li>\n<li>每次只可以绑定一个回调，重复绑定就会取消掉上次的绑定</li>\n<li>在ie下回调没有参数，在其他游览器回调第一个参数是事件对象</li>\n<li>只能再冒泡阶段可用</li>\n</ul>\n<h2 id=\"ie事件addachEvent的缺陷\"><a href=\"#ie事件addachEvent的缺陷\" class=\"headerlink\" title=\"ie事件addachEvent的缺陷\"></a>ie事件addachEvent的缺陷</h2><ul>\n<li>this指向的是window，存在内存泄漏</li>\n<li>多钟时间绑定回调后，执行顺序不是按照绑定时的顺序触发</li>\n<li>与W3C有一些事件有区别</li>\n<li><strong>只支持冒泡阶段</strong></li>\n</ul>\n<h2 id=\"addEventListenner的缺陷\"><a href=\"#addEventListenner的缺陷\" class=\"headerlink\" title=\"addEventListenner的缺陷\"></a>addEventListenner的缺陷</h2><ul>\n<li>部分游览器与标准的事件定义不一致</li>\n<li>第四个参数是ff跨文档监听事件，第五个参数是flash下制定监听函数的引用强弱</li>\n<li>事件对象不稳定，各个游览器有区别</li>\n<li>input事件不如ie的propertychange事件好用</li>\n</ul>\n<h2 id=\"Zepto的Event模块核心方法\"><a href=\"#Zepto的Event模块核心方法\" class=\"headerlink\" title=\"Zepto的Event模块核心方法\"></a>Zepto的Event模块核心方法</h2><h2 id=\"add：内部用来添加事件的方法\"><a href=\"#add：内部用来添加事件的方法\" class=\"headerlink\" title=\"add：内部用来添加事件的方法\"></a>add：内部用来添加事件的方法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\">element, events, fn, data, selector, delegator, capture</span>) </span>&#123;<br>    <span class=\"hljs-comment\">//拓展标识属性zid</span><br>    <span class=\"hljs-keyword\">var</span> id = zid(element),<br>        <span class=\"hljs-keyword\">set</span> = (handlers[id] || (handlers[id] = []))<br>    events<br>        //匹配空格，获取多个event<br>        .split(/\\s/)<br>        .forEach(function (event) &#123;<br>            <span class=\"hljs-keyword\">if</span> (event == <span class=\"hljs-string\">'ready'</span>)<br>                <span class=\"hljs-keyword\">return</span> $(<span class=\"hljs-built_in\">document</span>).ready(fn)<br>            <span class=\"hljs-keyword\">var</span> handler = parse(event)<br>            handler.fn = fn<br>            handler.sel = selector<br>            <span class=\"hljs-comment\">// 如果事件是emulate mouseenter, mouseleave</span><br>            <span class=\"hljs-keyword\">if</span> (handler.e <span class=\"hljs-keyword\">in</span> hover)<br>                fn = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) </span>&#123;<br>                    <span class=\"hljs-keyword\">var</span> related = e.relatedTarget<br>                    <span class=\"hljs-keyword\">if</span> (!related || (related !== <span class=\"hljs-keyword\">this</span> &amp;&amp; !$.contains(<span class=\"hljs-keyword\">this</span>, related)))<br>                        <span class=\"hljs-keyword\">return</span> handler.fn.apply(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>)<br>                &#125;<br>            <span class=\"hljs-comment\">//事件代理</span><br>            handler.del = delegator<br>            <span class=\"hljs-keyword\">var</span> callback = delegator || fn<br>            handler.proxy = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) </span>&#123;<br>                e = compatible(e)<br>                <span class=\"hljs-keyword\">if</span> (e.isImmediatePropagationStopped())<br>                    <span class=\"hljs-keyword\">return</span><br>                e.data = data<br>                <span class=\"hljs-keyword\">var</span> result = callback.apply(element, e._args == <span class=\"hljs-literal\">undefined</span><br>                    ? [e]<br>                    : [e].concat(e._args))<br>                <span class=\"hljs-keyword\">if</span> (result === <span class=\"hljs-literal\">false</span>)<br>                    e.preventDefault(),<br>                        e.stopPropagation()<br>                <span class=\"hljs-keyword\">return</span> result<br>            &#125;<br>            handler.i = <span class=\"hljs-keyword\">set</span>.length<br>            <span class=\"hljs-keyword\">set</span>.push(handler)<br>            //如果支持dom2级事件<br>            if ('addEventListener' in element)<br>                element.addEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture))<br>        &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"remove：内部删除事件的方法\"><a href=\"#remove：内部删除事件的方法\" class=\"headerlink\" title=\"remove：内部删除事件的方法\"></a>remove：内部删除事件的方法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">remove</span>(<span class=\"hljs-params\">element, events, fn, selector, capture</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">var</span> id = zid(element)<br>    eachEvent(events || <span class=\"hljs-string\">''</span>, fn, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">event, fn</span>) </span>&#123;<br>        findHandlers(element, event, fn, selector).forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">handler</span>) </span>&#123;<br>            <span class=\"hljs-keyword\">delete</span> handlers[id][handler.i]<br>            element.removeEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture))<br>        &#125;)<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>就是调用removeEventListener</p>\n<h2 id=\"on：添加事件\"><a href=\"#on：添加事件\" class=\"headerlink\" title=\"on：添加事件\"></a>on：添加事件</h2><p>on是zepto中最核心的事件方法，源码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">$.fn.on = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">event, selector, data, callback, one</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">var</span> autoRemove, delegator, $<span class=\"hljs-keyword\">this</span> = <span class=\"hljs-keyword\">this</span><br>  <span class=\"hljs-keyword\">if</span> (event &amp;&amp; !isString(event)) &#123;<br>    $.each(event, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">type, fn</span>)</span>&#123;<br>      $<span class=\"hljs-keyword\">this</span>.on(type, selector, data, fn, one)<br>    &#125;)<br>    <span class=\"hljs-keyword\">return</span> $<span class=\"hljs-keyword\">this</span><br>  &#125;<br><br>  <span class=\"hljs-keyword\">if</span> (!isString(selector) &amp;&amp; !isFunction(callback) &amp;&amp; callback !== <span class=\"hljs-literal\">false</span>)<br>    callback = data, data = selector, selector = <span class=\"hljs-literal\">undefined</span><br>  <span class=\"hljs-keyword\">if</span> (callback === <span class=\"hljs-literal\">undefined</span> || data === <span class=\"hljs-literal\">false</span>)<br>    callback = data, data = <span class=\"hljs-literal\">undefined</span><br><br>  <span class=\"hljs-keyword\">if</span> (callback === <span class=\"hljs-literal\">false</span>) callback = returnFalse<br><br>  <span class=\"hljs-keyword\">return</span> $<span class=\"hljs-keyword\">this</span>.each(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">_, element</span>)</span>&#123;<br>    <span class=\"hljs-comment\">//如果是有one=true，先删掉事件，再执行事件</span><br>    <span class=\"hljs-keyword\">if</span> (one) autoRemove = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>&#123;<br>      remove(element, e.type, callback)<br>      <span class=\"hljs-keyword\">return</span> callback.apply(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>)<br>    &#125;<br>    <span class=\"hljs-comment\">//按照选择器找到元素</span><br>    <span class=\"hljs-keyword\">if</span> (selector) delegator = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>&#123;<br>      <span class=\"hljs-keyword\">var</span> evt, match = $(e.target).closest(selector, element).get(<span class=\"hljs-number\">0</span>)<br>      <span class=\"hljs-keyword\">if</span> (match &amp;&amp; match !== element) &#123;<br>        evt = $.extend(createProxy(e), &#123;<span class=\"hljs-attr\">currentTarget</span>: match, <span class=\"hljs-attr\">liveFired</span>: element&#125;)<br>        <span class=\"hljs-keyword\">return</span> (autoRemove || callback).apply(match, [evt].concat(slice.call(<span class=\"hljs-built_in\">arguments</span>, <span class=\"hljs-number\">1</span>)))<br>      &#125;<br>    &#125;<br><br>    add(element, event, callback, data, selector, delegator || autoRemove)<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>参数说明：</p>\n<ul>\n<li>event:事件类型，可以通过空格的字符串方式添加(“click mousedown”)，或者事件类型为键，函数为值的方式({click:function,mousedown:function})。</li>\n<li>selector:可选参数，事件委托的节点选择器</li>\n<li>data:事件处理程序中的event.data属性</li>\n<li>callback:事件处理程序的回调函数</li>\n<li>one:绑定事件后，只触发一次回调</li>\n</ul>\n<p>使用方式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> elem = $(<span class=\"hljs-string\">'#content'</span>)<br><span class=\"hljs-comment\">// observe all clicks inside #content:</span><br>elem.on(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>&#123; ... &#125;)<br><span class=\"hljs-comment\">// observe clicks inside navigation links in #content</span><br>elem.on(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-string\">'nav a'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>&#123; ... &#125;)<br><span class=\"hljs-comment\">// all clicks inside links in the document</span><br>$(<span class=\"hljs-built_in\">document</span>).on(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>&#123; ... &#125;)<br><span class=\"hljs-comment\">// disable following any navigation link on the page</span><br>$(<span class=\"hljs-built_in\">document</span>).on(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-string\">'nav a'</span>, <span class=\"hljs-literal\">false</span>)<br></code></pre></td></tr></table></figure>\n\n<p>很多其他api是内部通过调用on方法实现的，如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//基于一组特定的根元素为所有选择器匹配的元素附加一个处理事件，匹配的元素可能现在或将来才创建。</span><br>$.fn.delegate = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">selector, event, callback</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.on(event, selector, callback)<br>&#125;<br><span class=\"hljs-comment\">//添加一个处理事件到元素，当第一次执行事件以后，该事件将自动解除绑定，保证处理函数在每个元素上最多执行一次。</span><br>$.fn.one = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">event, selector, data, callback</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.on(event, selector, data, callback, <span class=\"hljs-number\">1</span>)<br>&#125;<br><span class=\"hljs-comment\">//为一个元素绑定一个处理事件。</span><br>$.fn.bind = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">event, data, callback</span>)</span>&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.on(event, data, callback)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"off：移除事件\"><a href=\"#off：移除事件\" class=\"headerlink\" title=\"off：移除事件\"></a>off：移除事件</h2><p>off模块也是主要的核心模块，主要做移除事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">$.fn.off = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">event, selector, callback</span>)</span>&#123;<br>    <span class=\"hljs-keyword\">var</span> $<span class=\"hljs-keyword\">this</span> = <span class=\"hljs-keyword\">this</span><br>    <span class=\"hljs-keyword\">if</span> (event &amp;&amp; !isString(event)) &#123;<br>        $.each(event, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">type, fn</span>)</span>&#123;<br>            $<span class=\"hljs-keyword\">this</span>.off(type, selector, fn)<br>        &#125;)<br>        <span class=\"hljs-keyword\">return</span> $<span class=\"hljs-keyword\">this</span><br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span> (!isString(selector) &amp;&amp; !isFunction(callback) &amp;&amp; callback !== <span class=\"hljs-literal\">false</span>)<br>        callback = selector, selector = <span class=\"hljs-literal\">undefined</span><br><br>    <span class=\"hljs-keyword\">if</span> (callback === <span class=\"hljs-literal\">false</span>) callback = returnFalse<br><br>    <span class=\"hljs-keyword\">return</span> $<span class=\"hljs-keyword\">this</span>.each(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>        remove(<span class=\"hljs-keyword\">this</span>, event, callback, selector)<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>一些api是内部通过调用off方法实现的，如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//移除Bind绑定的事件</span><br>$.fn.unbind = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">event, callback</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.off(event, callback)<br>&#125;<br><span class=\"hljs-comment\">//移除通过delegate 注册的事件。</span><br>$.fn.undelegate = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">selector, event, callback</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.off(event, selector, callback)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"trigge与triggerHandler\"><a href=\"#trigge与triggerHandler\" class=\"headerlink\" title=\"trigge与triggerHandler\"></a>trigge与triggerHandler</h2><p>在对象集合的元素上触发指定的事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">$.fn.trigger = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">event, args</span>) </span>&#123;<br>    event = (isString(event) || $.isPlainObject(event))<br>        ? $.Event(event)<br>        : compatible(event)<br>    event._args = args<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.each(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>        <span class=\"hljs-comment\">// handle focus(), blur() by calling them directly</span><br>        <span class=\"hljs-keyword\">if</span> (event.type <span class=\"hljs-keyword\">in</span> focus &amp;&amp; <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-keyword\">this</span>[event.type] == <span class=\"hljs-string\">\"function\"</span>)<br>            <span class=\"hljs-keyword\">this</span>[event.type]()<br>        <span class=\"hljs-comment\">// items in the collection might not be DOM elements</span><br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">'dispatchEvent'</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">this</span>)<br>            <span class=\"hljs-keyword\">this</span>.dispatchEvent(event)<br>        <span class=\"hljs-keyword\">else</span><br>            $(<span class=\"hljs-keyword\">this</span>).triggerHandler(event, args)<br>    &#125;)<br>&#125;<br>$.fn.triggerHandler = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">event, args</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">var</span> e,<br>        result<br>    <span class=\"hljs-keyword\">this</span>.each(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">i, element</span>) </span>&#123;<br>        e = createProxy(isString(event)<br>            ? $.Event(event)<br>            : event)<br>        e._args = args<br>        e.target = element<br>        $.each(findHandlers(element, event.type || event), <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">i, handler</span>) </span>&#123;<br>            result = handler.proxy(e)<br>            <span class=\"hljs-keyword\">if</span> (e.isImmediatePropagationStopped())<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>        &#125;)<br>    &#125;)<br>    <span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>triggle模拟整个冒泡过程，除了自身，还触发祖先节点与window的同类型的回调，在游览器底层上，使用的方法是dispatchEvent，如果是在ie上是fireEvent。</p>\n<h2 id=\"Event：自定义事件\"><a href=\"#Event：自定义事件\" class=\"headerlink\" title=\"$.Event：自定义事件\"></a>$.Event：自定义事件</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">$.Event = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">type, props</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (!isString(type))<br>        props = type,<br>            type = props.type<br>    <span class=\"hljs-keyword\">var</span> event = <span class=\"hljs-built_in\">document</span>.createEvent(specialEvents[type] || <span class=\"hljs-string\">'Events'</span>),<br>        bubbles = <span class=\"hljs-literal\">true</span><br>    <span class=\"hljs-keyword\">if</span> (props)<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> name <span class=\"hljs-keyword\">in</span> props)<br>            (name == <span class=\"hljs-string\">'bubbles'</span>)<br>                ? (bubbles = !!props[name])<br>                : (event[name] = props[name])<br>    event.initEvent(type, bubbles, <span class=\"hljs-literal\">true</span>)<br>    <span class=\"hljs-keyword\">return</span> compatible(event)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>底层采用的是游览器的createEvent和initEvent方法来模拟事件，从而实现自定义事件的功能。</p>\n<h1 id=\"一些补充\"><a href=\"#一些补充\" class=\"headerlink\" title=\"一些补充\"></a>一些补充</h1><p>1.很多框架对于事件代理不采用捕获而采用冒泡的原因，是考虑兼容性</p>\n<p>2.zepto因为自身主要做移动端的原因，所以对于低版本ie浏览器是不考虑的，我在上述中或多或少做了补充 3.zepto的很大一部分事件实际是在touch模块，这块主要是触摸事件，内容也比较多，打算留到下篇再写</p>\n"},{"title":"Zepto源码分析——Zepto选择器","url":"64.html","id":"64","date":"2017-09-13T06:17:11.000Z","_content":"\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0050.jpg)\n\n> 选择器引擎是框架中实现操作的主要方式，可以快速选取到所需元素，通过我们更加熟知的css选择器，zepto的选择器分两大块，一块在zepto.js中的核心选择器qsa方法，另外是selector.js文件，里边封装有一些扩充选择器的实现。\n\n选择器引擎概述\n-------\nCSS选择符是一条CSS样式中最左边的部分，选择符分为了五大类：元素、关系、伪类、并联、伪元素。其中只有伪元素选择器不能直接被js所选取到。 一般认为，框架的选择器引擎需要包括以下几个基本方法：\n\n*   contain(a,b):判断a中是否包含b，主要用作优化\n*   visible()与hidden():判断是否可见\n*   selected():选中了元素\n*   sortNode():节点的排序与去重，主要为了使更类似于原生方法的排序\n*   filter():过滤器，对于不支持querySelectorAll的游览器，需要对用户的api进行过滤，这个步骤类似词法分析，可以拆分出有用的选择符，对其使用应该的API\n\n不过zepto比较奇葩的一点是，zepto主要面向移动端，移动端游览器坑少，所以zepto就直接拿querySelectorAll来匹配非规定外的元素了，好处自不必说，代码少实现简单。坏处就是兼容性不好，也学不到真正选择器引擎的核心，但zepto的优化做的还是很好，也是值得看。而且querySelectorAll这也是未来的趋势。\n\nZepto核心选择器\n----------\n\n首先是选择器的实现：\n```js\n    zepto.qsa = function (element, selector) {\n        var found,\n        maybeID = selector[0] == '#',\n        maybeClass = !maybeID && selector[0] == '.',\n        nameOnly = maybeID || maybeClass ? selector.slice(1) : selector, // Ensure that a 1 char tag name still gets checked\n        isSimple = simpleSelectorRE.test(nameOnly)\n      return (element.getElementById && isSimple && maybeID) ? // Safari DocumentFragment doesn't have getElementById\n        ((found = element.getElementById(nameOnly)) ? [found] : []) :\n        (element.nodeType !== 1 && element.nodeType !== 9 && element.nodeType !== 11) ? [] :\n        slice.call(\n          isSimple && !maybeID && element.getElementsByClassName ? // DocumentFragment doesn't have getElementsByClassName/TagName\n          maybeClass ? element.getElementsByClassName(nameOnly) : // If it's simple, it could be a class\n          element.getElementsByTagName(selector) : // Or a tag\n          element.querySelectorAll(selector) // Or it's not simple, and we need to query all\n        )\n    }\n```\n\n判断了选择器类型，是id、class、标签还是复杂选择器，然后分别调用getElementById()、getElementsByClassName()、getElementsByTagName()、querySelectorAll()。 其次是否匹配选择器：\n```js\n    zepto.matches = function (element, selector) {\n        if (!selector || !element || element.nodeType !== 1) return false\n        var matchesSelector = element.matches || element.webkitMatchesSelector ||\n          element.mozMatchesSelector || element.oMatchesSelector ||\n          element.matchesSelector\n        if (matchesSelector) return matchesSelector.call(element, selector)\n        // fall back to performing a selector:\n        var match, parent = element.parentNode,\n          temp = !parent\n        if (temp)(parent = tempParent).appendChild(element)\n        match = ~zepto.qsa(parent, selector).indexOf(element)\n        temp &amp;&amp; tempParent.removeChild(element)\n        return match\n      }\n```\n\n主要是用来判断当前DOM节点否能完全匹配对应的CSS选择器规则。这个matches方法可以在事件委托等地方被用得上，用来判定匹配到当前标签的元素，当匹配到后添加事件。但原生的兼容性很差，因此框架在这里做了兼容性处理。\n\nZepto拓展选择器\n----------\n\n把全部文件站过来，将源码解读写到注释中\n```js\n    (function ($) {\n        var zepto = $.zepto,\n            oldQsa = zepto.qsa,\n            oldMatches = zepto.matches\n        function visible(elem) {\n            elem = $(elem)\n            return !!(elem.width() || elem.height()) &amp;&amp; elem.css(&quot;display&quot;) !== &quot;none&quot;\n        }\n        //这是一套过滤器系统\n        var filters = $.expr[':'] = {\n            visible: function () {\n                if (visible(this))\n                    return this\n            },\n            hidden: function () {\n                if (!visible(this))\n                    return this\n            },\n            selected: function () {\n                if (this.selected)\n                    return this\n            },\n            checked: function () {\n                if (this.checked)\n                    return this\n            },\n            parent: function () {\n                return this.parentNode\n            },\n            first: function (idx) {\n                if (idx === 0)\n                    return this\n            },\n            last: function (idx, nodes) {\n                if (idx === nodes.length - 1)\n                    return this\n            },\n            eq: function (idx, _, value) {\n                if (idx === value)\n                    return this\n            },\n            contains: function (idx, _, text) {\n                if ($(this).text().indexOf(text) &gt; -1)\n                    return this\n            },\n            has: function (idx, _, sel) {\n                if (zepto.qsa(this, sel).length)\n                    return this\n            }\n        }\n\n        var filterRe = new RegExp('(.*):(\\\\w+)(?:\\\\(([^)]+)\\\\))?$\\\\s*'),\n            childRe = /^\\s*&gt;/,\n            classTag = 'Zepto' + (+ new Date())\n        //分解选择器为三部分，选择器、选择器的过滤器方法、参数\n        function process(sel, fn) {\n            // quote the hash in `a[href^=#]` expression\n            sel = sel.replace(/=#\\]/g, '=&quot;#&quot;]')\n            var filter,\n                arg,\n                match = filterRe.exec(sel)\n            if (match &amp;&amp; match[2] in filters) {\n                filter = filters[match[2]],\n                    arg = match[3]\n                sel = match[1]\n                if (arg) {\n                    var num = Number(arg)\n                    if (isNaN(num))\n                        arg = arg.replace(/^[&quot;']|[&quot;']$/g, '')\n                    else\n                        arg = num\n                }\n            }\n            return fn(sel, filter, arg)\n        }\n\n        zepto.qsa = function (node, selector) {\n            return process(selector, function (sel, filter, arg) {\n                try {\n                    var taggedParent\n                    if (!sel &amp;&amp; filter)\n                        sel = '*'\n                    else if (childRe.test(sel))\n                    // support &quot;&gt; *&quot; child queries by tagging the parent node with a unique class\n                    // and prepending that classname onto the selector\n                        taggedParent = $(node).addClass(classTag),\n                            sel = '.' + classTag + ' ' + sel\n\n                    var nodes = oldQsa(node, sel)\n                } catch (e) {\n                    console.error('error performing selector: %o', selector)\n                    throw e\n                } finally {\n                    if (taggedParent)\n                        taggedParent.removeClass(classTag)\n                }\n                return !filter\n                    ? nodes\n                    : zepto.uniq($.map(nodes, function (n, i) {\n                        return filter.call(n, i, nodes, arg)\n                    }))\n            })\n        }\n\n        zepto.matches = function (node, selector) {\n            return process(selector, function (sel, filter, arg) {\n                return (!sel || oldMatches(node, sel)) &amp;&amp; (!filter || filter.call(node, null, arg) === node)\n            })\n        }\n    })(Zepto)\n```\n\n从源码看出，虽然zepto主要采用的是getElementById()、getElementsByClassName()、getElementsByTagName()、querySelectorAll()这些内置的api完成，思路是分解->匹配->调用原生api->组装zepto对象。 根据不同的情况，给出了不同的提速方案，getElementById是最优先的，因为该api内部做了缓存而且只返回一个节点；getElementsByClassName()、getElementsByTagName()也是比较快的，返回多个节点并且又缓存；只有无法完成时候才进行querySelectorAll()。此外注意的是，getElementsByClassName()、getElementsByTagName()返回的是一个NodeList对象，而querySelectorAll返回的是一个StaticNodeList对象，前者动态后者静态，前者每次匹配到的都是同是缓存引用，后者返回的是不同的Object对象，数据表明前者的速度要快百分之90%以上，这就是为什么尽量用getElementsByClassName()、getElementsByTagName()的原因。","source":"_posts/zepto-e6-ba-90-e7-a0-81-e5-88-86-e6-9e-90-zepto-e9-80-89-e6-8b-a9-e5-99-a8.md","raw":"---\ntitle: Zepto源码分析——Zepto选择器\ntags:\n  - zepto.js\n  - 源码分析\nurl: 64.html\nid: 64\ncategories:\n  - 前端\ndate: 2017-09-13 14:17:11\n---\n\n![](http://7xqgks.com1.z0.glb.clouddn.com/head-0050.jpg)\n\n> 选择器引擎是框架中实现操作的主要方式，可以快速选取到所需元素，通过我们更加熟知的css选择器，zepto的选择器分两大块，一块在zepto.js中的核心选择器qsa方法，另外是selector.js文件，里边封装有一些扩充选择器的实现。\n\n选择器引擎概述\n-------\nCSS选择符是一条CSS样式中最左边的部分，选择符分为了五大类：元素、关系、伪类、并联、伪元素。其中只有伪元素选择器不能直接被js所选取到。 一般认为，框架的选择器引擎需要包括以下几个基本方法：\n\n*   contain(a,b):判断a中是否包含b，主要用作优化\n*   visible()与hidden():判断是否可见\n*   selected():选中了元素\n*   sortNode():节点的排序与去重，主要为了使更类似于原生方法的排序\n*   filter():过滤器，对于不支持querySelectorAll的游览器，需要对用户的api进行过滤，这个步骤类似词法分析，可以拆分出有用的选择符，对其使用应该的API\n\n不过zepto比较奇葩的一点是，zepto主要面向移动端，移动端游览器坑少，所以zepto就直接拿querySelectorAll来匹配非规定外的元素了，好处自不必说，代码少实现简单。坏处就是兼容性不好，也学不到真正选择器引擎的核心，但zepto的优化做的还是很好，也是值得看。而且querySelectorAll这也是未来的趋势。\n\nZepto核心选择器\n----------\n\n首先是选择器的实现：\n```js\n    zepto.qsa = function (element, selector) {\n        var found,\n        maybeID = selector[0] == '#',\n        maybeClass = !maybeID && selector[0] == '.',\n        nameOnly = maybeID || maybeClass ? selector.slice(1) : selector, // Ensure that a 1 char tag name still gets checked\n        isSimple = simpleSelectorRE.test(nameOnly)\n      return (element.getElementById && isSimple && maybeID) ? // Safari DocumentFragment doesn't have getElementById\n        ((found = element.getElementById(nameOnly)) ? [found] : []) :\n        (element.nodeType !== 1 && element.nodeType !== 9 && element.nodeType !== 11) ? [] :\n        slice.call(\n          isSimple && !maybeID && element.getElementsByClassName ? // DocumentFragment doesn't have getElementsByClassName/TagName\n          maybeClass ? element.getElementsByClassName(nameOnly) : // If it's simple, it could be a class\n          element.getElementsByTagName(selector) : // Or a tag\n          element.querySelectorAll(selector) // Or it's not simple, and we need to query all\n        )\n    }\n```\n\n判断了选择器类型，是id、class、标签还是复杂选择器，然后分别调用getElementById()、getElementsByClassName()、getElementsByTagName()、querySelectorAll()。 其次是否匹配选择器：\n```js\n    zepto.matches = function (element, selector) {\n        if (!selector || !element || element.nodeType !== 1) return false\n        var matchesSelector = element.matches || element.webkitMatchesSelector ||\n          element.mozMatchesSelector || element.oMatchesSelector ||\n          element.matchesSelector\n        if (matchesSelector) return matchesSelector.call(element, selector)\n        // fall back to performing a selector:\n        var match, parent = element.parentNode,\n          temp = !parent\n        if (temp)(parent = tempParent).appendChild(element)\n        match = ~zepto.qsa(parent, selector).indexOf(element)\n        temp &amp;&amp; tempParent.removeChild(element)\n        return match\n      }\n```\n\n主要是用来判断当前DOM节点否能完全匹配对应的CSS选择器规则。这个matches方法可以在事件委托等地方被用得上，用来判定匹配到当前标签的元素，当匹配到后添加事件。但原生的兼容性很差，因此框架在这里做了兼容性处理。\n\nZepto拓展选择器\n----------\n\n把全部文件站过来，将源码解读写到注释中\n```js\n    (function ($) {\n        var zepto = $.zepto,\n            oldQsa = zepto.qsa,\n            oldMatches = zepto.matches\n        function visible(elem) {\n            elem = $(elem)\n            return !!(elem.width() || elem.height()) &amp;&amp; elem.css(&quot;display&quot;) !== &quot;none&quot;\n        }\n        //这是一套过滤器系统\n        var filters = $.expr[':'] = {\n            visible: function () {\n                if (visible(this))\n                    return this\n            },\n            hidden: function () {\n                if (!visible(this))\n                    return this\n            },\n            selected: function () {\n                if (this.selected)\n                    return this\n            },\n            checked: function () {\n                if (this.checked)\n                    return this\n            },\n            parent: function () {\n                return this.parentNode\n            },\n            first: function (idx) {\n                if (idx === 0)\n                    return this\n            },\n            last: function (idx, nodes) {\n                if (idx === nodes.length - 1)\n                    return this\n            },\n            eq: function (idx, _, value) {\n                if (idx === value)\n                    return this\n            },\n            contains: function (idx, _, text) {\n                if ($(this).text().indexOf(text) &gt; -1)\n                    return this\n            },\n            has: function (idx, _, sel) {\n                if (zepto.qsa(this, sel).length)\n                    return this\n            }\n        }\n\n        var filterRe = new RegExp('(.*):(\\\\w+)(?:\\\\(([^)]+)\\\\))?$\\\\s*'),\n            childRe = /^\\s*&gt;/,\n            classTag = 'Zepto' + (+ new Date())\n        //分解选择器为三部分，选择器、选择器的过滤器方法、参数\n        function process(sel, fn) {\n            // quote the hash in `a[href^=#]` expression\n            sel = sel.replace(/=#\\]/g, '=&quot;#&quot;]')\n            var filter,\n                arg,\n                match = filterRe.exec(sel)\n            if (match &amp;&amp; match[2] in filters) {\n                filter = filters[match[2]],\n                    arg = match[3]\n                sel = match[1]\n                if (arg) {\n                    var num = Number(arg)\n                    if (isNaN(num))\n                        arg = arg.replace(/^[&quot;']|[&quot;']$/g, '')\n                    else\n                        arg = num\n                }\n            }\n            return fn(sel, filter, arg)\n        }\n\n        zepto.qsa = function (node, selector) {\n            return process(selector, function (sel, filter, arg) {\n                try {\n                    var taggedParent\n                    if (!sel &amp;&amp; filter)\n                        sel = '*'\n                    else if (childRe.test(sel))\n                    // support &quot;&gt; *&quot; child queries by tagging the parent node with a unique class\n                    // and prepending that classname onto the selector\n                        taggedParent = $(node).addClass(classTag),\n                            sel = '.' + classTag + ' ' + sel\n\n                    var nodes = oldQsa(node, sel)\n                } catch (e) {\n                    console.error('error performing selector: %o', selector)\n                    throw e\n                } finally {\n                    if (taggedParent)\n                        taggedParent.removeClass(classTag)\n                }\n                return !filter\n                    ? nodes\n                    : zepto.uniq($.map(nodes, function (n, i) {\n                        return filter.call(n, i, nodes, arg)\n                    }))\n            })\n        }\n\n        zepto.matches = function (node, selector) {\n            return process(selector, function (sel, filter, arg) {\n                return (!sel || oldMatches(node, sel)) &amp;&amp; (!filter || filter.call(node, null, arg) === node)\n            })\n        }\n    })(Zepto)\n```\n\n从源码看出，虽然zepto主要采用的是getElementById()、getElementsByClassName()、getElementsByTagName()、querySelectorAll()这些内置的api完成，思路是分解->匹配->调用原生api->组装zepto对象。 根据不同的情况，给出了不同的提速方案，getElementById是最优先的，因为该api内部做了缓存而且只返回一个节点；getElementsByClassName()、getElementsByTagName()也是比较快的，返回多个节点并且又缓存；只有无法完成时候才进行querySelectorAll()。此外注意的是，getElementsByClassName()、getElementsByTagName()返回的是一个NodeList对象，而querySelectorAll返回的是一个StaticNodeList对象，前者动态后者静态，前者每次匹配到的都是同是缓存引用，后者返回的是不同的Object对象，数据表明前者的速度要快百分之90%以上，这就是为什么尽量用getElementsByClassName()、getElementsByTagName()的原因。","slug":"zepto-e6-ba-90-e7-a0-81-e5-88-86-e6-9e-90-zepto-e9-80-89-e6-8b-a9-e5-99-a8","published":1,"updated":"2020-05-19T08:48:05.556Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckahts81y0074zmz86v0c89rf","content":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0050.jpg\" alt=\"\"></p>\n<blockquote>\n<p>选择器引擎是框架中实现操作的主要方式，可以快速选取到所需元素，通过我们更加熟知的css选择器，zepto的选择器分两大块，一块在zepto.js中的核心选择器qsa方法，另外是selector.js文件，里边封装有一些扩充选择器的实现。</p>\n</blockquote>\n<h2 id=\"选择器引擎概述\"><a href=\"#选择器引擎概述\" class=\"headerlink\" title=\"选择器引擎概述\"></a>选择器引擎概述</h2><p>CSS选择符是一条CSS样式中最左边的部分，选择符分为了五大类：元素、关系、伪类、并联、伪元素。其中只有伪元素选择器不能直接被js所选取到。 一般认为，框架的选择器引擎需要包括以下几个基本方法：</p>\n<ul>\n<li>contain(a,b):判断a中是否包含b，主要用作优化</li>\n<li>visible()与hidden():判断是否可见</li>\n<li>selected():选中了元素</li>\n<li>sortNode():节点的排序与去重，主要为了使更类似于原生方法的排序</li>\n<li>filter():过滤器，对于不支持querySelectorAll的游览器，需要对用户的api进行过滤，这个步骤类似词法分析，可以拆分出有用的选择符，对其使用应该的API</li>\n</ul>\n<p>不过zepto比较奇葩的一点是，zepto主要面向移动端，移动端游览器坑少，所以zepto就直接拿querySelectorAll来匹配非规定外的元素了，好处自不必说，代码少实现简单。坏处就是兼容性不好，也学不到真正选择器引擎的核心，但zepto的优化做的还是很好，也是值得看。而且querySelectorAll这也是未来的趋势。</p>\n<h2 id=\"Zepto核心选择器\"><a href=\"#Zepto核心选择器\" class=\"headerlink\" title=\"Zepto核心选择器\"></a>Zepto核心选择器</h2><p>首先是选择器的实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">zepto.qsa = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">element, selector</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">var</span> found,<br>    maybeID = selector[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">'#'</span>,<br>    maybeClass = !maybeID &amp;&amp; selector[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">'.'</span>,<br>    nameOnly = maybeID || maybeClass ? selector.slice(<span class=\"hljs-number\">1</span>) : selector, <span class=\"hljs-comment\">// Ensure that a 1 char tag name still gets checked</span><br>    isSimple = simpleSelectorRE.test(nameOnly)<br>  <span class=\"hljs-keyword\">return</span> (element.getElementById &amp;&amp; isSimple &amp;&amp; maybeID) ? <span class=\"hljs-comment\">// Safari DocumentFragment doesn't have getElementById</span><br>    ((found = element.getElementById(nameOnly)) ? [found] : []) :<br>    (element.nodeType !== <span class=\"hljs-number\">1</span> &amp;&amp; element.nodeType !== <span class=\"hljs-number\">9</span> &amp;&amp; element.nodeType !== <span class=\"hljs-number\">11</span>) ? [] :<br>    slice.call(<br>      isSimple &amp;&amp; !maybeID &amp;&amp; element.getElementsByClassName ? <span class=\"hljs-comment\">// DocumentFragment doesn't have getElementsByClassName/TagName</span><br>      maybeClass ? element.getElementsByClassName(nameOnly) : <span class=\"hljs-comment\">// If it's simple, it could be a class</span><br>      element.getElementsByTagName(selector) : <span class=\"hljs-comment\">// Or a tag</span><br>      element.querySelectorAll(selector) <span class=\"hljs-comment\">// Or it's not simple, and we need to query all</span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>判断了选择器类型，是id、class、标签还是复杂选择器，然后分别调用getElementById()、getElementsByClassName()、getElementsByTagName()、querySelectorAll()。 其次是否匹配选择器：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">zepto.matches = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">element, selector</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (!selector || !element || element.nodeType !== <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>    <span class=\"hljs-keyword\">var</span> matchesSelector = element.matches || element.webkitMatchesSelector ||<br>      element.mozMatchesSelector || element.oMatchesSelector ||<br>      element.matchesSelector<br>    <span class=\"hljs-keyword\">if</span> (matchesSelector) <span class=\"hljs-keyword\">return</span> matchesSelector.call(element, selector)<br>    <span class=\"hljs-comment\">// fall back to performing a selector:</span><br>    <span class=\"hljs-keyword\">var</span> match, parent = element.parentNode,<br>      temp = !parent<br>    <span class=\"hljs-keyword\">if</span> (temp)(parent = tempParent).appendChild(element)<br>    match = ~zepto.qsa(parent, selector).indexOf(element)<br>    temp &amp;amp;&amp;amp; tempParent.removeChild(element)<br>    <span class=\"hljs-keyword\">return</span> match<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<p>主要是用来判断当前DOM节点否能完全匹配对应的CSS选择器规则。这个matches方法可以在事件委托等地方被用得上，用来判定匹配到当前标签的元素，当匹配到后添加事件。但原生的兼容性很差，因此框架在这里做了兼容性处理。</p>\n<h2 id=\"Zepto拓展选择器\"><a href=\"#Zepto拓展选择器\" class=\"headerlink\" title=\"Zepto拓展选择器\"></a>Zepto拓展选择器</h2><p>把全部文件站过来，将源码解读写到注释中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">var</span> zepto = $.zepto,<br>        oldQsa = zepto.qsa,<br>        oldMatches = zepto.matches<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">visible</span>(<span class=\"hljs-params\">elem</span>) </span>&#123;<br>        elem = $(elem)<br>        <span class=\"hljs-keyword\">return</span> !!(elem.width() || elem.height()) &amp;amp;&amp;amp; elem.css(&amp;quot;display&amp;quot;) !== &amp;quot;none&amp;quot;<br>    &#125;<br>    <span class=\"hljs-comment\">//这是一套过滤器系统</span><br>    <span class=\"hljs-keyword\">var</span> filters = $.expr[<span class=\"hljs-string\">':'</span>] = &#123;<br>        visible: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>            <span class=\"hljs-keyword\">if</span> (visible(<span class=\"hljs-keyword\">this</span>))<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span><br>        &#125;,<br>        hidden: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>            <span class=\"hljs-keyword\">if</span> (!visible(<span class=\"hljs-keyword\">this</span>))<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span><br>        &#125;,<br>        selected: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.selected)<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span><br>        &#125;,<br>        checked: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.checked)<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span><br>        &#125;,<br>        parent: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.parentNode<br>        &#125;,<br>        first: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">idx</span>) </span>&#123;<br>            <span class=\"hljs-keyword\">if</span> (idx === <span class=\"hljs-number\">0</span>)<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span><br>        &#125;,<br>        last: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">idx, nodes</span>) </span>&#123;<br>            <span class=\"hljs-keyword\">if</span> (idx === nodes.length - <span class=\"hljs-number\">1</span>)<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span><br>        &#125;,<br>        eq: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">idx, _, value</span>) </span>&#123;<br>            <span class=\"hljs-keyword\">if</span> (idx === value)<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span><br>        &#125;,<br>        contains: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">idx, _, text</span>) </span>&#123;<br>            <span class=\"hljs-keyword\">if</span> ($(<span class=\"hljs-keyword\">this</span>).text().indexOf(text) &amp;gt; <span class=\"hljs-number\">-1</span>)<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span><br>        &#125;,<br>        has: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">idx, _, sel</span>) </span>&#123;<br>            <span class=\"hljs-keyword\">if</span> (zepto.qsa(<span class=\"hljs-keyword\">this</span>, sel).length)<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span><br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">var</span> filterRe = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">'(.*):(\\\\w+)(?:\\\\(([^)]+)\\\\))?$\\\\s*'</span>),<br>        childRe = <span class=\"hljs-regexp\">/^\\s*&amp;gt;/</span>,<br>        classTag = <span class=\"hljs-string\">'Zepto'</span> + (+ <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>())<br>    <span class=\"hljs-comment\">//分解选择器为三部分，选择器、选择器的过滤器方法、参数</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">process</span>(<span class=\"hljs-params\">sel, fn</span>) </span>&#123;<br>        <span class=\"hljs-comment\">// quote the hash in `a[href^=#]` expression</span><br>        sel = sel.replace(<span class=\"hljs-regexp\">/=#\\]/g</span>, <span class=\"hljs-string\">'=&amp;quot;#&amp;quot;]'</span>)<br>        <span class=\"hljs-keyword\">var</span> filter,<br>            arg,<br>            match = filterRe.exec(sel)<br>        <span class=\"hljs-keyword\">if</span> (match &amp;amp;&amp;amp; match[<span class=\"hljs-number\">2</span>] <span class=\"hljs-keyword\">in</span> filters) &#123;<br>            filter = filters[match[<span class=\"hljs-number\">2</span>]],<br>                arg = match[<span class=\"hljs-number\">3</span>]<br>            sel = match[<span class=\"hljs-number\">1</span>]<br>            <span class=\"hljs-keyword\">if</span> (arg) &#123;<br>                <span class=\"hljs-keyword\">var</span> num = <span class=\"hljs-built_in\">Number</span>(arg)<br>                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">isNaN</span>(num))<br>                    arg = arg.replace(<span class=\"hljs-regexp\">/^[&amp;quot;']|[&amp;quot;']$/g</span>, <span class=\"hljs-string\">''</span>)<br>                <span class=\"hljs-keyword\">else</span><br>                    arg = num<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> fn(sel, filter, arg)<br>    &#125;<br><br>    zepto.qsa = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">node, selector</span>) </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> process(selector, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">sel, filter, arg</span>) </span>&#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-keyword\">var</span> taggedParent<br>                <span class=\"hljs-keyword\">if</span> (!sel &amp;amp;&amp;amp; filter)<br>                    sel = <span class=\"hljs-string\">'*'</span><br>                <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (childRe.test(sel))<br>                <span class=\"hljs-comment\">// support &amp;quot;&amp;gt; *&amp;quot; child queries by tagging the parent node with a unique class</span><br>                <span class=\"hljs-comment\">// and prepending that classname onto the selector</span><br>                    taggedParent = $(node).addClass(classTag),<br>                        sel = <span class=\"hljs-string\">'.'</span> + classTag + <span class=\"hljs-string\">' '</span> + sel<br><br>                <span class=\"hljs-keyword\">var</span> nodes = oldQsa(node, sel)<br>            &#125; <span class=\"hljs-keyword\">catch</span> (e) &#123;<br>                <span class=\"hljs-built_in\">console</span>.error(<span class=\"hljs-string\">'error performing selector: %o'</span>, selector)<br>                <span class=\"hljs-keyword\">throw</span> e<br>            &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>                <span class=\"hljs-keyword\">if</span> (taggedParent)<br>                    taggedParent.removeClass(classTag)<br>            &#125;<br>            <span class=\"hljs-keyword\">return</span> !filter<br>                ? nodes<br>                : zepto.uniq($.map(nodes, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">n, i</span>) </span>&#123;<br>                    <span class=\"hljs-keyword\">return</span> filter.call(n, i, nodes, arg)<br>                &#125;))<br>        &#125;)<br>    &#125;<br><br>    zepto.matches = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">node, selector</span>) </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> process(selector, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">sel, filter, arg</span>) </span>&#123;<br>            <span class=\"hljs-keyword\">return</span> (!sel || oldMatches(node, sel)) &amp;amp;&amp;amp; (!filter || filter.call(node, <span class=\"hljs-literal\">null</span>, arg) === node)<br>        &#125;)<br>    &#125;<br>&#125;)(Zepto)<br></code></pre></td></tr></table></figure>\n\n<p>从源码看出，虽然zepto主要采用的是getElementById()、getElementsByClassName()、getElementsByTagName()、querySelectorAll()这些内置的api完成，思路是分解-&gt;匹配-&gt;调用原生api-&gt;组装zepto对象。 根据不同的情况，给出了不同的提速方案，getElementById是最优先的，因为该api内部做了缓存而且只返回一个节点；getElementsByClassName()、getElementsByTagName()也是比较快的，返回多个节点并且又缓存；只有无法完成时候才进行querySelectorAll()。此外注意的是，getElementsByClassName()、getElementsByTagName()返回的是一个NodeList对象，而querySelectorAll返回的是一个StaticNodeList对象，前者动态后者静态，前者每次匹配到的都是同是缓存引用，后者返回的是不同的Object对象，数据表明前者的速度要快百分之90%以上，这就是为什么尽量用getElementsByClassName()、getElementsByTagName()的原因。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://7xqgks.com1.z0.glb.clouddn.com/head-0050.jpg\" alt=\"\"></p>\n<blockquote>\n<p>选择器引擎是框架中实现操作的主要方式，可以快速选取到所需元素，通过我们更加熟知的css选择器，zepto的选择器分两大块，一块在zepto.js中的核心选择器qsa方法，另外是selector.js文件，里边封装有一些扩充选择器的实现。</p>\n</blockquote>\n<h2 id=\"选择器引擎概述\"><a href=\"#选择器引擎概述\" class=\"headerlink\" title=\"选择器引擎概述\"></a>选择器引擎概述</h2><p>CSS选择符是一条CSS样式中最左边的部分，选择符分为了五大类：元素、关系、伪类、并联、伪元素。其中只有伪元素选择器不能直接被js所选取到。 一般认为，框架的选择器引擎需要包括以下几个基本方法：</p>\n<ul>\n<li>contain(a,b):判断a中是否包含b，主要用作优化</li>\n<li>visible()与hidden():判断是否可见</li>\n<li>selected():选中了元素</li>\n<li>sortNode():节点的排序与去重，主要为了使更类似于原生方法的排序</li>\n<li>filter():过滤器，对于不支持querySelectorAll的游览器，需要对用户的api进行过滤，这个步骤类似词法分析，可以拆分出有用的选择符，对其使用应该的API</li>\n</ul>\n<p>不过zepto比较奇葩的一点是，zepto主要面向移动端，移动端游览器坑少，所以zepto就直接拿querySelectorAll来匹配非规定外的元素了，好处自不必说，代码少实现简单。坏处就是兼容性不好，也学不到真正选择器引擎的核心，但zepto的优化做的还是很好，也是值得看。而且querySelectorAll这也是未来的趋势。</p>\n<h2 id=\"Zepto核心选择器\"><a href=\"#Zepto核心选择器\" class=\"headerlink\" title=\"Zepto核心选择器\"></a>Zepto核心选择器</h2><p>首先是选择器的实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">zepto.qsa = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">element, selector</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">var</span> found,<br>    maybeID = selector[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">'#'</span>,<br>    maybeClass = !maybeID &amp;&amp; selector[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">'.'</span>,<br>    nameOnly = maybeID || maybeClass ? selector.slice(<span class=\"hljs-number\">1</span>) : selector, <span class=\"hljs-comment\">// Ensure that a 1 char tag name still gets checked</span><br>    isSimple = simpleSelectorRE.test(nameOnly)<br>  <span class=\"hljs-keyword\">return</span> (element.getElementById &amp;&amp; isSimple &amp;&amp; maybeID) ? <span class=\"hljs-comment\">// Safari DocumentFragment doesn't have getElementById</span><br>    ((found = element.getElementById(nameOnly)) ? [found] : []) :<br>    (element.nodeType !== <span class=\"hljs-number\">1</span> &amp;&amp; element.nodeType !== <span class=\"hljs-number\">9</span> &amp;&amp; element.nodeType !== <span class=\"hljs-number\">11</span>) ? [] :<br>    slice.call(<br>      isSimple &amp;&amp; !maybeID &amp;&amp; element.getElementsByClassName ? <span class=\"hljs-comment\">// DocumentFragment doesn't have getElementsByClassName/TagName</span><br>      maybeClass ? element.getElementsByClassName(nameOnly) : <span class=\"hljs-comment\">// If it's simple, it could be a class</span><br>      element.getElementsByTagName(selector) : <span class=\"hljs-comment\">// Or a tag</span><br>      element.querySelectorAll(selector) <span class=\"hljs-comment\">// Or it's not simple, and we need to query all</span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>判断了选择器类型，是id、class、标签还是复杂选择器，然后分别调用getElementById()、getElementsByClassName()、getElementsByTagName()、querySelectorAll()。 其次是否匹配选择器：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">zepto.matches = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">element, selector</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (!selector || !element || element.nodeType !== <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>    <span class=\"hljs-keyword\">var</span> matchesSelector = element.matches || element.webkitMatchesSelector ||<br>      element.mozMatchesSelector || element.oMatchesSelector ||<br>      element.matchesSelector<br>    <span class=\"hljs-keyword\">if</span> (matchesSelector) <span class=\"hljs-keyword\">return</span> matchesSelector.call(element, selector)<br>    <span class=\"hljs-comment\">// fall back to performing a selector:</span><br>    <span class=\"hljs-keyword\">var</span> match, parent = element.parentNode,<br>      temp = !parent<br>    <span class=\"hljs-keyword\">if</span> (temp)(parent = tempParent).appendChild(element)<br>    match = ~zepto.qsa(parent, selector).indexOf(element)<br>    temp &amp;amp;&amp;amp; tempParent.removeChild(element)<br>    <span class=\"hljs-keyword\">return</span> match<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<p>主要是用来判断当前DOM节点否能完全匹配对应的CSS选择器规则。这个matches方法可以在事件委托等地方被用得上，用来判定匹配到当前标签的元素，当匹配到后添加事件。但原生的兼容性很差，因此框架在这里做了兼容性处理。</p>\n<h2 id=\"Zepto拓展选择器\"><a href=\"#Zepto拓展选择器\" class=\"headerlink\" title=\"Zepto拓展选择器\"></a>Zepto拓展选择器</h2><p>把全部文件站过来，将源码解读写到注释中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>&#123;<br>    <span class=\"hljs-keyword\">var</span> zepto = $.zepto,<br>        oldQsa = zepto.qsa,<br>        oldMatches = zepto.matches<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">visible</span>(<span class=\"hljs-params\">elem</span>) </span>&#123;<br>        elem = $(elem)<br>        <span class=\"hljs-keyword\">return</span> !!(elem.width() || elem.height()) &amp;amp;&amp;amp; elem.css(&amp;quot;display&amp;quot;) !== &amp;quot;none&amp;quot;<br>    &#125;<br>    <span class=\"hljs-comment\">//这是一套过滤器系统</span><br>    <span class=\"hljs-keyword\">var</span> filters = $.expr[<span class=\"hljs-string\">':'</span>] = &#123;<br>        visible: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>            <span class=\"hljs-keyword\">if</span> (visible(<span class=\"hljs-keyword\">this</span>))<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span><br>        &#125;,<br>        hidden: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>            <span class=\"hljs-keyword\">if</span> (!visible(<span class=\"hljs-keyword\">this</span>))<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span><br>        &#125;,<br>        selected: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.selected)<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span><br>        &#125;,<br>        checked: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.checked)<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span><br>        &#125;,<br>        parent: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.parentNode<br>        &#125;,<br>        first: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">idx</span>) </span>&#123;<br>            <span class=\"hljs-keyword\">if</span> (idx === <span class=\"hljs-number\">0</span>)<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span><br>        &#125;,<br>        last: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">idx, nodes</span>) </span>&#123;<br>            <span class=\"hljs-keyword\">if</span> (idx === nodes.length - <span class=\"hljs-number\">1</span>)<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span><br>        &#125;,<br>        eq: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">idx, _, value</span>) </span>&#123;<br>            <span class=\"hljs-keyword\">if</span> (idx === value)<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span><br>        &#125;,<br>        contains: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">idx, _, text</span>) </span>&#123;<br>            <span class=\"hljs-keyword\">if</span> ($(<span class=\"hljs-keyword\">this</span>).text().indexOf(text) &amp;gt; <span class=\"hljs-number\">-1</span>)<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span><br>        &#125;,<br>        has: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">idx, _, sel</span>) </span>&#123;<br>            <span class=\"hljs-keyword\">if</span> (zepto.qsa(<span class=\"hljs-keyword\">this</span>, sel).length)<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span><br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">var</span> filterRe = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">'(.*):(\\\\w+)(?:\\\\(([^)]+)\\\\))?$\\\\s*'</span>),<br>        childRe = <span class=\"hljs-regexp\">/^\\s*&amp;gt;/</span>,<br>        classTag = <span class=\"hljs-string\">'Zepto'</span> + (+ <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>())<br>    <span class=\"hljs-comment\">//分解选择器为三部分，选择器、选择器的过滤器方法、参数</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">process</span>(<span class=\"hljs-params\">sel, fn</span>) </span>&#123;<br>        <span class=\"hljs-comment\">// quote the hash in `a[href^=#]` expression</span><br>        sel = sel.replace(<span class=\"hljs-regexp\">/=#\\]/g</span>, <span class=\"hljs-string\">'=&amp;quot;#&amp;quot;]'</span>)<br>        <span class=\"hljs-keyword\">var</span> filter,<br>            arg,<br>            match = filterRe.exec(sel)<br>        <span class=\"hljs-keyword\">if</span> (match &amp;amp;&amp;amp; match[<span class=\"hljs-number\">2</span>] <span class=\"hljs-keyword\">in</span> filters) &#123;<br>            filter = filters[match[<span class=\"hljs-number\">2</span>]],<br>                arg = match[<span class=\"hljs-number\">3</span>]<br>            sel = match[<span class=\"hljs-number\">1</span>]<br>            <span class=\"hljs-keyword\">if</span> (arg) &#123;<br>                <span class=\"hljs-keyword\">var</span> num = <span class=\"hljs-built_in\">Number</span>(arg)<br>                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">isNaN</span>(num))<br>                    arg = arg.replace(<span class=\"hljs-regexp\">/^[&amp;quot;']|[&amp;quot;']$/g</span>, <span class=\"hljs-string\">''</span>)<br>                <span class=\"hljs-keyword\">else</span><br>                    arg = num<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> fn(sel, filter, arg)<br>    &#125;<br><br>    zepto.qsa = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">node, selector</span>) </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> process(selector, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">sel, filter, arg</span>) </span>&#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-keyword\">var</span> taggedParent<br>                <span class=\"hljs-keyword\">if</span> (!sel &amp;amp;&amp;amp; filter)<br>                    sel = <span class=\"hljs-string\">'*'</span><br>                <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (childRe.test(sel))<br>                <span class=\"hljs-comment\">// support &amp;quot;&amp;gt; *&amp;quot; child queries by tagging the parent node with a unique class</span><br>                <span class=\"hljs-comment\">// and prepending that classname onto the selector</span><br>                    taggedParent = $(node).addClass(classTag),<br>                        sel = <span class=\"hljs-string\">'.'</span> + classTag + <span class=\"hljs-string\">' '</span> + sel<br><br>                <span class=\"hljs-keyword\">var</span> nodes = oldQsa(node, sel)<br>            &#125; <span class=\"hljs-keyword\">catch</span> (e) &#123;<br>                <span class=\"hljs-built_in\">console</span>.error(<span class=\"hljs-string\">'error performing selector: %o'</span>, selector)<br>                <span class=\"hljs-keyword\">throw</span> e<br>            &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>                <span class=\"hljs-keyword\">if</span> (taggedParent)<br>                    taggedParent.removeClass(classTag)<br>            &#125;<br>            <span class=\"hljs-keyword\">return</span> !filter<br>                ? nodes<br>                : zepto.uniq($.map(nodes, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">n, i</span>) </span>&#123;<br>                    <span class=\"hljs-keyword\">return</span> filter.call(n, i, nodes, arg)<br>                &#125;))<br>        &#125;)<br>    &#125;<br><br>    zepto.matches = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">node, selector</span>) </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> process(selector, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">sel, filter, arg</span>) </span>&#123;<br>            <span class=\"hljs-keyword\">return</span> (!sel || oldMatches(node, sel)) &amp;amp;&amp;amp; (!filter || filter.call(node, <span class=\"hljs-literal\">null</span>, arg) === node)<br>        &#125;)<br>    &#125;<br>&#125;)(Zepto)<br></code></pre></td></tr></table></figure>\n\n<p>从源码看出，虽然zepto主要采用的是getElementById()、getElementsByClassName()、getElementsByTagName()、querySelectorAll()这些内置的api完成，思路是分解-&gt;匹配-&gt;调用原生api-&gt;组装zepto对象。 根据不同的情况，给出了不同的提速方案，getElementById是最优先的，因为该api内部做了缓存而且只返回一个节点；getElementsByClassName()、getElementsByTagName()也是比较快的，返回多个节点并且又缓存；只有无法完成时候才进行querySelectorAll()。此外注意的是，getElementsByClassName()、getElementsByTagName()返回的是一个NodeList对象，而querySelectorAll返回的是一个StaticNodeList对象，前者动态后者静态，前者每次匹配到的都是同是缓存引用，后者返回的是不同的Object对象，数据表明前者的速度要快百分之90%以上，这就是为什么尽量用getElementsByClassName()、getElementsByTagName()的原因。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckahts7x60006zmz8gt5pb9ws","category_id":"ckahts7x30003zmz89sl9d09x","_id":"ckahts7xh000dzmz8bsi242v6"},{"post_id":"ckahts7wk0000zmz8cztca836","category_id":"ckahts7x30003zmz89sl9d09x","_id":"ckahts7xk000gzmz875lv9raf"},{"post_id":"ckahts7x10002zmz87csq6xs8","category_id":"ckahts7x30003zmz89sl9d09x","_id":"ckahts7xl000kzmz8ec7p4bv8"},{"post_id":"ckahts7xj000fzmz83b0obr5t","category_id":"ckahts7x30003zmz89sl9d09x","_id":"ckahts7xq000pzmz873pjaff1"},{"post_id":"ckahts7x50005zmz8c72gaj5v","category_id":"ckahts7xi000ezmz8g8a30jxa","_id":"ckahts7xs000szmz8f3w3gydp"},{"post_id":"ckahts7xl000jzmz800ur99lj","category_id":"ckahts7x30003zmz89sl9d09x","_id":"ckahts7xx000vzmz8djb85cqo"},{"post_id":"ckahts7xr000rzmz88fp28kgm","category_id":"ckahts7xi000ezmz8g8a30jxa","_id":"ckahts7y00010zmz82m5d3dfz"},{"post_id":"ckahts7xf000bzmz8ed2zfqyj","category_id":"ckahts7xq000qzmz847tfhynn","_id":"ckahts7y50013zmz896em8mbt"},{"post_id":"ckahts7xw000uzmz88l3f8ao8","category_id":"ckahts7xq000qzmz847tfhynn","_id":"ckahts7y80017zmz89sbpaabe"},{"post_id":"ckahts7xy000xzmz8b9yadln4","category_id":"ckahts7x30003zmz89sl9d09x","_id":"ckahts7y9001bzmz84o29fbpg"},{"post_id":"ckahts7xz000zzmz86k9f346j","category_id":"ckahts7xq000qzmz847tfhynn","_id":"ckahts7yb001fzmz8a83l7nmx"},{"post_id":"ckahts7y10012zmz80iwjcp99","category_id":"ckahts7xq000qzmz847tfhynn","_id":"ckahts7yk001izmz844sg8jg2"},{"post_id":"ckahts7y70016zmz88y588wnq","category_id":"ckahts7xq000qzmz847tfhynn","_id":"ckahts7yo001mzmz8glz3ftye"},{"post_id":"ckahts7xm000mzmz81o9q71t3","category_id":"ckahts7xm000lzmz8da61ep7c","_id":"ckahts7yx001pzmz866pk3mmk"},{"post_id":"ckahts7xm000mzmz81o9q71t3","category_id":"ckahts7y60014zmz89cxrc2jd","_id":"ckahts7yy001tzmz8htllau3k"},{"post_id":"ckahts7y9001azmz80u5g7lkx","category_id":"ckahts7xq000qzmz847tfhynn","_id":"ckahts7z0001wzmz83elb3oq6"},{"post_id":"ckahts7ya001ezmz8gk4l1xhl","category_id":"ckahts7xq000qzmz847tfhynn","_id":"ckahts7z20020zmz8fshm28ff"},{"post_id":"ckahts7yn001lzmz84tx9g986","category_id":"ckahts7xi000ezmz8g8a30jxa","_id":"ckahts7z40023zmz81porc018"},{"post_id":"ckahts7xp000ozmz8f7lg7csh","category_id":"ckahts7xq000qzmz847tfhynn","_id":"ckahts7z70026zmz85tyef57r"},{"post_id":"ckahts7yw001ozmz8cedohs4u","category_id":"ckahts7xm000lzmz8da61ep7c","_id":"ckahts7z8002bzmz8aprydhtb"},{"post_id":"ckahts7yw001ozmz8cedohs4u","category_id":"ckahts7y60014zmz89cxrc2jd","_id":"ckahts7za002dzmz8f3vmdxzu"},{"post_id":"ckahts7xh000czmz80b509sxz","category_id":"ckahts7xx000wzmz8hpqc5ox4","_id":"ckahts7zb002gzmz86t192eqp"},{"post_id":"ckahts7xh000czmz80b509sxz","category_id":"ckahts7yx001rzmz8geynexlw","_id":"ckahts7zc002kzmz835158vdk"},{"post_id":"ckahts7z1001zzmz891sqdl7x","category_id":"ckahts7xm000lzmz8da61ep7c","_id":"ckahts7ze002ozmz88maj8rh5"},{"post_id":"ckahts7xa0007zmz8bxbke3hv","category_id":"ckahts7xm000lzmz8da61ep7c","_id":"ckahts7zg002szmz8cw91e0xo"},{"post_id":"ckahts7xa0007zmz8bxbke3hv","category_id":"ckahts7ya001czmz85t1x4itj","_id":"ckahts7zh002wzmz8hzg39lh9"},{"post_id":"ckahts7xa0007zmz8bxbke3hv","category_id":"ckahts7z1001yzmz8b8m94bny","_id":"ckahts7zk0030zmz886gjhxn2"},{"post_id":"ckahts7z8002azmz8f06naqw4","category_id":"ckahts7z70027zmz8euu83oy3","_id":"ckahts7zl0033zmz88c61ht1s"},{"post_id":"ckahts7z9002czmz8gsms7nlo","category_id":"ckahts7xm000lzmz8da61ep7c","_id":"ckahts7zn0037zmz8by4lf7m6"},{"post_id":"ckahts7z9002czmz8gsms7nlo","category_id":"ckahts7ya001czmz85t1x4itj","_id":"ckahts7zo003azmz8620dce19"},{"post_id":"ckahts7z9002czmz8gsms7nlo","category_id":"ckahts7z1001yzmz8b8m94bny","_id":"ckahts7zq003fzmz83fdg8sn6"},{"post_id":"ckahts7za002fzmz8hrkh4rk6","category_id":"ckahts7xq000qzmz847tfhynn","_id":"ckahts7zr003izmz8bsf80pvj"},{"post_id":"ckahts7yy001szmz8gyuvdq4y","category_id":"ckahts7za002ezmz88rv1ehh7","_id":"ckahts7zu003nzmz85w4n9a50"},{"post_id":"ckahts7zc002jzmz8fytu48cj","category_id":"ckahts7xq000qzmz847tfhynn","_id":"ckahts7zv003qzmz8a9gx3xpr"},{"post_id":"ckahts7yz001vzmz8fzms44l5","category_id":"ckahts7xq000qzmz847tfhynn","_id":"ckahts7zy003vzmz80uug3qbf"},{"post_id":"ckahts7yz001vzmz8fzms44l5","category_id":"ckahts7zd002lzmz8hbou41dt","_id":"ckahts800003xzmz8b12q0zl0"},{"post_id":"ckahts7zf002rzmz89zsufi3p","category_id":"ckahts7xq000qzmz847tfhynn","_id":"ckahts8020041zmz8ehqeguv0"},{"post_id":"ckahts7zg002vzmz8bvcn8p8v","category_id":"ckahts7xq000qzmz847tfhynn","_id":"ckahts8030044zmz81z7w89p6"},{"post_id":"ckahts7zj002zzmz897wq550r","category_id":"ckahts7x30003zmz89sl9d09x","_id":"ckahts8050048zmz8fw8ae2ml"},{"post_id":"ckahts7z30022zmz81zwk0aqy","category_id":"ckahts7zg002uzmz8che5hqn4","_id":"ckahts807004czmz8gotn3sl7"},{"post_id":"ckahts7z60025zmz8dz60gvgq","category_id":"ckahts7zl0034zmz8gpyccs97","_id":"ckahts808004fzmz86xn46cr4"},{"post_id":"ckahts7zn0039zmz87jx7494u","category_id":"ckahts7xq000qzmz847tfhynn","_id":"ckahts809004jzmz8e0gkc28v"},{"post_id":"ckahts7zn0039zmz87jx7494u","category_id":"ckahts7zd002lzmz8hbou41dt","_id":"ckahts80b004mzmz88p3if8s2"},{"post_id":"ckahts7zp003ezmz88kn657rk","category_id":"ckahts7xq000qzmz847tfhynn","_id":"ckahts80c004qzmz8edphgo3s"},{"post_id":"ckahts7yf001hzmz8c01r3ta7","category_id":"ckahts7z70027zmz8euu83oy3","_id":"ckahts80d004szmz8e4zy1ebk"},{"post_id":"ckahts7yf001hzmz8c01r3ta7","category_id":"ckahts7zo003czmz88z4ehxxz","_id":"ckahts80e004vzmz8dud67c7w"},{"post_id":"ckahts7zq003hzmz89nze7f5c","category_id":"ckahts7xm000lzmz8da61ep7c","_id":"ckahts80e004xzmz8cvaz8jnv"},{"post_id":"ckahts7zt003mzmz8dtaj3ax6","category_id":"ckahts7za002ezmz88rv1ehh7","_id":"ckahts80e0050zmz89hf6717y"},{"post_id":"ckahts7zd002nzmz82cet7vca","category_id":"ckahts7zs003lzmz8detw6ji5","_id":"ckahts80f0052zmz8b6ifff26"},{"post_id":"ckahts7zx003uzmz87anpg7zl","category_id":"ckahts7xq000qzmz847tfhynn","_id":"ckahts80f0055zmz826az1igt"},{"post_id":"ckahts7zk0032zmz80pr80clq","category_id":"ckahts7zs003lzmz8detw6ji5","_id":"ckahts80h0057zmz8fr5836qw"},{"post_id":"ckahts7zz003wzmz8awsb9z8j","category_id":"ckahts7xq000qzmz847tfhynn","_id":"ckahts80h0059zmz8czcu1qtz"},{"post_id":"ckahts8010040zmz8eyqe0123","category_id":"ckahts7xq000qzmz847tfhynn","_id":"ckahts80i005czmz8cw4galzs"},{"post_id":"ckahts7zm0036zmz8bi3w5ljj","category_id":"ckahts7zs003lzmz8detw6ji5","_id":"ckahts80i005ezmz86w2u83ja"},{"post_id":"ckahts8030043zmz82x7a4fvk","category_id":"ckahts7xm000lzmz8da61ep7c","_id":"ckahts80j005hzmz83102f0h1"},{"post_id":"ckahts8050047zmz81loua21n","category_id":"ckahts7xq000qzmz847tfhynn","_id":"ckahts80j005jzmz8h8ri7hfi"},{"post_id":"ckahts806004bzmz806bs6tjb","category_id":"ckahts7xm000lzmz8da61ep7c","_id":"ckahts80j005lzmz82m3whgsp"},{"post_id":"ckahts7zu003pzmz85vqu8pbk","category_id":"ckahts7xx000wzmz8hpqc5ox4","_id":"ckahts80k005nzmz89ttl4rn9"},{"post_id":"ckahts7zu003pzmz85vqu8pbk","category_id":"ckahts7yx001rzmz8geynexlw","_id":"ckahts80k005qzmz8cmz91b8l"},{"post_id":"ckahts7zu003pzmz85vqu8pbk","category_id":"ckahts8040046zmz8e8x8famz","_id":"ckahts80k005rzmz805ilftw9"},{"post_id":"ckahts807004ezmz883sy49u5","category_id":"ckahts7xm000lzmz8da61ep7c","_id":"ckahts80l005tzmz880h6epa1"},{"post_id":"ckahts807004ezmz883sy49u5","category_id":"ckahts7ya001czmz85t1x4itj","_id":"ckahts80l005vzmz87fw43bab"},{"post_id":"ckahts809004izmz8emm69zv7","category_id":"ckahts7xq000qzmz847tfhynn","_id":"ckahts80l005xzmz8guf0citz"},{"post_id":"ckahts809004lzmz8hh2ubscr","category_id":"ckahts7xq000qzmz847tfhynn","_id":"ckahts80m0060zmz8aljk3w22"},{"post_id":"ckahts80c004pzmz85vpra4at","category_id":"ckahts7xq000qzmz847tfhynn","_id":"ckahts80m0061zmz80iqhhefs"},{"post_id":"ckahts81q006wzmz8e2d60q7n","category_id":"ckahts7za002ezmz88rv1ehh7","_id":"ckahts81y0072zmz89ilm0w6o"},{"post_id":"ckahts81s006xzmz89ip96sii","category_id":"ckahts7xq000qzmz847tfhynn","_id":"ckahts8200075zmz8109e5z59"},{"post_id":"ckahts81v006zzmz86emk7ki3","category_id":"ckahts7xq000qzmz847tfhynn","_id":"ckahts8210078zmz860bdg8gn"},{"post_id":"ckahts81x0071zmz8howic0lk","category_id":"ckahts7x30003zmz89sl9d09x","_id":"ckahts822007azmz836b31y6z"},{"post_id":"ckahts81y0074zmz86v0c89rf","category_id":"ckahts7xq000qzmz847tfhynn","_id":"ckahts823007czmz81oeh3pre"}],"PostTag":[{"post_id":"ckahts7wk0000zmz8cztca836","tag_id":"ckahts7x40004zmz83ydsgp6m","_id":"ckahts7xe000azmz8fl47d3v9"},{"post_id":"ckahts7x60006zmz8gt5pb9ws","tag_id":"ckahts7xe0009zmz8dvvc4qqh","_id":"ckahts7xk000izmz8etb2585r"},{"post_id":"ckahts7xa0007zmz8bxbke3hv","tag_id":"ckahts7xk000hzmz8302g811v","_id":"ckahts7y10011zmz8aqjg4pxy"},{"post_id":"ckahts7xa0007zmz8bxbke3hv","tag_id":"ckahts7xo000nzmz85vz04fsh","_id":"ckahts7y60015zmz8dozb430p"},{"post_id":"ckahts7xa0007zmz8bxbke3hv","tag_id":"ckahts7xv000tzmz86ke35mlg","_id":"ckahts7y80019zmz80ajh4ecb"},{"post_id":"ckahts7xf000bzmz8ed2zfqyj","tag_id":"ckahts7xz000yzmz8gt7yd6nb","_id":"ckahts7ya001dzmz84f0sb2pb"},{"post_id":"ckahts7xh000czmz80b509sxz","tag_id":"ckahts7y80018zmz81eo7g13a","_id":"ckahts7yl001jzmz8eh5ea0ye"},{"post_id":"ckahts7xm000mzmz81o9q71t3","tag_id":"ckahts7y80018zmz81eo7g13a","_id":"ckahts7yx001qzmz879t67di5"},{"post_id":"ckahts7yy001szmz8gyuvdq4y","tag_id":"ckahts7xe0009zmz8dvvc4qqh","_id":"ckahts7z0001xzmz8ff3b0rz9"},{"post_id":"ckahts7xp000ozmz8f7lg7csh","tag_id":"ckahts7yv001nzmz87nc708sz","_id":"ckahts7z60024zmz8cbqm5cht"},{"post_id":"ckahts7xp000ozmz8f7lg7csh","tag_id":"ckahts7yz001uzmz86s6q8969","_id":"ckahts7z70028zmz80vu135sx"},{"post_id":"ckahts7xr000rzmz88fp28kgm","tag_id":"ckahts7y80018zmz81eo7g13a","_id":"ckahts7zb002izmz8dze072yd"},{"post_id":"ckahts7xr000rzmz88fp28kgm","tag_id":"ckahts7z70029zmz8679i8h0t","_id":"ckahts7zd002mzmz89tga2q4p"},{"post_id":"ckahts7zc002jzmz8fytu48cj","tag_id":"ckahts7y80018zmz81eo7g13a","_id":"ckahts7zf002qzmz8bkfmhaf5"},{"post_id":"ckahts7zc002jzmz8fytu48cj","tag_id":"ckahts7yv001nzmz87nc708sz","_id":"ckahts7zg002tzmz82oe71vo8"},{"post_id":"ckahts7xw000uzmz88l3f8ao8","tag_id":"ckahts7zb002hzmz8emhzgxdk","_id":"ckahts7zi002yzmz818gqhdju"},{"post_id":"ckahts7zd002nzmz82cet7vca","tag_id":"ckahts7xz000yzmz8gt7yd6nb","_id":"ckahts7zk0031zmz8glzr5pzf"},{"post_id":"ckahts7y10012zmz80iwjcp99","tag_id":"ckahts7zb002hzmz8emhzgxdk","_id":"ckahts7zn0038zmz8duw16qay"},{"post_id":"ckahts7y10012zmz80iwjcp99","tag_id":"ckahts7yz001uzmz86s6q8969","_id":"ckahts7zo003bzmz8amjk4a4n"},{"post_id":"ckahts7zk0032zmz80pr80clq","tag_id":"ckahts7xz000yzmz8gt7yd6nb","_id":"ckahts7zq003gzmz88856fpfj"},{"post_id":"ckahts7zm0036zmz8bi3w5ljj","tag_id":"ckahts7xz000yzmz8gt7yd6nb","_id":"ckahts7zs003jzmz82wkl9017"},{"post_id":"ckahts7y9001azmz80u5g7lkx","tag_id":"ckahts7zm0035zmz8gudx9saj","_id":"ckahts7zu003ozmz8g49n57xw"},{"post_id":"ckahts7zt003mzmz8dtaj3ax6","tag_id":"ckahts7xe0009zmz8dvvc4qqh","_id":"ckahts7zx003szmz8hacocqb1"},{"post_id":"ckahts7ya001ezmz8gk4l1xhl","tag_id":"ckahts7yv001nzmz87nc708sz","_id":"ckahts8020042zmz84icxate2"},{"post_id":"ckahts7ya001ezmz8gk4l1xhl","tag_id":"ckahts7yz001uzmz86s6q8969","_id":"ckahts8040045zmz8achu8ytp"},{"post_id":"ckahts7ya001ezmz8gk4l1xhl","tag_id":"ckahts7zw003rzmz87a95d5cv","_id":"ckahts806004azmz89q6ydu5j"},{"post_id":"ckahts7zz003wzmz8awsb9z8j","tag_id":"ckahts7y80018zmz81eo7g13a","_id":"ckahts807004dzmz8c3wk8cyw"},{"post_id":"ckahts7zz003wzmz8awsb9z8j","tag_id":"ckahts7yv001nzmz87nc708sz","_id":"ckahts808004hzmz8hkw4c98r"},{"post_id":"ckahts8030043zmz82x7a4fvk","tag_id":"ckahts7y80018zmz81eo7g13a","_id":"ckahts809004kzmz8bh8kd8c4"},{"post_id":"ckahts8050047zmz81loua21n","tag_id":"ckahts7yz001uzmz86s6q8969","_id":"ckahts80b004ozmz8gvo77api"},{"post_id":"ckahts7yf001hzmz8c01r3ta7","tag_id":"ckahts800003yzmz8gk42g47h","_id":"ckahts80d004rzmz80ury72i1"},{"post_id":"ckahts7yf001hzmz8c01r3ta7","tag_id":"ckahts8060049zmz81gpxabsi","_id":"ckahts80e004uzmz82efw8x9b"},{"post_id":"ckahts809004izmz8emm69zv7","tag_id":"ckahts7yv001nzmz87nc708sz","_id":"ckahts80e004wzmz81dxg53yv"},{"post_id":"ckahts809004izmz8emm69zv7","tag_id":"ckahts7xv000tzmz86ke35mlg","_id":"ckahts80e004zzmz86hnq22r1"},{"post_id":"ckahts809004lzmz8hh2ubscr","tag_id":"ckahts7yz001uzmz86s6q8969","_id":"ckahts80e0051zmz8ait0arqt"},{"post_id":"ckahts7yn001lzmz84tx9g986","tag_id":"ckahts7z70029zmz8679i8h0t","_id":"ckahts80f0053zmz81zas9uwd"},{"post_id":"ckahts7yn001lzmz84tx9g986","tag_id":"ckahts8060049zmz81gpxabsi","_id":"ckahts80h0056zmz87qlkbnza"},{"post_id":"ckahts7yw001ozmz8cedohs4u","tag_id":"ckahts7xo000nzmz85vz04fsh","_id":"ckahts80h0058zmz8dh9ihntq"},{"post_id":"ckahts7yw001ozmz8cedohs4u","tag_id":"ckahts80d004tzmz8hqnmhiyu","_id":"ckahts80i005bzmz85rvl7ztp"},{"post_id":"ckahts7z1001zzmz891sqdl7x","tag_id":"ckahts80e004yzmz82esj0sgr","_id":"ckahts80i005dzmz8dq4321xm"},{"post_id":"ckahts7z1001zzmz891sqdl7x","tag_id":"ckahts7xo000nzmz85vz04fsh","_id":"ckahts80j005gzmz86ori2xcu"},{"post_id":"ckahts7z30022zmz81zwk0aqy","tag_id":"ckahts80f0054zmz8983t9ze1","_id":"ckahts80j005izmz81rha2yac"},{"post_id":"ckahts7z60025zmz8dz60gvgq","tag_id":"ckahts80h005azmz81f99d3wd","_id":"ckahts80j005mzmz864fh1ynu"},{"post_id":"ckahts7z60025zmz8dz60gvgq","tag_id":"ckahts80i005fzmz86j4ec0ga","_id":"ckahts80k005ozmz8gj8qhcjv"},{"post_id":"ckahts7z8002azmz8f06naqw4","tag_id":"ckahts80j005kzmz817w57cw2","_id":"ckahts80l005uzmz87sue5ofq"},{"post_id":"ckahts7z8002azmz8f06naqw4","tag_id":"ckahts800003yzmz8gk42g47h","_id":"ckahts80l005wzmz8aox3354s"},{"post_id":"ckahts7za002fzmz8hrkh4rk6","tag_id":"ckahts80l005szmz8epl1fa29","_id":"ckahts80m005zzmz87wcte3xo"},{"post_id":"ckahts7zf002rzmz89zsufi3p","tag_id":"ckahts80l005yzmz83214120s","_id":"ckahts80n0063zmz88oel2unn"},{"post_id":"ckahts7zg002vzmz8bvcn8p8v","tag_id":"ckahts80m0062zmz80n4075pk","_id":"ckahts80o0066zmz8d4ine6c3"},{"post_id":"ckahts7zg002vzmz8bvcn8p8v","tag_id":"ckahts80l005yzmz83214120s","_id":"ckahts80p0067zmz8anhw7vh9"},{"post_id":"ckahts7zp003ezmz88kn657rk","tag_id":"ckahts80n0065zmz8fb717wcy","_id":"ckahts80p0069zmz8d508b466"},{"post_id":"ckahts7zp003ezmz88kn657rk","tag_id":"ckahts7yv001nzmz87nc708sz","_id":"ckahts80p006azmz8cyzgg2r6"},{"post_id":"ckahts7zp003ezmz88kn657rk","tag_id":"ckahts7xv000tzmz86ke35mlg","_id":"ckahts80q006czmz89jcl1g5g"},{"post_id":"ckahts7zq003hzmz89nze7f5c","tag_id":"ckahts80e004yzmz82esj0sgr","_id":"ckahts80q006dzmz85fgx7x4f"},{"post_id":"ckahts7zq003hzmz89nze7f5c","tag_id":"ckahts7xo000nzmz85vz04fsh","_id":"ckahts80r006fzmz83goo1lig"},{"post_id":"ckahts7zu003pzmz85vqu8pbk","tag_id":"ckahts80p006bzmz84v0256yh","_id":"ckahts80r006hzmz85zse6ndk"},{"post_id":"ckahts7zu003pzmz85vqu8pbk","tag_id":"ckahts7yv001nzmz87nc708sz","_id":"ckahts80r006izmz80jo2gynz"},{"post_id":"ckahts7zu003pzmz85vqu8pbk","tag_id":"ckahts80h005azmz81f99d3wd","_id":"ckahts80s006kzmz85x3dg555"},{"post_id":"ckahts7zu003pzmz85vqu8pbk","tag_id":"ckahts7zm0035zmz8gudx9saj","_id":"ckahts80s006lzmz8fri7hcrd"},{"post_id":"ckahts7zx003uzmz87anpg7zl","tag_id":"ckahts7y80018zmz81eo7g13a","_id":"ckahts80t006nzmz82mlf9f43"},{"post_id":"ckahts7zx003uzmz87anpg7zl","tag_id":"ckahts80l005szmz8epl1fa29","_id":"ckahts80t006ozmz8ezqj136n"},{"post_id":"ckahts8010040zmz8eyqe0123","tag_id":"ckahts80l005szmz8epl1fa29","_id":"ckahts80u006qzmz8bgntdcg1"},{"post_id":"ckahts807004ezmz883sy49u5","tag_id":"ckahts80e004yzmz82esj0sgr","_id":"ckahts80u006rzmz89blx48qb"},{"post_id":"ckahts807004ezmz883sy49u5","tag_id":"ckahts7xo000nzmz85vz04fsh","_id":"ckahts80v006tzmz86ym0cgix"},{"post_id":"ckahts80c004pzmz85vpra4at","tag_id":"ckahts80t006pzmz80vrvelz6","_id":"ckahts80w006uzmz8cc41e3jt"},{"post_id":"ckahts80c004pzmz85vpra4at","tag_id":"ckahts80u006szmz83s9m73w2","_id":"ckahts80w006vzmz810qxg8m0"},{"post_id":"ckahts81s006xzmz89ip96sii","tag_id":"ckahts80l005szmz8epl1fa29","_id":"ckahts81w0070zmz8f0g49py3"},{"post_id":"ckahts81v006zzmz86emk7ki3","tag_id":"ckahts7y80018zmz81eo7g13a","_id":"ckahts81y0073zmz89kms1lr5"},{"post_id":"ckahts81x0071zmz8howic0lk","tag_id":"ckahts80t006pzmz80vrvelz6","_id":"ckahts8210077zmz8b34tc6l4"},{"post_id":"ckahts81x0071zmz8howic0lk","tag_id":"ckahts80u006szmz83s9m73w2","_id":"ckahts8220079zmz8g5on8t53"},{"post_id":"ckahts81y0074zmz86v0c89rf","tag_id":"ckahts80t006pzmz80vrvelz6","_id":"ckahts823007bzmz81jb5d0wj"},{"post_id":"ckahts81y0074zmz86v0c89rf","tag_id":"ckahts80u006szmz83s9m73w2","_id":"ckahts824007dzmz8dx5c8yay"},{"post_id":"ckahts81q006wzmz8e2d60q7n","tag_id":"ckahts81u006yzmz8c9lp7q7c","_id":"ckahts824007ezmz84wf33xbq"},{"post_id":"ckahts81q006wzmz8e2d60q7n","tag_id":"ckahts8200076zmz82qtmaej1","_id":"ckahts824007fzmz82m3chbu2"}],"Tag":[{"name":"前端架构","_id":"ckahts7x40004zmz83ydsgp6m"},{"name":"扯淡","_id":"ckahts7xe0009zmz8dvvc4qqh"},{"name":"mysql","_id":"ckahts7xk000hzmz8302g811v"},{"name":"node.js","_id":"ckahts7xo000nzmz85vz04fsh"},{"name":"性能优化","_id":"ckahts7xv000tzmz86ke35mlg"},{"name":"面试","_id":"ckahts7xz000yzmz8gt7yd6nb"},{"name":"JavaScript","_id":"ckahts7y80018zmz81eo7g13a"},{"name":"前端","_id":"ckahts7yv001nzmz87nc708sz"},{"name":"前端工程化","_id":"ckahts7yz001uzmz86s6q8969"},{"name":"数据结构","_id":"ckahts7z70029zmz8679i8h0t"},{"name":"前端优化","_id":"ckahts7zb002hzmz8emhzgxdk"},{"name":"安全","_id":"ckahts7zm0035zmz8gudx9saj"},{"name":"调试","_id":"ckahts7zw003rzmz87a95d5cv"},{"name":"数据挖掘","_id":"ckahts800003yzmz8gk42g47h"},{"name":"算法","_id":"ckahts8060049zmz81gpxabsi"},{"name":"架构","_id":"ckahts80d004tzmz8hqnmhiyu"},{"name":"egg.js","_id":"ckahts80e004yzmz82esj0sgr"},{"name":"操作系统","_id":"ckahts80f0054zmz8983t9ze1"},{"name":"后端","_id":"ckahts80h005azmz81f99d3wd"},{"name":"数据库","_id":"ckahts80i005fzmz86j4ec0ga"},{"name":"推荐系统","_id":"ckahts80j005kzmz817w57cw2"},{"name":"前端底层","_id":"ckahts80l005szmz8epl1fa29"},{"name":"游览器","_id":"ckahts80l005yzmz83214120s"},{"name":"webkit","_id":"ckahts80m0062zmz80n4075pk"},{"name":"CSS","_id":"ckahts80n0065zmz8fb717wcy"},{"name":"HTTP","_id":"ckahts80p006bzmz84v0256yh"},{"name":"zepto.js","_id":"ckahts80t006pzmz80vrvelz6"},{"name":"源码分析","_id":"ckahts80u006szmz83s9m73w2"},{"name":"linux","_id":"ckahts81u006yzmz8c9lp7q7c"},{"name":"运维","_id":"ckahts8200076zmz82qtmaej1"}]}}